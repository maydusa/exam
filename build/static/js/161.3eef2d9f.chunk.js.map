{"version":3,"file":"static/js/161.3eef2d9f.chunk.js","mappings":"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,kBAAuB,mBAEvB,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAuB,mBAEvB,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,kBACA,oBACA,mBACA,mBACA,kBAAuB,mBAEvB,mBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,kBACA,mBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAuB,mBAEvB,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,iBACA,kBAAuB,mBAEvB,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBACA,kBACA,oBACA,mBACA,oBACA,oBACA,mBACA,mBACA,mBAEA,mBACA,mBACA,oBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,mBACA,mBACA,mBACA,kBAAuB,mBAEvB,kBACA,iBACA,oBACA,kBACA,mBACA,mBACA,kBACA,mBACA,kBACA,kBACA,mBACA,oBACA,oBACA,oBACA,iBACA,mBACA,kBAAuB,kBAEvB,kBACA,kBACA,oBACA,kBACA,kBACA,mBACA,kBACA,mBACA,oBACA,iBACA,kBACA,mBACA,oBACA,oBACA,mBACA,kBACA,kBAAuB,kBAEvB,kBACA,kBACA,oBACA,kBACA,mBACA,mBACA,kBACA,mBACA,oBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBACA,kBACA,iBAAuB,mBAEvB,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBACA,mBACA,mBACA,oBACA,oBACA,mBACA,mBACA,kBACA,kBAAuB,mBAEvB,kBACA,iBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,mBACA,mBACA,mBACA,oBACA,oBACA,mBACA,kBACA,mBAAuB,mBAEvB,iBACA,kBACA,oBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,oBACA,oBACA,oBACA,kBACA,mBAAuB,kBAEvB,WAAgB3uB,EAAK8W,MAAQ,GAAM,QACnC,WAAgB9W,EAAK8W,MAAQ,GAAM,QACnC,WAAe9W,EAAK8W,MAAQ,GAAM,QAClC,WAAe9W,EAAK8W,MAAQ,GAAM,QAClC,UAAc9W,EAAK8W,MAAQ,GAAM,QACjC,UAAc9W,EAAK8W,MAAQ,GAAM,QACjC,UAAc9W,EAAK8W,MAAQ,GAAM,QACjC,SAAa9W,EAAK8W,MAAQ,GAAM,QAEhC,mBAA2B,mBAC3B,kBAAyB,mBACzB,mBAA0B,mBAC1B,mBAME8X,EAAM,CACN,CACC,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,oBACA,qBACA,qBAEA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEC,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,sBAEF,CACC,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBAEA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEC,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,qBAED,EACA,EACA,EACA,EACA,EACA,GACC,sBACA,sBACA,sBAEF,CACC,kBACA,iBACA,kBAEA,kBACA,kBACA,iBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBAEA,iBACA,kBACA,kBACA,mBACC,mBACA,kBACD,kBACA,IAEC,mBACA,mBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBAED,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,iBACA,mBAED,CACC,EACA,EACA,EACA,EACA,EACA,EACA,qBACA,qBACA,qBAEA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,oBACA,sBAEC,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,uBAIFC,EAAWD,EAAIvuB,EAAQuL,YACvBkjB,EAAKF,EAAIvuB,EAAQuL,YACjBmjB,EAAKH,EAAIvuB,EAAQuL,YACjBojB,EAAKJ,EAAIvuB,EAAQuL,YAajBqjB,EAAQ,CACR,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAM5D,SAASC,EAAeppB,EAAIqpB,EAAOt7C,GAKlC,IAJA,IAuEWu7C,EAAGzyC,EA8BTsoB,EArGDoqB,EAAK,GAELtpB,EAAKopB,EAAQ,IAAM,GAAK,IAEnB/9C,GAAK,GAAIA,EAAI,EAAGA,IAAK,CAC7B,IAAIqmC,EAAGh8B,EAAG6zC,EAEV7X,EAAIkX,EAASU,GAAM,IACnB5zC,EAAIqqB,EAAGC,GAAM,KAAO0R,EACpB6X,EAAIxpB,EAAGqpB,EAAQ,KAAO1X,EACtBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGC,GAAM,KAAO0R,EACrB6X,GAAKxpB,EAAGqpB,EAAQ,KAAO1X,EACvBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGC,GAAM,IAAM0R,EACpB6X,GAAKxpB,EAAGqpB,EAAQ,IAAM1X,EACtBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGC,GAAM,IAAM0R,EACpB6X,GAAKxpB,EAAGqpB,EAAQ,IAAM1X,EACtBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGC,EAAK,IAAM0R,EACnB6X,GAAKxpB,EAAGqpB,GAAS,IAAM1X,EACvBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGC,EAAK,IAAM0R,EACnB6X,GAAKxpB,EAAGqpB,GAAS,IAAM1X,EACvBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGC,EAAK,KAAO0R,EACpB6X,GAAKxpB,EAAGqpB,GAAS,KAAO1X,EACxBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGC,EAAK,KAAO0R,EACpB6X,GAAKxpB,EAAGqpB,GAAS,KAAO1X,EAExBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGqpB,GAAS,KAAO1X,EACxB6X,GAAKxpB,EAAGC,EAAK,KAAO0R,EACpBA,EAAIkX,EAASU,GAAM,GACnB5zC,GAAKqqB,EAAGqpB,GAAS,KAAO1X,EACxB6X,GAAKxpB,EAAGC,EAAK,KAAO0R,EACpBA,EAAIkX,EAASU,EAAK,GAClB5zC,GAAKqqB,EAAGqpB,GAAS,KAAO1X,EACxB6X,GAAKxpB,EAAGC,EAAK,KAAO0R,EACpBA,EAAIkX,EAASU,EAAK,GAClB5zC,GAAKqqB,EAAGqpB,GAAS,IAAM1X,EACvB6X,GAAKxpB,EAAGC,EAAK,IAAM0R,EACnBA,EAAIkX,EAASU,EAAK,GAClB5zC,GAAKqqB,EAAGqpB,EAAQ,GAAK1X,EACrB6X,GAAKxpB,EAAGC,EAAK,GAAK0R,EAClBA,EAAIkX,EAASU,EAAK,GAClB5zC,GAAKqqB,EAAGqpB,EAAQ,IAAM1X,EACtB6X,GAAKxpB,EAAGC,GAAM,IAAM0R,EACpBA,EAAIkX,EAASU,EAAK,GAClB5zC,GAAKqqB,EAAGqpB,EAAQ,KAAO1X,EACvB6X,GAAKxpB,EAAGC,GAAM,KAAO0R,EACrBA,EAAIkX,EAASU,EAAK,GAClB5zC,GAAKqqB,EAAGqpB,EAAQ,KAAO1X,EASvBA,GARA6X,GAAKxpB,EAAGC,GAAM,KAAO0R,IAOrBh8B,GAAKkzC,EAASU,EAAK,IAEnBx7C,EAAE,GAAS,EAAJzC,GAASk+C,EAAI7zC,EACpB5H,EAAE,GAAS,EAAJzC,GAASu9C,EAASU,EAAK,GAAK5X,EACnC4X,GAAM,GACNF,IACAppB,GACA,CAGAupB,EAAIxpB,EAAGqpB,GAAS,IAAMR,EAASU,GAAM,IACrC5zC,EAAIqqB,EAAGqpB,GAAS,IAAMR,EAASU,GAAM,GACrCC,IAAMxpB,EAAGqpB,GAAS,IAAMrpB,EAAGqpB,EAAQ,KAAOR,EAASU,GAAM,GACzD5zC,GAAKqqB,EAAGqpB,GAAS,IAAMR,EAASU,GAAM,GACtCC,IAAMxpB,EAAGqpB,GAAS,IAAMrpB,EAAGqpB,EAAQ,KAAOR,EAASU,GAAM,GACzD5zC,GAAKqqB,EAAGqpB,GAAS,KAAOR,EAASU,EAAK,GACtCC,IAAMxpB,EAAGqpB,GAAS,KAAOrpB,EAAGqpB,EAAQ,KAAOR,EAASU,GAAM,GAC1D5zC,GAAKqqB,EAAGqpB,GAAS,KAAOR,EAASU,EAAK,GACtCC,IAAMxpB,EAAGqpB,GAAS,KAAOrpB,EAAGqpB,EAAQ,MAAQR,EAASU,GAAM,GAC3D5zC,GAAKqqB,EAAGqpB,EAAQ,IAAMR,EAASU,EAAK,GACpCC,IAAMxpB,EAAGqpB,GAAS,KAAOrpB,EAAGqpB,EAAQ,MAAQR,EAASU,GAAM,GAC3D5zC,GAAKqqB,EAAGqpB,EAAQ,IAAMR,EAASU,EAAK,GACpCC,IAAMxpB,EAAGqpB,GAAS,KAAOrpB,EAAGqpB,EAAQ,MAAQR,EAASU,GAAM,GAC3D5zC,GAAKqqB,EAAGqpB,EAAQ,KAAOR,EAASU,EAAK,GACrCC,IAAMxpB,EAAGqpB,GAAS,KAAOrpB,EAAGqpB,EAAQ,MAAQR,EAASU,GAAM,GAG3DD,GAFA3zC,GAAKqqB,EAAGqpB,EAAQ,MAERG,EACR3yC,EAAIlB,EAAI6zC,EAERA,EAAIz7C,EAAE,IACN4H,EAAI5H,EAAE,IAAMy7C,EAEZz7C,EAAE,IAAM8I,EAAI2yC,EACZz7C,EAAE,IAAMu7C,EAAI3zC,EACZ5H,EAAE,IAAMu7C,EAAI3zC,EACZ5H,EAAE,IAAM8I,EAAI2yC,EAIZrqB,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,GAAU,GACrCpqB,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,GAAU,GAErCpqB,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,GAAU,GACrCpqB,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,GAAU,GAErCpqB,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAU,GACrCpqB,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAU,GAErCpqB,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAKjF,EAAK8W,MAClB7R,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAKjF,EAAK8W,MAAQjjC,EAAE,GAC5BA,EAAE,IAAMA,EAAE,GACVA,EAAE,KAAOA,EAAE,GACXA,EAAE,KAAOA,EAAE,IAEXoxB,EAAKpxB,EAAE,GACPA,EAAE,GAAKA,EAAE,IAAMoxB,EACfpxB,EAAE,IAAMA,EAAE,IAAMoxB,EAChBA,EAAKpxB,EAAE,GACPA,EAAE,GAAKA,EAAE,IAAMoxB,EACfpxB,EAAE,IAAMA,EAAE,IAAMoxB,EAChBA,EAAKpxB,EAAE,IACPA,EAAE,IAAMA,EAAE,IAAMoxB,EAChBpxB,EAAE,IAAMA,EAAE,IAAMoxB,EAChBA,EAAKpxB,EAAE,IACPA,EAAE,IAAMA,EAAE,IAAMoxB,EAChBpxB,EAAE,IAAMA,EAAE,IAAMoxB,EAEhBA,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAW,GACtCpqB,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAW,GAEtCpqB,EAAKpxB,EAAE,IAAMA,EAAE,IACfA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAW,GACtCpqB,EAAKpxB,EAAE,IAAMA,EAAE,IACfA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAW,GAEtCpqB,EAAKpxB,EAAE,IAAMA,EAAE,IACfA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAW,GACtCpqB,EAAKpxB,EAAE,IAAMA,EAAE,IACfA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAW,GAEtCpqB,GAAMpxB,EAAE,IAAMA,EAAE,IAChBA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAW,GACtCpqB,GAAMpxB,EAAE,IAAMA,EAAE,IAChBA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,IAAW,GAEtCpqB,EAAKpxB,EAAE,GAAKA,EAAE,GACdA,EAAE,IAAMA,EAAE,GACVA,EAAE,GAAKoxB,EAAK0pB,EAASU,GAAK,IAAW,GACrCpqB,EAAKpxB,EAAE,GAAKA,EAAE,GACdA,EAAE,IAAMA,EAAE,GACVA,EAAE,GAAKoxB,EAAK0pB,EAASU,GAAK,IAAW,GAErCpqB,EAAKpxB,EAAE,GAAKA,EAAE,IACdA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,GAAU,GACrCpqB,EAAKpxB,EAAE,GAAKA,EAAE,IACdA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,GAAU,GACrCpqB,EAAKpxB,EAAE,IAAMA,EAAE,IACfA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,GAAU,GACrCpqB,GAAMpxB,EAAE,IAAMA,EAAE,IAChBA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAK0pB,EAASU,GAAK,GAAU,GAErCpqB,EAAKjF,EAAK8W,OAASjjC,EAAE,GAAKA,EAAE,KAC5BA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EACRA,EAAKjF,EAAK8W,OAASjjC,EAAE,GAAKA,EAAE,KAC5BA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EACRA,EAAKjF,EAAK8W,QAAUjjC,EAAE,IAAMA,EAAE,KAC9BA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAKpxB,EAAE,IACfoxB,EAAKjF,EAAK8W,QAAUjjC,EAAE,IAAMA,EAAE,KAC9BA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAKpxB,EAAE,IAEfoxB,EAAKpxB,EAAE,GACPA,EAAE,KAAOA,EAAE,GACXA,EAAE,IAAMoxB,EACRpxB,EAAE,GAAKA,EAAE,IAAMoxB,EACfpxB,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,GACPA,EAAE,KAAOA,EAAE,IACXA,EAAE,KAAOoxB,EACTpxB,EAAE,GAAKA,EAAE,IAAMoxB,EACfpxB,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,IACXA,EAAE,KAAOoxB,EACTpxB,EAAE,IAAMA,EAAE,IAAMoxB,EAChBpxB,EAAE,KAAOoxB,EAETA,EAAKpxB,EAAE,IACPA,EAAE,KAAOoxB,EACTpxB,EAAE,IAAMA,EAAE,IAAMoxB,EAChBpxB,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOoxB,EACTpxB,EAAE,IAAMA,EAAE,IAAMoxB,EAChBpxB,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOoxB,EACTpxB,EAAE,IAAMA,EAAE,IAAMoxB,EAChBpxB,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOoxB,EACTpxB,EAAE,IAAMA,EAAE,GAAKoxB,EACfpxB,EAAE,IAAMoxB,EAERA,EAAKpxB,EAAE,IACPA,EAAE,IAAMA,EAAE,GAAKoxB,EACfpxB,EAAE,IAAMoxB,EAERA,EAAKjF,EAAK8W,OAASjjC,EAAE,GAAKA,EAAE,IAC5BA,EAAE,IAAMA,EAAE,GACVA,EAAE,GAAKoxB,EACPA,EAAKjF,EAAK8W,OAASjjC,EAAE,GAAKA,EAAE,IAC5BA,EAAE,IAAMA,EAAE,GACVA,EAAE,GAAKoxB,EACPA,EAAKjF,EAAK8W,OAASjjC,EAAE,IAAMA,EAAE,KAC7BA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EACRA,EAAKjF,EAAK8W,OAASjjC,EAAE,IAAMA,EAAE,KAC7BA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAERA,GAAMjF,EAAK8W,OAASjjC,EAAE,GAAKA,EAAE,KAC7BA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAKpxB,EAAE,GACfoxB,GAAMjF,EAAK8W,OAASjjC,EAAE,GAAKA,EAAE,KAC7BA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAMoxB,EAAKpxB,EAAE,GACfoxB,GAAMjF,EAAK8W,OAASjjC,EAAE,IAAMA,EAAE,KAC9BA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAKpxB,EAAE,IACfoxB,GAAMjF,EAAK8W,OAASjjC,EAAE,IAAMA,EAAE,KAC9BA,EAAE,KAAOA,EAAE,IACXA,EAAE,IAAMoxB,EAAKpxB,EAAE,IAEfoxB,EAAKpxB,EAAE,IAAMA,EAAE,IACfA,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EAERA,EAAKpxB,EAAE,IAAMA,EAAE,IACfA,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EAERA,EAAKpxB,EAAE,IAAMA,EAAE,GACfA,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,GAAKoxB,EACZpxB,EAAE,GAAKoxB,EACPA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,GAAKoxB,EACZpxB,EAAE,GAAKoxB,EACPA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EAERA,EAAKpxB,EAAE,GAAKA,EAAE,GACdA,EAAE,GAAKoxB,EACPA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,GAAKoxB,EACZpxB,EAAE,GAAKoxB,EACPA,EAAKpxB,EAAE,GAAKoxB,EACZpxB,EAAE,GAAKoxB,EACPA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,GAAKoxB,EACZpxB,EAAE,GAAKoxB,EACPA,EAAKpxB,EAAE,GAAKoxB,EACZpxB,EAAE,GAAKoxB,EACPA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IAAMoxB,EACbpxB,EAAE,IAAMoxB,EAERA,EAAKpxB,EAAE,GACPA,EAAE,IAAMA,EAAE,IACVA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,GACPA,EAAE,IAAMA,EAAE,IACVA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,IACXA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,IACXA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,GACPA,EAAE,IAAMA,EAAE,IACVA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,GACPA,EAAE,IAAMA,EAAE,IACVA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,GACXA,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,GACXA,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,GACPA,EAAE,IAAMA,EAAE,IACVA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,GACPA,EAAE,IAAMA,EAAE,IACVA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,IACXA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,IACXA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,IACXA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,IACXA,EAAE,KAAOoxB,EACTA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,GACXA,EAAE,IAAMoxB,EACRA,EAAKpxB,EAAE,IACPA,EAAE,KAAOA,EAAE,GACXA,EAAE,IAAMoxB,CAET,CAaD,SAASsqB,EAAWC,EAAOC,GAC1B,IAAK,IAAIzuB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,IAAI0uB,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAM7BJ,GAJAE,EAAML,EAAMC,EAAW,GAASb,EAAIvuB,EAAQuL,YAAY,GACpD4jB,EAAMC,EAAW,MACrBC,EAAMF,EAAMC,EAAW,GAASb,EAAIvuB,EAAQuL,YAAY,GACpD4jB,EAAMC,EAAW,IAErBG,EAAMC,EAAMH,EAMZI,GAJAD,EAAML,EAAMC,EAAW,IAASb,EAAIvuB,EAAQuL,YAAY,GACpD4jB,EAAMC,EAAW,KACrBC,EAAMF,EAAMC,EAAW,GAASb,EAAIvuB,EAAQuL,YAAY,GACpD4jB,EAAMC,EAAW,IAErBM,GAAOF,EAAMH,EAEbA,EAAyF,sBAAlFF,EAAMC,EAAW,GAASb,EAAIvuB,EAAQuL,YAAY,GAAK4jB,EAAMC,EAAW,KAI/EI,EAAyF,sBAAlFL,EAAMC,EAAW,IAASb,EAAIvuB,EAAQuL,YAAY,GAAK4jB,EAAMC,EAAW,IAI/ED,EAAMC,EAAW,GAAe,oBAANE,EAA8BD,EAIxDF,EAAMC,EAAW,IAAgB,qBAANK,EAA8BD,EAIzDD,EAAY,kBAANA,EAA+B,qBAIrCE,EAAY,GAANA,EAAY,qBAAwBD,EAC1CL,EAAMC,EAAW,GAASG,EAAME,EAChCN,EAAMC,EAAW,GAASG,EAAME,EAEhCH,EAAY,GAANA,EAAY,qBAAwBD,EAC1CK,EAAY,kBAANA,EAA+B,qBAIrCP,EAAMC,EAAW,GAASE,EAAMI,EAChCP,EAAMC,EAAW,IAASE,EAAMI,EAEhCN,GACA,CACD,CAED,SAASO,EAAUj6C,EAAKk6C,EAAQC,GAC/B,IAAIC,EAAIC,EAEHT,EAAKC,EAAKS,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAkCnCZ,EAAKC,EAAKY,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAhCvCrB,EAAMO,EAAI,IAAMA,EAAI,GACpBG,EAAMH,EAAI,IAAMA,EAAI,IACpBI,EAAMJ,EAAI,IAAMA,EAAI,IACpBK,EAAML,EAAI,GAAKA,EAAI,GACnBM,EAAMN,EAAI,GAAKA,EAAI,GACnBO,EAAMP,EAAI,GAAKA,EAAI,GACnBQ,EAAMR,EAAI,GAAKA,EAAI,GAEnBn6C,EAAIk6C,EAAS,IAAOM,EAAME,EAAMC,GAAQF,EAAMN,EAAI,IAClDE,GAAMG,EAAME,EAAMC,GAAO5B,EAAG,KAAW0B,EAAMN,EAAI,IACjDC,GAAMR,EAAMU,EAAMC,GAAOxB,EAAG,IAC5B/4C,EAAIk6C,EAAS,GAAKE,EAAKC,EACvBr6C,EAAIk6C,EAAS,GAAKE,EAAKC,EAEvBR,GAAOM,EAAI,IAAMA,EAAI,KAAOpB,EAAG,IAC/B0B,EAAMA,EAAM1B,EAAG,IAAUoB,EAAI,GAC7BC,EAAKR,EAAMb,EAAG,IAAUc,EAAMS,EAAMvB,EAAG,IAAUwB,EAAMxB,EAAG,IAC1DsB,GAAMG,EAAMzB,EAAG,IAAU0B,EAAMC,EAAM3B,EAAG,IAAU4B,EAAM5B,EAAG,IAC3D/4C,EAAIk6C,EAAS,GAAKE,EAAKC,EACvBr6C,EAAIk6C,EAAS,GAAKE,EAAKC,EAEvBD,EAAKR,EAAMb,EAAG,IAAUc,EAAMS,EAAMvB,EAAG,IAAUwB,EAAMxB,EAAG,IAC1DsB,GAAMG,EAAMzB,EAAG,IAAU0B,EAAMC,EAAM3B,EAAG,IAAU4B,EAAM5B,EAAG,IAC3D/4C,EAAIk6C,EAAS,GAAKE,EAAKC,EACvBr6C,EAAIk6C,EAAS,IAAME,EAAKC,EAExBD,EAAKR,EAAMb,EAAG,IAAUc,EAAMS,EAAMvB,EAAG,IAAUwB,EAAMxB,EAAG,IAC1DsB,EAAKG,EAAMzB,EAAG,IAAU0B,EAAMC,EAAM3B,EAAG,IAAU4B,EAAM5B,EAAG,IAC1D/4C,EAAIk6C,EAAS,IAAME,EAAKC,EACxBr6C,EAAIk6C,EAAS,IAAME,EAAKC,EAKxBN,EAAMI,EAAI,GAAKA,EAAI,GACnBS,EAAMT,EAAI,GAAKA,EAAI,GACnBU,EAAMV,EAAI,GAAKA,EAAI,GACnBW,EAAMX,EAAI,IAAMA,EAAI,GACpBY,EAAMZ,EAAI,IAAMA,EAAI,IACpBa,EAAMb,EAAI,IAAMA,EAAI,IACpBc,EAAMd,EAAI,IAAMA,EAAI,IAEpBn6C,EAAIk6C,EAAS,GAAMY,EAAME,EAAMC,GAAQF,EAAMZ,EAAI,KACjDC,GAAMU,EAAME,EAAMC,GAAOlC,EAAG,KAAWgC,EAAMZ,EAAI,KACjDE,GAAMN,EAAMa,EAAMC,GAAO9B,EAAG,IAC5B/4C,EAAIk6C,EAAS,IAAME,EAAKC,EACxBr6C,EAAIk6C,EAAS,IAAME,EAAKC,EAExBL,GAAOG,EAAI,GAAKA,EAAI,IAAMpB,EAAG,IAC7BgC,EAAMZ,EAAI,IAAMY,EAAMhC,EAAG,IACzBqB,EAAKU,EAAM/B,EAAG,IAAUgC,EAAMC,EAAMjC,EAAG,IAAUkC,EAAMlC,EAAG,IAC1DsB,EAAKN,EAAMhB,EAAG,IAAUiB,EAAMY,EAAM7B,EAAG,IAAU8B,EAAM9B,EAAG,IAC1D/4C,EAAIk6C,EAAS,GAAKE,EAAKC,EACvBr6C,EAAIk6C,EAAS,GAAKE,EAAKC,EAEvBD,GAAMU,EAAM/B,EAAG,IAAUgC,EAAMC,EAAMjC,EAAG,IAAUkC,EAAMlC,EAAG,IAC3DsB,EAAKN,EAAMhB,EAAG,IAAUiB,EAAMY,EAAM7B,EAAG,IAAU8B,EAAM9B,EAAG,IAC1D/4C,EAAIk6C,EAAS,GAAKE,EAAKC,EACvBr6C,EAAIk6C,EAAS,GAAKE,EAAKC,EAEvBD,GAAMU,EAAM/B,EAAG,IAAUgC,EAAMC,EAAMjC,EAAG,IAAUkC,EAAMlC,EAAG,IAC3DsB,EAAKN,EAAMhB,EAAG,IAAUiB,EAAMY,EAAM7B,EAAG,IAAU8B,EAAM9B,EAAG,IAC1D/4C,EAAIk6C,EAAS,IAAME,EAAKC,EACxBr6C,EAAIk6C,EAAS,IAAME,EAAKC,CAEzB,CAEDt1C,KAAKm3B,WAAa,SAAShP,EAAKguB,EAAIC,GAInC,IAHA,IAAIC,EAAKF,EACLG,EAAQ,IAEH5nB,EAAK,EAAGA,EAAKvG,EAAIgH,aAAcT,IAAM,CAC7C,IAAK,IAAID,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAAM,CAQxC,IAPA,IAAIY,EACAzF,EAAMzB,EAAIgF,QAAQoC,GAAGd,GAAIC,GACzB6nB,EAAW3sB,EAAGO,GACdqsB,EAAc,EACdC,EAAOtuB,EAAIopB,UAAU7iB,GAAI,EAAID,GAC7BioB,EAAU,EAELlsC,EAAI,EAAGA,EAAI,EAAQA,IAQ3B,IAPA4pC,EAAeiC,EAAIC,EAAOG,EAAKC,IAC/BtC,EAAeiC,EAAIC,EAAQ,GAAIG,EAAKC,EAAU,IAC9CA,GAAW,EACXJ,GAAS,GAIJjnB,EAAO,EAAGA,EAAO,GAAIA,GAAQ,EACjConB,EAAKC,EAAU,GAAGrnB,KAAU,EAQ9B,IAAKA,EAAO,EAAGA,EAAO,GAAIA,IAAQmnB,GAAe,GAAI,CACpD,IAAI5/C,EAAOgzB,EAAGgG,WACV+mB,EAAQxuB,EAAIopB,UAAU7iB,GAAID,GAC1BmoB,EAAQzuB,EAAIopB,UAAU7iB,GAAI,EAAID,GAGlC,GAF2B,GAAvB7E,EAAGkG,kBAAyBT,EAAO,IACtCz4B,EAAO,GACJuxB,EAAIykB,WAAWvd,GAAQ,MAC1BlK,EAAOwJ,KAAK4nB,EAAUC,EAAc,EAClCA,EAAc,GAAI,OACd,CACN,GAAIruB,EAAIykB,WAAWvd,GAAQ,EAC1B,IAAS7kB,EAAI,EAAGA,EAAI,GAAIA,IACvBosC,EAAMpsC,GAAG2pC,EAAM9kB,KAAUlH,EAAIykB,WAAWvd,GAE1C,GAAIz4B,GAAQ2uB,EAAQuL,WAAY,CAC/B,IAAStmB,GAAI,EAASA,EAAI,EAAGA,IAAK,CACjC,IAAImyB,EAAImX,EAAIvuB,EAAQuL,YAAYtmB,EAAI,GACpC+rC,EAASC,EAAkB,EAAJhsC,EAAQ,GAAKmsC,EAAM,EAAInsC,GAAG2pC,EAAM9kB,IACnDsN,EAAIga,EAAM,EAAInsC,GAAG2pC,EAAM9kB,IAC3BknB,EAASC,EAAkB,EAAJhsC,EAAQ,IAAMmsC,EAAM,GAAKnsC,GAAG2pC,EAAM9kB,IACrDsN,EAAIga,EAAM,GAAKnsC,GAAG2pC,EAAM9kB,IAC5BknB,EAASC,EAAkB,EAAJhsC,EAAQ,IAAMmsC,EAAM,GAAKnsC,GAAG2pC,EAAM9kB,IACrDsN,EAAIga,EAAM,GAAKnsC,GAAG2pC,EAAM9kB,IAC5BknB,EAASC,EAAkB,EAAJhsC,EAAQ,IAAMosC,EAAM,EAAIpsC,GAAG2pC,EAAM9kB,IACpDsN,EAAIia,EAAM,EAAIpsC,GAAG2pC,EAAM9kB,IAC3BknB,EAASC,EAAkB,EAAJhsC,EAAQ,IAAMosC,EAAM,EAAIpsC,GAAG2pC,EAAM9kB,IACpDsN,EAAIia,EAAM,EAAIpsC,GAAG2pC,EAAM9kB,IAC3BknB,EAASC,EAAkB,EAAJhsC,EAAQ,IAAMosC,EAAM,EAAIpsC,GAAG2pC,EAAM9kB,IACpDsN,EAAIia,EAAM,EAAIpsC,GAAG2pC,EAAM9kB,GAC3B,CACDolB,EAAW8B,EAAUC,EACrB,KAAM,CACN,IAAIK,EAAOhyB,EAAU,IACrB,IAASra,GAAI,EAASA,EAAI,EAAGA,IAAK,CACjC,IAAIzR,EAAGC,EACPD,EAAI+6C,EAAIl9C,GAAM4T,EAAI,IACdosC,EAAMpsC,EAAI,GAAG2pC,EAAM9kB,IACnBykB,EAAIl9C,GAAM4T,EAAI,IACdosC,EAAM,EAAIpsC,GAAG2pC,EAAM9kB,IACvBr2B,EAAI86C,EAAIl9C,GAAM4T,EAAI,GACdmsC,EAAMnsC,EAAI,GAAG2pC,EAAM9kB,IACnBykB,EAAIl9C,GAAM4T,EAAI,IACdmsC,EAAM,EAAInsC,GAAG2pC,EAAM9kB,IACvBwnB,EAAKrsC,EAAI,GAAKzR,EAAIC,EAAI+6C,EAAS,EAAIvpC,EAAI,GACvCqsC,EAAKrsC,EAAI,IAAMzR,EAAIg7C,EAAS,EAAIvpC,EAAI,GAAKxR,CACzC,CAEDk8C,EAAUqB,EAAUC,EAAaK,EACjC,CACD,CAID,GAAIjgD,GAAQ2uB,EAAQuL,YAAsB,GAARzB,EACjC,IAAS7kB,EAAI,EAAGA,GAAK,IAAKA,EAAG,CAC5B,IAAIssC,EAAIC,EACRD,EAAKP,EAASC,EAAchsC,GAAKypC,EAAG,GAAKzpC,GACrC+rC,EAASC,GAAe,EAAIhsC,GAC5B0pC,EAAG,GAAK1pC,GACZusC,EAAKR,EAASC,EAAchsC,GAAK0pC,EAAG,GAAK1pC,GACrC+rC,EAASC,GAAe,EAAIhsC,GAC5BypC,EAAG,GAAKzpC,GAEZ+rC,EAASC,GAAe,EAAIhsC,GAAKssC,EACjCP,EAASC,EAAchsC,GAAKusC,CAC5B,CAEF,CACD,CAGD,GAFAV,EAAKD,EACLE,EAAQ,IACW,GAAfnuB,EAAIwL,QACP,IAAK,IAAIr9B,EAAI,EAAGA,EAAI,GAAIA,IACvBwuB,EAAOsD,UAAUD,EAAIopB,UAAU7iB,GAAI,GAAGp4B,GAAI,EACxC6xB,EAAIopB,UAAU7iB,GAAI,GAAGp4B,GAAI,EAAG,GAGhC,CACD,CACD,C,wBCzoCD,IAAIsuB,EAAS7E,EAAQ,OAUjB8E,GATSD,EAAOE,OACNF,EAAOG,QACTH,EAAOI,MACFJ,EAAOK,WACbL,EAAOM,KACLN,EAAOO,OACFP,EAAOQ,YACVR,EAAOS,SACLT,EAAOU,WACRV,EAAOC,WACnBW,EAAcZ,EAAOY,YACrBC,EAAUb,EAAOa,QAIjBF,GAHYX,EAAOc,UACVd,EAAOe,OAEN5F,EAAQ,QAwBtB6F,EAAO5F,QAdP,WACIhgB,KAAKg3C,iBAAmBxxB,EAAY,CAAC,EAAG,IACxCxlB,KAAKi3C,YAAcxxB,EAAQ,GAC3BzlB,KAAKu5B,SAAW1U,EAAU,IAC1B7kB,KAAKk3C,SAAWryB,EAAUU,EAAQY,SAClCnmB,KAAKm3C,UAAYtyB,EAAUU,EAAQa,SAKnCpmB,KAAK0pC,WAAa,EAClB1pC,KAAK2pC,aAAe,CACvB,C,wBCtCD,IAAI/kB,EAAS7E,EAAQ,OAEjBgF,GADSH,EAAOE,OACNF,EAAOG,SACTH,EAAOI,MACFJ,EAAOK,WACbL,EAAOM,KACLN,EAAOO,OACFP,EAAOQ,YACVR,EAAOS,SACLT,EAAOU,WACRV,EAAOC,UACLD,EAAOY,YACXZ,EAAOa,QACLb,EAAOc,UACVd,EAAOe,OAydpBC,EAAO5F,QAvdP,WACI,IA2CIo3B,EA3CAlwB,EAAOnH,EAAQ,OACnB,SAASs3B,EAAWC,EAAMlmC,EAAMmmC,EACZ3zC,EAAG4zC,EAAaC,EAChBC,EAAKC,EAAUC,EACfC,EAAOC,EAAMC,EACbC,EAAOC,EAAKC,GAC5Bl4C,KAAKm4C,MAAQb,EACbt3C,KAAKqpC,WAAaj4B,EAClBpR,KAAKo4C,aAAeb,EACpBv3C,KAAKq4C,KAAOz0C,EACZ5D,KAAKs4C,OAASd,EACdx3C,KAAKu4C,KAAOd,EACZz3C,KAAKw4C,YAAcd,EACnB13C,KAAKy4C,kBAAoBd,EACzB33C,KAAK04C,UAAYd,EACjB53C,KAAK24C,UAAYd,EACjB73C,KAAK44C,gBAAkBd,EACvB93C,KAAK64C,QAAUd,EACf/3C,KAAK84C,UAAYd,EACjBh4C,KAAK+4C,SAAWd,EAChBj4C,KAAKupC,MAAQ2O,CAChB,CAED,SAASc,EAAWC,EAAM7nC,EAAMmmC,EACZS,EAAOE,EAAKV,EACZC,EAAcyB,EAAMC,EACpBC,EAAMxB,EAAOC,EACbwB,EAASC,GACzBt5C,KAAKqpC,WAAaj4B,EAClBpR,KAAKo4C,aAAeb,EACpBv3C,KAAK84C,UAAYd,EACjBh4C,KAAKu5C,QAAUrB,EACfl4C,KAAKs4C,OAASd,EACdx3C,KAAKu4C,KAAOd,EACZz3C,KAAKw5C,OAASN,EACdl5C,KAAKmuB,MAAQgrB,EACbn5C,KAAKw4C,YAAcY,EACnBp5C,KAAK04C,UAAYd,EACjB53C,KAAK24C,UAAYd,EACjB73C,KAAK64C,QAAUQ,EACfr5C,KAAKy5C,QAAUH,CAClB,CAIDt5C,KAAKynB,WAAa,SAAUiyB,GACxBtC,EAAOsC,CACV,EAQD,IAAIC,EAAqB,CACrB,IAAItC,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,KAAQ,KAAM,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,KACzE,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,KAAQ,KAAM,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,GAAI,MAC3E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,KAAQ,KAAM,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,MACzE,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,KAAQ,KAAM,IAAK,IAAK,GAAI,EAAG,EAAG,EAAG,GAAI,MAC1E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,EAAM,KAAQ,IAAM,IAAK,IAAK,KAAM,EAAG,EAAG,EAAG,EAAG,MAC3E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,GAAK,IAAM,IAAK,GAAI,GAAI,KAAQ,EAAG,EAAG,MAC9E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,IAAM,KAAO,KAAM,KAAM,GAAI,KAAQ,EAAG,EAAG,KACnF,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,GAAK,KAAO,KAAM,GAAI,GAAI,KAAQ,EAAG,EAAG,KAChF,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,IAAK,MAAO,KAAM,IAAK,GAAI,KAAQ,EAAG,EAAG,GACjF,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,IAAK,KAAM,GAAI,IAAK,GAAI,KAAQ,EAAG,EAAG,GAC9E,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,IAAM,IAAO,EAAK,GAAM,GAAI,IAAK,GAAI,KAAQ,EAAG,EAAG,IAQ/EuC,EAAqB,CACrB,IAAIvC,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,GAAM,EAAK,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,KACxE,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,KAAM,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,GAAI,MAC1E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,KAAM,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,MACtE,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,KAAM,KAAM,IAAK,GAAI,EAAG,EAAG,EAAG,GAAI,MAC1E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,IAAK,GAAK,EAAG,KAAM,EAAG,EAAG,EAAG,EAAG,MACvE,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,EAAK,MAAO,IAAK,GAAI,GAAI,KAAQ,EAAG,EAAG,MAC/E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,IAAO,EAAK,MAAO,IAAK,KAAM,GAAI,KAAQ,EAAG,EAAG,GACjF,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,GAAM,GAAK,GAAM,KAAM,GAAI,GAAI,KAAQ,EAAG,EAAG,GAC9E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,GAAM,EAAK,KAAM,GAAM,IAAK,GAAI,KAAQ,EAAG,EAAG,GAC/E,IAAIA,EAAW,EAAG,EAAG,EAAG,EAAG,IAAM,GAAM,IAAK,MAAO,GAAM,IAAK,GAAI,KAAQ,EAAG,EAAG,GAChF,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,IAAM,GAAM,EAAK,MAAO,GAAM,IAAK,GAAI,KAAQ,EAAG,EAAG,IAGrF,SAASwC,EAAiB9wB,EAAKhwB,EAAG+gD,GAC9B,IAAIC,EAAahxB,EAAI6O,KAAO7S,EAAQumB,OAASqO,EACvCC,EAEFj2C,EAAIolB,EAAIyiB,WACRh6B,EAAIuoC,EAAWhhD,GACfihD,EAAID,EAAWhhD,EAAI,GACnBqJ,EAAMoP,EAMVA,EAAE8mC,OAAS9mC,EAAE8mC,OAAS30C,GAAKq2C,EAAE1B,OAAS9mC,EAAE8mC,QAExC9mC,EAAE+mC,KAAO/mC,EAAE+mC,KAAO50C,GAAKq2C,EAAEzB,KAAO/mC,EAAE+mC,MAElC/mC,EAAEgnC,YAAchnC,EAAEgnC,YAAc70C,GAAKq2C,EAAExB,YAAchnC,EAAEgnC,aAEvDhnC,EAAEinC,kBAAoBjnC,EAAEinC,kBAAoB90C,GACrCq2C,EAAEvB,kBAAoBjnC,EAAEinC,mBAE/BjnC,EAAEknC,UAAYlnC,EAAEknC,UAAY/0C,GAAKq2C,EAAEtB,UAAYlnC,EAAEknC,WAEjDlnC,EAAEmnC,UAAYnnC,EAAEmnC,UAAYh1C,GAAKq2C,EAAErB,UAAYnnC,EAAEmnC,WAEjDnnC,EAAEonC,gBAAkBpnC,EAAEonC,gBAAkBj1C,GACjCq2C,EAAEpB,gBAAkBpnC,EAAEonC,iBAE7BpnC,EAAEqnC,QAAUrnC,EAAEqnC,QAAUl1C,GAAKq2C,EAAEnB,QAAUrnC,EAAEqnC,SAI3CrnC,EAAE+3B,MAAQ/3B,EAAE+3B,MAAQ5lC,GAAKq2C,EAAEzQ,MAAQ/3B,EAAE+3B,OAyUzC,SAAwBxgB,EAAK8f,GACzB,IAAInD,EAAM,EAEN,EAAImD,IAEJnD,GAAO,EACPmD,EAAQ,GAER,EAAIA,IACJnD,GAAO,EACPmD,EAAQ,GAGZ9f,EAAI8f,MAAQA,EACZ9f,EAAIyiB,WAAa,CAEpB,CAtVGyO,CAAelxB,EAAK3mB,EAAI+1C,OAET,GAAX2B,EACA/wB,EAAIsgB,WAAajnC,EAAIinC,WACdxmC,KAAK4vB,IAAI1J,EAAIsgB,aAAc,GAAK,IACvCtgB,EAAIsgB,WAAajnC,EAAIinC,YAEV,GAAXyQ,EACA/wB,EAAIugB,iBAAmBlnC,EAAIg2C,aACpBv1C,KAAK4vB,IAAI1J,EAAIugB,mBAAoB,GAAK,IAC7CvgB,EAAIugB,iBAAmBlnC,EAAIg2C,cAEf,GAAZh2C,EAAIi2C,OACJtvB,EAAIukB,cAA4B,GAAZlrC,EAAIi2C,MAEb,GAAXyB,EACA/wB,EAAIE,eAAeqQ,MAAMoQ,WAAatnC,EAAIk2C,OACnCz1C,KAAK4vB,IAAI1J,EAAIE,eAAeqQ,MAAMoQ,aAAc,GAAK,IAC5D3gB,EAAIE,eAAeqQ,MAAMoQ,WAAatnC,EAAIk2C,QAE/B,GAAXwB,EACA/wB,EAAIE,eAAeqQ,MAAMqQ,aAAevnC,EAAIm2C,KACrC11C,KAAK4vB,IAAI1J,EAAIE,eAAeqQ,MAAMqQ,eAAgB,GAAK,IAC9D5gB,EAAIE,eAAeqQ,MAAMqQ,aAAevnC,EAAIm2C,MAEjC,GAAXuB,EACA/wB,EAAIqkB,cAAgBhrC,EAAIo2C,YACjB31C,KAAK4vB,IAAI1J,EAAIqkB,cAAgB,GAAK,IACzCrkB,EAAIqkB,cAAgBhrC,EAAIo2C,aAEb,GAAXsB,EACA/wB,EAAIskB,oBAAsBjrC,EAAIq2C,kBACvB51C,KAAK4vB,IAAI1J,EAAIskB,oBAAsB,GAAK,IAC/CtkB,EAAIskB,oBAAsBjrC,EAAIq2C,mBAEnB,GAAXqB,EACA/wB,EAAI8nB,UAAYzuC,EAAIs2C,UAAY,GACzB71C,KAAK4vB,IAAqB,IAAf1J,EAAI8nB,SAAmB,GAAK,IAC9C9nB,EAAI8nB,UAAYzuC,EAAIs2C,UAAY,IAErB,GAAXoB,EACA/wB,EAAI+f,SAAW1mC,EAAIu2C,UACZ91C,KAAK4vB,IAAI1J,EAAI+f,WAAY,GAAK,IACrC/f,EAAI+f,SAAW1mC,EAAIu2C,WAER,GAAXmB,EACA/wB,EAAIghB,kBAAoB3nC,EAAIw2C,gBACrB/1C,KAAK4vB,IAAI1J,EAAIghB,oBAAqB,GAAK,IAC9ChhB,EAAIghB,kBAAoB3nC,EAAIw2C,iBAE5Bx2C,EAAIy2C,QAAU,IACC,GAAXiB,EACA/wB,EAAIkhB,aAAe7nC,EAAIy2C,QAChBh2C,KAAK4vB,IAAI1J,EAAIkhB,eAAgB,GAAK,IACzClhB,EAAIkhB,aAAe7nC,EAAIy2C,UAK3Bz2C,EAAI02C,UAAY,IAChB/vB,EAAIylB,cAAgBzlB,EAAIylB,cAAgBpsC,EAAI02C,WAE5C12C,EAAI22C,SAAW,IACfhwB,EAAIylB,cAAgBzlB,EAAIylB,cAAiBpsC,EAAI22C,UAAY,IAE9C,GAAXe,EACA/wB,EAAIwgB,MAAQnnC,EAAImnC,MACT1mC,KAAK4vB,IAAI1J,EAAIwgB,QAAS,GAAK,IAClCxgB,EAAIwgB,MAAQnnC,EAAImnC,OAGL,GAAXuQ,IACA/wB,EAAI8f,MAAQ9vC,EACZgwB,EAAIyiB,WAAa7nC,EAExB,CASD,IAAIu2C,EAAiB,CACjB,IAAIlB,EAAW,EAAG,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,GAAI,GAAM,GAAI,MAAQ,GACxE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,GAAI,GAAM,GAAI,KAAQ,GACzE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,GAAI,GAAM,GAAI,KAAQ,GACzE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,GAAI,GAAM,GAAI,KAAQ,GACzE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,GAAI,GAAM,GAAI,KAAQ,GACzE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,GAAI,GAAM,GAAI,KAAQ,GACzE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,GAAI,EAAK,GAAI,KAAQ,GACxE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,GAAI,EAAK,GAAI,KAAQ,GACxE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,EAAG,IAAM,IAAK,EAAG,IAAM,EAAG,EAAI,EAAG,KAAQ,GACrE,IAAIA,EAAW,GAAI,EAAG,EAAG,EAAG,IAAM,IAAM,IAAK,EAAG,IAAM,EAAG,EAAK,IAAK,KAAQ,GAC3E,IAAIA,EAAW,IAAK,EAAG,EAAG,EAAG,KAAM,IAAM,IAAK,EAAG,IAAM,EAAG,EAAK,IAAK,KAAQ,GAC5E,IAAIA,EAAW,IAAK,EAAG,EAAG,EAAG,KAAM,IAAM,IAAK,EAAG,IAAM,EAAG,EAAK,EAAG,KAAQ,GAC1E,IAAIA,EAAW,IAAK,EAAG,EAAG,EAAG,KAAM,EAAM,IAAK,EAAG,KAAO,EAAG,EAAK,IAAK,EAAG,GACxE,IAAIA,EAAW,IAAK,EAAG,EAAG,EAAG,KAAM,IAAM,IAAK,EAAG,KAAO,EAAG,EAAK,EAAG,EAAG,GACtE,IAAIA,EAAW,IAAK,EAAG,EAAG,EAAG,KAAM,IAAM,IAAK,EAAG,KAAO,EAAG,EAAK,EAAG,EAAG,GACtE,IAAIA,EAAW,IAAK,EAAG,EAAG,EAAG,IAAM,IAAM,IAAK,EAAG,GAAO,EAAG,GAAM,EAAG,EAAG,GACvE,IAAIA,EAAW,IAAK,EAAG,EAAG,EAAG,GAAM,IAAM,IAAK,EAAG,GAAO,GAAI,GAAM,EAAG,EAAG,IAG5E,SAASmB,EAAiBpxB,EAAKshB,EAAQyP,GAEnC,IAAIM,EAAiB/P,EAEjBvqC,EAAIs3C,EAAK/R,wBAAwBgF,GAoBrC,GAlBAthB,EAAI6O,IAAM7S,EAAQqU,QAClBrQ,EAAIggB,sBAAwBqR,EAC5BrxB,EAAIggB,sBAAwBlmC,KAAK+lB,IAAIG,EAAIggB,sBAAuB,KAChEhgB,EAAIggB,sBAAwBlmC,KAAK0B,IAAIwkB,EAAIggB,sBAAuB,GAChEhgB,EAAI8D,MAAQ9D,EAAIggB,sBACZhgB,EAAIggB,sBAAwB,MAC5BhgB,EAAIM,mBAAoB,GAIxB6wB,EAAep6C,GAAGg5C,UAAY,IAC9B/vB,EAAIylB,cAAoC,EAApBzlB,EAAIylB,eAGxB0L,EAAep6C,GAAG25C,QAAU,IAC5B1wB,EAAIE,eAAe6kB,cAAgB,GAGnCjrC,KAAK4vB,IAAIynB,EAAep6C,GAAG05C,QAAU,EAAG,CACxC,IAAIhvC,EAAK6gC,IAAgC,EAA3B6O,EAAep6C,GAAG05C,QAC5BhvC,EAAI,IACJA,GAAK,IACTue,EAAIylB,cAAgBzlB,EAAIylB,cAAiBhkC,GAAK,CACjD,CAkFD,OAhFe,GAAXsvC,EACA/wB,EAAIsgB,WAAa6Q,EAAep6C,GAAGupC,WAC5BxmC,KAAK4vB,IAAI1J,EAAIsgB,aAAc,GAAK,IACvCtgB,EAAIsgB,WAAa6Q,EAAep6C,GAAGupC,YAExB,GAAXyQ,EACA/wB,EAAIugB,iBAAmB4Q,EAAep6C,GAAGs4C,aAClCv1C,KAAK4vB,IAAI1J,EAAIugB,mBAAoB,GAAK,IAC7CvgB,EAAIugB,iBAAmB4Q,EAAep6C,GAAGs4C,cAG9B,GAAX0B,EACA/wB,EAAIwgB,MAAQ2Q,EAAep6C,GAAGy5C,QACvB12C,KAAK4vB,IAAI1J,EAAIwgB,QAAS,GAAK,IAClCxgB,EAAIwgB,MAAQ2Q,EAAep6C,GAAGy5C,SAGnB,GAAXO,EACA/wB,EAAIE,eAAeqQ,MAAMoQ,WAAawQ,EAAep6C,GAAGw4C,OACjDz1C,KAAK4vB,IAAI1J,EAAIE,eAAeqQ,MAAMoQ,aAAc,GAAK,IAC5D3gB,EAAIE,eAAeqQ,MAAMoQ,WAAawQ,EAAep6C,GAAGw4C,QAE7C,GAAXwB,EACA/wB,EAAIE,eAAeqQ,MAAMqQ,aAAeuQ,EAAep6C,GAAGy4C,KACnD11C,KAAK4vB,IAAI1J,EAAIE,eAAeqQ,MAAMqQ,eAAgB,GAAK,IAC9D5gB,EAAIE,eAAeqQ,MAAMqQ,aAAeuQ,EAAep6C,GAAGy4C,MAW/C,GAAXuB,EACA/wB,EAAIoF,MAAQ+rB,EAAep6C,GAAGquB,MACvBtrB,KAAK4vB,IAAI1J,EAAIoF,QAAS,GAAK,IAClCpF,EAAIoF,MAAQ+rB,EAAep6C,GAAGquB,OAGnB,GAAX2rB,EACA/wB,EAAIqkB,cAAgB8M,EAAep6C,GAAG04C,YAC/B31C,KAAK4vB,IAAI1J,EAAIqkB,cAAgB,GAAK,IACzCrkB,EAAIqkB,cAAgB8M,EAAep6C,GAAG04C,aAEtC0B,EAAep6C,GAAG04C,YAAc,EACjB,GAAXsB,EACA/wB,EAAIskB,oBAAuD,GAAhC6M,EAAep6C,GAAG04C,YACtC31C,KAAK4vB,IAAI1J,EAAIskB,oBAAsB,GAAK,IAC/CtkB,EAAIskB,oBAAuD,GAAhC6M,EAAep6C,GAAG04C,aAIlC,GAAXsB,EACA/wB,EAAIskB,oBAAuD,IAAhC6M,EAAep6C,GAAG04C,YACtC31C,KAAK4vB,IAAI1J,EAAIskB,oBAAsB,GAAK,IAC/CtkB,EAAIskB,oBAAuD,IAAhC6M,EAAep6C,GAAG04C,aAKtC,GAAXsB,EACA/wB,EAAI8nB,UAAYqJ,EAAep6C,GAAG44C,UAAY,GACvC71C,KAAK4vB,IAAqB,IAAf1J,EAAI8nB,SAAkB,GAAK,IAC7C9nB,EAAI8nB,UAAYqJ,EAAep6C,GAAG44C,UAAY,IAEnC,GAAXoB,EACA/wB,EAAI+f,SAAWoR,EAAep6C,GAAG64C,UAC1B91C,KAAK4vB,IAAI1J,EAAI+f,WAAY,GAAK,IACrC/f,EAAI+f,SAAWoR,EAAep6C,GAAG64C,WAGtB,GAAXmB,EACA/wB,EAAIkhB,aAAeiQ,EAAep6C,GAAG+4C,QAC9Bh2C,KAAK4vB,IAAI1J,EAAIkhB,eAAgB,GAAK,IACzClhB,EAAIkhB,aAAeiQ,EAAep6C,GAAG+4C,SAGlCxO,CACV,CAEDrqC,KAAKktC,aAAe,SAASnkB,EAAKshB,EAAQyP,GAEtC,OAAQzP,GACJ,KAAKnjB,EAAK+b,MAENoH,EAASnjB,EAAK2b,GACd9Z,EAAI6O,IAAM7S,EAAQ8S,SAClB,MAEJ,KAAK3Q,EAAKqc,OAEN8G,EAASnjB,EAAK0b,GACd7Z,EAAI6O,IAAM7S,EAAQumB,OAClB,MAEJ,KAAKpkB,EAAKsc,YAEN6G,EAASnjB,EAAK0b,GACd7Z,EAAI6O,IAAM7S,EAAQ8S,SAClB,MAEJ,KAAK3Q,EAAKgc,SAENmH,EAASnjB,EAAK4b,GACd/Z,EAAI6O,IAAM7S,EAAQumB,OAClB,MAEJ,KAAKpkB,EAAKmc,cAENgH,EAASnjB,EAAK4b,GACd/Z,EAAI6O,IAAM7S,EAAQ8S,SAClB,MAEJ,KAAK3Q,EAAKic,QAENkH,EAASnjB,EAAK8b,GACdja,EAAI6O,IAAM7S,EAAQumB,OAClB,MAEJ,KAAKpkB,EAAKoc,aAEN+G,EAASnjB,EAAK8b,GACdja,EAAI6O,IAAM7S,EAAQ8S,SAClB,MAEJ,KAAK3Q,EAAKkc,OAMN,OAJAiH,EAAS,IACTthB,EAAIshB,OAASA,EACb8P,EAAiBpxB,EAAKshB,EAAQyP,GAC9B/wB,EAAI6O,IAAM7S,EAAQoU,QACXkR,EAMX,OAFJthB,EAAIshB,OAASA,EAEDA,GACJ,KAAKnjB,EAAKqb,GAEN,OADAsX,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAKsb,GAEN,OADAqX,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAKub,GAEN,OADAoX,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAKwb,GAEN,OADAmX,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAKyb,GAEN,OADAkX,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAK0b,GAEN,OADAiX,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAK2b,GAEN,OADAgX,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAK4b,GAEN,OADA+W,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAK6b,GAEN,OADA8W,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EACX,KAAKnjB,EAAK8b,GAEN,OADA6W,EAAiB9wB,EAAK,EAAG+wB,GAClBzP,EAKnB,OAAI,GAAKA,GAAUA,GAAU,IAClB8P,EAAiBpxB,EAAKshB,EAAQyP,IAIzC/wB,EAAIshB,OAAS,EACNA,EACV,CA2BJ,C,wBCxVD,IAAIzlB,EAAS7E,EAAQ,OAEjBgF,GADSH,EAAOE,OACNF,EAAOG,SACjBC,EAAQJ,EAAOI,MACfC,EAAaL,EAAOK,WACpBC,EAAON,EAAOM,KACdC,EAASP,EAAOO,OAIhBN,GAHcD,EAAOQ,YACVR,EAAOS,SACLT,EAAOU,WACRV,EAAOC,WACnBW,EAAcZ,EAAOY,YACrBC,EAAUb,EAAOa,QAEjBE,GADYf,EAAOc,UACVd,EAAOe,QAEhB00B,EAAMt6B,EAAQ,OACdwF,EAAUxF,EAAQ,OAmrFtB6F,EAAO5F,QAjrFP,WACI,IAAI0V,EAAW3V,EAAQ,OACnBu6B,EAAM,IAAID,EAEVE,EAAQ,kBAWRC,EAAY,EAAK,WAAmBj1B,EAAQsB,QAAU,GAMtD4zB,EAAkB,GAOlBC,EAAW,GAGXC,EAAc,YAiDlB,SAASC,EAAuB1hB,EAAQ/Q,GAGpC,IAFA,IAAI0yB,EAAiB,EAEZvkD,EAAI,EAAGA,EAAIivB,EAAQsB,QAAU,IAAKvwB,EACvCukD,GAAkB3hB,EAAO5iC,GAAK6xB,EAAIiQ,IAAIxR,MAAMtwB,GAGhD,OAFAukD,GAAkBL,CAGrB,CAED,SAASM,EAAa/xB,EAAKgyB,EAAWC,EAAaC,EAASC,EAAYC,EAASC,EAAYC,EAAQ5e,EAAKjL,EAAQkL,GAC9G,IAAIvU,EAAMY,EAAIE,eACd,GAAIwT,EAAM,EACN6d,EAAI1d,SAASzU,EAAK8yB,EAAQC,GAAaze,EAAKjL,EAAQkL,GACpD4d,EAAI/d,UAAUpU,EAAKgzB,EAAQC,GAAa3e,EAAKjL,EAAQkL,QAGpD,GAAW,GAAPD,EAAU,CACf,IAAK,IAAIviC,EAAIqrB,EAAQsB,QAAU,EAAG3sB,GAAK,IAAKA,EAAG,CAC3C,IAAIgsB,EAAI+0B,EAAQC,EAAa,GAAGhhD,GAC5B4F,EAAIm7C,EAAQC,EAAa,GAAGhhD,GAChC+gD,EAAQC,EAAa,GAAGhhD,IAAMgsB,EAAIpmB,GAAKolB,EAAK8W,MAAQ,GACpDif,EAAQC,EAAa,GAAGhhD,IAAMgsB,EAAIpmB,GAAKolB,EAAK8W,MAAQ,EACvD,CACD,IAAK,IAAIhjC,EAAI,EAAGA,GAAK,IAAKA,EACtB,IAASkB,EAAIqrB,EAAQkV,UAAY,EAAGvgC,GAAK,IAAKA,EAAG,CACzCgsB,EAAIi1B,EAAQC,EAAa,GAAGpiD,GAAGkB,GAC/B4F,EAAIq7C,EAAQC,EAAa,GAAGpiD,GAAGkB,GACnCihD,EAAQC,EAAa,GAAGpiD,GAAGkB,IAAMgsB,EAAIpmB,GAAKolB,EAAK8W,MAAQ,GACvDmf,EAAQC,EAAa,GAAGpiD,GAAGkB,IAAMgsB,EAAIpmB,GAAKolB,EAAK8W,MAAQ,EAC1D,CAER,CAKD+e,EAAU,GAA6BE,EAAQC,EAAa,GAAG,GAC/DH,EAAU,IAAMA,EAAU,GAE1B,IAAS7gD,EAAIqrB,EAAQsB,QAAU,EAAI,EAAG3sB,GAAK,IAAKA,EAAG,CAC/C,IAAIohD,EAAML,EAAQC,EAAa,GAAI31B,EAAQsB,QAAU,EAAI3sB,GACrDqhD,EAAMN,EAAQC,EAAa,GAAI31B,EAAQsB,QAAU,EAAI3sB,GACzD6gD,EAAUx1B,EAAQsB,QAAU,EAAI3sB,GACV,IADwCohD,EACxDA,EAAKC,EAAKA,EACnB,CACD,IAASviD,EAAI,EAAGA,GAAK,IAAKA,EAAG,CACzBgiD,EAAYhiD,GAAG,GAAMmiD,EAAQC,EAAa,GAAIpiD,GAAG,GACjDgiD,EAAYhiD,GAAG,IAAMgiD,EAAYhiD,GAAG,GACpC,IAASkB,EAAIqrB,EAAQkV,UAAY,EAAI,EAAGvgC,GAAK,IAAKA,EAAG,CAC7CohD,EAAMH,EAAQC,EAAa,GAAIpiD,GAAGusB,EAAQkV,UAC5C,EAAIvgC,GACFqhD,EAAMJ,EAAQC,EAAa,GAAIpiD,GAAGusB,EAAQkV,UAC5C,EAAIvgC,GACN8gD,EAAYhiD,GAAGusB,EAAQkV,UAAY,EAAIvgC,GACjB,IAD+CohD,EAC/DA,EAAKC,EAAKA,EACnB,CACJ,CAGG,IAAIC,EAAc,EAClB,IAASthD,EAAI,GAAIA,EAAIqrB,EAAQiV,SAAUtgC,IACnCshD,GAAeT,EAAU7gD,GAKjC,GAHIiuB,EAAI2O,SAAS2F,GAAO+e,EAGpBzyB,EAAI+P,SAAU,CACd,IAAS5+B,EAAI,EAAGA,EAAIqrB,EAAQiV,SAAUtgC,IAClCiuB,EAAI4Q,MAAMG,OAAOmiB,GAAQ5e,GAAKviC,GAAKiuB,EAAI4Q,MAAM0iB,YAAYhf,GAAKviC,GAC9DiuB,EAAI4Q,MAAM0iB,YAAYhf,GAAKviC,GAAK6gD,EAAU7gD,GAE9CiuB,EAAI4Q,MAAMhG,GAAGsoB,GAAQ5e,GAAOtU,EAAI4K,GAAG0J,EACtC,CAK2B,GAAxB1T,EAAI+gB,kBAAyBrN,EAAM,IAEnCtU,EAAIkQ,YAAYgjB,GAAQ5e,GAAOtU,EAAI8pB,iBAAiBxV,GACpDtU,EAAI8pB,iBAAiBxV,GAAOme,EAAuBG,EAAW5yB,GAErE,CAuBD,IAUIuzB,EACAC,EACAC,EAUAC,EAAM,CAAC,EAAK,OAAS,OAAS,OAC9B,OAAS,OAAS,OAAS,OAAS,QAQpCC,EAAS,CAAC,OAAS,OACnB,QAAU,QAAS,aAAmB,aACtC,aAAmB,aAAmB,QAAU,QAChD,MAAQ,MAAO,aAAmB,QAAU,QAC5C,QAAU,QAAS,QAAU,QAAS,aACtC,aAAmB,QAAU,QAAS,QAAU,QAChD,aAAmB,aAAmB,QAAU,QAChD,aAAmB,QAAU,QAAS,OAAS,OAC/C,aAAmB,aAAmB,GAEtCC,EAAS,CAAC,aACV,QAAU,QAAS,QAAU,QAAS,QAAU,QAChD,QAAU,QAAS,OAAS,OAAQ,aACpC,QAAU,QAAS,aAAmB,GAEtCC,EAAS,CAAC,aACV,QAAU,QAAS,aAAmB,QAAU,QAChD,QAAU,QAAS,QAAU,QAAS,QAAU,QAChD,QAAU,QAAS,aAAmB,QAAU,QAChD,QAAU,QAAS,QAAU,QAAS,aACtC,cAKJ,SAASC,EAASC,EAAIC,EAAIC,EAAIpjD,EAAGmvB,EAAKk0B,GAClC,IAAIppB,EAEJ,GAAIkpB,EAAKD,EAAI,CACT,KAAIC,EAAMD,EAAKP,GAGX,OAAQO,EAAKC,EAFblpB,EAAQkpB,EAAKD,CAGpB,KAAM,CACH,GAAIA,GAAOC,EAAKR,EACZ,OAAQO,EAAKC,EACjBlpB,EAAQipB,EAAKC,CAChB,CAQD,GALAx2B,EAAOu2B,GAAM,GACbv2B,EAAOw2B,GAAM,GAEbD,GAAMC,EAEDnjD,EAAI,GAAM,EAAO,CAIlB,GAAIi6B,GAASyoB,EAET,OAAOQ,EAIX,IAAI5lD,EAAI,EAAK4uB,EAAKo3B,aAAarpB,EAAO,IACtC,OAAOipB,EAAKH,EAAOzlD,EACtB,CASD,IAWY+iC,EAAGv5B,EAXXxJ,EAAI,EAAI4uB,EAAKo3B,aAAarpB,EAAO,IAOrC,OALIkpB,EADc,GAAdE,EACKl0B,EAAIiQ,IAAIzR,KAAKy1B,GAAMj0B,EAAIiQ,IAAIrS,OAE3BoC,EAAIiQ,IAAI3R,KAAK21B,GAAMj0B,EAAIiQ,IAAIrS,OAEpCJ,EAAOw2B,GAAM,GACTD,EAAKN,EAAWO,EAGZD,EAAKC,GAGL9iB,EAAI,EACA/iC,GAAK,KACL+iC,EAAI2iB,EAAO1lD,IAEfwJ,EAAIolB,EAAKo3B,aAAaJ,EAAKC,EAAI,GAAO,IAC/BD,IAAOJ,EAAOxlD,GAAK+iC,GAAKv5B,EAAIu5B,IAGnC/iC,EAAI,GACG4lD,EAEJA,EAAKF,EAAO1lD,GAIhB4lD,EAAKJ,EAAOxlD,EACtB,CAED,IAAIimD,EAAU,CAAC,aACX,QAAU,QAAS,QAAU,QAAS,QAAU,QAChD,QAAU,QAAS,OAAS,OAAQ,aACpC,QAAU,QAAS,aAAmB,GAK1C,SAASC,EAAgBN,EAAIC,EAAInjD,GAC7B,IAAIi6B,EAQJ,GANIipB,EAAK,IACLA,EAAK,GAELC,EAAK,IACLA,EAAK,GAELD,GAAM,EACN,OAAOC,EAEX,GAAIA,GAAM,EACN,OAAOD,EAOX,GAJIjpB,EADAkpB,EAAKD,EACGC,EAAKD,EAELA,EAAKC,GAEZ,GAAKnjD,GAAKA,GAAK,EAAG,CAGnB,GAAIi6B,GAASyoB,EACT,OAAOQ,EAAKC,EAEZ,IAAI7lD,EAAI,EAAK4uB,EAAKo3B,aAAarpB,EAAO,IACtC,OAAQipB,EAAKC,GAAMI,EAAQjmD,EAElC,CACD,OAAI28B,EAAQ0oB,EACDO,EAAKC,GAEZD,EAAKC,IACLD,EAAKC,GAEFD,EACV,CA4HD,SAASO,EAA6Bt0B,EAAKu0B,EAAIC,EAAKlgB,EAAKmgB,GACrD,IAAIC,EAAI7jD,EACJ8jD,EAAM,EACNC,EAAO,EACX,IAAKF,EAAK7jD,EAAI,EAAG6jD,EAAKt3B,EAAQa,UAAWptB,IAAK6jD,EAAI,CAI9C,IAHA,IAAIG,EAAU70B,EAAIoqB,KAAKsK,GACnBpK,EAAUtqB,EAAIsqB,QACdwK,EAAQD,EAAUvK,EAAUuK,EAAUvK,EACnCz5C,EAAIikD,GACPt3B,EAAO+2B,EAAG1jD,IAAM,GAEhB2sB,EAAOg3B,EAAI3jD,IAAM,GACjB8jD,GAAOJ,EAAG1jD,GACV+jD,GAAQJ,EAAI3jD,GACZA,IAKJ,GAHAmvB,EAAI4Z,GAAGtF,GAAK97B,EAAEk8C,GAAID,GAAUE,EAC5B30B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAID,GAAUG,EAEzB/jD,GAAKy5C,EAAS,GACZoK,EACF,KACH,CACDl3B,EAAO+2B,EAAG1jD,IAAM,GAEhB2sB,EAAOg3B,EAAI3jD,IAAM,GAGb,IAAIkkD,EAAS/0B,EAAIgM,IAAIyP,YAAYiZ,GAC7BM,EAAS,EAAMD,EACnBJ,EAAMI,EAASR,EAAG1jD,GAClB+jD,EAAOG,EAASP,EAAI3jD,GACpBmvB,EAAI4Z,GAAGtF,GAAK97B,EAAEk8C,GAAID,IAAWE,EAC7B30B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAID,IAAWG,EAC9BD,EAAMK,EAAST,EAAG1jD,GAClB+jD,EAAOI,EAASR,EAAI3jD,EAE3B,CAED,KAAO6jD,EAAKt3B,EAAQa,UAAWy2B,EAC3B10B,EAAI4Z,GAAGtF,GAAK97B,EAAEk8C,GAAID,GAAU,EAC5Bz0B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAID,GAAU,CAEpC,CAKD,SAASQ,EAA6Bj1B,EAAKu0B,EAAIC,EAAKlgB,GAChD,IAAIogB,EAAI7jD,EACJ8jD,EAAM,EACNC,EAAO,EACX,IAAKF,EAAK7jD,EAAI,EAAG6jD,EAAKt3B,EAAQY,UAAWntB,IAAK6jD,EAAI,CAI9C,IAHA,IAAIQ,EAAUl1B,EAAIkqB,KAAKwK,GACnBrK,EAAUrqB,EAAIqqB,QACdyK,EAAQI,EAAU7K,EAAU6K,EAAU7K,EACnCx5C,EAAIikD,GACPt3B,EAAO+2B,EAAG1jD,IAAM,GAEhB2sB,EAAOg3B,EAAI3jD,IAAM,GACjB8jD,GAAOJ,EAAG1jD,GACV+jD,GAAQJ,EAAI3jD,GACZA,IAKJ,GAHAmvB,EAAI4Z,GAAGtF,GAAKvW,EAAE22B,GAAMC,EACpB30B,EAAI2Z,IAAIrF,GAAKvW,EAAE22B,GAAME,EAEjB/jD,GAAKw5C,EAAS,GACZqK,EACF,KACH,CACDl3B,EAAO+2B,EAAG1jD,IAAM,GAChB2sB,EAAOg3B,EAAI3jD,IAAM,GAGb,IAAIkkD,EAAS/0B,EAAIgM,IAAIwP,YAAYkZ,GAC7BM,EAAS,EAAMD,EACnBJ,EAAMI,EAASR,EAAG1jD,GAClB+jD,EAAOG,EAASP,EAAI3jD,GACpBmvB,EAAI4Z,GAAGtF,GAAKvW,EAAE22B,IAAOC,EACrB30B,EAAI2Z,IAAIrF,GAAKvW,EAAE22B,IAAOE,EACtBD,EAAMK,EAAST,EAAG1jD,GAClB+jD,EAAOI,EAASR,EAAI3jD,EAE3B,CAED,KAAO6jD,EAAKt3B,EAAQY,UAAW02B,EAC3B10B,EAAI4Z,GAAGtF,GAAKvW,EAAE22B,GAAM,EACpB10B,EAAI2Z,IAAIrF,GAAKvW,EAAE22B,GAAM,CAE5B,CAED,SAASS,EAAkBv0B,EAAKiyB,EAAa0B,EAAIC,EAAKlgB,EAAKmgB,GACvD,IACI1iD,EAAGlB,EADHmvB,EAAMY,EAAIE,eAGd,IAAKjwB,EAAIkB,EAAI,EAAGlB,EAAImvB,EAAIsqB,UAAWz5C,EAAG,CAGlC,IAFA,IAAIukD,EAAM,EAAGhS,EAAI,EACbjd,EAAInG,EAAIyqB,WAAW55C,GACd1C,EAAI,EAAGA,EAAIg4B,IAAKh4B,IAAK4D,EAAG,CAC7B,IAAIsjD,EAAKxC,EAAY4B,GAAQ1iD,GAC7BqjD,GAAOC,EACHjS,EAAIiS,IACJjS,EAAIiS,EACX,CACDd,EAAG1jD,GAAKukD,CACX,CAGD,IAFA53B,EAAO3sB,GAAKmvB,EAAIsqB,SAChB9sB,EAAY,KAALzrB,GACFA,EAAIlB,EAAI,EAAGA,EAAImvB,EAAIsqB,QAASz5C,IAAK,CAClC,IAAIojD,EAAKj0B,EAAIwqB,QAAQ35C,GAAG,GACpBykD,EAAMt1B,EAAI4pB,MAAM73C,KAAOwiD,EAAGN,GAE9B,MADEA,EACKA,GAAMj0B,EAAIwqB,QAAQ35C,GAAG,IACxBykD,GAAOt1B,EAAI4pB,MAAM73C,GAAKwiD,EAAGN,KACvBliD,IACAkiD,EAIF,IAAIz4C,EAnlBD,EAmlBgBwkB,EAAI0pB,MAAMpV,GAAKzjC,GAGtC,GAFI2jD,EAAI3jD,GAAK6J,KAAK+lB,IAAI60B,EAAK95C,GAEvBwkB,EAAImrB,cAAoB,EAAN7W,IAAYlX,EAAQuL,WAAY,CAE9CntB,EAvlBA,GAulBgBwkB,EAAI2pB,MAAMrV,GAAKzjC,GAAnC,IACI4K,EAAI+4C,EAAI3jD,GACZ2jD,EAAI3jD,GAAK6J,KAAK+lB,IAAIjlB,EAAGC,EACxB,CAEDukB,EAAI2pB,MAAMrV,GAAKzjC,GAAKmvB,EAAI0pB,MAAMpV,GAAKzjC,GACnCmvB,EAAI0pB,MAAMpV,GAAKzjC,GAAKykD,EACpB93B,EAAOg3B,EAAI3jD,IAAM,EACpB,CACD,KAAOA,GAAKusB,EAAQmB,SAAU1tB,EAC1B0jD,EAAG1jD,GAAK,EACR2jD,EAAI3jD,GAAK,CAEhB,CA8CD,SAAS0kD,EAAU/5C,EAAGC,EAAG9D,GAErB,OAAIA,GAAK,EAEE6D,EAEP7D,GAAK,EACE8D,EACPA,EAAI,EAEIf,KAAK0xB,IAAI5wB,EAAIC,EAAG9D,GAAK8D,EAG1B,CACV,CAKD,IAAI+5C,EAAY,CAAC,KAAM,KAAM,KAAM,GAAI,KACnC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAIxC,SAASC,EAASC,EAAIvpB,GAElB,IADA,IAAIwpB,EAAO,OACFjB,EAAK,EAAGA,EAAKt3B,EAAQa,QAAU,EAAGy2B,IACvC,IAAK,IAAID,EAAS,EAAGA,EAAS,EAAGA,IAAU,CACvC,IAAI9a,EAAM+b,EAAG/b,IAAInhC,EAAEk8C,GAAID,GAEvB,GADAj3B,EAAOk3B,EAAKc,EAAU1mD,QAClB6qC,EAAM,EAAK,CACX,IAAIn+B,EAAIm+B,EAAMxN,EACVyN,EAAK8b,EAAG9b,GAAGphC,EAAEk8C,GAAID,GACjB7a,EAAKp+B,IACDo+B,EAAS,KAAJp+B,EACLm6C,GAAQH,EAAUd,IAAO,GAAOtC,IAEhC50B,EAAOhiB,EAAI,GACXm6C,GAAQH,EAAUd,GAAM33B,EAAK64B,WAAWhc,EAAKp+B,IAGxD,CACJ,CAGL,OAAOm6C,CACV,CAKD,IAAIE,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IACtC,KAAM,KAAM,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACpD,KAAM,KAAM,KAAM,KAAM,OAI5B,SAASC,EAASJ,EAAIvpB,GAElB,IADA,IAAI4pB,EAAO,SACFrB,EAAK,EAAGA,EAAKt3B,EAAQY,QAAU,EAAG02B,IAAM,CAC7C,IAAI/a,EAAM+b,EAAG/b,IAAI5b,EAAE22B,GAEnB,GADAl3B,EAAOk3B,EAAKmB,EAAU/mD,QAClB6qC,EAAM,EAAK,CACX,IAAIn+B,EAAIm+B,EAAMxN,EACVyN,EAAK8b,EAAG9b,GAAG7b,EAAE22B,GACb9a,EAAKp+B,IACDo+B,EAAS,KAAJp+B,EACLu6C,GAAQF,EAAUnB,IAAO,GAAOtC,IAEhC50B,EAAOhiB,EAAI,GACXu6C,GAAQF,EAAUnB,GAAM33B,EAAK64B,WAAWhc,EAAKp+B,IAGxD,CACJ,CACD,OAAOu6C,CACV,CAED,SAASC,EAAYh2B,EAAK4yB,EAAW2B,EAAIn4C,EAAK65C,GAC1C,IAAIplD,EAAGkB,EAEP,IAAKlB,EAAIkB,EAAI,EAAGlB,EAAImvB,EAAIqqB,UAAWx5C,EAAG,CAClC,IACI1C,EADAinD,EAAM,EAAGhS,EAAI,EAEjB,IAAKj1C,EAAI,EAAGA,EAAI6xB,EAAI0qB,WAAW75C,KAAM1C,IAAK4D,EAAG,CACzC,IAAIsjD,EAAKzC,EAAU7gD,GACnByrB,EAAO63B,GAAM,GACbD,GAAOC,EACHjS,EAAIiS,IACJjS,EAAIiS,EACX,CACDd,EAAG1jD,GAAKukD,EACRh5C,EAAIvL,GAAKuyC,EACT6S,EAAIplD,GAAKukD,EAAMp1B,EAAI2qB,YAAY95C,GAC/B2sB,EAAOwC,EAAI2qB,YAAY95C,IAAM,GAC7B2sB,EAAO43B,GAAO,GACd53B,EAAO+2B,EAAG1jD,IAAM,GAChB2sB,EAAOphB,EAAIvL,IAAM,GACjB2sB,EAAOy4B,EAAIplD,IAAM,EACpB,CACJ,CAED,SAASqlD,EAAkBl2B,EAAK5jB,EAAK65C,EAAKE,GACtC,IAAIC,EAAiB1C,EAAI5kD,OAAS,EAC9B+B,EAAI,EACJD,EAAIqlD,EAAIplD,GAAKolD,EAAIplD,EAAI,IACzB2sB,EAAO5sB,GAAK,GACRA,EAAI,KACAwyC,EAAIhnC,EAAIvL,IACJuL,EAAIvL,EAAI,KACZuyC,EAAIhnC,EAAIvL,EAAI,IAChB2sB,EAAQwC,EAAI0qB,WAAW75C,GAAKmvB,EAAI0qB,WAAW75C,EAAI,GAAK,EAAK,IAGrDwR,EAAI,GAFRzR,EAAI,IAAY,EAAJwyC,EAAUxyC,IACfA,GAAKovB,EAAI0qB,WAAW75C,GAAKmvB,EAAI0qB,WAAW75C,EAAI,GAAK,MAEhDulD,IACJ/zC,EAAI+zC,GACRD,EAAStlD,GAAKwR,GAEd8zC,EAAStlD,GAAK,EAGlB,IAAKA,EAAI,EAAGA,EAAImvB,EAAIqqB,QAAU,EAAGx5C,IAAK,CAI9B,IAAIuyC,EAUA/gC,EAXR,GAFAzR,EAAIqlD,EAAIplD,EAAI,GAAKolD,EAAIplD,GAAKolD,EAAIplD,EAAI,GAClC2sB,EAAO5sB,GAAK,GACRA,EAAI,GACAwyC,EAAIhnC,EAAIvL,EAAI,IACRuL,EAAIvL,KACRuyC,EAAIhnC,EAAIvL,IACRuyC,EAAIhnC,EAAIvL,EAAI,KACZuyC,EAAIhnC,EAAIvL,EAAI,IAChB2sB,EAAQwC,EAAI0qB,WAAW75C,EAAI,GAAKmvB,EAAI0qB,WAAW75C,GAAKmvB,EAAI0qB,WAAW75C,EAAI,GAAK,EAAK,IAK7EwR,EAAI,GAJRzR,EAAI,IACO,EAAJwyC,EAAUxyC,IACVA,GAAKovB,EAAI0qB,WAAW75C,EAAI,GAAKmvB,EAAI0qB,WAAW75C,GAC7CmvB,EAAI0qB,WAAW75C,EAAI,GAAK,MAEtBulD,IACJ/zC,EAAI+zC,GACRD,EAAStlD,GAAKwR,OAEd8zC,EAAStlD,GAAK,CAErB,EACD2sB,EAAO3sB,EAAI,GACX2sB,EAAO3sB,GAAKmvB,EAAIqqB,QAAU,GAE1Bz5C,EAAIqlD,EAAIplD,EAAI,GAAKolD,EAAIplD,GACrB2sB,EAAO5sB,GAAK,GACRA,EAAI,KACAwyC,EAAIhnC,EAAIvL,EAAI,IACRuL,EAAIvL,KACRuyC,EAAIhnC,EAAIvL,IACZ2sB,EAAQwC,EAAI0qB,WAAW75C,EAAI,GAAKmvB,EAAI0qB,WAAW75C,GAAK,EAAK,IAGrDwR,EAAI,GAFRzR,EAAI,IAAY,EAAJwyC,EAAUxyC,IACfA,GAAKovB,EAAI0qB,WAAW75C,EAAI,GAAKmvB,EAAI0qB,WAAW75C,GAAK,MAEhDulD,IACJ/zC,EAAI+zC,GACRD,EAAStlD,GAAKwR,GAEd8zC,EAAStlD,GAAK,EAElB2sB,EAAO3sB,GAAMmvB,EAAIqqB,QAAU,EAC9B,CAED,IAAIhZ,EAAU,EACV,aAAkB,WAAiB,YAAkB,UACrD,YAAkB,UAAgB,UAAkB,UACpD,aAAkB,SAoYtB,SAASglB,EAAqBz1B,EAAKyI,EAAQkL,EAAQD,EAAK4e,EAAQN,EAAWE,EAASC,GAChF,IAAI/yB,EAAMY,EAAIE,eACd,GAAIwT,EAAM,EACN6d,EAAI1d,SAASzU,EAAK8yB,EAAQC,GAAaze,EAAKjL,EAAQkL,QACjD,GAAW,GAAPD,EAEP,IAAK,IAAIviC,EAAIqrB,EAAQsB,QAAU,EAAG3sB,GAAK,IAAKA,EAAG,CAC3C,IAAIgsB,EAAI+0B,EAAQC,EAAa,GAAGhhD,GAC5B4F,EAAIm7C,EAAQC,EAAa,GAAGhhD,GAChC+gD,EAAQC,EAAa,GAAGhhD,IAAMgsB,EAAIpmB,GAAKolB,EAAK8W,MAAQ,GACpDif,EAAQC,EAAa,GAAGhhD,IAAMgsB,EAAIpmB,GAAKolB,EAAK8W,MAAQ,EACvD,CAML+e,EAAU,GAA6BE,EAAQC,EAAa,GAAG,GAC/DH,EAAU,IAAMA,EAAU,GAE1B,IAAS7gD,EAAIqrB,EAAQsB,QAAU,EAAI,EAAG3sB,GAAK,IAAKA,EAAG,CAC/C,IAAIohD,EAAKL,EAAQC,EAAa,GAAG31B,EAAQsB,QAAU,EAAI3sB,GACnDqhD,EAAKN,EAAQC,EAAa,GAAG31B,EAAQsB,QAAU,EAAI3sB,GACvD6gD,EAAUx1B,EAAQsB,QAAU,EAAI3sB,GACV,IADwCohD,EACxDA,EAAKC,EAAKA,EACnB,CAGG,IAAIC,EAAc,EAClB,IAASthD,EAAI,GAAIA,EAAIqrB,EAAQiV,SAAUtgC,IACnCshD,GAAeT,EAAU7gD,GAKjC,GAHIiuB,EAAI2O,SAAS2F,GAAO+e,EAGpBzyB,EAAI+P,SAAU,CACd,IAAS5+B,EAAI,EAAGA,EAAIqrB,EAAQiV,SAAUtgC,IAClCiuB,EAAI4Q,MAAMG,OAAOmiB,GAAQ5e,GAAKviC,GAAKiuB,EAAI4Q,MAAM0iB,YAAYhf,GAAKviC,GAC9DiuB,EAAI4Q,MAAM0iB,YAAYhf,GAAKviC,GAAK6gD,EAAU7gD,GAE9CiuB,EAAI4Q,MAAMhG,GAAGsoB,GAAQ5e,GAAOtU,EAAI4K,GAAG0J,EACtC,CACJ,CAED,SAASgiB,EAAqB11B,EAAKyI,EAAQkL,EAAQD,EAAKmgB,EAAQ5B,EAAaG,EAASC,GAClF,IAAIjzB,EAAMY,EAAIE,eAKd,GAHc,GAAV2zB,GAAengB,EAAM,GACrB6d,EAAI/d,UAAUpU,EAAKgzB,EAAQC,GAAa3e,EAAKjL,EAAQkL,GAE9C,GAAPD,EAEA,IAAK,IAAIviC,EAAIqrB,EAAQkV,UAAY,EAAGvgC,GAAK,IAAKA,EAAG,CAC7C,IAAIgsB,EAAIi1B,EAAQC,EAAa,GAAGwB,GAAQ1iD,GACpC4F,EAAIq7C,EAAQC,EAAa,GAAGwB,GAAQ1iD,GACxCihD,EAAQC,EAAa,GAAGwB,GAAQ1iD,IAAMgsB,EAAIpmB,GAAKolB,EAAK8W,MAAQ,GAC5Dmf,EAAQC,EAAa,GAAGwB,GAAQ1iD,IAAMgsB,EAAIpmB,GAAKolB,EAAK8W,MAAQ,EAC/D,CAMLgf,EAAY4B,GAAQ,GAAKzB,EAAQC,EAAa,GAAGwB,GAAQ,GACzD5B,EAAY4B,GAAQ,IAAM5B,EAAY4B,GAAQ,GAC9C,IAAS1iD,EAAIqrB,EAAQkV,UAAY,EAAI,EAAGvgC,GAAK,IAAKA,EAAG,CACjD,IAAIohD,EAAKH,EAAQC,EAAa,GAAGwB,GAAQr3B,EAAQkV,UAAY,EAAIvgC,GAC7DqhD,EAAKJ,EAAQC,EAAa,GAAGwB,GAAQr3B,EAAQkV,UAAY,EAAIvgC,GACjE8gD,EAAY4B,GAAQr3B,EAAQkV,UAAY,EAAIvgC,GACtB,IADoDohD,EACpEA,EAAKC,EAAKA,EACnB,CACJ,CAKD,SAASmD,EAAwC31B,EAAKsyB,EAAQ5e,EAAKse,GAC/D,IAAI5yB,EAAMY,EAAIE,eACc,GAAxBF,EAAI+gB,kBAAyBrN,EAAM,IAEnCtU,EAAIkQ,YAAYgjB,GAAQ5e,GAAOtU,EAAI8pB,iBAAiBxV,GACpDtU,EAAI8pB,iBAAiBxV,GAAOme,EAAuBG,EAAW5yB,GAErE,CApdDnoB,KAAKg4B,iBAAmB,SAAUjP,EAAKyI,EAAQkL,EAAQ2e,EAAQsD,EAAeC,EAAkBC,EAAgBC,EAAmB5lB,EAAQ6lB,GAKvI,IAeIC,EAAQviB,EACRzjC,EAAG1C,EAAG4D,EAAGsQ,EACTqyC,EAAID,EAIJqC,EAuTI1V,EA5UJphB,EAAMY,EAAIE,eAGVi2B,EAAU15B,EAAY,CAAC,EAAGD,EAAQsB,UAClCs4B,EAAU35B,EAAY,CAAC,EAAG,EAAGD,EAAQkV,YAGrC2kB,EAAOv6B,EAAUU,EAAQmB,OAAS,GAClC24B,EAAOx6B,EAAUU,EAAQmB,OAAS,GAClCi2B,EAAM93B,EAAUU,EAAQmB,OAAS,GAGjCiR,EAAYlS,EAAQ,GAAI65B,EAAe75B,EAAQ,GAQ/C85B,EAAa/5B,EAAY,CAAC,EAAG,MAE7Bg6B,EAAa/5B,EAAQF,EAAQmB,OAAS,GAAI+4B,EAAah6B,EAAQF,EAAQmB,OAAS,GAwBpF,IAtBAvB,EAAOwJ,KAAK8wB,EAAY,GAExBT,EAAS72B,EAAIgH,aAETpG,EAAIvZ,MAAQkmB,EAASuC,eACrB+mB,EAAS,GAGTC,EADAl2B,EAAI6O,KAAO7S,EAAQoU,QACK,GAAfhR,EAAIqpB,QAAe,EAAMrpB,EAAIiF,SACpCjF,EAAIqpB,QAAU,GACXzoB,EAAI6O,KAAO7S,EAAQumB,QAAUviB,EAAI6O,KAAO7S,EAAQ8S,UAClD9O,EAAI6O,KAAO7S,EAAQ+S,OACb,GAEA,EAQR2E,EAAM,EAAGA,EAAMtU,EAAIgH,aAAcsN,IAAO,CAEzC,IAAIijB,GAASluB,EAAOiL,GAChBkjB,GAAYjjB,EAAS,IAAM,IAAMge,EAAW,IAEhD,IADA/0B,EAA0B,IAAnB6T,EAAQviC,QACVX,EAAI,EAAGA,EAAI,IAAKA,IAAK,CACtB,IAAIspD,GAAMC,GAGV,IAFAD,GAAOF,GAAOC,GAAYrpD,EAAI,IAC9BupD,GAAO,EACF3lD,EAAI,EAAGA,EAAK,EAAyBA,GAAK,EAC3C0lD,IAAQpmB,EAAQt/B,IACTwlD,GAAOC,GAAYrpD,EAAI4D,GAAKwlD,GAAOC,GAAYrpD,EAChDokD,EAAWxgD,IACjB2lD,IAAQrmB,EAAQt/B,EAAI,IACbwlD,GAAOC,GAAYrpD,EAAI4D,EAAI,GAAKwlD,GAAOC,GACxCrpD,EAAIokD,EAAWxgD,EAAI,IAE7BqlD,EAAW9iB,GAAKnmC,GAAKspD,GAAOC,EAC/B,CACDlB,EAActD,GAAQ5e,GAAKsF,GAAG3rC,OAAO+xB,EAAI4Z,GAAGtF,IAC5CkiB,EAActD,GAAQ5e,GAAKqF,IAAI1rC,OAAO+xB,EAAI2Z,IAAIrF,IAC1CuiB,EAAS,IAGTJ,EAAiBvD,GAAQ5e,GAAKsF,GAAG3rC,OAAO+xB,EAAI4Z,GAAGtF,EAAM,IACrDmiB,EAAiBvD,GAAQ5e,GAAKqF,IAAI1rC,OAAO+xB,EAAI2Z,IAAIrF,EAAM,IAE9D,CAED,IAAKA,EAAM,EAAGA,EAAMuiB,EAAQviB,IAAO,CAC/B,IAMIqjB,GAJAC,GAAcl7B,EAAU,IACxBm7B,GAAW,CAAC,EAAG,EAAG,EAAG,GACrBC,GAAmBp7B,EAAU,IAC7Bq7B,GAAkB,EAElB37C,GAAMsgB,EAAUU,EAAQmB,QAAS03B,GAAMv5B,EAAUU,EAAQmB,QACzDy5B,GAAa,CAAC,EAAG,EAAG,EAAG,GACvBpF,GAAYl2B,EAAUU,EAAQiV,UAC9BwgB,GAAcx1B,EAAY,CAAC,EAAGD,EAAQmV,aAc1C,IAPA/U,EAAOwC,EAAIsqB,SAAWltB,EAAQmB,QAC9Bf,EAAOwC,EAAIqqB,SAAWjtB,EAAQmB,QAMzBpwB,EAAI,EAAGA,EAAI,EAAGA,IACfypD,GAAYzpD,GAAK6xB,EAAImR,MAAM0d,iBAAiBva,GAAKnmC,EAAI,GACrDqvB,EAAOwC,EAAImR,MAAM0d,iBAAiBva,GAAKnmC,EAAI,GAAK,GAChD2pD,GAAiB3pD,GAAKypD,GAAYzpD,GAC5B6xB,EAAImR,MAAM0d,iBAAiBva,GAAKnmC,EAAI,GAC1C0pD,GAAS,IAAMD,GAAYzpD,GAG/B,GAAW,GAAPmmC,EACA,IAAKnmC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CACtB,IAAI4vB,GAAGpmB,GACPomB,GAAIq5B,EAAW,GAAGjpD,GAClBwJ,GAAIy/C,EAAW,GAAGjpD,GAClBipD,EAAW,GAAGjpD,GAAK4vB,GAAIpmB,GACvBy/C,EAAW,GAAGjpD,GAAK4vB,GAAIpmB,EAC1B,CAGD,IAAIsgD,GAAKb,EAAiB,EAAN9iB,GAChB4jB,GAAQ,EACZ,IAAK/pD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAGpB,IAFA,IAAIgqD,GAAMD,GAAQ,GACd7uC,GAAI,EACD6uC,GAAQC,GAAKD,KACZ7uC,GAAI3O,KAAK4vB,IAAI2tB,GAAGC,OAChB7uC,GAAI3O,KAAK4vB,IAAI2tB,GAAGC,MAExBl4B,EAAImR,MAAM0d,iBAAiBva,GAAKnmC,GAAKypD,GAAYzpD,EAAI,GAAKkb,GAC1DwuC,GAAS,EAAI1pD,EAAI,IAAMkb,GACnBA,GAAIuuC,GAAYzpD,EAAI,EAAI,IACxBqvB,EAAOo6B,GAAYzpD,EAAI,EAAI,GAAK,GAChCkb,IAAQuuC,GAAYzpD,EAAI,EAAI,IACrBypD,GAAYzpD,EAAI,EAAI,GAAS,GAAJkb,IAChCmU,EAAOnU,GAAI,GACXA,GAAIuuC,GAAYzpD,EAAI,EAAI,IAAU,GAAJkb,KAE9BA,GAAI,EACRyuC,GAAiB3pD,EAAI,GAAKkb,EAC7B,CAGL,GAAIuX,EAAI+P,SAAU,CACd,IAAIn1B,GAAIs8C,GAAiB,GACzB,IAAK3pD,EAAI,EAAGA,EAAI,GAAIA,IACZqN,GAAIs8C,GAAiB3pD,KACrBqN,GAAIs8C,GAAiB3pD,IAC7B6xB,EAAI4Q,MAAME,IAAIoiB,GAAQ5e,GAAOtU,EAAI4Q,MAAMwnB,SAAS9jB,GAChDtU,EAAI4Q,MAAMwnB,SAAS9jB,GAAO94B,EAC7B,CAKD,IAFAm8C,GAA0B,GAAPrjB,EAAYtU,EAAImR,MAAMqQ,aACnCxhB,EAAImR,MAAMoQ,WACXpzC,EAAI,EAAGA,EAAI,GAAIA,IACZ,GAAK6pD,GAAW7pD,EAAI,IACjB2pD,GAAiB3pD,GAAKwpD,KACzBK,GAAW7pD,EAAI,GAAMA,EAAI,EAAK,GAMtC,IAAKA,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpB,IAAI28B,GACA+sB,GAAS1pD,EAAI,GAAK0pD,GAAS1pD,IAC3BqvB,EAAOq6B,GAAS1pD,GAAK,GACrB28B,GAAQ+sB,GAAS1pD,EAAI,GAAK0pD,GAAS1pD,KAEnCqvB,EAAOq6B,GAAS1pD,EAAI,GAAK,GACzB28B,GAAQ+sB,GAAS1pD,GAAK0pD,GAAS1pD,EAAI,IAEnC28B,GAAQ,MACRktB,GAAW7pD,GAAK,EACP,GAALA,IACA6pD,GAAW,GAAK,GAE3B,CA6CD,IA3CqB,GAAjBA,GAAW,IAAyC,GAA9Bh4B,EAAImR,MAAM2d,YAAYxa,KAC5C0jB,GAAW,GAAK,GAEc,GAA9Bh4B,EAAImR,MAAM2d,YAAYxa,IAClB0jB,GAAW,GAAKA,GAAW,GAAKA,GAAW,GAAKA,GAAW,IAAO,IACtED,GAAkB,EAEG,GAAjBC,GAAW,IAA4B,GAAjBA,GAAW,KACjCA,GAAW,GAAK,GACC,GAAjBA,GAAW,IAA4B,GAAjBA,GAAW,KACjCA,GAAW,GAAK,GACC,GAAjBA,GAAW,IAA4B,GAAjBA,GAAW,KACjCA,GAAW,GAAK,IAGpB1jB,EAAM,EACN6iB,EAAa7iB,GAAOyjB,GAEG,GAAnBA,KACAZ,EAAa,GAAKA,EAAa,GAAK,GAQ5CpmB,EAAOuD,GAAOtU,EAAI2O,SAAS2F,GAO3Bqe,EAAa/xB,EAAKgyB,GAAWC,GADnBkE,EACgD,EAANziB,EAF1C0iB,EAGU,EAAN1iB,EAAU4e,EAAQ5e,EAAKjL,EAAQkL,GAK7CyhB,EAAYh2B,EAAK4yB,GAAWqE,EAAM76C,GAAK65C,IACvCC,EAAkBl2B,EAAK5jB,GAAK65C,GAAKoB,GAE5B5C,EAAS,EAAGA,EAAS,EAAGA,IAAU,CACnC,IAAIE,GAAKC,GAIT,IAHAO,EAAkBv0B,EAAKiyB,GAAaqE,EAAM1C,EAAKlgB,EAAKmgB,GACpDH,EAA6Bt0B,EAAKk3B,EAAM1C,EAAKlgB,EAAKmgB,GAE7CC,EAAK,EAAGA,EAAKt3B,EAAQa,QAASy2B,IAAM,CAIrC,GAHAE,GAAO50B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAID,GAE1BG,IA9hCM,GA+hCFoD,GAAWvD,IAAW,GAA+B,GAA1BuD,GAAWvD,EAAS,GAAS,CACxD,IAAI4D,GAAiB,GAAV5D,EAAeA,EAAS,EAAI,EACnCprC,GAAIksC,EAAUv1B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAI2D,IAAMzD,GAhiCzC,GAiiCoBkC,GACtBlC,GAAOl6C,KAAK+lB,IAAIm0B,GAAMvrC,GACzB,CAED,GAA0B,GAAtB2uC,GAAWvD,GAAc,CACrB4D,GAAiB,GAAV5D,EAAeA,EAAS,EAAI,EACnCprC,GAAIksC,EAAUv1B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAI2D,IAAMzD,GACvCtC,EAAkBwE,GACtBlC,GAAOl6C,KAAK+lB,IAAIm0B,GAAMvrC,GACzB,MAAM,GAAe,GAAVorC,GAAyC,GAA1BuD,GAAWvD,EAAS,IAC7B,GAAVA,GAA6C,GAA9Bz0B,EAAImR,MAAM2d,YAAYxa,GAAY,CACjD+jB,GAAiB,GAAV5D,EAAeA,EAAS,EAAI,EACnCprC,GAAIksC,EAAUv1B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAI2D,IAAMzD,GACvCtC,EAAkBwE,GACtBlC,GAAOl6C,KAAK+lB,IAAIm0B,GAAMvrC,GACzB,CAGDsrC,GAAMiD,GAAqB,EAATnD,EAAa,GACzBmD,GAAqB,EAATnD,EAAa,GACzBmD,GAAqB,EAATnD,EAAa,GACG,EAA9BmD,GAAqB,EAATnD,EAAa,GAASE,KAClCC,IAAQ,GAC0B,EAA9BgD,GAAqB,EAATnD,EAAa,GAASE,KAClCC,IAAQ,KAGhB50B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAID,GAAUG,EAChC,CACJ,CASG,IARJ50B,EAAImR,MAAM2d,YAAYxa,GAAO0jB,GAAW,GAMxC31C,EAAI,EAEKxR,EAAI,EAAGA,EAAImvB,EAAIqqB,QAASx5C,IAAK,CAQ9B,IAHA,IAAIojD,GAAKj0B,EAAIuqB,MAAM15C,GAAG,GAClBynD,GAAMrB,EAAKhD,IAAMP,EAAI2D,EAAWpD,KAChCqB,GAAMt1B,EAAI6pB,MAAMxnC,KAAOi2C,KAClBrE,IAAMj0B,EAAIuqB,MAAM15C,GAAG,IACxBynD,GAAMrB,EAAKhD,IAAMP,EAAI2D,EAAWpD,KAChCqB,GAAMxB,EAASwB,GAAKt1B,EAAI6pB,MAAMxnC,KAAOi2C,GAAKrE,GAAIA,GAAKpjD,EAC/CmvB,EAAK,GAEbs1B,IAAO,iBAoBHt1B,EAAImrB,cAAoB,EAAN7W,IAAYlX,EAAQuL,WACtC6rB,EAAI3jD,GAAKykD,GAETd,EAAI3jD,GAAK0kD,EACL76C,KAAK+lB,IAAI60B,GAAK56C,KAAK+lB,IA1nC9B,EA2nCiBT,EAAIwpB,KAAKlV,GAAKzjC,GA1nC9B,GA2nCgBmvB,EAAIypB,KAAKnV,GAAKzjC,KAAMykD,GAAKwB,GAEvC92B,EAAIypB,KAAKnV,GAAKzjC,GAAKmvB,EAAIwpB,KAAKlV,GAAKzjC,GACjCmvB,EAAIwpB,KAAKlV,GAAKzjC,GAAKykD,EACtB,CAEL,KAAOzkD,GAAKusB,EAAQmB,SAAU1tB,EAC1BomD,EAAKpmD,GAAK,EACV2jD,EAAI3jD,GAAK,EAGbokD,EAA6Bj1B,EAAKi3B,EAAMzC,EAAKlgB,EAChD,EAGG1T,EAAIvZ,MAAQkmB,EAAS4Y,QAAUvlB,EAAIvZ,MAAQkmB,EAASuC,cAChDlP,EAAIkhB,aAAe,GAtyB/B,SAAmClhB,EAAKkK,GACpC,IAAI9K,EAAMY,EAAIE,eACd,GAAId,EAAIgH,aAAe,EAAG,CACtB,IAAK,IAAI0tB,EAAK,EAAGA,EAAKt3B,EAAQY,QAAS02B,IAAM,CACzC,IAAI32B,EAAIiC,EAAI2Z,IAAI,GAAG5b,EAAE22B,GACjB/8C,EAAIqoB,EAAI2Z,IAAI,GAAG5b,EAAE22B,GACrB10B,EAAI2Z,IAAI,GAAG5b,EAAE22B,IAAO/8C,EAAImzB,EACxB9K,EAAI2Z,IAAI,GAAG5b,EAAE22B,IAAO32B,EAAI+M,CAC3B,CACD,IAAS4pB,EAAK,EAAGA,EAAKt3B,EAAQa,QAASy2B,IACnC,IAAK,IAAID,EAAS,EAAGA,EAAS,EAAGA,IACzB12B,EAAIiC,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GACrB98C,EAAIqoB,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GACzBz0B,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,IAAW98C,EAAImzB,EAChC9K,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,IAAW12B,EAAI+M,CAG3C,CACJ,CAqxBWytB,CAA0B33B,EAAKA,EAAIkhB,cAIvClhB,EAAIvZ,MAAQkmB,EAASuC,iBApxB7B,SAAgB9P,GACZ,IAAK,IAAI00B,EAAK,EAAGA,EAAKt3B,EAAQY,QAAS02B,IAInC,KAAI10B,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAM,KAAO10B,EAAI2Z,IAAI,GAAG5b,EAAE22B,IACpC10B,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAM,KAAO10B,EAAI2Z,IAAI,GAAG5b,EAAE22B,IAD9C,CAGA,IAAI8D,EAAMx4B,EAAI+pB,MAAM2K,GAAM10B,EAAI4Z,GAAG,GAAG7b,EAAE22B,GAClC+D,EAAO/9C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAC7Bh6C,KAAK+lB,IAAIT,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAK8D,IAE/BA,EAAMx4B,EAAI+pB,MAAM2K,GAAM10B,EAAI4Z,GAAG,GAAG7b,EAAE22B,GAClC,IAAIgE,EAAQh+C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAC9Bh6C,KAAK+lB,IAAIT,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAK8D,IAC/Bx4B,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAM+D,EACnBz4B,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAMgE,CATP,CAYhB,IAAShE,EAAK,EAAGA,EAAKt3B,EAAQa,QAASy2B,IACnC,IAAK,IAAID,EAAS,EAAGA,EAAS,EAAGA,IACzBz0B,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAAU,KAAOz0B,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,IAChDz0B,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAAU,KAAOz0B,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,KAEtD+D,EAAMx4B,EAAIgqB,MAAM0K,GAAM10B,EAAI4Z,GAAG,GAAGphC,EAAEk8C,GAAID,GACtCgE,EAAO/9C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GACjC/5C,KAAK+lB,IAAIT,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAAS+D,IAEvCA,EAAMx4B,EAAIgqB,MAAM0K,GAAM10B,EAAI4Z,GAAG,GAAGphC,EAAEk8C,GAAID,GAClCiE,EAAQh+C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAClC/5C,KAAK+lB,IAAIT,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAAS+D,IAEvCx4B,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAAUgE,EAC3Bz4B,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAAUiE,EAGtC,CAkvBOC,CAAO34B,GACPohB,EAAQxgB,EAAIwgB,MACR1mC,KAAK4vB,IAAI8W,GAAS,GA7uB9B,SAAkBphB,EAAKohB,EAAOwX,GAC1B,IAAIC,EAASzX,EACT0X,EAAWp+C,KAAK0xB,IAAI,GAAIwsB,GAE5BxX,GAAS,EACTyX,GAAU,EACV,IAAK,IAAInE,EAAK,EAAGA,EAAKt3B,EAAQY,QAAS02B,IAEnCqE,EAAO/4B,EAAIiQ,IAAI3R,KAAK0B,EAAIiqB,KAAKyK,IAAQoE,GACrCE,EAAQt+C,KAAK+lB,IAAI/lB,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAKqE,GACxCr+C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAKqE,KAGnB3X,GAFZ6X,EAAOv+C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAKqE,KAClCG,EAAOx+C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAKqE,KAK9Bv7B,GAFAy7B,GADI/nB,EAAI8nB,EAAQH,GAAUI,EAAOC,KAEjCA,GAAQhoB,GACa,GAEzBlR,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAMh6C,KAAK+lB,IAAIw4B,EAAMj5B,EAAI2Z,IAAI,GAAG5b,EAAE22B,IAC/C10B,EAAI2Z,IAAI,GAAG5b,EAAE22B,GAAMh6C,KAAK+lB,IAAIy4B,EAAMl5B,EAAI2Z,IAAI,GAAG5b,EAAE22B,IAInD,IADAoE,GAAc17B,EAAQkV,UAAYlV,EAAQsB,QACjCg2B,EAAK,EAAGA,EAAKt3B,EAAQa,QAASy2B,IACnC,IAAK,IAAID,EAAS,EAAGA,EAAS,EAAGA,IAAU,CACvC,IAAIuE,EAAOC,EAAMC,EAAMH,EAQf7nB,EAPR6nB,EAAO/4B,EAAIiQ,IAAIzR,KAAKwB,EAAImqB,KAAKuK,IAAQoE,GACrCE,EAAQt+C,KAAK+lB,IAAI/lB,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAASsE,GAChDr+C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAASsE,KAI3B3X,GAHZ6X,EAAOv+C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAASsE,KAC1CG,EAAOx+C,KAAK0B,IAAI4jB,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAASsE,KAMtCv7B,GAFAy7B,GADI/nB,EAAI8nB,EAAQ5X,GAAS6X,EAAOC,KAEhCA,GAAQhoB,GACa,GAEzBlR,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAAU/5C,KAAK+lB,IAAIT,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GACjDwE,GACJj5B,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GAAU/5C,KAAK+lB,IAAIT,EAAI2Z,IAAI,GAAGnhC,EAAEk8C,GAAID,GACjDyE,EACP,CAER,CAisBWC,CAASn5B,EAAKohB,EAAOxgB,EAAI8nB,SAAW1oB,EAAIiQ,IAAIrS,SAWpD,IAxjBJ,SAAwBgD,EAAKu2B,EAAcP,EAAapnB,GACpD,IAAIxP,EAAMY,EAAIE,eAEVF,EAAIyf,cAAgBvjB,EAAWspB,qBAIP,GAAnB+Q,EAAa,IAA8B,GAAnBA,EAAa,KAC1CA,EAAa,GAAKA,EAAa,GAAK,GAMxC,IAAK,IAAI7iB,EAAM,EAAGA,EAAMtU,EAAIgH,aAAcsN,IACtC9E,EAAU8E,GAAOlX,EAAQsK,UAErB9G,EAAIyf,cAAgBvjB,EAAWs8B,wBAC/BjC,EAAa7iB,GAAO,GACpB1T,EAAIyf,cAAgBvjB,EAAWu8B,qBAC/BlC,EAAa7iB,GAAO,GAEC,GAArB6iB,EAAa7iB,IAEb9W,EAAOwC,EAAImrB,cAAc7W,IAAQlX,EAAQoV,YACrCxS,EAAImrB,cAAc7W,IAAQlX,EAAQuL,aAClC6G,EAAU8E,GAAOlX,EAAQqV,aAG7BjD,EAAU8E,GAAOlX,EAAQuL,WACrB3I,EAAImrB,cAAc7W,IAAQlX,EAAQsK,YAClC1H,EAAImrB,cAAc7W,GAAOlX,EAAQoV,YAEjCxS,EAAImrB,cAAc7W,IAAQlX,EAAQqV,YAClCzS,EAAImrB,cAAc7W,GAAOlX,EAAQuL,aAGzCiuB,EAAYtiB,GAAOtU,EAAImrB,cAAc7W,GAErCtU,EAAImrB,cAAc7W,GAAO9E,EAAU8E,EAG1C,CAygBGglB,CAAe14B,EAAKu2B,EAAcP,EAAapnB,GAK1C8E,EAAM,EAAGA,EAAMuiB,EAAQviB,IAAO,CAC/B,IAAIilB,GAEA9qD,GACAinD,GAFA8D,GAAS,EAITllB,EAAM,GACNilB,GAAM5C,EACN6C,IAAU,EACV/qD,GAAO2uB,EAAQsK,UACXkvB,EAAY,IAAMx5B,EAAQuL,YACvBiuB,EAAY,IAAMx5B,EAAQuL,aAC7Bl6B,GAAO2uB,EAAQuL,YACnB+sB,GAAKe,EAAiBvD,GAAQ5e,EAAM,KAEpCilB,GAAM7C,EACN8C,GAAS,EACT/qD,GAAOmoD,EAAYtiB,GACnBohB,GAAKc,EAActD,GAAQ5e,IAG3B7lC,IAAQ2uB,EAAQuL,WAChB4wB,GAAIC,GAASllB,GAAOmhB,EAASC,GAAI11B,EAAImM,eAErCotB,GAAIC,GAASllB,GAAOwhB,EAASJ,GAAI11B,EAAImM,eAErCvL,EAAI+P,WACJ3Q,EAAI4Q,MAAMhG,GAAGsoB,GAAQ5e,GAAOilB,GAAIC,GAASllB,GAEhD,CACD,OAAO,CACV,EAuFD,IAAImlB,EAAW,EAAC,aACZ,WAAiB,YAAkB,UACnC,YAAkB,UAAgB,UAClC,UAAe,aAAkB,SA2LrC,SAASC,EAAsB15B,EAAKsU,EAAKmgB,GACrC,GAAc,GAAVA,EACA,IAAK,IAAI5jD,EAAI,EAAGA,EAAImvB,EAAIsqB,QAASz5C,IAC7BmvB,EAAI2pB,MAAMrV,GAAKzjC,GAAKmvB,EAAI0pB,MAAMpV,GAAKzjC,GACnCmvB,EAAI0pB,MAAMpV,GAAKzjC,GAAK,CAG/B,CAED,SAAS8oD,EAAsB35B,EAAKsU,GAChC,IAAK,IAAIzjC,EAAI,EAAGA,EAAImvB,EAAIqqB,QAASx5C,IAC7BmvB,EAAIypB,KAAKnV,GAAKzjC,GAAKmvB,EAAIwpB,KAAKlV,GAAKzjC,GACjCmvB,EAAIwpB,KAAKlV,GAAKzjC,GAAK,CAE1B,CAmED,SAAS+oD,EAAyBh5B,EAAKiyB,EAAa0B,EAAIC,EAAKlgB,EAAKmgB,GAC9D,IAEItmD,EAAG4D,EAAGlB,EAFNmvB,EAAMY,EAAIE,eACV1kB,EAAM,IAAIy9C,MAAMz8B,EAAQmB,QAAS03B,EAAMv5B,EAAUU,EAAQmB,QAEzD+4B,EAAa,IAAIpU,IAAI9lB,EAAQmB,QAEjC,IAAK1tB,EAAIkB,EAAI,EAAGlB,EAAImvB,EAAIsqB,UAAWz5C,EAAG,CAClC,IAAIukD,EAAM,EAAGhS,EAAI,EACbjd,EAAInG,EAAIyqB,WAAW55C,GACvB,IAAK1C,EAAI,EAAGA,EAAIg4B,IAAKh4B,IAAK4D,EAAG,CACzB,IAAIsjD,EAAKxC,EAAY4B,GAAQ1iD,GAC7BqjD,GAAOC,EACHjS,EAAIiS,IACJjS,EAAIiS,EACX,CACDd,EAAG1jD,GAAKukD,EACR53B,EAAO43B,GAAO,GACdh5C,EAAIvL,GAAKuyC,EACT5lB,EAAO2I,EAAI,GACX8vB,EAAIplD,GAAKukD,EAAMjvB,EACf3I,EAAOy4B,EAAIplD,IAAM,EACpB,CAGD,IAFA2sB,EAAO3sB,GAAKmvB,EAAIsqB,SAChB9sB,EAAY,KAALzrB,GACAlB,EAAIusB,EAAQmB,SAAU1tB,EACzBuL,EAAIvL,GAAK,EACTolD,EAAIplD,GAAK,EAGb,IA9FJ,SAAkCmvB,EAAK5jB,EAAK65C,EAAKE,GAC7C,IAAIC,EAAiB1C,EAAI5kD,OAAS,EAC9B+B,EAAI,EACJD,EAAIqlD,EAAIplD,GAAKolD,EAAIplD,EAAI,GAiBzB,IAhBA2sB,EAAO5sB,GAAK,GACRA,EAAI,IACAwyC,EAAIhnC,EAAIvL,IACJuL,EAAIvL,EAAI,KACZuyC,EAAIhnC,EAAIvL,EAAI,IAChB2sB,EAAQwC,EAAIyqB,WAAW55C,GAAKmvB,EAAIyqB,WAAW55C,EAAI,GAAK,EAAK,IAGrDwR,EAAI,GAFRzR,EAAI,IAAY,EAAJwyC,EAAUxyC,IACfA,GAAKovB,EAAIyqB,WAAW55C,GAAKmvB,EAAIyqB,WAAW55C,EAAI,GAAK,MAEhDulD,IACJ/zC,EAAI+zC,GACRD,EAAStlD,GAAKwR,GAEd8zC,EAAStlD,GAAK,EAGbA,EAAI,EAAGA,EAAImvB,EAAIsqB,QAAU,EAAGz5C,IAAK,CAK9B,IAAIuyC,EAUA/gC,EAdRzR,EAAIqlD,EAAIplD,EAAI,GAAKolD,EAAIplD,GAAKolD,EAAIplD,EAAI,GAClC2sB,EAAO3sB,EAAI,EAAImvB,EAAIsqB,SACnB9sB,EAAO5sB,GAAK,GACRA,EAAI,IACAwyC,EAAIhnC,EAAIvL,EAAI,IACRuL,EAAIvL,KACRuyC,EAAIhnC,EAAIvL,IACRuyC,EAAIhnC,EAAIvL,EAAI,KACZuyC,EAAIhnC,EAAIvL,EAAI,IAChB2sB,EAAQwC,EAAIyqB,WAAW55C,EAAI,GAAKmvB,EAAIyqB,WAAW55C,GAAKmvB,EAAIyqB,WAAW55C,EAAI,GAAK,EAAK,IAK7EwR,EAAI,GAJRzR,EAAI,IACO,EAAJwyC,EAAUxyC,IACVA,GAAKovB,EAAIyqB,WAAW55C,EAAI,GAAKmvB,EAAIyqB,WAAW55C,GAC7CmvB,EAAIyqB,WAAW55C,EAAI,GAAK,MAEtBulD,IACJ/zC,EAAI+zC,GACRD,EAAStlD,GAAKwR,GAEd8zC,EAAStlD,GAAK,CAErB,CACD2sB,EAAO3sB,EAAI,GACX2sB,EAAO3sB,GAAKmvB,EAAIsqB,QAAU,GAE1B15C,EAAIqlD,EAAIplD,EAAI,GAAKolD,EAAIplD,GACrB2sB,EAAO5sB,GAAK,GACRA,EAAI,IACAwyC,EAAIhnC,EAAIvL,EAAI,IACRuL,EAAIvL,KACRuyC,EAAIhnC,EAAIvL,IACZ2sB,EAAQwC,EAAIyqB,WAAW55C,EAAI,GAAKmvB,EAAIyqB,WAAW55C,GAAK,EAAK,IAGrDwR,EAAI,GAFRzR,EAAI,IAAY,EAAJwyC,EAAUxyC,IACfA,GAAKovB,EAAIyqB,WAAW55C,EAAI,GAAKmvB,EAAIyqB,WAAW55C,GAAK,MAEhDulD,IACJ/zC,EAAI+zC,GACRD,EAAStlD,GAAKwR,GAEd8zC,EAAStlD,GAAK,EAElB2sB,EAAO3sB,GAAMmvB,EAAIsqB,QAAU,EAC9B,CA8BGwP,CAAyB95B,EAAK5jB,EAAK65C,EAAKqB,GACnCvlD,EAAIlB,EAAI,EAAGA,EAAImvB,EAAIsqB,QAASz5C,IAAK,CAClC,IAEIkpD,EAAIC,EACJx+C,EAAG85C,EAAK2E,EAHRhG,EAAKj0B,EAAIwqB,QAAQ35C,GAAG,GACpBwL,EAAO2jB,EAAIwqB,QAAQ35C,GAAG,GAQ1B,IALAkpD,EAAKzC,EAAWrD,GAChB+F,EAAO,EACP1E,EAAMt1B,EAAI4pB,MAAM73C,GAAKwiD,EAAGN,GAAMP,EAAI4D,EAAWrD,MAC3CliD,IACAkiD,EACKA,GAAM53C,GACT09C,GAAMzC,EAAWrD,GACjB+F,GAAQ,EAER1E,EAAMjB,EAAgBiB,EADtB95C,EAAIwkB,EAAI4pB,MAAM73C,GAAKwiD,EAAGN,GAAMP,EAAI4D,EAAWrD,IACbA,EAAKpjD,KACjCkB,IACAkiD,EAINqB,GADA2E,EAAqB,GAAVvG,EADXqG,GAAM,EAAI,EAAIA,IAAO,EAAIC,IAGzBxF,EAAI3jD,GAAKykD,EACTt1B,EAAI2pB,MAAMrV,GAAKzjC,GAAKmvB,EAAI0pB,MAAMpV,GAAKzjC,GACnCmvB,EAAI0pB,MAAMpV,GAAKzjC,GAAKykD,EAQhB95C,EAAIY,EAAIvL,GACR2K,GAAKwkB,EAAIupB,SAAS14C,GAClB2K,GAAKy+C,EACDzF,EAAI3jD,GAAK2K,IACTg5C,EAAI3jD,GAAK2K,GAGbwkB,EAAImM,cAAgB,IACpBqoB,EAAI3jD,IAAMmvB,EAAImM,eAEdqoB,EAAI3jD,GAAK0jD,EAAG1jD,KACZ2jD,EAAI3jD,GAAK0jD,EAAG1jD,IAEZmvB,EAAImM,cAAgB,IACpBqoB,EAAI3jD,IAAMmvB,EAAImM,eAGlB3O,EAAOg3B,EAAI3jD,IAAM,EACpB,CACD,KAAOA,EAAIusB,EAAQmB,SAAU1tB,EACzB0jD,EAAG1jD,GAAK,EACR2jD,EAAI3jD,GAAK,CAEhB,CAED,SAASqpD,EAAyBl6B,EAAK4yB,EAAWqE,EAAMzC,EAAKlgB,GACzD,IAEIzjC,EAFAuL,EAAMsgB,EAAUU,EAAQmB,QAAS03B,EAAMv5B,EAAUU,EAAQmB,QACzD84B,EAAa/5B,EAAQF,EAAQmB,OAAS,GAM1Cy3B,EAAYh2B,EAAK4yB,EAAWqE,EAAM76C,EAAK65C,GACvCC,EAAkBl2B,EAAK5jB,EAAK65C,EAAKoB,GAMjC,IAAIh1C,EAAI,EACR,IAAKxR,EAAI,EAAGA,EAAImvB,EAAIqqB,QAASx5C,IAAK,CAC9B,IAAI2K,EAAG85C,EAAK2E,EAERhG,EAAKj0B,EAAIuqB,MAAM15C,GAAG,GAClBwL,EAAO2jB,EAAIuqB,MAAM15C,GAAG,GACpBkpD,EAAK,EAAGC,EAAO,EAMnB,IALAD,EAAK1C,EAAWpD,GAChB+F,GAAQ,EACR1E,EAAMt1B,EAAI6pB,MAAMxnC,GAAK40C,EAAKhD,GAAMP,EAAI2D,EAAWpD,MAC7C5xC,IACA4xC,EACKA,GAAM53C,GACT09C,GAAM1C,EAAWpD,GACjB+F,GAAQ,EAGR1E,EADIjB,EAAgBiB,EADpB95C,EAAIwkB,EAAI6pB,MAAMxnC,GAAK40C,EAAKhD,GAAMP,EAAI2D,EAAWpD,IACjBA,EAAKpjD,KAE/BwR,IACA4xC,EAoBN,GAhBAqB,GADA2E,EAAqB,GAAVvG,EADXqG,GAAM,EAAI,EAAIA,IAAO,EAAIC,IAkBrBh6B,EAAImrB,cAAoB,EAAN7W,IAAelX,EAAQuL,WAAY,CACrD,IAAIwxB,EAlrDH,EAkrDwBn6B,EAAIwpB,KAAKlV,GAAKzjC,GAEnC2jD,EAAI3jD,GADJspD,EAAY,EACHz/C,KAAK+lB,IAAI60B,EAAK6E,GAadz/C,KAAK+lB,IAAI60B,EAAK2B,EAAKpmD,GAAKyhD,EAExC,KAAM,CACH,IAAI8H,EAnsDF,GAmsD0Bp6B,EAAIypB,KAAKnV,GAAKzjC,GACtCwpD,EArsDH,EAqsD0Br6B,EAAIwpB,KAAKlV,GAAKzjC,GAErCupD,GAAe,IACfA,EAAc9E,GAEd+E,GAAe,IACfA,EAAc/E,GAGd6E,EADAn6B,EAAImrB,cAAoB,EAAN7W,IAAelX,EAAQsK,UAC7BhtB,KAAK+lB,IAAI45B,EAAaD,GAEtBC,EAEhB7F,EAAI3jD,GAAK6J,KAAK+lB,IAAI60B,EAAK6E,EAC1B,CACDn6B,EAAIypB,KAAKnV,GAAKzjC,GAAKmvB,EAAIwpB,KAAKlV,GAAKzjC,GACjCmvB,EAAIwpB,KAAKlV,GAAKzjC,GAAKykD,EAQf95C,EAAIY,EAAIvL,GACR2K,GAAKwkB,EAAIspB,SAASz4C,GAClB2K,GAAKy+C,EACDzF,EAAI3jD,GAAK2K,IACTg5C,EAAI3jD,GAAK2K,GAGbwkB,EAAImM,cAAgB,IACpBqoB,EAAI3jD,IAAMmvB,EAAImM,eAEdqoB,EAAI3jD,GAAKomD,EAAKpmD,KACd2jD,EAAI3jD,GAAKomD,EAAKpmD,IAEdmvB,EAAImM,cAAgB,IACpBqoB,EAAI3jD,IAAMmvB,EAAImM,eAElB3O,EAAOg3B,EAAI3jD,IAAM,EACpB,CACD,KAAOA,EAAIusB,EAAQmB,SAAU1tB,EACzBomD,EAAKpmD,GAAK,EACV2jD,EAAI3jD,GAAK,CAEhB,CA2DD,SAASypD,EAA6B/F,EAAIC,EAAK+F,EAAQC,EAAQ5B,EAAWxX,EAAOjb,GAI7E,IAHA,IAEIuyB,EAAOD,EAFPI,EAAiB,EAARzX,EACT0X,EAAW1X,EAAQ,EAAI1mC,KAAK0xB,IAAI,GAAIwsB,GAAa,EAE5C/nD,EAAI,EAAGA,EAAIs1B,IAAKt1B,EAAG,CACxB,IAAI4pD,EAAMlG,EAAG,GAAG1jD,GACZ6pD,EAAMnG,EAAG,GAAG1jD,GACZ8pD,EAAOnG,EAAI,GAAG3jD,GACd+pD,EAAOpG,EAAI,GAAG3jD,GACdooD,EAAOzE,EAAI,GAAG3jD,GACdqoD,EAAO1E,EAAI,GAAG3jD,GAGlB,GAAI8pD,GAAQ,KAAOC,GAAQA,GAAQ,KAAOD,EAAM,CAC5C,IAAIE,EAAQN,EAAO1pD,GAAK6pD,EACpB1Q,EAAQuQ,EAAO1pD,GAAK4pD,EACxBhC,EAAO/9C,KAAK0B,IAAI68C,EAAMv+C,KAAK+lB,IAAIy4B,EAAM2B,IACrCnC,EAAQh+C,KAAK0B,IAAI88C,EAAMx+C,KAAK+lB,IAAIw4B,EAAMjP,GACzC,MACGyO,EAAOQ,EACPP,EAAQQ,EAEZ,GAAI9X,EAAQ,EAAG,CAKX,IAAI4X,EAAO8B,EACP/B,EAAMyB,EAAO3pD,GAAKioD,EAKtB,GAJAE,EAAQt+C,KAAK+lB,IAAI/lB,KAAK0B,IAAIu+C,EAAM5B,GAAMr+C,KAAK0B,IAAIw+C,EAAM7B,KAGrD+B,GAFA7B,EAAOv+C,KAAK0B,IAAIq8C,EAAMM,KACtBG,EAAOx+C,KAAK0B,IAAIs8C,EAAOK,KAEX,GAAMC,EAAQH,EAAUiC,EAAO,CACvC,IAAI5pB,EAAI8nB,EAAQH,EAASiC,EACzB7B,GAAQ/nB,EACRgoB,GAAQhoB,EACR1T,EAAOs9B,EAAQ,EAClB,CACDrC,EAAO/9C,KAAK+lB,IAAIw4B,EAAMR,GACtBC,EAAQh+C,KAAK+lB,IAAIy4B,EAAMR,EAC1B,CACGD,EAAOgC,IACPhC,EAAOgC,GAEP/B,EAAQgC,IACRhC,EAAQgC,GAEZlG,EAAI,GAAG3jD,GAAK4nD,EACZjE,EAAI,GAAG3jD,GAAK6nD,CACf,CACJ,CAiMD,SAASqC,EAAUC,EAAMC,GACrB,IAAkBC,EAOlB,OAJIA,EAHQF,GAEC,EACQ,IAHTA,IAKQC,KAEN,GACH,EAEJvgD,KAAKygD,IAAID,EAAQ1I,EAC3B,CAED,SAAS4I,EAAeH,GACpB,IAAII,EAAWC,EAEP9/C,EAAI,EACR,IAAKA,EAAI,EAAGu/C,EAAUv/C,EAAGy/C,GAAY,MAAOz/C,GAAK,GAIjD,IAFAuiB,EAAIviB,EACJkmB,EAAI,EACGhnB,KAAK4vB,IAAI5I,EAAI3D,GAAK,OAEjBg9B,EADJv/C,GAAKkmB,EAAI3D,GAAK,EACGk9B,GAAY,EACzBv5B,EAAIlmB,EAEJuiB,EAAIviB,EAGZ6/C,EAAQt9B,EAGR,IAAWA,EAAG2D,EAAVlmB,EAAI,EACR,IAAKA,EAAI,EAAGu/C,EAAUv/C,EAAGy/C,GAAY,MAAOz/C,GAAK,GAIjD,IAFAuiB,EAAI,EACJ2D,EAAIlmB,EACGd,KAAK4vB,IAAI5I,EAAI3D,GAAK,OAEjBg9B,EADJv/C,GAAKkmB,EAAI3D,GAAK,EACGk9B,GAAY,EACzBl9B,EAAIviB,EAEJkmB,EAAIlmB,EAGZ8/C,EAAQ55B,EAGR,IAEIvzB,EAFAixC,EAAM,EACNgE,EAAI,IAER,IAAKj1C,EAAI,EAAGA,GAAKi1C,IAAKj1C,EAAG,CAGrBixC,GADQ2b,EADJv/C,EAAI6/C,EAAQltD,GAAKmtD,EAAQD,GAASjY,EACjB6X,EAExB,CAIG,OAFY7X,EAAI,IAAMhE,GAAOkc,EAAQD,GAKhD,CAKD,SAASE,EAAQP,GACb,IAAIQ,EAAOhgD,EAAG0/C,EAAOO,EAgBrB,OAfAD,EAAQR,EAQJx/C,GANAggD,GADAA,GAAS,EACA,EAEA,MAEA,IAAOA,GAAS,IAErB,IADJC,EAAOD,EAAQ,IACGC,EAAO,EAAMA,GAE3B,GAERP,EAAQ,UAAY,KADpBM,GAAS,MACyB,KAC5B9gD,KAAKghD,KAAK,EAAMF,EAAQA,MAEhB,GACH,GAEXA,EAAQ9gD,KAAKygD,KAAK3/C,EAAI0/C,GAAS1I,GAY/BgJ,GAAS,SAEZ,CAKD,SAASG,GAAUtX,GAKf,OAHIA,EAAO,IACPA,EAAO,GACXA,GAAc,KACP,GAAO3pC,KAAKkhD,KAAK,IAAMvX,GAAQ,IAChC3pC,KAAKkhD,KAAKvX,EAAOA,EAAP,MACnB,CAED,SAASwX,GAAaC,EAAUC,EAAIC,EAAIC,EAAMC,EAAY1D,EAAK2D,EAAMC,EAAOC,EAASC,EAAUC,EAAWC,GACtG,IAGIruD,EAHAsuD,EAAQ//B,EAAUU,EAAQmB,OAAS,GACnCm+B,EAAmBN,GAASI,EAAQ,GAAK,KAAU,KACnDG,EAAYr/B,EAAQF,EAAQiV,UAEhC+pB,GAASC,EACT,IAAItqD,EAAI,EACJ6qD,EAAK,EAGT,IAAKzuD,EAAI,EAAGA,EAAIivB,EAAQmB,OAAQpwB,IAAK,CACjC,IACIsxC,EAKJ,IAJAod,EAAQlB,GAAUS,EAAQrqD,GAE1B0qD,EAAMtuD,GAAKiuD,EAAQrqD,EAEd0tC,EAAK1tC,EAAG4pD,GAAUS,EAAQ3c,GAAMod,EAjqE/B,KAkqEHpd,GAAM4c,EAAU,EAAG5c,KAMtB,IAHAqc,EAAS3tD,GAAKsxC,EAAK1tC,EACnB6qD,EAAKzuD,EAAI,EAEF4D,EAAI0tC,GACPjiB,EAAOzrB,EAAIqrB,EAAQiV,UACnBsqB,EAAU5qD,KAAO5D,EAErB,GAAI4D,EAAIsqD,EAAU,EAAG,CACjBtqD,EAAIsqD,EAAU,IACZluD,EACF,KACH,CACJ,CACDqvB,EAAOrvB,EAAIivB,EAAQmB,QACnBk+B,EAAMtuD,GAAKiuD,EAAQrqD,EAEnB,IAAK,IAAIk2B,EAAM,EAAGA,EAAMu0B,EAAOv0B,IAAO,CAClC,IAAI60B,EAAIC,EAAI3mC,EAAOC,EACf2mC,EACJ5mC,EAAQkmC,EAASr0B,GACjB5R,EAAMimC,EAASr0B,EAAM,IAErB60B,EAAK,EAAIpiD,KAAKC,MAAM,GAAK4hD,GAAanmC,EAAQ,MACrC,IACL0mC,EAAK,IACTC,EAAK,EAAIriD,KAAKC,MAAM,GAAK4hD,GAAalmC,EAAM,MAEnCgmC,EAAU,IACfU,EAAKV,EAAU,GAEnBL,EAAG/zB,IAAQ00B,EAAUG,GAAMH,EAAUI,IAAO,EAC5ChB,EAAG9zB,GAAO00B,EAAUI,GACpB,IAAIE,EAAQP,EAAmBrmC,EAK/B8lC,EAAKl0B,IAAQg1B,EAAQR,EAAMV,EAAG9zB,MACvBw0B,EAAMV,EAAG9zB,GAAO,GAAKw0B,EAAMV,EAAG9zB,KACjCk0B,EAAKl0B,GAAO,EACZk0B,EAAKl0B,GAAO,EAERk0B,EAAKl0B,GAAO,IACZk0B,EAAKl0B,GAAO,GAKpB+0B,EAAMrB,GAAUS,EAAQE,EAASr0B,GAAOs0B,GACxCS,EAAQtiD,KAAK+lB,IAAIu8B,EAAK,MAAQ,KAE9BxE,EAAIvwB,GAAOvtB,KAAK0xB,IAAI,GAChB,MAAQ,EAAI1xB,KAAKk6B,IAAIl6B,KAAKm6B,GAAKmoB,IAAQ,IAC9C,CAGDjrD,EAAI,EACJ,IAAK,IAAIsQ,EAAI,EAAGA,EAAIu6C,EAAIv6C,IAAK,CACzB,IACIw6C,EAAOK,EADP1oB,EAAIsnB,EAASz5C,GAGjBw6C,EAAQlB,GAAUS,EAASrqD,GAC3BmrD,EAAQvB,GAAUS,GAASrqD,EAAIyiC,EAAI,IACnCynB,EAAK55C,GAAK,IAAMw6C,EAAQK,GAExBL,EAAQlB,GAAUS,GAASrqD,EAAI,KAC/BmrD,EAAQvB,GAAUS,GAASrqD,EAAIyiC,EAAI,KACnC0nB,EAAW75C,GAAK66C,EAAQL,EACxB9qD,GAAKyiC,CACR,CAED,OAAOooB,CACV,CAED,SAASO,GAAe5S,EAAO6S,EAAOnB,EAAMC,EAAYmB,EAAMC,GAC1D,IAMIvrD,EANAwrD,EAAKlgC,EAAY,CAACD,EAAQmB,OAAQnB,EAAQmB,SAO1Ci/B,EAAmB,EAWvB,GAAIF,EACA,IAAK,IAAInvD,EAAI,EAAGA,EAAIivD,EAAOjvD,IACvB,IAAK4D,EAAI,EAAGA,EAAIqrD,EAAOrrD,IAAK,CACxB,IAAI2H,EAAI6hD,EAAQU,EAAK9tD,GAAK8tD,EAAKlqD,IAAMmqD,EAAWnqD,GAChDwrD,EAAGpvD,GAAG4D,GAAK2H,EAAI2jD,EAAKlvD,EACvB,MAGL,IAAK4D,EAAI,EAAGA,EAAIqrD,EAAOrrD,IACnB,KAAIkpD,EAAW,GAAKvgD,KAAK+lB,IAAI,GAAKw7B,EAAKlqD,GAAI,IACvC0rD,EAAYrC,EAAeH,GAC/B,IAAS9sD,EAAI,EAAGA,EAAIivD,EAAOjvD,IAAK,CACxBuL,EAAI+jD,EACF1C,EAAUkB,EAAK9tD,GAAK8tD,EAAKlqD,GAAIkpD,GAC7BiB,EAAWnqD,GACjBwrD,EAAGpvD,GAAG4D,GAAK2H,EAAI2jD,EAAKlvD,EACvB,CAPD,CAUR,IAASA,EAAI,EAAGA,EAAIivD,EAAOjvD,IAAK,CAC5B,IAAK4D,EAAI,EAAGA,EAAIqrD,KACRG,EAAGpvD,GAAG4D,GAAK,GADIA,KAMvB,IAFAw4C,EAAMp8C,GAAG,GAAK4D,EAETA,EAAIqrD,EAAQ,EAAGrrD,EAAI,KAChBwrD,EAAGpvD,GAAG4D,GAAK,GADQA,KAI3Bw4C,EAAMp8C,GAAG,GAAK4D,EACdyrD,GAAqBjT,EAAMp8C,GAAG,GAAKo8C,EAAMp8C,GAAG,GAAK,CACpD,CAED,IAAIkb,EAAIqT,EAAU8gC,GACdn7C,EAAI,EACR,IAASlU,EAAI,EAAGA,EAAIivD,EAAOjvD,IACvB,IAAK4D,EAAIw4C,EAAMp8C,GAAG,GAAI4D,GAAKw4C,EAAMp8C,GAAG,GAAI4D,IACpCsX,EAAEhH,KAAOk7C,EAAGpvD,GAAG4D,GAEvB,OAAOsX,CACV,CAED,SAASq0C,GAAcxsB,GAGnB,IAAI8rB,EAAMrB,GAAUzqB,GAGpB,OAFA8rB,EAAOtiD,KAAK+lB,IAAIu8B,EAAK,MAAQ,KAEtBtiD,KAAK0xB,IAAI,GACZ,MAAQ,EAAI1xB,KAAKk6B,IAAIl6B,KAAKm6B,GAAKmoB,IAAQ,IAC9C,CAySD,SAASW,GAAczsB,EAAGhkC,GAuCtB,OAVIgkC,GAAK,KACLA,EAAI,MAGRA,GAAK,IACLA,EAAIx2B,KAAK0B,IAAI,GAAK80B,GACR,KAAQx2B,KAAK0xB,IAAI8E,GAAI,IAAO,IAChCx2B,KAAKygD,KAAK,GAAMzgD,KAAK0xB,IAAI8E,EAAI,IAAK,IAAQ,EAC1Cx2B,KAAKygD,KAAK,IAAOzgD,KAAK0xB,IAAI8E,EAAI,IAAK,IACZ,MAAtB,GAAM,IAAOhkC,GAAiBwN,KAAK0xB,IAAI8E,EAAG,EAEpD,CAzyBDr5B,KAAK+3B,kBAAoB,SAAUhP,EAAKyI,EAAQkL,EAAQ2e,EAAQsD,EAAeC,EAAkBC,EAAgBC,EAAmB5lB,EAAQ6lB,GACxI,IAAI52B,EAAMY,EAAIE,eAKV8xB,EAAYl2B,EAAUU,EAAQiV,UAC9BwgB,EAAcx1B,EAAY,CAAC,EAAGD,EAAQmV,aACtCwkB,EAAU15B,EAAY,CAAC,EAAGD,EAAQsB,UAClCs4B,EAAU35B,EAAY,CAAC,EAAG,EAAGD,EAAQkV,YACrCiiB,EAAKl3B,EAAY,CAAC,EAAGD,EAAQmB,SAAUi2B,EAAMn3B,EAAY,CAAC,EAAGD,EAAQmB,SACrEq/B,EAAmBvgC,EAAY,CAAC,EAAG,IAInC26B,EAAa,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GACpD,CAAC,EAAG,EAAG,EAAG,IACVb,EAAe75B,EAAQ,GAKvBugC,EAAaj9B,EAAIvZ,MAAQkmB,EAASuC,aAAgB,EAChD9P,EAAIgH,cA1lBd,SAAiCpG,EAAKyI,EAAQkL,EAAQ2e,EAAQsD,EAAeC,EAAkB1lB,EAAQ6sB,EAAkB5F,EAAYb,GAQjI,IAPA,IAAIC,EAAa/5B,EAAY,CAAC,EAAG,MAC7B2C,EAAMY,EAAIE,eACVg9B,EAAY99B,EAAIgH,aAEhB62B,EAAaj9B,EAAIvZ,MAAQkmB,EAASuC,aAAgB,EAAIguB,EAGjDxpB,EAAM,EAAGA,EAAMwpB,EAAWxpB,IAAO,CAEtCijB,OAASluB,EAAOiL,GAChB,IAAIkjB,EAAYjjB,EAAS,IAAM,IAAMge,EAAW,IAChD/0B,EAA2B,IAApBi8B,EAAS3qD,QAChB,IAAK,IAAIX,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIspD,EAAMC,EACVD,EAAOF,OAAOC,EAAYrpD,EAAI,IAC9BupD,EAAO,EACP,IAAK,IAAI3lD,EAAI,EAAGA,EAAK,EAAyBA,GAAK,EAC/C0lD,GAAQgC,EAAS1nD,IACVwlD,OAAOC,EAAYrpD,EAAI4D,GAAKwlD,OAAOC,EAAYrpD,EAChDokD,EAAWxgD,IACjB2lD,GAAQ+B,EAAS1nD,EAAI,IACdwlD,OAAOC,EAAYrpD,EAAI4D,EAAI,GAAKwlD,OAAOC,EACxCrpD,EAAIokD,EAAWxgD,EAAI,IAE7BqlD,EAAW9iB,GAAKnmC,GAAKspD,EAAOC,CAC/B,CACDlB,EAActD,GAAQ5e,GAAKsF,GAAG3rC,OAAO+xB,EAAI4Z,GAAGtF,IAC5CkiB,EAActD,GAAQ5e,GAAKqF,IAAI1rC,OAAO+xB,EAAI2Z,IAAIrF,IAC1CupB,EAAY,IAGZpH,EAAiBvD,GAAQ5e,GAAKsF,GAAG3rC,OAAO+xB,EAAI4Z,GAAGtF,EAAM,IACrDmiB,EAAiBvD,GAAQ5e,GAAKqF,IAAI1rC,OAAO+xB,EAAI2Z,IAAIrF,EAAM,IAE9D,CACD,IAASA,EAAM,EAAGA,EAAMupB,EAAWvpB,IAAO,CACtC,IAAIwjB,EAAmBp7B,EAAU,IAC7Bk7B,EAAcl7B,EAAU,IACxBm7B,EAAW,CAAC,EAAG,EAAG,EAAG,GACrBI,EAAKb,EAAiB,EAAN9iB,GAChB4jB,EAAQ,EACRP,EAA0B,GAAPrjB,EAAYtU,EAAImR,MAAMqQ,aACvCxhB,EAAImR,MAAMoQ,WACZwW,EAAkB,EAEtB,GAAW,GAAPzjB,EACA,IAASnmC,EAAI,EAAG4D,EAAI,IAAKA,EAAI,IAAK5D,IAAK4D,EAAG,CACtC,IAAIgsB,EAAIq5B,EAAW,GAAGjpD,GAClBwJ,EAAIy/C,EAAW,GAAGjpD,GACtBipD,EAAW,GAAGjpD,GAAK4vB,EAAIpmB,EACvBy/C,EAAW,GAAGjpD,GAAK4vB,EAAIpmB,CAC1B,CAML,IAASxJ,EAAI,EAAGA,EAAI,EAAGA,IACnBypD,EAAYzpD,GAAK6xB,EAAImR,MAAM0d,iBAAiBva,GAAKnmC,EAAI,GACrDqvB,EAAOwC,EAAImR,MAAM0d,iBAAiBva,GAAKnmC,EAAI,GAAK,GAChD2pD,EAAiB3pD,GAAKypD,EAAYzpD,GAC5B6xB,EAAImR,MAAM0d,iBAAiBva,GAAKnmC,EAAI,GAC1C0pD,EAAS,IAAMD,EAAYzpD,GAG/B,IAASA,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAGxB,IAFA,IAAIgqD,EAAMD,EAAQ,GACd7uC,EAAI,EACD6uC,EAAQC,EAAKD,IACZ7uC,EAAI3O,KAAK4vB,IAAI2tB,EAAGC,MAChB7uC,EAAI3O,KAAK4vB,IAAI2tB,EAAGC,KAExBl4B,EAAImR,MAAM0d,iBAAiBva,GAAKnmC,GAAKypD,EAAYzpD,EAAI,GAAKkb,EAC1DwuC,EAAS,EAAI1pD,EAAI,IAAMkb,EACnBA,EAAIuuC,EAAYzpD,EAAI,EAAI,IACxBqvB,EAAOo6B,EAAYzpD,EAAI,EAAI,GAAK,GAChCkb,GAAQuuC,EAAYzpD,EAAI,EAAI,IACrBypD,EAAYzpD,EAAI,EAAI,GAAS,GAAJkb,GAChCmU,EAAOnU,EAAI,GACXA,EAAIuuC,EAAYzpD,EAAI,EAAI,IAAU,GAAJkb,IAE9BA,EAAI,EAERyuC,EAAiB3pD,EAAI,GAAKkb,CAC7B,CAED,IAASlb,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAIwmD,EAAMiD,EAAgB,EAAJzpD,EAAQ,GACxBypD,EAAgB,EAAJzpD,EAAQ,GAAKypD,EAAgB,EAAJzpD,EAAQ,GAC/C4vD,EAAS,EACgB,EAAzBnG,EAAgB,EAAJzpD,EAAQ,GAASwmD,IAC7BoJ,GAAU,GACmB,EAAzBnG,EAAgB,EAAJzpD,EAAQ,GAASwmD,IAC7BoJ,GAAU,KAGlBH,EAAiBtpB,GAAKnmC,GAAK4vD,CAC9B,CAED,GAAIn9B,EAAI+P,SAAU,CACd,IAAIn1B,EAAIs8C,EAAiB,GACzB,IAAS3pD,EAAI,EAAGA,EAAI,GAAIA,IAChBqN,EAAIs8C,EAAiB3pD,KACrBqN,EAAIs8C,EAAiB3pD,IAG7B6xB,EAAI4Q,MAAME,IAAIoiB,GAAQ5e,GAAOtU,EAAI4Q,MAAMwnB,SAAS9jB,GAChDtU,EAAI4Q,MAAMwnB,SAAS9jB,GAAO94B,CAC7B,CAGD,IAASrN,EAAI,EAAGA,EAAI,GAAIA,IAChB,GAAK6pD,EAAW1jB,GAAKnmC,EAAI,IACtB2pD,EAAiB3pD,GAAKwpD,IACzBK,EAAW1jB,GAAKnmC,EAAI,GAAMA,EAAI,EAAK,GAiB3C,IAASA,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIg+C,EAAI0L,EAAS1pD,EAAI,GACjBuL,EAAIm+C,EAAS1pD,GACTuM,KAAK0B,IAAI+vC,EAAGzyC,GACZ,KACAyyC,EAAI,IAAMzyC,GAAKA,EAAI,IAAMyyC,IAChB,GAALh+C,GAAU6pD,EAAW1jB,GAAK,IAAM0jB,EAAW1jB,GAAKnmC,KAChD6pD,EAAW1jB,GAAK,GAAK,GAEzB0jB,EAAW1jB,GAAKnmC,GAAK,EAGhC,CAEG6pD,EAAW1jB,GAAK,IAAMtU,EAAImR,MAAM2d,YAAYxa,KAC5C0jB,EAAW1jB,GAAK,GAAK,GAGS,GAA9BtU,EAAImR,MAAM2d,YAAYxa,IAClB0jB,EAAW1jB,GAAK,GAAK0jB,EAAW1jB,GAAK,GACvC0jB,EAAW1jB,GAAK,GAAK0jB,EAAW1jB,GAAK,IAAO,IAC9CyjB,EAAkB,EAEQ,GAAtBC,EAAW1jB,GAAK,IAAiC,GAAtB0jB,EAAW1jB,GAAK,KAC3C0jB,EAAW1jB,GAAK,GAAK,GAEC,GAAtB0jB,EAAW1jB,GAAK,IAAiC,GAAtB0jB,EAAW1jB,GAAK,KAC3C0jB,EAAW1jB,GAAK,GAAK,GAEC,GAAtB0jB,EAAW1jB,GAAK,IAAiC,GAAtB0jB,EAAW1jB,GAAK,KAC3C0jB,EAAW1jB,GAAK,GAAK,IAGzBA,EAAM,EACN6iB,EAAa7iB,GAAOyjB,EAEG,GAAnBA,IACAZ,EAAa,GAAKA,EAAa,GAAK,GAQ5CpmB,EAAOuD,GAAOtU,EAAI2O,SAAS2F,EAC9B,CACJ,CAyaG0pB,CAAwBp9B,EAAKyI,EAAQkL,EAAQ2e,EAAQsD,EACjDC,EAAkB1lB,EAAQ6sB,EAAkB5F,EAC5Cb,GAzIR,SAAmCv2B,EAAKu2B,GACpC,IAAIn3B,EAAMY,EAAIE,eAEVF,EAAIyf,cAAgBvjB,EAAWspB,qBAIP,GAAnB+Q,EAAa,IAA8B,GAAnBA,EAAa,KAC1CA,EAAa,GAAKA,EAAa,GAAK,GAExC,IAAK,IAAI7iB,EAAM,EAAGA,EAAMtU,EAAIgH,aAAcsN,IAElC1T,EAAIyf,cAAgBvjB,EAAWs8B,wBAC/BjC,EAAa7iB,GAAO,GAEpB1T,EAAIyf,cAAgBvjB,EAAWu8B,qBAC/BlC,EAAa7iB,GAAO,EAG/B,CAwHG2pB,CAA0Br9B,EAAKu2B,GAI3B,IAAK,IAAI7iB,EAAM,EAAGA,EAAMupB,EAAWvpB,IAAO,CAGtC+hB,EAAqBz1B,EAAKyI,EAAQkL,EAAQD,EAAK4e,EAC3CN,EAFMmE,EADNmH,EAAa,EAAN5pB,GAKXiiB,EAAwC31B,EAAKsyB,EAAQ5e,EACjDse,GAEsB,GAAtBuE,EAAa+G,GACbhE,EAAyBl6B,EAAK4yB,EAAW2B,EAAGjgB,GAAMkgB,EAAIlgB,GAClDA,GAEJqlB,EAAsB35B,EAAKsU,EAElC,CACI6iB,EAAa,GAAKA,EAAa,IAAO,GAEnCv2B,EAAIvZ,MAAQkmB,EAASuC,cACrBwqB,EAA6B/F,EAAIC,EAAKx0B,EAAI4qB,SACtC5qB,EAAIiQ,IAAI3R,KAAMsC,EAAI8nB,SAAW1oB,EAAIiQ,IAAIrS,OACrCgD,EAAIwgB,MAAOphB,EAAIqqB,SAI3B,IAAS/V,EAAM,EAAGA,EAAMupB,EAAWvpB,IAAO,CAEZ,GAAtB6iB,EADA+G,EAAa,EAAN5pB,IAEP2gB,EAA6Bj1B,EAAKu0B,EAAGjgB,GAAMkgB,EAAIlgB,GAAMA,EAE5D,CAKD,IAAK,IAAImgB,EAAS,EAAGA,EAAS,EAAGA,IAAU,CACvC,IAASngB,EAAM,EAAGA,EAAMupB,IAAavpB,EAAK,CAGZ,GAAtB6iB,EAFA+G,EAAa,EAAN5pB,GAGPolB,EAAsB15B,EAAKsU,EAAKmgB,IAIhC6B,EAAqB11B,EAAKyI,EAAQkL,EAAQD,EAAKmgB,EAC3C5B,EAFMmE,EAEgBkH,GAC1BtE,EAAyBh5B,EAAKiyB,EAAa0B,EAAGjgB,GAC1CkgB,EAAIlgB,GAAMA,EAAKmgB,GAE1B,CACI0C,EAAa,GAAKA,EAAa,IAAO,GAEnCv2B,EAAIvZ,MAAQkmB,EAASuC,cACrBwqB,EAA6B/F,EAAIC,EAAKx0B,EAAI6qB,SACtC7qB,EAAIiQ,IAAIzR,KAAMoC,EAAI8nB,SAAW1oB,EAAIiQ,IAAIrS,OACrCgD,EAAIwgB,MAAOphB,EAAIsqB,SAK3B,IAAShW,EAAM,EAAGA,EAAMupB,IAAavpB,EAAK,CAElC,GAAK6iB,EADL+G,EAAa,EAAN5pB,IAEPggB,EAA6Bt0B,EAAKu0B,EAAGjgB,GAAMkgB,EAAIlgB,GAC3CA,EAAKmgB,EAEhB,CACJ,CAGD,IAASngB,EAAM,EAAGA,EAAMupB,EAAWvpB,IAAO,CACtC,IAAI4pB,EAEJ,GAA0B,GAAtB/G,EAFA+G,EAAa,EAAN5pB,GAKX,IAAK,IAAIogB,EAAK,EAAGA,EAAKt3B,EAAQa,QAASy2B,IAAM,CACzC,IAAIyJ,EAAWzhC,EAAU,GACzB,IAAS+3B,EAAS,EAAGA,EAAS,EAAGA,IAAU,CACvC,IAAIG,EAAO50B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAID,GAG9B,GAFAG,GAv8DE,GAy8DEoD,EAAW1jB,GAAKmgB,IAAW,GACO,GAA/BuD,EAAW1jB,GAAKmgB,EAAS,GAAS,CACrC,IAAI4D,EAAiB,GAAV5D,EAAeA,EAAS,EAAI,EACnCprC,EAAIksC,EAAUv1B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAI2D,GAAMzD,EACvCwJ,KACJxJ,EAAOl6C,KAAK+lB,IAAIm0B,EAAMvrC,EACzB,MAAM,GAA+B,GAA3B2uC,EAAW1jB,GAAKmgB,GAAc,CACjC4D,EAAiB,GAAV5D,EAAeA,EAAS,EAAI,EACnCprC,EAAIksC,EAAUv1B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAI2D,GAAMzD,EACvCtC,KACJsC,EAAOl6C,KAAK+lB,IAAIm0B,EAAMvrC,EACzB,MAAM,GAAe,GAAVorC,GAA8C,GAA/BuD,EAAW1jB,GAAKmgB,EAAS,IAClC,GAAVA,GAA6C,GAA9Bz0B,EAAImR,MAAM2d,YAAYxa,GAAY,CACjD+jB,EAAiB,GAAV5D,EAAeA,EAAS,EAAI,EACnCprC,EAAIksC,EAAUv1B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAI2D,GAAMzD,EACvCtC,KACJsC,EAAOl6C,KAAK+lB,IAAIm0B,EAAMvrC,EACzB,CAGDurC,GAAQgJ,EAAiBtpB,GAAKmgB,GAE9B0J,EAAS1J,GAAUG,CACtB,CACD,IAASH,EAAS,EAAGA,EAAS,EAAGA,IAC7Bz0B,EAAI2Z,IAAIrF,GAAK97B,EAAEk8C,GAAID,GAAU0J,EAAS1J,EAE7C,CACJ,CAEL,IAASngB,EAAM,EAAGA,EAAMupB,EAAWvpB,IAC/BtU,EAAImR,MAAM2d,YAAYxa,GAAO0jB,EAAW1jB,GAAK,IA3OrD,SAAiC1T,EAAKu2B,EAAcP,GAOhD,IANA,IAAI52B,EAAMY,EAAIE,eAMLwT,EAAM,EAAGA,EAAMtU,EAAIgH,aAAcsN,IAAO,CAC7C,IAAI9E,EAAYpS,EAAQsK,UAGC,GAArByvB,EAAa7iB,IAEb9W,EAAOwC,EAAImrB,cAAc7W,IAAQlX,EAAQoV,YACrCxS,EAAImrB,cAAc7W,IAAQlX,EAAQuL,aAClC6G,EAAYpS,EAAQqV,aAGxBjD,EAAYpS,EAAQuL,WAChB3I,EAAImrB,cAAc7W,IAAQlX,EAAQsK,YAClC1H,EAAImrB,cAAc7W,GAAOlX,EAAQoV,YAEjCxS,EAAImrB,cAAc7W,IAAQlX,EAAQqV,YAClCzS,EAAImrB,cAAc7W,GAAOlX,EAAQuL,aAGzCiuB,EAAYtiB,GAAOtU,EAAImrB,cAAc7W,GAErCtU,EAAImrB,cAAc7W,GAAO9E,CAE5B,CACJ,CAkNG6uB,CAAwBz9B,EAAKu2B,EAAcP,GAK3C,IAAStiB,EAAM,EAAGA,EAAMupB,EAAWvpB,IAAO,CACtC,IAAIilB,EACAC,EACA/qD,EACAinD,GAEAphB,EAAM,GACNilB,EAAM5C,EACN6C,GAAU,EACV/qD,EAAO2uB,EAAQsK,UACXkvB,EAAY,IAAMx5B,EAAQuL,YACvBiuB,EAAY,IAAMx5B,EAAQuL,aAC7Bl6B,EAAO2uB,EAAQuL,YACnB+sB,GAAKe,EAAiBvD,GAAQ5e,EAAM,KAEpCilB,EAAM7C,EACN8C,EAAS,EACT/qD,EAAOmoD,EAAYtiB,GACnBohB,GAAKc,EAActD,GAAQ5e,IAG3B7lC,GAAQ2uB,EAAQuL,WAChB4wB,EAAIC,EAASllB,GAAOmhB,EAASC,GAAI11B,EAAImM,eAErCotB,EAAIC,EAASllB,GAAOwhB,EAASJ,GAAI11B,EAAImM,eAGrCvL,EAAI+P,WACJ3Q,EAAI4Q,MAAMhG,GAAGsoB,GAAQ5e,GAAOilB,EAAIC,EAASllB,GAEhD,CACD,OAAO,CACV,EAkSDz8B,KAAK4uC,cAAgB,SAAU7lB,GAC3B,IACIzyB,EADA6xB,EAAMY,EAAIE,eAEVw9B,GAAW,EACXC,EAAQ,GAAIC,EAAQ,GACpBC,EAAU,EAAGC,EAAU,EACvBC,GAAW,KAAMC,GAAW,IAC5B3C,EAAOv/B,EAAUU,EAAQmB,QACzB29B,EAAax/B,EAAUU,EAAQmB,QAC/B8+B,EAAO3gC,EAAUU,EAAQmB,QACzB69B,EAAQx7B,EAAI+D,eAEhB,OAAQ/D,EAAI0nB,eACR,QACA,KAAK,EACDgW,GAAW,EACX,MACJ,KAAK,EACDA,EAAY19B,EAAI6O,KAAO7S,EAAQ8S,UAAY9O,EAAI6O,KAAO7S,EAAQ+S,OAE9D,MACJ,KAAK,EACD2uB,GAAW,EACX,MACJ,KAAK,EACDC,EAAQ,EACRE,GAAW,KACXC,GAAW,MACXC,GAAW,KACXC,GAAW,KAOnB,IAJA5+B,EAAIkrB,kBAAoB,IACxBlrB,EAAImrB,cAAc,GAAKnrB,EAAImrB,cAAc,GAAK/tB,EAAQsK,UAGjDv5B,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACpB,IAAK,IAAI4D,EAAI,EAAGA,EAAIqrB,EAAQmB,SAAUxsB,EAClCiuB,EAAIwpB,KAAKr7C,GAAG4D,GAAK,KACjBiuB,EAAIypB,KAAKt7C,GAAG4D,GAAK,KACjBiuB,EAAI0pB,MAAMv7C,GAAG4D,GAAKiuB,EAAI2pB,MAAMx7C,GAAG4D,GAAK,EAExC,IAAK,IAAI2iD,EAAK,EAAGA,EAAKt3B,EAAQY,QAAS02B,IACnC10B,EAAI4Z,GAAGzrC,GAAG4vB,EAAE22B,GAAM,KAClB10B,EAAI2Z,IAAIxrC,GAAG4vB,EAAE22B,GAAM,KAEvB,IAAS3iD,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAS2iD,EAAK,EAAGA,EAAKt3B,EAAQa,QAASy2B,IACnC10B,EAAI4Z,GAAGzrC,GAAGqK,EAAEk8C,GAAI3iD,GAAK,KACrBiuB,EAAI2Z,IAAIxrC,GAAGqK,EAAEk8C,GAAI3iD,GAAK,KAE1BiuB,EAAImR,MAAM2d,YAAY3gD,GAAK,CAC9B,CACD,IAAS4D,EAAI,EAAGA,EAAI,EAAGA,IACnBiuB,EAAImR,MAAM0d,iBAAiB1gD,GAAG4D,GAAK,EAC1C,CAgBD,IAbAiuB,EAAI8pB,iBAAiB,GAAK9pB,EAAI8pB,iBAAiB,GAAK,EAOpD9pB,EAAIqqB,QAAUwR,GAAa77B,EAAI0qB,WAAY1qB,EAAIkqB,KAAMlqB,EAAIiqB,KAAMgS,EAC3DC,EAAYl8B,EAAI+pB,MAAO/pB,EAAIgM,IAAIwP,YAAa4gB,EAC5Ch/B,EAAQsB,QAASsB,EAAIoD,cAAcrF,EAAGX,EAAQsB,QAAR,KACvBtB,EAAQY,SAC3BR,EAAOwC,EAAIqqB,QAAUjtB,EAAQmB,QAExBpwB,EAAI,EAAGA,EAAI6xB,EAAIqqB,QAASl8C,IAAK,CAC9B,IAAI0wD,EAAMJ,EACNxC,EAAK9tD,IAAMowD,IACXM,EAAMH,GAAWzC,EAAK9tD,GAAKowD,IAAUC,EAAQD,GAASE,GAC/CD,EAAQvC,EAAK9tD,KAAOqwD,EAAQD,IAEvClB,EAAKlvD,GAAKuM,KAAK0xB,IAAI,GAAMyyB,EAAM,IAC3B7+B,EAAI0qB,WAAWv8C,GAAK,EACpB6xB,EAAI2qB,YAAYx8C,GAAK,EAAM6xB,EAAI0qB,WAAWv8C,GAE1C6xB,EAAI2qB,YAAYx8C,GAAK,CAE5B,CACD6xB,EAAI6pB,MAAQsT,GAAen9B,EAAIuqB,MAAOvqB,EAAIqqB,QAAS4R,EAAMC,EACrDmB,EAAMiB,GAGV,IAkHQld,EAlHJrvC,EAAI,EACR,IAAK5D,EAAI,EAAGA,EAAI6xB,EAAIqqB,QAASl8C,IAAK,CAI9BqN,EAAIqhB,EAAMiiC,UACV,IAAK,IAAIz8C,EAAI,EAAGA,EAAI2d,EAAI0qB,WAAWv8C,GAAIkU,IAAKtQ,IAAK,CAC7C,IAAIsyC,EAAO+X,EAAQrqD,GAAK,IAASqrB,EAAQsB,SAKzCqgC,EAAQlnD,KAAKmnD,WAAkB,IAAP3a,EAAazjB,GAAO,GAE5Cm+B,EAAQrkD,KAAK0xB,IAAI,GAAK,GAAM2yB,GAGxBvjD,GADJujD,GAAS/+B,EAAI0qB,WAAWv8C,MAEpBqN,EAAIujD,EACX,CACD/+B,EAAIiQ,IAAI3R,KAAKnwB,GAAKqN,GAYlBA,EAAoB,GAAVygD,EAAK9tD,GAAU,GAApB,IACG,IACJqN,EAAI,KAEJA,GAAK,KACLA,GAAK,IAETA,GAAK,EACLwkB,EAAIspB,SAASn7C,GAAMuM,KAAK0xB,IAAI,GAAM5wB,EAAI,IAAOwkB,EAAI0qB,WAAWv8C,EAC/D,CAaD,IARA6xB,EAAIsqB,QAAUuR,GAAa77B,EAAIyqB,WAAYzqB,EAAIoqB,KAAMpqB,EAAImqB,KAAM8R,EAC3DC,EAAYl8B,EAAIgqB,MAAOhqB,EAAIgM,IAAIyP,YAAa2gB,EAC5Ch/B,EAAQkV,UAAWtS,EAAIoD,cAAc5qB,EAAG4kB,EAAQkV,UAAR,IACzBlV,EAAQa,SAC3BT,EAAOwC,EAAIsqB,QAAUltB,EAAQmB,QAG7BxsB,EAAI,EACC5D,EAAI,EAAGA,EAAI6xB,EAAIsqB,QAASn8C,IAAK,CAC9B,IAAIqN,EACAqjD,EAAMF,EACN1C,EAAK9tD,IAAMowD,IACXM,EAAMD,GAAW3C,EAAK9tD,GAAKowD,IAAUC,EAAQD,GAASI,GAC/CH,EAAQvC,EAAK9tD,KAAOqwD,EAAQD,IAEvClB,EAAKlvD,GAAKuM,KAAK0xB,IAAI,GAAMyyB,EAAM,IAG/BrjD,EAAIqhB,EAAMiiC,UACV,IAASz8C,EAAI,EAAGA,EAAI2d,EAAIyqB,WAAWt8C,GAAIkU,IAAKtQ,IAAK,CAC7C,IACIgtD,EADA1a,EAAO+X,EAAQrqD,GAAK,IAASqrB,EAAQkV,WAOzCysB,EAAQlnD,KAAKmnD,WAAkB,IAAP3a,EAAazjB,GAAO,GAE5Cm+B,EAAQrkD,KAAK0xB,IAAI,GAAK,GAAM2yB,GAGxBvjD,GADJujD,GAAS/+B,EAAIyqB,WAAWt8C,MAEpBqN,EAAIujD,EACX,CACD/+B,EAAIiQ,IAAIzR,KAAKrwB,GAAKqN,EAOlBA,EAAsB,EAAVygD,EAAK9tD,GAAW,GAAtB,EACF8tD,EAAK9tD,GAAK,KACVqN,GAAK,EAAsB,IAAlBd,KAAKukD,IAAI,EAAIzjD,IAEtBygD,EAAK9tD,GAAK,KACVqN,GAAK,EAAsB,IAAlBd,KAAKukD,IAAI,EAAIzjD,IAEtBA,GAAK,KACLA,GAAK,IAETA,GAAK,EACLwkB,EAAIupB,SAASp7C,GAAKuM,KAAK0xB,IAAI,GAAM5wB,EAAI,IAC/BwkB,EAAIyqB,WAAWt8C,EACxB,CAED6xB,EAAI4pB,MAAQuT,GAAen9B,EAAIwqB,QAASxqB,EAAIsqB,QAAS2R,EAAMC,EACvDmB,EAAMiB,GApzEV/K,EAAY74C,KAAK0xB,IAAI,GAAI,EAAgB,IACzConB,EAAY94C,KAAK0xB,IAAI,GAAI,KACzBqnB,EAAW/4C,KAAK0xB,IAAI,GAAK8yB,KAqzEzB/M,EAAIxd,SAAS3U,GAGbA,EAAIlC,MAAQpjB,KAAKygD,KAAK,EAAM/I,GA7/ED,IA8/EOgK,EAAQ,MAItChb,EA5/EO,IA6/EwB,IAAN,EAApBxgB,EAAIylB,iBACLjF,EAAQ,GACR1mC,KAAK4vB,IAAI1J,EAAIwgB,OAAS,IACtBA,EAAQxgB,EAAIwgB,OAChBxgB,EAAIwgB,MAAQA,EAMZ,IAAK,IAAIvwC,EAAI,EAAGA,EAAImvB,EAAIqqB,QAASx5C,IACzBmvB,EAAIuqB,MAAM15C,GAAG,GAAKmvB,EAAIqqB,QAAU,IAChCrqB,EAAIuqB,MAAM15C,GAAG,GAAKmvB,EAAIqqB,QAAU,GAO5C,IAAI8U,EAAkB,IAAOn/B,EAAIwL,QAAU4wB,EAU3C,GATAp8B,EAAIiQ,IAAInS,MAAQpjB,KAAK0xB,IAAI,IAAK,IAAa+yB,GAC3Cn/B,EAAIiQ,IAAIrS,OAAS,IAEjBoC,EAAIiQ,IAAIpS,YAAc,EAGtBL,EAAOwC,EAAIkqB,KAAK9sB,EAAQY,QAAU,IAAMgC,EAAIqqB,SAC5C7sB,EAAOwC,EAAIoqB,KAAKhtB,EAAQa,QAAU,IAAM+B,EAAIsqB,UAExB,GAAhB1pB,EAAI8gB,QAAe,CAEnB,IACI0d,EAAWx+B,EAAI+D,eACZvH,EAAQsB,QACX2gC,EAAc,EAElB,IADAhb,EAAO,EACFl2C,EAAI,EAAGA,EAAIivB,EAAQsB,QAAU,IAAKvwB,EAGnCk2C,GAAQ+a,EACRp/B,EAAIiQ,IAAIxR,MAAMtwB,GAAK,EAAKuM,KAAK0xB,IAAI,GAAIv0B,KAAKmnD,WAAW3a,EAAMzjB,GAAO,IAClEy+B,GAAer/B,EAAIiQ,IAAIxR,MAAMtwB,GAGjC,IADAkxD,EAAc,EAAMA,EACflxD,EAAIivB,EAAQsB,QAAU,IAAKvwB,GAAK,GACjC6xB,EAAIiQ,IAAIxR,MAAMtwB,IAAMkxD,CAE3B,CAEG,IAASxuD,EAAIkB,EAAI,EAAGlB,EAAImvB,EAAIsqB,UAAWz5C,EACnC,IAAK1C,EAAI,EAAGA,EAAI6xB,EAAIyqB,WAAW55C,KAAM1C,IAC/B4D,EAGVyrB,EAAY,KAALzrB,GACP,IAASlB,EAAIkB,EAAI,EAAGlB,EAAImvB,EAAIqqB,UAAWx5C,EACnC,IAAK1C,EAAI,EAAGA,EAAI6xB,EAAI0qB,WAAW75C,KAAM1C,IAC/B4D,EAMd,IAHIyrB,EAAY,KAALzrB,GAEXA,EAAI,EACC5D,EAAI,EAAGA,EAAI6xB,EAAIqqB,QAASl8C,IAAK,CAC1Bk2C,EAAO+X,GAASrqD,EAAIiuB,EAAI0qB,WAAWv8C,GAAK,IAAM,EAAMivB,EAAQsB,SAChEsB,EAAI4qB,SAASz8C,GAAKuvD,GAAcrZ,GAChCtyC,GAAKiuB,EAAI0qB,WAAWv8C,EACvB,CACD,KAAOA,EAAIivB,EAAQmB,SAAUpwB,EACzB6xB,EAAI4qB,SAASz8C,GAAK,EAGtB,IADA4D,EAAI,EACC5D,EAAI,EAAGA,EAAI6xB,EAAIsqB,QAASn8C,IAAK,CAC1Bk2C,EAAO+X,GAASrqD,EAAIiuB,EAAIyqB,WAAWt8C,GAAK,IAAM,EAAMivB,EAAQkV,WAChEtS,EAAI6qB,SAAS18C,GAAKuvD,GAAcrZ,GAChCtyC,GAAKiuB,EAAIyqB,WAAWt8C,EACvB,CACD,KAAOA,EAAIivB,EAAQmB,SAAUpwB,EACzB6xB,EAAI6qB,SAAS18C,GAAK,EAEtB,OAAO,CACV,EA+CD0J,KAAKmnD,WAAa,SAAU9tB,EAAGtQ,GAC3B,IAAIm4B,EACJ,OAAQn4B,EAAI8gB,SACR,KAAK,EACDqX,EAAM4E,GAAczsB,EAAG,GACvB,MACJ,KAAK,EAED6nB,EAAM4E,GAAczsB,GAAI,GACxB,MACJ,KAAK,EAUL,QACI6nB,EAAM4E,GAAczsB,EAAG,GACvB,MATJ,KAAK,EAED6nB,EAAM4E,GAAczsB,EAAG,GAAK,EAC5B,MACJ,KAAK,EACD6nB,EAAM4E,GAAczsB,EAAGtQ,EAAI+f,UAMnC,OAAOoY,CACV,CAEJ,C,wBClzFD,IAAIt8B,EAAS7E,EAAQ,OACjB+E,EAASF,EAAOE,OAChBC,EAAUH,EAAOG,QAGjBG,GAFQN,EAAOI,MACFJ,EAAOK,WACbL,EAAOM,MACdC,EAASP,EAAOO,OAIhBN,GAHcD,EAAOQ,YACVR,EAAOS,SACLT,EAAOU,WACRV,EAAOC,WAInBc,GAHcf,EAAOY,YACXZ,EAAOa,QACLb,EAAOc,UACVd,EAAOe,QAEhB8hC,EAAc1nC,EAAQ,MACtB2nC,EAAkB3nC,EAAQ,OAC1B4nC,EAAgB5nC,EAAQ,OACxBwF,EAAUxF,EAAQ,OAClB6hB,EAAS7hB,EAAQ,MACjB4S,EAAS5S,EAAQ,OAu6CrB6F,EAAO5F,QAr6CP,WACI,IAAI4V,EAEAnC,EAEAG,EAHJ5zB,KAAKyzB,GAAK,KAEVzzB,KAAK4zB,MAAQ,KAGb,IACIg0B,EADApgC,EAAM,IAAIigC,EAwPd,SAASI,EAAmB94B,GACxB/uB,KAAK+uB,QAAUA,CAClB,CA+ID,SAAS+4B,EAAW5zB,GAChB,IAAK,IAAI9D,EAAM,EAAGA,EAAM8D,EAASrD,OAAQT,IACrC,GAAI8D,EAAStD,SAASR,GAChB8D,EAASnE,cAAcmE,EAAS7yB,OAAO+uB,KAAS,EAClD,OAAO,EAEf,OAAO,CACV,CAqBD,SAAS23B,EAAc1e,EAAY2e,EAAMC,EAAMr+B,EAAIs+B,GAQ/C,IAAIC,EAEJ,OAAQ9e,GACJ,QACA,KAAK,EAEG2e,EAAK1yB,WAAa,GAElB6yB,EAASF,EAAK1yB,UAAYyyB,EAAKzyB,SAC3B0yB,EAAK1yB,UAAYyyB,EAAKzyB,WACtB4yB,EAASF,EAAKj+B,KAAOg+B,EAAKh+B,OAG9Bm+B,EAAWF,EAAK5yB,UAAY,GAAyB,GAAjB4yB,EAAK5yB,UAAiB4yB,EAAKj+B,MAA2B,GAAjBg+B,EAAK3yB,UAAiB2yB,EAAKh+B,KAExG,MAGJ,KAAK,EACDm+B,EAASF,EAAK3yB,WAAa0yB,EAAK1yB,YACxB2yB,EAAK3yB,YAAc0yB,EAAK1yB,YAAc2yB,EAAK9yB,WAAa6yB,EAAK7yB,YAC7D8yB,EAAK3yB,YAAc0yB,EAAK1yB,YACzBrO,UAAUiH,GAAG+5B,EAAK9yB,WAAY6yB,EAAK7yB,aAAe8yB,EAAK7yB,UAAY4yB,EAAK5yB,UAC/E,MAEJ,KAAK,EACD6yB,EAAK5yB,UA1CjB,SAAyB6yB,EAASt+B,GAE9B,IADA,IAVeqL,EAUXmzB,EAAc,MACTh4B,EAAM,EAAGA,EAAMxG,EAAGyX,OAAQjR,IAC/Bg4B,IAZWnzB,EAYcizB,EAAQ93B,GAX9BlL,EAAK64B,WAAY,KAAQ,KAAQ9oB,EAAQA,EAAQA,IAaxD,OAAOpyB,KAAK0B,IAAI,MAAO6jD,EAC1B,CAoC4BC,CAAgBH,EAASt+B,GAE9C,KAAK,EACDu+B,EAASF,EAAK5yB,UAAY2yB,EAAK3yB,UAC/B,MACJ,KAAK,EACD8yB,EAASF,EAAK7yB,UAAY4yB,EAAK5yB,UAC/B,MACJ,KAAK,EACD+yB,EAAUF,EAAK7yB,UAAY4yB,EAAK5yB,WACxB6yB,EAAK5yB,UAAY2yB,EAAK3yB,UAC9B,MACJ,KAAK,EACD8yB,EAAUF,EAAK5yB,WAAa,GAAO2yB,EAAK3yB,UAAY,IAC5C4yB,EAAK5yB,WAAa,GAAO2yB,EAAK3yB,UAAY,GAC3C2yB,EAAK3yB,UAAY4yB,EAAK5yB,UAAY,IAAO4yB,EAAK7yB,UAAY4yB,EAAK5yB,WAC9D6yB,EAAK5yB,WAAa,GAAO2yB,EAAK3yB,UAAY,GAC3C2yB,EAAK3yB,UAAY4yB,EAAK5yB,UAAY,IAAO4yB,EAAK7yB,UAAY4yB,EAAK5yB,UAChE4yB,EAAK7yB,YACH8yB,EAAK5yB,UAAY,GAAO2yB,EAAK3yB,WAAa,KAC3C2yB,EAAK3yB,UAAY4yB,EAAK5yB,UAAY,IAAO4yB,EAAK7yB,UAC/C6yB,EAAK9yB,WAAa6yB,EAAK5yB,UACvB4yB,EAAK7yB,YACH8yB,EAAK5yB,UAAY,GAAO2yB,EAAK3yB,WAAa,IAC3C2yB,EAAK3yB,UAAY4yB,EAAK5yB,UAAY,KAAQ4yB,EAAK7yB,UAChD6yB,EAAK9yB,WAAa8yB,EAAK9yB,WAAa6yB,EAAK5yB,UACzC4yB,EAAK7yB,WAAa6yB,EAAK7yB,WAC7B,MACJ,KAAK,EACDgzB,EAASF,EAAK9yB,WAAa6yB,EAAK7yB,YACxBlO,UAAUiH,GAAG+5B,EAAK9yB,WAAY6yB,EAAK7yB,aAAe8yB,EAAK7yB,UAAY4yB,EAAK5yB,UAChF,MACJ,KAAK,EACD+yB,EAASF,EAAK9yB,WAAa6yB,EAAK7yB,YACxBlO,UAAUiH,GAAG+5B,EAAK9yB,WAAY6yB,EAAK7yB,cAAgB8yB,EAAK5yB,UAAY2yB,EAAK3yB,WAAcpO,UACtFiH,GAAG+5B,EAAK5yB,UAAW2yB,EAAK3yB,YAAc4yB,EAAK7yB,WAAa4yB,EAAK5yB,WACtE,MACJ,KAAK,EACD+yB,EAASF,EAAK3yB,WAAa0yB,EAAK1yB,YACzB2yB,EAAK9yB,WAAa6yB,EAAK7yB,WAatC,OATuB,GAAnB6yB,EAAK1yB,aAML6yB,EAASA,GAAUF,EAAKj+B,KAAOg+B,EAAKh+B,MAGjCm+B,CACV,CAiOD,SAASG,EAAcv/B,EAAKmL,EAAUg0B,EAAS70B,EAAOk1B,GAClD,IAAIpgC,EAAMY,EAAIE,gBArMlB,SAA4BF,EAAKmL,EAAUg0B,EAAS70B,EAAOk1B,GACvD,IACIC,EADArgC,EAAMY,EAAIE,eAIVu/B,EAD2B,GAA3Bt0B,EAASjE,eACG,mBAGA,mBAMhB,IADA,IAAIw4B,EAAU,EACLr4B,EAAM,EAAGA,EAAM8D,EAASrD,OAAQT,IACjCq4B,EAAUP,EAAQ93B,KAClBq4B,EAAUP,EAAQ93B,IAG1B,IAAI2d,EAAoB5lB,EAAI4lB,kBAO5B,OANyB,GAArBA,IAEIA,EADAwa,EACoB,EAEA,GAEpBxa,GACJ,KAAK,EAED,MAEJ,KAAK,EAEG0a,EAAU,EACVA,EAAU5lD,KAAK0xB,IAAIk0B,EAAS,IAE5BA,GAAW,IACf,MAGJ,QAEQA,EAAU,EACVA,EAAU,EAEVA,GAAW,IAIvB,IAAIvuD,EAAI,EACR,IAASk2B,EAAM,EAAGA,EAAM8D,EAASrD,OAAQT,IAAO,CAC5C,IACIlK,EADA/iB,EAAQ+wB,EAAS/wB,MAAMitB,GAG3B,GADAl2B,GAAKiJ,IACD+kD,EAAQ93B,GAAOq4B,GAAnB,CAGA,GAAiC,IAAN,EAAtBtgC,EAAIgmB,mBACLhmB,EAAImpB,WAAWlhB,GAAQ,GAAKjI,EAAImpB,WAAWlhB,GAAQ,EAAI,EACnD,GAAKjI,EAAImpB,WAAWlhB,IAAiC,GAAzBjI,EAAI4lB,mBAChC,OAGR,IADA7Z,EAAStD,SAASR,KACblK,GAAK/iB,EAAO+iB,EAAI,EAAGA,IACpBmN,EAAMn5B,EAAIgsB,IAAMsiC,EACZn1B,EAAMn5B,EAAIgsB,GAAKgO,EAAS+M,YACxB/M,EAAS+M,UAAY5N,EAAMn5B,EAAIgsB,IAGvC,GAA6B,GAAzBiC,EAAI4lB,kBACJ,MAfQ,CAgBf,CACJ,CA+HG2a,CAAmB3/B,EAAKmL,EAAUg0B,EAAS70B,EAAOk1B,GAQlD,IAAII,EAASb,EAAW5zB,GAExB,OAAIy0B,MASAA,EADe,GAAfxgC,EAAIwL,QACKi0B,EAAGgB,eAAe10B,GAElB0zB,EAAGiB,mBAAmB1gC,EAAK+L,MASpC/L,EAAI2lB,cAAgB,IACpB3oB,EAAOwJ,KAAKxG,EAAImpB,WAAY,GACxB,GAAKpd,EAASjE,iBAxJ1B,SAA4BiE,EAAUb,GAIlC,IAHA,IAEIn5B,EAAI,EACCk2B,EAAM,EAAGA,EAAM8D,EAASrD,OAAQT,IAAO,CAC5C,IAAIjtB,EAAQ+wB,EAAS/wB,MAAMitB,GACvBzvB,EAAIuzB,EAAStD,SAASR,GAI1B,GAHwB,GAApB8D,EAASlE,UACTrvB,GAAKizB,EAAMk1B,OAAO14B,IACtBl2B,GAAKiJ,EACU,IAAN,EAAJxC,GAAa,CACdA,IACA,IAAK,IAAIulB,GAAK/iB,EAAO+iB,EAAI,EAAGA,IACxBmN,EAAMn5B,EAAIgsB,IAZN,mBAaAmN,EAAMn5B,EAAIgsB,GAAKgO,EAAS+M,YACxB/M,EAAS+M,UAAY5N,EAAMn5B,EAAIgsB,GAE1C,CACDgO,EAAStD,SAASR,GAAOzvB,GAAK,CACjC,CACDuzB,EAASlE,QAAU,EACnBkE,EAASjE,eAAiB,CAC7B,CAmIW84B,CAAmB70B,EAAUb,GAC7Bs1B,GAAS,GAELz0B,EAAStE,YAAcrK,EAAQuL,YAC5B3I,EAAI4H,cAAgB,IACvB44B,EAjIhB,SAA2BxgC,EAAK+L,EAAUb,GACtC,IAAIjD,EACAQ,EAAWsD,EAAStD,SAGxB,IAAKR,EAAM,EAAGA,EAAM8D,EAASgN,SAAU9Q,IACnC,GAAIQ,EAASR,IAAQ,GACjB,OAAO,EAGf,IAAK,IAAI/uB,EAAS,EAAGA,EAAS,EAAGA,IAAU,CACvC,IAAIm6B,EAAK,EACLS,EAAK,EAET,IAAK7L,EAAM8D,EAASgN,SAAW7/B,EAAQ+uB,EAAM8D,EAASvD,UAAWP,GAAO,EAChEoL,EAAK5K,EAASR,KACdoL,EAAK5K,EAASR,IAEtB,KAAOA,EAAM8D,EAASrD,OAAQT,GAAO,EAC7B6L,EAAKrL,EAASR,KACd6L,EAAKrL,EAASR,IAGtB,KAAIoL,EAAK,IAAMS,EAAK,GAApB,CAGA,GAAI/H,EAASnE,cAAc1uB,IAAW,EAClC,OAAO,EAOX6yB,EAASnE,cAAc1uB,KACvB,IAAInH,EAAIiuB,EAAIoD,cAAcrF,EAAEgO,EAASgN,UACrC,IAAK9Q,EAAM8D,EAASgN,SAAW7/B,EAAQ+uB,EAAM8D,EAASrD,OAAQT,GAAO,EAAG,CACpE,IACIjtB,EAAQ+wB,EAAS/wB,MAAMitB,GACvBzvB,EAAIiwB,EAASR,GAGjB,GAFAzK,EAAOhlB,GAAK,IACZA,GAAS,GAAKuzB,EAASjE,iBACd,EACLW,EAASR,GAAOzvB,EAChBzG,GAAa,EAARiJ,MAFT,CAMAytB,EAASR,GAAO,EAEZ,IAAI44B,EAAO,KAAOroD,GAAMuzB,EAASjE,eAAiB,GAClDg5B,EAAMr1B,EAAMs1B,OAAOF,GAEvB9uD,GAAKiJ,GAAS9B,EAAS,GACvB,IAAK,IAAI6kB,GAAK/iB,EAAO+iB,EAAI,EAAGA,IACxBmN,EAAMn5B,EAAIgsB,IAAM+iC,EACZ51B,EAAMn5B,EAAIgsB,GAAKgO,EAAS+M,YACxB/M,EAAS+M,UAAY5N,EAAMn5B,EAAIgsB,IAEvChsB,GAAKiJ,GAAS,EAAI9B,EAAS,EAb1B,CAcJ,CAGG,IAAI4nD,EAAMr1B,EAAMs1B,OAAO,KAEvB,IADAhvD,GAAKg6B,EAAS/wB,MAAMitB,IAAQ/uB,EAAS,GAC5B6kB,GAAKgO,EAAS/wB,MAAMitB,GAAMlK,EAAI,EAAGA,IACtCmN,EAAMn5B,EAAIgsB,IAAM+iC,EACZ51B,EAAMn5B,EAAIgsB,GAAKgO,EAAS+M,YACxB/M,EAAS+M,UAAY5N,EAAMn5B,EAAIgsB,GA5C/B,CA+Cf,CACD,OAAO,CACV,CAwDyBijC,CAAkBhhC,EAAK+L,EAAUb,IAAUy0B,EAAW5zB,KAKvEy0B,IAEGA,EADe,GAAfxgC,EAAIwL,QACKi0B,EAAGgB,eAAe10B,GAElB0zB,EAAGiB,mBAAmB1gC,EAAK+L,KAEpCy0B,GACX,CA/wBD3oD,KAAKynB,WAAa,SAAUqO,EAAKszB,EAAKpzB,EAAQqzB,GAC1CzzB,EAAKE,EACLrC,EAAK21B,EACLppD,KAAKyzB,GAAK21B,EACVx1B,EAAQoC,EACRh2B,KAAK4zB,MAAQoC,EACb4xB,EAAKyB,EACL7hC,EAAIC,WAAWmM,EAAOg0B,EACzB,EAKD5nD,KAAK+zB,WAAa,SAAU5G,EAASsB,GACjC,IAAK,IAAIn4B,EAAI,EAAGA,EAAI,MAAOA,EAAG,CAC1B,IAAI4vB,EAAIiH,EAAQoC,GAAGd,GAAI,GAAGtE,GAAG7zB,GACzBwJ,EAAIqtB,EAAQoC,GAAGd,GAAI,GAAGtE,GAAG7zB,GAC7B62B,EAAQoC,GAAGd,GAAI,GAAGtE,GAAG7zB,IAAM4vB,EAAIpmB,IAAmB,GAAbolB,EAAK8W,OAC1C7O,EAAQoC,GAAGd,GAAI,GAAGtE,GAAG7zB,IAAM4vB,EAAIpmB,IAAmB,GAAbolB,EAAK8W,MAC7C,CACJ,EAsBDh8B,KAAKy0B,WAAa,SAAUtM,EAAK+L,EAAUb,GACvC,IAAIkU,EAAM,EACNzG,EAAQ,EAAI5M,EAASqN,kBAkBzB,GAhBA5b,EAAgB,MAAT0N,GACPa,EAAS+M,UAAY,EAMrBtb,EAAO,GAAKmb,GAASA,GAAS,KAE9B3b,EAAOwJ,KAAK0E,EAAOyN,EAAO,IAAK,GAE/ByG,EA5BJ,SAAyBrT,EAAUb,EAAOyN,EAAOyG,GAC7CA,EAAM,EACN,IAAK,IAAIjxC,EAAI,EAAGA,GAAKwqC,IAASxqC,EAAG,CAC7B,IAAIyE,EAAM8H,KAAK4vB,IAAIyB,EAAS/J,GAAG7zB,IAC/BixC,GAAOxsC,EACPs4B,EAAM/8B,GAAKuM,KAAKghD,KAAK9oD,EAAM8H,KAAKghD,KAAK9oD,IAEjCs4B,EAAM/8B,GAAK49B,EAAS+M,YACpB/M,EAAS+M,UAAY5N,EAAM/8B,GAClC,CACD,OAAOixC,CACV,CAiBS+hB,CAAgBp1B,EAAUb,EAAOyN,EAAOyG,GAK1CA,EAAM,MAAO,CACb,IAAIrtC,EAAI,EACyB,IAAN,EAAtBiuB,EAAIgmB,mBACLj0C,EAAI,GAER,IAAK,IAAI5D,EAAI,EAAGA,EAAI49B,EAASmN,OAAQ/qC,IACjC6xB,EAAImpB,WAAWh7C,GAAK4D,EAExB,OAAO,CACV,CAGD,OADAirB,EAAOwJ,KAAKuF,EAAS5J,OAAQ,EAAG,IAAK,IAC9B,CACV,EAkEDtqB,KAAKw0B,gBAAkB,SAAUrM,EAAK+L,GAIlCA,EAAS1E,eAAiB,EAC1B0E,EAAShK,WAAa,EACtBgK,EAAS9J,OAAS,EAClB8J,EAASxE,YAAc,IACvBwE,EAASvE,kBAAoB,EAE7BuE,EAAS1I,aAAa,GAAK,EAC3B0I,EAAS1I,aAAa,GAAK,EAC3B0I,EAAS1I,aAAa,GAAK,EAC3B0I,EAASnE,cAAc,GAAK,EAC5BmE,EAASnE,cAAc,GAAK,EAC5BmE,EAASnE,cAAc,GAAK,EAC5BmE,EAASnE,cAAc,GAAK,EAE5BmE,EAAStI,cAAgB,EACzBsI,EAASrI,cAAgB,EACzBqI,EAASlE,QAAU,EACnBkE,EAASjE,eAAiB,EAC1BiE,EAASnK,mBAAqB,EAC9BmK,EAASzE,aAAe,EACxByE,EAASgN,SAAW3b,EAAQ+U,QAC5BpG,EAASiN,SAAW5b,EAAQgV,QAC5BrG,EAASkN,SAAWjZ,EAAIolB,YAAchoB,EAAQY,QAAUZ,EAAQ+U,QAChEpG,EAASmN,OAASnN,EAASkN,SAC3BlN,EAASrD,OAASqD,EAASgN,SAC3BhN,EAASvD,UAAY,GACrB,IAAK,IAAIP,EAAM,EAAGA,EAAM7K,EAAQY,QAASiK,IACrC8D,EAAS/wB,MAAMitB,GAAOjI,EAAIoD,cAAcrF,EAAEkK,EAAM,GAC1CjI,EAAIoD,cAAcrF,EAAEkK,GAE1B8D,EAAS7yB,OAAO+uB,GAAO,EAE3B,GAAI8D,EAAStE,YAAcrK,EAAQuL,WAAY,CAC3C,IAAIy4B,EAAS1kC,EAAU,KAEvBqP,EAASiN,SAAW,EACpBjN,EAASgN,SAAW,EACa,GAA7BhN,EAASpE,mBAKToE,EAASiN,SAAW,EACpBjN,EAASgN,SAAyB,EAAd/Y,EAAIwL,QAAc,GAE1CO,EAASmN,OAASnN,EAASgN,SACrB,IACE/Y,EAAIolB,YAAchoB,EAAQa,QAAUb,EAAQgV,SAAWrG,EAASiN,UACxEjN,EAASrD,OAASqD,EAASgN,SAAW,GAC/B3b,EAAQgV,QAAUrG,EAASiN,UAClCjN,EAASvD,UAAYuD,EAASrD,OAAS,GACvCqD,EAASkN,SAAWlN,EAASgN,SAS7B,IAAIjX,EAAK9B,EAAIoD,cAAcrF,EAAEgO,EAASgN,UACtCpc,EAAOsD,UAAU8L,EAAS/J,GAAI,EAAGo/B,EAAQ,EAAG,KAC5C,IAASn5B,EAAM8D,EAASiN,SAAU/Q,EAAM7K,EAAQa,QAASgK,IAGrD,IAFA,IAAI7R,EAAQ4J,EAAIoD,cAAc5qB,EAAEyvB,GAC5B5R,EAAM2J,EAAIoD,cAAc5qB,EAAEyvB,EAAM,GAC3B/uB,EAAS,EAAGA,EAAS,EAAGA,IAC7B,IAAK,IAAI6kB,EAAI3H,EAAO2H,EAAI1H,EAAK0H,IACzBgO,EAAS/J,GAAGF,KAAQs/B,EAAO,EAAIrjC,EAAI7kB,GAK/C,IAAInH,EAAIg6B,EAASgN,SACjB,IAAS9Q,EAAM8D,EAASiN,SAAU/Q,EAAM7K,EAAQa,QAASgK,IACrD8D,EAAS/wB,MAAMjJ,GAAKg6B,EAAS/wB,MAAMjJ,EAAI,GAAKg6B,EAAS/wB,MAAMjJ,EAAI,GAAKiuB,EAAIoD,cAAc5qB,EAAEyvB,EAAM,GACxFjI,EAAIoD,cAAc5qB,EAAEyvB,GAC1B8D,EAAS7yB,OAAOnH,GAAK,EACrBg6B,EAAS7yB,OAAOnH,EAAI,GAAK,EACzBg6B,EAAS7yB,OAAOnH,EAAI,GAAK,EACzBA,GAAK,CAEZ,CAEDg6B,EAASoN,WAAa,EACtBpN,EAASjD,oBAAsB2C,EAAM41B,gBAAgB,GAAG,GACxDt1B,EAAS/C,KAAK,GAAK,EACnB+C,EAAS/C,KAAK,GAAK,EACnB+C,EAAS/C,KAAK,GAAK,EACnB+C,EAAS/C,KAAK,GAAK,EAEnB+C,EAASqN,kBAAoB,IAK7Bpc,EAAOwJ,KAAKuF,EAAStD,SAAU,GA5JnC,SAA8BzI,EAAK+L,GAC/B,IAAIgtB,EAAM/4B,EAAIiQ,IACVjO,EAAK+J,EAAS/J,GAElB,GAAI+J,EAAStE,YAAcrK,EAAQuL,WAG/B,IADA,IAAI24B,GAAO,EACFC,EAAOnkC,EAAQe,OAAS,EAAGojC,GAAQ,IAAMD,EAAMC,IAAQ,CAC5D,IAAInrC,EAAQ4J,EAAIoD,cAAclF,OAAOqjC,GACjClrC,EAAM2J,EAAIoD,cAAclF,OAAOqjC,EAAO,GACtCC,EAAQ/1B,EAAMg2B,UAAU1I,EAAIn7B,OAAQm7B,EAAI76B,OAAOqjC,GAC/CxI,EAAIp+C,OAEJqlB,EAAImR,MAAM4d,SAAS,IAAM,QACzByS,GAASxhC,EAAImR,MAAM4d,SAAS,KAEhC,IAAK,IAAIh9C,EAAIskB,EAAM,EAAGtkB,GAAKqkB,EAAOrkB,IAAK,CACnC,KAAI2I,KAAK4vB,IAAItI,EAAGjwB,IAAMyvD,GAEjB,CACDF,GAAO,EACP,KACH,CAJGt/B,EAAGjwB,GAAK,CAKf,CACJ,MAGD,IAAK,IAAI2vD,EAAQ,EAAGA,EAAQ,EAAGA,IAE3B,IADIJ,GAAO,EACFC,EAAOnkC,EAAQiB,OAAS,EAAGkjC,GAAQ,IAAMD,EAAMC,IAAQ,CAMxDlrC,GALAD,EACE,EADM4J,EAAIoD,cAAc5qB,EAAE,KAEzBwnB,EAAIoD,cAAc5qB,EAAE,IAAMwnB,EAAIoD,cAAc5qB,EAAE,KAC/CkpD,GACC1hC,EAAIoD,cAAchF,OAAOmjC,GAAQvhC,EAAIoD,cAAchF,OAAO,MAE1D4B,EAAIoD,cAAchF,OAAOmjC,EAAO,GAAKvhC,EAAIoD,cAAchF,OAAOmjC,IANrE,IAOII,EAAQl2B,EAAMg2B,UAAU1I,EAAIn7B,OAAQm7B,EAAI36B,OAAOmjC,GAC/CxI,EAAIp+C,OAKR,IAHIqlB,EAAImR,MAAM6d,UAAU,IAAM,QAC1B2S,GAAS3hC,EAAImR,MAAM6d,UAAU,KAExBj9C,EAAIskB,EAAM,EAAGtkB,GAAKqkB,EAAOrkB,IAAK,CACnC,KAAI2I,KAAK4vB,IAAItI,EAAGjwB,IAAM4vD,GAEjB,CACDL,GAAO,EACP,KACH,CAJGt/B,EAAGjwB,GAAK,CAKf,CACJ,CAIZ,CAuGG6vD,CAAqB5hC,EAAK+L,EAC7B,EAMD2zB,EAAmBmC,eAAiB,IAAInC,EAAmB,GAC3DA,EAAmBoC,aAAe,IAAIpC,EAAmB,GACzDA,EAAmBqC,eAAiB,IAAIrC,EAAmB,GAqE3D7nD,KAAKmqD,wBAA0B,SAAUhiC,EAAKyB,EAAIuJ,EAAS0jB,GACvD,IAAIqR,EAAUrjC,EAAU8N,EAAOS,QAE/B,IAAK,IAA4B,EAAtBjL,EAAIgmB,kBAAwBvkB,EAAGgG,YAAcrK,EAAQuL,aACzB,IAAT,IAAtB3I,EAAIgmB,iBADZ,CAGAva,EAAMw2B,WAAWxgC,EAAIuJ,EAAS+0B,EAAS,IAAIR,EAAmB,MAC9D,IAAK,IAAIxtD,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIiwB,EAAK,EACW,GAAhBP,EAAGU,OAAOpwB,KACViwB,EAAKtnB,KAAK4vB,IAAI7I,EAAGO,GAAGjwB,KACxB28C,EAAK38C,GAAKiwB,CACb,CAEGjwB,EAAI,EAAR,IACIk2B,EAAM,EACNxG,EAAGgG,YAAcrK,EAAQuL,aACzBV,EAAM,GACV,EAAG,CACC,IAAIi6B,EAAcC,EACdC,EAAOhsC,EAEPpb,EAAQymB,EAAGzmB,MAAMitB,GAErB,GADAl2B,GAAKiJ,IACD+kD,EAAQ93B,IAAQ,KAGpBjL,EAAOrsB,KAAK+9C,EAAM38C,EAAIiJ,EAAOA,IACzB8jB,UAAUiH,GAAG2oB,EAAK38C,EAAI,GAAI,IAA9B,CAIAmwD,GAAgB,EAAMnC,EAAQ93B,IAAQ+C,EAAQ/C,GAC9Ck6B,EAAoB,EACpB/rC,EAAQ,EACR,EAAG,CACC,IAAI0W,EACJ,IAAKs1B,EAAQ,EAAGhsC,EAAQgsC,EAAQpnD,IACxB8jB,UAAUyG,IAAImpB,EAAKt4B,EAAQrkB,EAAIiJ,GAAQ0zC,EAAKt4B,EAAQrkB,EAClDqwD,EAAQpnD,IAFqBonD,KAOvC,GAAIF,GAFJp1B,EAAQ4hB,EAAKt4B,EAAQrkB,EAAIiJ,GAAS0zC,EAAKt4B,EAAQrkB,EAAIiJ,GAC7ConD,GACoB,CACT,GAAThsC,IACA+rC,EAAoBzT,EAAKt4B,EAAQrkB,EAAIiJ,EAAQ,IACjD,KACH,CACDknD,GAAgBp1B,EAChB1W,GAASgsC,CACZ,OAAQhsC,EAAQpb,GACjB,IAAI8jB,UAAUiH,GAAGo8B,EAAmB,GAGpC,GACQznD,KAAK4vB,IAAI7I,EAAGO,GAAGjwB,EAAIiJ,KAAWmnD,IAC9B1gC,EAAGU,OAAOpwB,EAAIiJ,GAAS,WACpBA,EAAQ,EA7BP,CA8Bf,SAAUitB,EAAMxG,EAAGyX,QAEpBzX,EAAG4F,eAAiBo4B,EAAG4C,mBAAmBriC,EAAKyB,EAAI,KAxDzC,CAyDb,EA0aD5pB,KAAK20B,WAAa,SAAU5L,EAAKmL,EAAUf,EAASE,EAAO3E,EAAI4E,GAC3D,IAAInL,EAAMY,EAAIE,eACVwhC,EAAa,IAAI7oB,EACjB8oB,EAAa7lC,EAAU,KACvBqjC,EAAUrjC,EAAU8N,EAAOS,QAC3Bu3B,EAAkB,IAAIjD,EAEtBkD,EAAa,IAAIjD,EACjBkD,EAAsB,QACtBC,GAAe,EACfvC,GAAU,EACVwC,EAAmB,EAIvB,GApjBJ,SAA6B5iC,EAAK+L,EAAU82B,EAAct8B,EAAI2E,GAC1D,IAAI43B,EACAxhB,EAActhB,EAAIshB,YAAY/a,GAC9Bw8B,GAAe,EACf3sC,EAAQ4J,EAAIqhB,SAAS9a,GACrBy8B,EAAYtD,EAAmBmC,eAKnC,IAJA91B,EAASxE,YAAcnR,EACvBysC,GAAgB92B,EAASzE,aAEzB9J,EAAsB,GAAf8jB,KACG,CACN,IAAIzU,EAGJ,GAFAi2B,EAAQrD,EAAGwD,WAAWjjC,EAAKkL,EAAOa,EAAU,MAEzB,GAAfuV,GAAoBwhB,GAASD,EAC7B,MAGAC,EAAQD,GAEJG,GAAatD,EAAmBqC,iBAChCgB,GAAe,GAEfA,IACAzhB,GAAe,GACnB0hB,EAAYtD,EAAmBoC,aAC/Bj1B,EAAOyU,IAGH0hB,GAAatD,EAAmBoC,eAChCiB,GAAe,GAEfA,IACAzhB,GAAe,GACnB0hB,EAAYtD,EAAmBqC,eAC/Bl1B,GAAQyU,GAEZvV,EAASxE,aAAesF,EACpBd,EAASxE,YAAc,IACvBwE,EAASxE,YAAc,EACvBw7B,GAAe,GAEfh3B,EAASxE,YAAc,MACvBwE,EAASxE,YAAc,IACvBw7B,GAAe,EAEtB,CAKD,IAHAvlC,EAAOuO,EAASxE,aAAe,GAC/B/J,EAAOuO,EAASxE,YAAc,KAEvBu7B,EAAQD,GAAgB92B,EAASxE,YAAc,KAClDwE,EAASxE,cACTu7B,EAAQrD,EAAGwD,WAAWjjC,EAAKkL,EAAOa,EAAU,MAEhD/L,EAAIshB,YAAY/a,GAAOnQ,EAAQ2V,EAASxE,aAAe,EAAK,EAAI,EAChEvH,EAAIqhB,SAAS9a,GAAMwF,EAASxE,YAC5BwE,EAAS1E,eAAiBy7B,CAE7B,CAufGI,CAAoBljC,EAAK+L,EAAUZ,EAAW5E,EAAI2E,GAE9C,GAAKlL,EAAI2lB,cAET,OAAO,IAKXla,EAAMw2B,WAAWl2B,EAAUf,EAAS+0B,EAASyC,EACzCC,GACJD,EAAgB3gC,KAAOkK,EAAS1E,eAEhCi7B,EAAWr0D,OAAO89B,GAClB,IAAIo3B,EAAM,EAGV,IAFAxmC,EAAOsD,UAAUiL,EAAO,EAAGq3B,EAAY,EAAG,MAElCI,GAAc,CAElB,EAAG,CACC,IACIS,EADAC,EAAa,IAAI9D,EAEjB+D,EAAW,IAsBf,GAZIF,EAD6B,IAAN,EAAtBpjC,EAAIgmB,iBACU,GAEA,EAUfhmB,EAAIolB,YAAa,CACjB,GAAI2a,EAAQuC,EAAW55B,QAAU,EAC7B,MACJ,GAAI45B,EAAW76B,YAAcrK,EAAQuL,aAC7Bo3B,EAAQuC,EAAW55B,OAAS,GAAK,GAAOq3B,EAAQuC,EAAW55B,OAAS,GAAK,GAC7E,KACP,CAGD,IAAKy3B,EAAcv/B,EAAK0hC,EAAYvC,EAAS70B,EAAOk1B,GAChD,MAC6B,GAA7BkC,EAAWx6B,iBACXw7B,EAAW,KASf,IAAIC,EAAYp4B,EAAYm3B,EAAWh7B,aACvC,GAAIi8B,GAAa,EACb,MAMJ,MAAQjB,EAAWj7B,eAAiBo4B,EAAGwD,WAAWjjC,EAAKkL,EACnDo3B,EAAYG,IAAec,GAC5BjB,EAAW/6B,aAAe+7B,GACzBhB,EAAW/6B,cAEf,GAAI+6B,EAAW/6B,YAAc+7B,EACzB,MAEJ,GAAkC,GAA9Bd,EAAgBr1B,WAAiB,CAEjC,MAAQm1B,EAAWj7B,eAAiBo4B,EAAGwD,WAAWjjC,EAC9CkL,EAAOo3B,EAAYG,IAAeC,GACnCJ,EAAW/6B,aAAe+7B,GACzBhB,EAAW/6B,cAEf,GAAI+6B,EAAW/6B,YAAc+7B,EACzB,KACP,CAqBD,GAlBA73B,EAAMw2B,WAAWK,EAAYt3B,EAAS+0B,EAASsD,EAC3CZ,GACJY,EAAWxhC,KAAOygC,EAAWj7B,eAgBf,IAJLu4B,EANL7zB,EAAStE,YAAcrK,EAAQuL,WAEtB/H,EAAIsgB,WAEJtgB,EAAIugB,iBAEcqhB,EAAiBa,EAC5Cf,EAAYvC,GAAW,EAAI,GAI3B2C,EAAsB32B,EAAS1E,eAC/Bm7B,EAAkBa,EAClBt3B,EAAS99B,OAAOq0D,GAChBa,EAAM,EAGNxmC,EAAOsD,UAAUiL,EAAO,EAAGq3B,EAAY,EAAG,UAG1C,GAA2B,GAAvBviC,EAAI+lB,gBAAsB,CAC1B,KAAMod,EAAMC,GACyB,GAA9BZ,EAAgBr1B,WACnB,MACJ,GAA8B,GAAzBnN,EAAI4lB,mBAA2Bwa,GAAW+C,EAAM,GACjD,MACJ,GAA8B,GAAzBnjC,EAAI4lB,mBACFwa,GACCkC,EAAW/6B,YAAcq7B,EAAoB,GACjD,KACP,CAER,OAASN,EAAW/6B,YAAc+6B,EAAWx6B,eAAkB,KAEnC,GAAzB9H,EAAI4lB,kBACCwa,EAUDuC,GAAe,GARfL,EAAWr0D,OAAO89B,GAClBpP,EAAOsD,UAAUsiC,EAAY,EAAGr3B,EAAO,EAAG,KAC1Ci4B,EAAM,EACNP,EAAmBN,EAAW/6B,YAE9B64B,GAAU,GAOduC,GAAe,CAEtB,CAeD,OAbAnlC,EAAQuO,EAASxE,YAAcwE,EAASjE,gBAAmB,KAIvDlH,EAAI6O,KAAO7S,EAAQumB,QAAUviB,EAAI6O,KAAO7S,EAAQ8S,SAEhD/S,EAAOsD,UAAUsiC,EAAY,EAAGr3B,EAAO,EAAG,KAIR,IAAN,EAAtBlL,EAAIgmB,kBACVgc,wBAAwBhiC,EAAK+L,EAAUf,EAASE,GAE7Cs3B,EAAgBr1B,UAC1B,EAODt1B,KAAK40B,qBAAuB,SAAUzM,EAAKsG,EAAIC,GAC3C,IAAIvB,EAAUhF,EAAIgF,QACd+G,EAAW/G,EAAQoC,GAAGd,GAAIC,GAK9Bk5B,EAAG+D,oBAAoBxjC,EAAKsG,EAAIC,EAAIvB,GAKR,GAAxBhF,EAAI8lB,kBACJ2Z,EAAGgE,oBAAoBzjC,EAAK+L,GAKhCT,EAAGo4B,WAAW1jC,EAAK+L,EACtB,EAWDl0B,KAAK8rD,mBAAqB,SAAU/iC,EAAKmL,EAAUf,EAASE,EAAO3E,EAAIq9B,EAAU74B,GAC7E,IAMI84B,EANA7jC,EAAMY,EAAIE,eACVgjC,EAAe,IAAIrqB,EACnBsqB,EAAYrnC,EAAU,KACtBsnC,EAAWj5B,EACXk5B,EAAYl5B,EAAW,EACvBm5B,GAAan5B,EAAW64B,GAAY,EACvBO,EAAQ,EACrB/e,EAAcplB,EAAIolB,YAEtB5nB,EAAOwmC,GAAYnlC,kBAAkB6N,sBACrC1P,EAAOwJ,KAAKs9B,EAAa3hC,OAAQ,GAKjC,GACI3E,EAAO0mC,GAAaN,GACpBpmC,EAAO0mC,GAAan5B,GACpBvN,EAAOomC,GAAY74B,GAGf/K,EAAIolB,cADJ8e,EAAYF,EAAW,KAGL5e,EAEf5Y,WAAW5L,EAAKmL,EAAUf,EAASE,EAAO3E,EAAI29B,IAMzC,GACRC,EAAQ,EAKRF,EAAYl4B,EAAS1E,eAKrBy8B,EAAa71D,OAAO89B,GACpBpP,EAAOsD,UAAUiL,EAAO,EAAG64B,EAAW,EAAG,KAMzCF,GADA94B,EAAWk5B,EAAY,IACJL,EACnBM,GAAan5B,EAAW64B,GAAY,IAMpCC,EAAQ94B,GADR64B,EAAWM,EAAY,IAEvBA,GAAan5B,EAAW64B,GAAY,EAEvB,GAATO,IACAA,EAAQ,EAIRp4B,EAAS99B,OAAO61D,GAChBnnC,EAAOsD,UAAU8jC,EAAW,EAAG74B,EAAO,EAAG,aAG5C24B,EAAQ,IAEjB7jC,EAAIolB,YAAcA,EAOL,GAAT+e,GACAxnC,EAAOsD,UAAU6jC,EAAa3hC,OAAQ,EAAG4J,EAAS5J,OAAQ,EAAG,KAEjE3E,EAAOuO,EAAS1E,gBAAkB28B,EACrC,EASDnsD,KAAKusD,cAAgB,SAAUxjC,EAAKyjC,GAChC,IAAIrkC,EAAMY,EAAIE,eAMdd,EAAIwE,cAAgBxE,EAAIghB,gBACxB,IAAI/c,EAAewJ,EAAGrJ,aAAaxD,GAKnCZ,EAAIwE,cAAgB,EACpBP,EAAewJ,EAAGrJ,aAAaxD,GAE/B,IAAK,IAAIzyB,EAAI,EAAGA,GAAK6xB,EAAIihB,gBAAiB9yC,IAAK,CAC3C6xB,EAAIwE,cAAgBr2B,EACpB,IAAIk9B,EAAK,IAAId,SAAStG,GACtBogC,EAAUl2D,GAAKm9B,EAAGC,eAAe3K,EAAKyK,GACtCpH,EAAeoH,EAAGxJ,IACrB,CACJ,EAsBDhqB,KAAKysD,gBAAkB,SAAU1jC,EAAKgK,EAAIC,EAAeC,EAAOE,EAASq5B,EAAWT,EACnD74B,EAAUw5B,GACvC,IAEIz4B,EAFA9L,EAAMY,EAAIE,eAEQlD,EAAS,EAC3B4mC,EAAiB,EACjB3iC,EAAO,EAEX7B,EAAIwE,cAAgBxE,EAAIihB,gBACxB,IAAIgV,EAAM3qB,EAAGC,eAAe3K,EAAK,IAAI2J,SAAS,IAAMvK,EAAIwL,QAExD44B,cAAcxjC,EAAKyjC,GAEnB,IAAK,IAAI/9B,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAAM,CACrC,IAAIm+B,EAAMh5B,EAAMC,MAAM9K,EAAKgK,EAAIG,EAASzE,GAAK2vB,EAAK3vB,EAAI,GAClDtG,EAAI6G,UAAYzJ,EAAQuO,eACxBC,WAAW5L,EAAIgF,QAASsB,GACxBmF,EAAMI,YAAYd,EAASzE,GAAKuE,EAAcvE,GAAK2vB,EAAKwO,IAE5D,IAAK,IAAIl+B,EAAK,EAAGA,EAAKvG,EAAIgH,eAAgBT,EAAI,CAC1C,IAAIwF,EAAW/L,EAAIgF,QAAQoC,GAAGd,GAAIC,GAE9BwF,EAAStE,YAAcrK,EAAQuL,YAE/B/K,EAAS,MAAQ,EAAIljB,KACZygD,IAAI,IAAMvwB,EAAGtE,GAAIC,GAAM,MAAS,IACzCuF,EAAmB9L,EAAIgM,IAAIC,YAAcrO,IAEzCA,EAAS,MAAQ,EAAIljB,KACZygD,IAAI,IAAMvwB,EAAGtE,GAAIC,GAAM,MAAS,IACzCuF,EAAmB9L,EAAIgM,IAAIE,kBAAoBtO,GAEnDoC,EAAImM,cAAgBzxB,KAAK0xB,IAAI,GACN,GAAnBN,GAEJO,gBAAgBrM,EAAK+L,GACrBw4B,EAAMj+B,GAAIC,GAAMkF,EAAMc,UAAU3L,EAAKkK,EAAMxE,GAAIC,GAAKwF,EAChDf,EAAQ1E,GAAIC,IACK,GAAjBg+B,EAAMj+B,GAAIC,KACVi+B,EAAiB,GAErBZ,EAASt9B,GAAIC,GAAM,IAEnB1E,GAAQkJ,EAASzE,GAAIC,EACxB,CACJ,CACD,IAASD,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAC/B,IAASC,EAAK,EAAGA,EAAKvG,EAAIgH,aAAcT,IAChC1E,EAAOwiC,EAAUrkC,EAAIihB,mBACrBlW,EAASzE,GAAIC,IAAO89B,EAAUrkC,EAAIihB,iBAClClW,EAASzE,GAAIC,IAAO1E,GAEpB+hC,EAASt9B,GAAIC,GAAMwE,EAASzE,GAAIC,KAChCq9B,EAASt9B,GAAIC,GAAMwE,EAASzE,GAAIC,IAO5C,OAAOi+B,CACV,EAED3sD,KAAK6sD,qBAAuB,SAAU1kC,EAAKgL,EAAS44B,EAAU74B,GAC1D,IAAK,IAAIzE,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAC/B,IAAK,IAAIC,EAAK,EAAGA,EAAKvG,EAAIgH,aAAcT,IAAM,CAI1C,IAHA,IAAI9E,EAAKzB,EAAIgF,QAAQoC,GAAGd,GAAIC,GACxBo+B,EAAQ35B,EAAQ1E,GAAIC,GACpBq+B,EAAW,EACN38B,EAAM,EAAGA,EAAMxG,EAAGwX,SAAUhR,IACjC08B,EAAMC,MAAe,EAAK,KAAO38B,EAAMA,EACjC7K,EAAQY,QAAUZ,EAAQY,QAEpC,GAAIyD,EAAGgG,YAAcrK,EAAQuL,WACzB,IAASV,EAAMxG,EAAGuX,SAAU/Q,EAAM7K,EAAQa,QAASgK,IAC/C08B,EAAMC,MAAe,EAAK,KAAO38B,EAAMA,EACjC7K,EAAQa,QAAUb,EAAQa,QAChC0mC,EAAMC,MAAe,EAAK,KAAO38B,EAAMA,EACjC7K,EAAQa,QAAUb,EAAQa,QAChC0mC,EAAMC,MAAe,EAAK,KAAO38B,EAAMA,EACjC7K,EAAQa,QAAUb,EAAQa,QAGxC8M,EAASzE,GAAIC,GAAM,EAAI7rB,KAAK0B,IAAIwnD,EAASt9B,GAAIC,GACrC,GAAMwE,EAASzE,GAAIC,GAC9B,CAER,EAED1uB,KAAKgtD,gBAAkB,SAAUjkC,EAAKgK,EAAIE,EAAOE,EAASq5B,EAAWt5B,GACjE,IAII+5B,EAJA9kC,EAAMY,EAAIE,eAEV0jC,EAAiB,EACjBvO,EAAM,EAAGp0B,EAAO,EAGpB,GAAKjB,EAAImiB,YASF,CACH/iB,EAAIwE,cAAgB,EAChB6G,EAAK,IAAId,SAAS0rB,GACtB6O,EAAoBx5B,EAAGC,eAAe3K,EAAKyK,GAC3C4qB,EAAM5qB,EAAGxJ,KACTwiC,EAAU,GAAKS,CAClB,KAfqB,CAClB9kC,EAAIwE,cAAgBxE,EAAIihB,gBAExB,IAAI5V,EAAK,IAAId,SAAS0rB,GACtB3qB,EAAGC,eAAe3K,EAAKyK,GACvB4qB,EAAM5qB,EAAGxJ,KAETuiC,cAAcxjC,EAAKyjC,GACnBS,EAAoBT,EAAUrkC,EAAIihB,gBACrC,CAQD,IAAK,IAAI3a,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAAM,CACrCmF,EAAMC,MAAM9K,EAAKgK,EAAIG,EAASzE,GAAK2vB,EAAK3vB,EAAI,GACxCtG,EAAI6G,UAAYzJ,EAAQuO,cACxBC,WAAW5L,EAAIgF,QAASsB,GAE5B,IAAK,IAAIC,EAAK,EAAGA,EAAKvG,EAAIgH,eAAgBT,EAAI,CAC1C,IAAIwF,EAAW/L,EAAIgF,QAAQoC,GAAGd,GAAIC,GAElCvG,EAAImM,cAAgBzxB,KAAK0xB,IAAI,GACH,GAAtBpM,EAAIgM,IAAIC,aAEZI,gBAAgBrM,EAAK+L,GACjB,GAAKN,EAAMc,UAAU3L,EAAKkK,EAAMxE,GAAIC,GAAKwF,EACrCf,EAAQ1E,GAAIC,MAChBi+B,EAAiB,GAErB3iC,GAAQkJ,EAASzE,GAAIC,EACxB,CACJ,CACD,IAASD,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAC/B,IAASC,EAAK,EAAGA,EAAKvG,EAAIgH,aAAcT,IAChC1E,EAAOijC,IACP/5B,EAASzE,GAAIC,IAAOu+B,EACpB/5B,EAASzE,GAAIC,IAAO1E,GAQhC,OAAO2iC,CACV,EAOD3sD,KAAKktD,iBAAmB,SAAUnkC,EAAKgK,EAAIC,EAAeM,EAAW65B,EAAqBC,GACtF,IAEIC,EACA5+B,EAAIC,EAAI4+B,EAHRnlC,EAAMY,EAAIE,eACVkE,EAAUhF,EAAIgF,QAEGoG,EAAY,EAEjCpL,EAAIwE,cAAgBxE,EAAIihB,gBACxB,IAAI5V,EAAK,IAAId,SAASa,GA0CtB,IAzCA65B,EAAe,GAAK35B,EAAGC,eAAe3K,EAAKyK,GAC3CD,EAAYC,EAAGxJ,KAEf7B,EAAIwE,cAAgB,EACpB4G,EAAYqC,EAAGrJ,aAAaxD,GAA0B,EAAnBZ,EAAII,aACvC4kC,EAAoB,GAAK55B,GAAapL,EAAIwL,QAAUxL,EAAIgH,cAExDoE,EAAYxK,EAAIggB,sBAAwBhgB,EAAIsO,UAAY,IACvB,IAAN,EAAtBlP,EAAIgmB,mBACL5a,GAAa,MACjBA,GAAaxK,EAAI+D,eACjByG,GAAgC,EAAnBpL,EAAII,aACjBgL,GAAcpL,EAAIwL,QAAUxL,EAAIgH,cAsBhCk+B,EAAa,IAAM,KAAO,GAAOtkC,EAAIoiB,mBAAlB,KAEF,KACbkiB,EAAa,IACbA,EAAa,IACbA,EAAa,GAEZ5+B,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAAM,CACjC,IAAI8Y,EAAM,EACV,IAAK7Y,EAAK,EAAGA,EAAKvG,EAAIgH,aAAcT,IAAM,CAGtC,GAFA4E,EAAU7E,GAAIC,GAAO2c,IAAKgiB,EAAa95B,GAEnCR,EAAGtE,GAAIC,GAAM,IAAK,CAClB,IAAI6+B,EAAYliB,KAAMtY,EAAGtE,GAAIC,GAAM,KAAO,KAEtCwF,EAAW/G,EAAQoC,GAAGd,GAAIC,GAC9B4E,EAAU7E,GAAIC,GAAO2c,IAAKgiB,EAAa95B,GAGnCW,EAAStE,YAAcrK,EAAQuL,YAC3By8B,EAAWh6B,EAAY,IACvBg6B,EAAWh6B,EAAY,GAG3Bg6B,EAAuB,EAAZh6B,EAAgB,EAC3Bg6B,EAAuB,EAAZh6B,EAAgB,EACtBg6B,EAAW,IAChBA,EAAW,GAEfj6B,EAAU7E,GAAIC,IAAO6+B,CACxB,CACGj6B,EAAU7E,GAAIC,GAAM1H,kBAAkB6N,uBACtCvB,EAAU7E,GAAIC,GAAM1H,kBAAkB6N,sBAE1C0S,GAAOjU,EAAU7E,GAAIC,EACxB,CAED,GAAI6Y,EAAMvgB,kBAAkBysB,qBACxB,IAAK/kB,EAAK,EAAGA,EAAKvG,EAAIgH,eAAgBT,EAClC4E,EAAU7E,GAAIC,IAAO1H,kBAAkBysB,qBACvCngB,EAAU7E,GAAIC,IAAO6Y,CAGhC,CAGD,GAAIpf,EAAI6G,UAAYzJ,EAAQuO,aACxB,IAAKrF,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAC3BmF,EAAMI,YAAYV,EAAU7E,GAAKuE,EAAcvE,GAAK8E,EAC9CpL,EAAIgH,aACNnI,kBAAkBysB,sBAO9B,IADA6Z,EAAU,EACL7+B,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAC3B,IAAKC,EAAK,EAAGA,EAAKvG,EAAIgH,aAAcT,IAC5B4E,EAAU7E,GAAIC,GAAM1H,kBAAkB6N,uBACtCvB,EAAU7E,GAAIC,GAAM1H,kBAAkB6N,sBAC1Cy4B,GAAWh6B,EAAU7E,GAAIC,GAOjC,GAAI4+B,EAAUF,EAAe,GACzB,IAAK3+B,EAAK,EAAGA,EAAKtG,EAAIwL,QAASlF,IAC3B,IAAKC,EAAK,EAAGA,EAAKvG,EAAIgH,aAAcT,IAChC4E,EAAU7E,GAAIC,IAAO0+B,EAAe,GACpC95B,EAAU7E,GAAIC,IAAO4+B,CAIpC,CAEJ,C,wBC97CD,IAAIvc,EAAWhxB,EAAQ,OACnB6E,EAAS7E,EAAQ,OAEjBgF,GADSH,EAAOE,OACNF,EAAOG,SACjBC,EAAQJ,EAAOI,MAEfE,GADaN,EAAOK,WACbL,EAAOM,MAKdL,GAJSD,EAAOO,OACFP,EAAOQ,YACVR,EAAOS,SACLT,EAAOU,WACRV,EAAOC,WAEnBY,GADcb,EAAOY,YACXZ,EAAOa,SAEjBE,GADYf,EAAOc,UACVd,EAAOe,QAEhBJ,EAAUxF,EAAQ,OAClB2S,EAAW3S,EAAQ,OACnBiH,EAAoBjH,EAAQ,OAOhC,SAASytC,IACL,IAAIvmC,EAAYlH,EAAQ,OACpB0tC,EAAM,KACNh6B,EAAK,KACLoC,EAAM,KAEV71B,KAAKynB,WAAa,SAAU4hC,EAAKD,EAAKrzB,GAClC03B,EAAMpE,EACN51B,EAAK21B,EACLvzB,EAAME,CACT,EAOD/1B,KAAKkpD,OAAS,SAAUvlD,GAEpB,OADAgiB,EAAO,GAAKhiB,GAAKA,EAAI6pD,EAAYE,OAC1BC,EAAOhqD,EACjB,EAKD,IAAIiqD,EAAc,qBAOdC,EAFYL,EAAYM,UAEI,EAE5BJ,EAAQF,EAAYE,MAapBK,EAASP,EAAYO,OAERP,EAAYQ,WAe7BhuD,KAAKwpD,gBAAkB,CACnB,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,IACvC,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,GAAI,IACzC,CAAC,CAAC,GAAI,GAAI,EAAG,GAAI,CAAC,GAAI,GAAI,EAAG,GAAI,CAAC,GAAI,GAAI,EAAG,IAC7C,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,EAAG,GAAI,GAAI,IAC5C,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,GAAI,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,EAAG,IACzC,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,GAAI,GAAI,EAAG,GAAI,CAAC,EAAG,GAAI,EAAG,KAK9C,IAAIV,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACpD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtB9oD,KAAK8oD,OAASA,EAQd9oD,KAAK8sC,YAAc,CAEf,IAAIiE,EAAS,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5F,IAAK,KACT,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,KACnD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzB,IAAIA,EAAS,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5F,IAAK,KACT,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,KACnD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzB,IAAIA,EAAS,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5F,IAAK,KACT,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,KACnD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzB,IAAIA,EAAS,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9F,KACJ,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,KAClD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzB,IAAIA,EAAS,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9F,KACJ,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,KAClD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzB,IAAIA,EAAS,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/F,KACJ,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,KACnD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzB,IAAIA,EAAS,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5F,IAAK,KACT,CAAC,EAAO,EAAQ,EAAQ,GAAQ,GAAQ,GAAQ,GAAS,GAAS,GAAS,GAAS,IAChF,IAAS,IAAS,KACpB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzB,IAAIA,EAAS,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5F,IAAK,KACT,CAAC,EAAO,EAAQ,EAAQ,GAAQ,GAAQ,GAAQ,GAAS,GAAS,GAAS,GAAS,IAChF,IAAS,IAAS,KACpB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzB,IAAIA,EAAS,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5F,IAAK,IAAK,KACd,CAAC,EAAO,EAAQ,GAAQ,GAAQ,GAAS,GAAS,GAAS,GAAS,IAAS,IAAS,IAClF,IAAS,IAAS,KACpB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAI7B,IAAIkd,EAAQppC,EAAU6oC,EAAQK,EAAS,GACnCJ,EAAS9oC,EAAU6oC,GACnBQ,EAAQrpC,EAAUgpC,GAElBM,EAAQtpC,EAAUgpC,GA2BtB,SAASO,EAAQrlC,EAAKsQ,GAClB,IAAI6nB,EAAMrrB,EAAIsxB,WAAW9tB,EAAGtQ,GAM5B,OAJAm4B,GArIa,IAwIbA,EAAMr+C,KAAK0xB,IAAI,GAAM2sB,EAAM,GAAOn4B,EAAI8nB,SAEzC,CA4dD,SAASwd,EAAUn0D,GACf8F,KAAKW,EAAIzG,CACZ,CAhgBD8F,KAAKmuD,MAAQA,EA0HbnuD,KAAK2uC,eAAiB,SAAU5lB,GAC5B,IAEIzyB,EAFA6xB,EAAMY,EAAIE,eACVkE,EAAUhF,EAAIgF,QAGlB,GAA+B,GAA3BhF,EAAIgpB,oBAA0B,CAO9B,IANAhpB,EAAIgpB,oBAAsB,EAE1BhkB,EAAQE,gBAAkB,EA9FlC,SAAqBtE,GAQjB,IAPA,IAAIulC,EAAQvlC,EAAIE,eAAemP,IAAIlS,EAC/BqoC,EAAaxlC,EAAIE,eAAemP,IAAI/R,OACpCmoC,EAAQzlC,EAAIE,eAAemP,IAAIz3B,EAC/B8tD,EAAa1lC,EAAIE,eAAemP,IAAI7R,OACpC4B,EAAMY,EAAIE,eACVylC,EAAY3lC,EAAI+D,eAEXsD,EAAM,EAAGA,EAAM7K,EAAQY,QAASiK,IAAO,CAC5C,IAAI7R,EAAQ4J,EAAIoD,cAAcrF,EAAEkK,GAC5B5R,EAAM2J,EAAIoD,cAAcrF,EAAEkK,EAAM,GACpCk+B,EAAMl+B,GAAOpL,EAAMiiC,UACnB,IAAK,IAAI3wD,EAAIioB,EAAOjoB,EAAIkoB,EAAKloB,IAAK,CAC9B,IACIq4D,EAAQP,EAAQrlC,EADTzyB,EAAIo4D,EAAJ,MAGXJ,EAAMl+B,GAAOvtB,KAAK+lB,IAAI0lC,EAAMl+B,GAAMu+B,EACrC,CACJ,CAED,IAASv+B,EAAM,EAAGA,EAAM7K,EAAQe,OAAQ8J,IAIpC,IAHI7R,EAAQ4J,EAAIoD,cAAclF,OAAO+J,GACjC5R,EAAM2J,EAAIoD,cAAclF,OAAO+J,EAAM,GACzCm+B,EAAWn+B,GAAOpL,EAAMiiC,UACf3wD,EAAIioB,EAAOjoB,EAAIkoB,EAAKloB,IAErBq4D,EAAQP,EAAQrlC,EADTzyB,EAAIo4D,EAAJ,MAGXH,EAAWn+B,GAAOvtB,KAAK+lB,IAAI2lC,EAAWn+B,GAAMu+B,GAIpD,IAASv+B,EAAM,EAAGA,EAAM7K,EAAQa,QAASgK,IAAO,CAI5C,IAHI7R,EAAQ4J,EAAIoD,cAAc5qB,EAAEyvB,GAC5B5R,EAAM2J,EAAIoD,cAAc5qB,EAAEyvB,EAAM,GACpCo+B,EAAMp+B,GAAOpL,EAAMiiC,UACV3wD,EAAIioB,EAAOjoB,EAAIkoB,EAAKloB,IAErBq4D,EAAQP,EAAQrlC,EADTzyB,EAAIo4D,EAAJ,KAGXF,EAAMp+B,GAAOvtB,KAAK+lB,IAAI4lC,EAAMp+B,GAAMu+B,GAEtCH,EAAMp+B,IAASjI,EAAIoD,cAAc5qB,EAAEyvB,EAAM,GAAKjI,EAAIoD,cAAc5qB,EAAEyvB,EACrE,CAED,IAASA,EAAM,EAAGA,EAAM7K,EAAQiB,OAAQ4J,IAAO,CAI3C,IAHI7R,EAAQ4J,EAAIoD,cAAchF,OAAO6J,GACjC5R,EAAM2J,EAAIoD,cAAchF,OAAO6J,EAAM,GACzCq+B,EAAWr+B,GAAOpL,EAAMiiC,UACf3wD,EAAIioB,EAAOjoB,EAAIkoB,EAAKloB,IAErBq4D,EAAQP,EAAQrlC,EADTzyB,EAAIo4D,EAAJ,KAGXD,EAAWr+B,GAAOvtB,KAAK+lB,IAAI6lC,EAAWr+B,GAAMu+B,GAGhDF,EAAWr+B,IAASjI,EAAIoD,cAAc5qB,EAAE,IAAMwnB,EAAIoD,cAAc5qB,EAAE,GACrE,CAKD,GAAIooB,EAAI6nB,MAAO,CACX,IAASxgB,EAAM,EAAGA,EAAM7K,EAAQY,QAASiK,IACrCk+B,EAAMl+B,GAAO,MAEjB,IAASA,EAAM,EAAGA,EAAM7K,EAAQe,OAAQ8J,IACpCm+B,EAAWn+B,GAAO,MAEtB,IAASA,EAAM,EAAGA,EAAM7K,EAAQa,QAASgK,IACrCo+B,EAAMp+B,GAAO,MAEjB,IAASA,EAAM,EAAGA,EAAM7K,EAAQiB,OAAQ4J,IACpCq+B,EAAWr+B,GAAO,KAEzB,CAKDjI,EAAIiQ,IAAIt1B,MAAQ,GAAMD,KAAKmrB,MAAMogC,EAAQrlC,GAAM,GAClD,CAcO6lC,CAAY7lC,GAEZmlC,EAAM,GAAK,EACN53D,EAAI,EAAGA,EAAIu3D,EAAcv3D,IAC1B43D,EAAM53D,GAAKuM,KAAK0xB,IAAIj+B,EAAG,EAAM,GAEjC,IAAKA,EAAI,EAAGA,EAAIu3D,EAAe,EAAGv3D,IAC9B63D,EAAM73D,GAAOA,EAAI,EAAKuM,KAAK0xB,IACvB,IAAO25B,EAAM53D,GAAK43D,EAAM53D,EAAI,IAAK,KAGzC,IAFA63D,EAAM73D,GAAK,GAENA,EAAI,EAAGA,EAAIo3D,EAAOp3D,IACnBq3D,EAAOr3D,GAAKuM,KAAK0xB,IAAI,GAAkB,OAAZj+B,EAAI,MACnC,IAAKA,EAAI,EAAGA,GAAKo3D,EAAQK,EAAQz3D,IAC7B23D,EAAM33D,GAAKuM,KAAK0xB,IAAI,EAA0B,KAApBj+B,EAAI,IAAMy3D,IAKpC,IAAI7U,EAAM2V,EAAMC,EAAQC,EAyBxB,IA5BJtB,EAAIuB,aAAa7mC,IAKb7xB,EAAKyyB,EAAIylB,eAAiB,EAAK,KACtB,KACLl4C,GAAK,IACT4iD,EAAOr2C,KAAK0xB,IAAI,GAAIj+B,EAAI,EAAM,KAE9BA,EAAKyyB,EAAIylB,eAAiB,EAAK,KACtB,KACLl4C,GAAK,IACTu4D,EAAOhsD,KAAK0xB,IAAI,GAAIj+B,EAAI,EAAM,KAE9BA,EAAKyyB,EAAIylB,eAAiB,GAAM,KACvB,KACLl4C,GAAK,IACTw4D,EAASjsD,KAAK0xB,IAAI,GAAIj+B,EAAI,EAAM,KAMhCA,EAAKyyB,EAAIylB,eAAiB,GAAM,KACvB,KACLl4C,GAAK,IACTy4D,EAAQD,EAASjsD,KAAK0xB,IAAI,GAAIj+B,EAAI,EAAM,IACnCA,EAAI,EAAGA,EAAIivB,EAAQY,QAAS7vB,IAAK,CAG9B+iC,EADA/iC,GAAK,EACD4iD,EACC5iD,GAAK,GACNu4D,EACCv4D,GAAK,GACNw4D,EAEAC,EAER5mC,EAAImR,MAAM4d,SAAS5gD,GAAK+iC,CAC3B,CACD,IAAK/iC,EAAI,EAAGA,EAAIivB,EAAQa,QAAS9vB,IAAK,CAClC,IAAI+iC,EAEAA,EADA/iC,GAAK,EACD4iD,EACC5iD,GAAK,GACNu4D,EACCv4D,GAAK,GACNw4D,EAEAC,EAER5mC,EAAImR,MAAM6d,UAAU7gD,GAAK+iC,CAC5B,CAER,CACJ,EAODr5B,KAAK6zB,MAAQ,SAAU9K,EAAKgK,EACLO,EAAWC,EAAW9E,EAAIwgC,GAC7C,IACejlC,EAEX0E,EAHAvG,EAAMY,EAAIE,eACVimC,EAAQ,EACR3B,EAAW9nC,EAAQ,GAInB+N,EAAK,IAAId,EAASw8B,GAClBC,EAAa17B,EAAG27B,YAAYrmC,EAAKwK,EAAWC,EAAIy7B,GAGhD/7B,GAFJg8B,EAAQ17B,EAAGxJ,MAEYmlC,EAKvB,IAJIj8B,EAAWlM,EAAkBysB,uBAE7BvgB,EAAWlM,EAAkBysB,sBAE5BzpB,EAAO,EAAG0E,EAAK,EAAGA,EAAKvG,EAAIgH,eAAgBT,EAI5C4E,EAAU5E,GAAM7rB,KAAK+lB,IAAI5B,EAAkB6N,qBACvCq6B,EAAQ/mC,EAAIgH,cAEhBo+B,EAAS7+B,GAAM,EAAK4E,EAAU5E,GAAMqE,EAAGtE,GAAIC,GAAM,IAAQ4E,EAAU5E,GAG/D6+B,EAAS7+B,GAAkB,EAAZ6E,EAAgB,IAC/Bg6B,EAAS7+B,GAAkB,EAAZ6E,EAAgB,GAC/Bg6B,EAAS7+B,GAAM,IACf6+B,EAAS7+B,GAAM,GAEf6+B,EAAS7+B,GAAM4E,EAAU5E,GAAM1H,EAAkB6N,uBACjD04B,EAAS7+B,GAAM7rB,KAAK0B,IAAI,EACpByiB,EAAkB6N,qBAAuBvB,EAAU5E,KAE3D1E,GAAQujC,EAAS7+B,GAErB,GAAI1E,EAAOmlC,EACP,IAAKzgC,EAAK,EAAGA,EAAKvG,EAAIgH,eAAgBT,EAClC6+B,EAAS7+B,GAAMygC,EAAa5B,EAAS7+B,GAAM1E,EAInD,IAAK0E,EAAK,EAAGA,EAAKvG,EAAIgH,eAAgBT,EAClC4E,EAAU5E,IAAO6+B,EAAS7+B,GAC1BygC,GAAc5B,EAAS7+B,GAG3B,IAAK1E,EAAO,EAAG0E,EAAK,EAAGA,EAAKvG,EAAIgH,eAAgBT,EAC5C1E,GAAQsJ,EAAU5E,GAEtB,GAAI1E,EAAOhD,EAAkBysB,qBAAsB,CAC/C,IAAIlM,EAAM,EACV,IAAK7Y,EAAK,EAAGA,EAAKvG,EAAIgH,eAAgBT,EAClC4E,EAAU5E,IAAO1H,EAAkBysB,qBACnCngB,EAAU5E,IAAO1E,EACjBud,GAAOjU,EAAU5E,GAErB/I,EAAO4hB,GAAOvgB,EAAkBysB,qBACnC,CAED,OAAOvgB,CACV,EAEDlzB,KAAKg0B,YAAc,SAAUV,EAAWN,EAAeO,EAAWL,GAC9DvN,EAAOuN,GAAYlM,EAAkBysB,sBACrC9tB,EAAO2N,EAAU,GAAKA,EAAU,IAAMtM,EAAkBysB,sBAOxD,IAAI4b,EAAM,KAAO,GAAKr8B,GAAiB,GACnCq8B,EAAM,IACNA,EAAM,GACNA,EAAM,KACNA,EAAM,IAIV,IAAIC,EAAY,EAAW,GAAND,GAAY/7B,EAAU,GAAKA,EAAU,IAEtDg8B,EAAYtoC,EAAkB6N,qBAAuBvB,EAAU,KAC/Dg8B,EAAYtoC,EAAkB6N,qBAAuBvB,EAAU,IAE/Dg8B,EAAY,IACZA,EAAY,GAEZh8B,EAAU,IAAM,MAEZA,EAAU,GAAKg8B,EAAY,KAIvBh8B,EAAU,GAAKC,IACfD,EAAU,IAAMg8B,GACpBh8B,EAAU,IAAMg8B,IAEhBh8B,EAAU,IAAMA,EAAU,GAAK,IAC/BA,EAAU,GAAK,OAIvBg8B,EAAYh8B,EAAU,GAAKA,EAAU,IACrBJ,IACZI,EAAU,GAAMJ,EAAWI,EAAU,GAAMg8B,EAC3Ch8B,EAAU,GAAMJ,EAAWI,EAAU,GAAMg8B,GAE/C3pC,EAAO2N,EAAU,IAAMtM,EAAkB6N,sBACzClP,EAAO2N,EAAU,IAAMtM,EAAkB6N,sBACzClP,EAAO2N,EAAU,GAAKA,EAAU,IAAMtM,EAAkBysB,qBAC3D,EAODzzC,KAAK4pD,UAAY,SAAU7wD,EAAG4K,EAAG4rD,GAI7B,IAAIvzD,EAAI,YAEJs4C,EAAIpvB,EAAKo3B,aAAa34C,EAAG,IACzB9B,EAAI9I,EAAIA,EACR4jC,EAAI,EAWR,OAVA2X,GAAKib,EAED1tD,EAAI,QACJ86B,EAAI,EAAKzX,EAAKo3B,aAAaz6C,EAAG,GAAO7F,IACrC2gC,EAAI,IACJA,EAAI,GACR2X,GAAK3X,EACL2X,GAAKib,EAAWvzD,EAXR,YAcD6G,KAAK0xB,IAAI,GAAK,GAAM+f,EAC9B,EAQDt0C,KAAK00B,UAAY,SAAU3L,EAAKkK,EAAOiB,EAAU44B,GAC7C,IAEIpD,EAFAqD,EAAW,EACX5kC,EAAMY,EAAIE,eACJ/uB,EAAI,EAAGs1D,EAAW,EACxBp3B,EAAMjQ,EAAIiQ,IACVjO,EAAK+J,EAAS/J,GACdslC,EAAoB1mC,EAAI6O,KAAO7S,EAAQ8S,SAAY,EAAI,EACvDvD,EAAgBnM,EAAImM,cAOxB,IALIvL,EAAI6O,KAAO7S,EAAQ8S,UAAY9O,EAAI6O,KAAO7S,EAAQ+S,SAElDxD,EAAgB,GAGfo1B,EAAO,EAAGA,EAAOx1B,EAASkN,SAAUsoB,IAAQ,CAW7CgG,GALIC,EADA5mC,EAAI6O,KAAO7S,EAAQumB,QAAUviB,EAAI6O,KAAO7S,EAAQ8S,SACzC+xB,UAAUxxB,EAAIrS,OAAQqS,EAAIlS,EAAEwjC,GAAOtxB,EAAIt1B,OAEvCs1B,EAAIrS,OAASqS,EAAIlS,EAAEwjC,KAE9BvmD,EAAQ+wB,EAAS/wB,MAAMumD,IAEvBkG,EAAMhC,EACN1nC,EAAI/iB,GAAS,EACb0sD,EAAM,EACN,EAAG,CAGCA,GADAC,EAAK3lC,EAAGjwB,GAAKiwB,EAAGjwB,GAEhB01D,GAAQE,EAAKJ,EAAOI,EAAKJ,EAGzBG,GADAE,EAAK5lC,IADLjwB,GACaiwB,EAAGjwB,GAEhB01D,GAAQG,EAAKL,EAAOK,EAAKL,EACzBx1D,GACH,SAAUgsB,EAAI,GAIf,GAHI2pC,EAAMF,GACNH,IAEA9F,GAAQnkC,EAAQ+U,QAEZs1B,GADAjsD,EAAIgsD,EAAOxnC,EAAImR,MAAM4d,SAASwS,MAE9BkG,EAAMjsD,GAMd,GAHwB,GAApB8rD,IACAE,EAAOC,IAEN7mC,EAAI2nB,QAEL,IADIj0C,EAAIw2B,EAAM8O,GAAG7b,EAAEwjC,IACX,EAEJ/lD,EAAIksD,EAAM58B,EAAM6O,IAAI5b,EAAEwjC,GAAQp1B,EAAgB73B,EACtB,GAApBgzD,IACA9rD,GAAKwkB,EAAImR,MAAM4d,SAASwS,IACxBiG,EAAOhsD,IACPgsD,EAAOhsD,GAIfmpD,EAAMC,KADc,GAApB0C,EACoBE,EAEAA,EAAOxnC,EAAImR,MAAM4d,SAASwS,EACrD,CAID,IAAIsG,EAAc,IAClB,GAAI97B,EAAStE,YAAcrK,EAAQuL,WAG/B,IADA,IAAItmB,EAAI,IACM,GAAPA,KAAYyc,EAAUiH,GAAG/D,EAAG3f,GAAI,IACnCwlD,EAAcxlD,EAGtB0pB,EAASqN,kBAAoByuB,EAE7B,IAAK,IAAI5/B,EAAM8D,EAASiN,SAAUuoB,EAAOx1B,EAASmN,OAAQjR,IAAOs5B,GAAQ,EAAG,CACxE,IAAIvmD,EAAOnK,EACPi3D,EAOJ,IALIA,EADAlnC,EAAI6O,KAAO7S,EAAQumB,QAAUviB,EAAI6O,KAAO7S,EAAQ8S,SACvC+xB,UAAUxxB,EAAIrS,OAAQqS,EAAIz3B,EAAEyvB,GAAMgI,EAAIt1B,OAEtCs1B,EAAIrS,OAASqS,EAAIz3B,EAAEyvB,GAEhCjtB,EAAQ+wB,EAAS/wB,MAAMumD,GAClB1wD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpB,IAAe22D,EACXD,EAAKE,EA8BDnzD,EAEIkH,EAjCRksD,EAAM,EAEN3pC,EAAI/iB,GAAS,EAEjBusD,EAAMO,EAAS9sD,EACfysD,EAAMhC,EACN,EAAG,CACC,IAAIkC,EAAIC,EAERF,GADAC,EAAK3lC,EAAGjwB,GAAKiwB,EAAGjwB,GAEhB01D,GAAQE,EAAKJ,EAAOI,EAAKJ,EAGzBG,GADAE,EAAK5lC,IADLjwB,GACaiwB,EAAGjwB,GAEhB01D,GAAQG,EAAKL,EAAOK,EAAKL,EACzBx1D,GACH,SAAUgsB,EAAI,GAGf,GAFI2pC,EAAMI,GACNT,IACAp/B,GAAO7K,EAAQgV,QAEXq1B,GADAjsD,EAAIssD,EAAS9nC,EAAImR,MAAM6d,UAAU/mB,MAEjCw/B,EAAMjsD,GAQd,GAJIgsD,EADoB,GAApBF,EACOG,EAEAK,GAENlnC,EAAI2nB,UAAY3nB,EAAI4nB,SAErB,IADIl0C,EAAIw2B,EAAM8O,GAAGphC,EAAEyvB,GAAKp3B,IAChB,EAEJ2K,EAAIksD,EAAM58B,EAAM6O,IAAInhC,EAAEyvB,GAAKp3B,GAAKs7B,EAAgB73B,EACxB,GAApBgzD,IACA9rD,GAAKwkB,EAAImR,MAAM6d,UAAU/mB,IACzBu/B,EAAOhsD,IACPgsD,EAAOhsD,GAIfmpD,EAAMC,KADc,GAApB0C,EACoBE,EAEAA,EAAOxnC,EAAImR,MAAM6d,UAAU/mB,EACtD,CAEGrH,EAAIihB,cACA8iB,EAAMC,EAAW,GAAKD,EAAMC,EAAW,EAAI,KAC3CD,EAAMC,EAAW,EAAI,KAAOD,EAAMC,EAAW,GAAKD,EAAMC,EAAW,EAAI,IACjE5kC,EAAIlC,OACV6mC,EAAMC,EAAW,EAAI,GAAKD,EAAMC,EAAW,EAAI,KAC/CD,EAAMC,EAAW,EAAI,KAAOD,EAAMC,EAAW,EAAI,GAAKD,EAAMC,EAAW,EAAI,IACrE5kC,EAAIlC,OAErB,CAGD,OAAOupC,CACV,EAMDxvD,KAAKkwD,gBAAkB,SAAUh8B,EAAUi8B,EAAWjqC,EAAG8O,GACrD,IAAIC,EAAQ,EACR/6B,EAAIi2D,EAAUxvD,EACdspB,EAAKiK,EAAS5J,OAElB,GAAIpwB,EAAIg6B,EAAS9J,OACb,KAAgB,GAARlE,KAAW,CAEf09B,EAAO1vB,EAAS/J,GAAGjwB,GACnBA,IACA+6B,GAAS2uB,EAAOA,EAChBA,EAAO1vB,EAAS/J,GAAGjwB,GACnBA,IACA+6B,GAAS2uB,EAAOA,CACnB,MACE,GAAI1pD,EAAIg6B,EAAShK,WAAY,CAChC,IAAIkmC,EAAOvrC,EAAU,GAGrB,IAFAurC,EAAK,GAAK,EACVA,EAAK,GAAKp7B,EACM,GAAR9O,KAAW,CAEf09B,EAAO/gD,KAAK4vB,IAAIyB,EAAS/J,GAAGjwB,IAAMk2D,EAAKnmC,EAAG/vB,IAC1CA,IACA+6B,GAAS2uB,EAAOA,EAChBA,EAAO/gD,KAAK4vB,IAAIyB,EAAS/J,GAAGjwB,IAAMk2D,EAAKnmC,EAAG/vB,IAC1CA,IACA+6B,GAAS2uB,EAAOA,CACnB,CACJ,MACG,KAAgB,GAAR19B,KAAW,CACf,IAAI09B,EACJA,EAAO/gD,KAAK4vB,IAAIyB,EAAS/J,GAAGjwB,IAAMg0D,EAAMjkC,EAAG/vB,IAAM86B,EACjD96B,IACA+6B,GAAS2uB,EAAOA,EAChBA,EAAO/gD,KAAK4vB,IAAIyB,EAAS/J,GAAGjwB,IAAMg0D,EAAMjkC,EAAG/vB,IAAM86B,EACjD96B,IACA+6B,GAAS2uB,EAAOA,CACnB,CAIL,OADAuM,EAAUxvD,EAAIzG,EACP+6B,CACV,EAiBDj1B,KAAKoqD,WAAa,SAAUl2B,EAAUf,EAAS+0B,EAASmI,EAAKzF,GACzD,IAEIx6B,EAAKlK,EAntBEviB,EAitBP2sD,EAAa,EACbC,EAAa,EACLC,EAAO,EACfC,EAAgB,EAEhBC,EAAe,EAEfr7B,GAAa,GACbn7B,EAAI,EACJ02B,EAAWsD,EAAStD,SACpB+/B,EAAc,EAIlB,IAFAN,EAAI96B,SAAW,EAEVnF,EAAM,EAAGA,EAAM8D,EAASmN,OAAQjR,IAAO,CACxC,IA0DQr1B,EA1DJ4F,EAAIuzB,EAASxE,aACRkB,EAAS+/B,MAAuC,GAApBz8B,EAASlE,QAAe84B,EAAO14B,GAC1D,IAAQ8D,EAASjE,eAAiB,GACS,EAA/CiE,EAASnE,cAAcmE,EAAS7yB,OAAO+uB,IACzC6E,EAAQ,EAEZ,GAAkB,MAAd21B,GAAuBA,EAAW51B,KAAK5E,IAAQzvB,EAG/Cs0B,EAAQ21B,EAAW31B,MAAM7E,GACzBl2B,GAAKg6B,EAAS/wB,MAAMitB,GACpB83B,EAAQoI,KAAgBr7B,EAAQ9B,EAAQo9B,KAExCt7B,EAAQ21B,EAAW11B,UAAU9E,OAE1B,CACH,IAIQwgC,EAJJ57B,GA/uBZrP,EAAO,IADIhiB,EAgvBchD,GA/uBR6sD,EAAYO,QAAWpqD,EAAI6pD,EAAYE,OACjDO,EAAMtqD,EAAI6pD,EAAYO,SAivBrB,GAFA7nC,EAAIgO,EAAS/wB,MAAMitB,IAAQ,EAEtBl2B,EAAIg6B,EAAS/wB,MAAMitB,GAAQ8D,EAASqN,kBAKjCrb,GAHJ0qC,EAAc18B,EAASqN,kBAAoBrnC,EAAI,GAE7B,EACV02D,GAAe,EAEf,EAGZ,IAAIC,EAAK,IAAIxC,EAAUn0D,GACvB+6B,EAAQj1B,KAAKkwD,gBAAgBh8B,EAAU28B,EAAI3qC,EAAG8O,GAC9C96B,EAAI22D,EAAGlwD,EAEW,MAAdiqD,IAEAA,EAAW51B,KAAK5E,GAAOzvB,EACvBiqD,EAAW31B,MAAM7E,GAAO6E,GAG5BA,EAAQizB,EAAQoI,KAAgBr7B,EAAQ9B,EAAQo9B,KAGhDt7B,EAAQ/P,EAAK64B,WAAWl7C,KAAK0B,IAAI0wB,EAAO,QAEtB,MAAd21B,IAEAA,EAAW11B,UAAU9E,GAAO6E,EAEnC,CASD,GAPkB,MAAd21B,IAEAA,EAAWl7B,YAAcwE,EAASxE,aAGtCghC,GAAgBz7B,EAEZA,EAAQ,EAGRl6B,EAAM8H,KAAK0B,IAAI,EAAa,GAAR0wB,EAAa,GAAK,GACtCo7B,EAAI96B,UAAYx6B,EAAMA,EAEtBy1D,IAGAC,GAAiBx7B,EAErBI,EAAYxyB,KAAK0B,IAAI8wB,EAAWJ,EAEnC,CAOD,OALAo7B,EAAI/6B,WAAak7B,EACjBH,EAAIj7B,UAAYs7B,EAChBL,EAAIl7B,WAAas7B,EACjBJ,EAAIh7B,UAAYA,EAETm7B,CACV,EASDxwD,KAAK8wD,UAAY,SAAU/nC,EAAKmL,EAAUjB,EAAOxE,EAAIC,GACjD,IACI0B,EAAK2gC,EACL7qC,EACA2pC,EAAKmB,EAHL7oC,EAAMY,EAAIE,eAIVgoC,EAAsC,GAA3B/8B,EAASjE,eAAuB,GAAK,EAChDW,EAAWsD,EAAStD,SAEpBuC,EAAUtO,EAAU8N,OAAOS,QAC3B89B,EAAOrsC,EAAU8N,OAAOS,QACxB6B,EAAQ,IAAIyyB,gBAEhBhzB,UAAU3L,EAAKkK,EAAOiB,EAAUf,GAChCi3B,WAAWl2B,EAAUf,EAAS+9B,EAAMj8B,EAAO,MAE3C,IAAI/6B,EAAI,EAKR,IAJA62D,EAAO78B,EAASgN,SACZhN,EAAStE,YAAcrK,EAAQuL,YAC5B,GAAKoD,EAASpE,mBACjBihC,EAAO,IACN3gC,EAAM,EAAGA,EAAM2gC,EAAM3gC,IAAO,CAC7B,IAAI7R,EAAQ4J,EAAIoD,cAAcrF,EAAEkK,GAE5B+gC,GADA3yC,EAAM2J,EAAIoD,cAAcrF,EAAEkK,EAAM,IACrB7R,EACf,IAAKsxC,EAAM,EAAK31D,EAAIskB,EAAKtkB,IACrB21D,GAAO37B,EAAS/J,GAAGjwB,GAAKg6B,EAAS/J,GAAGjwB,GACxC21D,GAAOsB,EAGPH,EAAM,KACN7oC,EAAI4Q,MAAMgJ,GAAGtT,GAAIC,GAAI0B,GAAO4gC,EAAMnB,EAClC1nC,EAAI4Q,MAAMm4B,KAAKziC,GAAIC,GAAI0B,GAAO4gC,EAAM79B,EAAQ/C,GAAO8gC,EAAK9gC,GAAO+gC,EAE3Dl+B,EAAM8O,GAAG7b,EAAEkK,GAAO,IAAMrH,EAAI2nB,QAC5Bmf,GAAY58B,EAAM8O,GAAG7b,EAAEkK,GAEvBy/B,EAAM,EAEV1nC,EAAI4Q,MAAM4jB,IAAIluB,GAAIC,GAAI0B,GAAO4gC,EACvBnuD,KAAK0B,IAAIsrD,EAAM58B,EAAM6O,IAAI5b,EAAEkK,GAAMjI,EAAIiQ,IAAIlS,EAAEkK,IAGjDjI,EAAI4Q,MAAMq4B,QAAQ3iC,GAAIC,GAAI0B,GAAO,EACT,GAApB8D,EAASlE,SAAgBI,GAAO,KAChCjI,EAAI4Q,MAAMq4B,QAAQ3iC,GAAIC,GAAI0B,IAAQ6gC,EAAUnI,EAAO14B,IAEnDA,EAAM7K,EAAQ+U,UAEd3U,EAAOiL,EAASR,IAAQ,GACxBjI,EAAI4Q,MAAMq4B,QAAQ3iC,GAAIC,GAAI0B,IAAQ6gC,EAAUrgC,EAASR,GAE5D,CAGD,GAAI8D,EAAStE,YAAcrK,EAAQuL,WAE/B,IADAigC,EAAO3gC,EACFA,EAAM8D,EAASiN,SAAU/Q,EAAM7K,EAAQa,QAASgK,IACjD,CAAI7R,EAAQ4J,EAAIoD,cAAc5qB,EAAEyvB,GAE5B+gC,GADA3yC,EAAM2J,EAAIoD,cAAc5qB,EAAEyvB,EAAM,IACrB7R,EACf,IAHA,IACIC,EAEKloB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAKu5D,EAAM,EAAK3pC,EAAI3H,EAAO2H,EAAI1H,EAAK0H,IAChC2pC,GAAO37B,EAAS/J,GAAGjwB,GAAKg6B,EAAS/J,GAAGjwB,GACpCA,IAEJ21D,EAAMhtD,KAAK0B,IAAIsrD,EAAMsB,EAAI,OAGzBH,EAAM,KAEN7oC,EAAI4Q,MAAMs4B,KAAK5iC,GAAIC,GAAI,EAAI0B,EAAM95B,GAAK06D,EAAMnB,EAC5C1nC,EAAI4Q,MAAMu4B,OAAO7iC,GAAIC,GAAI,EAAI0B,EAAM95B,GAAK06D,EAAM79B,EAAQ49B,GAChDG,EAAKH,GAAQI,EACfl+B,EAAM8O,GAAGphC,EAAEyvB,GAAK95B,GAAK,EACrBu5D,GAAY58B,EAAM8O,GAAGphC,EAAEyvB,GAAK95B,GAE5Bu5D,EAAM,GACN9mC,EAAI2nB,SAAW3nB,EAAI4nB,YACnBkf,EAAM,GAEV1nC,EAAI4Q,MAAMw4B,MAAM9iC,GAAIC,GAAI,EAAI0B,EAAM95B,GAAK06D,EACjCnuD,KAAK0B,IAAIsrD,EAAM58B,EAAM6O,IAAInhC,EAAEyvB,GAAK95B,GAC9B6xB,EAAIiQ,IAAIz3B,EAAEyvB,IAGlBjI,EAAI4Q,MAAMy4B,UAAU/iC,GAAIC,GAAI,EAAI0B,EAAM95B,IAAM,EACtC49B,EAASnE,cAAcz5B,GACzB85B,EAAM7K,EAAQgV,UACdpS,EAAI4Q,MAAMy4B,UAAU/iC,GAAIC,GAAI,EAAI0B,EAAM95B,IAAM26D,EACtCrgC,EAASmgC,IAEnBA,GACH,CAnCD,CAuCR5oC,EAAI4Q,MAAM04B,QAAQhjC,GAAIC,GAAMwF,EAASxE,YACrCvH,EAAI4Q,MAAM24B,aAAajjC,GAAIC,GAAMwF,EAAS1E,eACpC0E,EAASzE,aACftH,EAAI4Q,MAAM44B,WAAWljC,GAAIC,GAAMwF,EAASzE,aAExCtH,EAAI4Q,MAAMy3B,KAAK/hC,GAAIC,GAAMuG,EAAMK,WAC/BnN,EAAI4Q,MAAM1D,UAAU5G,GAAIC,GAAwB,GAAlBuG,EAAMI,UACpClN,EAAI4Q,MAAM5D,WAAW1G,GAAIC,GAAyB,GAAnBuG,EAAME,WACrChN,EAAI4Q,MAAM3D,UAAU3G,GAAIC,GAAwB,GAAlBuG,EAAMG,UACpCjN,EAAI4Q,MAAMxD,SAAS9G,GAAIC,GAAMuG,EAAMM,QACtC,CA0CJ,CA59BDi4B,EAAYE,MAAS,IACrBF,EAAYO,OAAS,IACrBP,EAAYQ,WAAa,IACzBR,EAAYM,UAAY,KA29BxBloC,EAAO5F,QAAUwtC,C,wBC5gCjB,IAAI5oC,EAAS7E,EAAQ,OAUjB8E,GATSD,EAAOE,OACNF,EAAOG,QACTH,EAAOI,MACFJ,EAAOK,WACbL,EAAOM,KACLN,EAAOO,OACFP,EAAOQ,YACVR,EAAOS,SACLT,EAAOU,WACRV,EAAOC,WAEnBY,GADcb,EAAOY,YACXZ,EAAOa,SAIjBkI,GAHY/I,EAAOc,UACVd,EAAOe,OAED5F,EAAQ,QA0C3B6F,EAAO5F,QAxCP,WACIhgB,KAAKo+B,UAAYvZ,EAAmC,EAAzB8I,EAAawQ,WAIxCn+B,KAAKo/B,OAAS,EACdp/B,KAAKq+B,SAAWxZ,EAAU8I,EAAa2P,uBAAyB3P,EAAawQ,WAI7En+B,KAAKs/B,MAAQ,EACbt/B,KAAKs+B,QAAUzZ,EAAU8I,EAAa2P,uBAAyB3P,EAAawQ,WAI5En+B,KAAKw/B,KAAO,EACZx/B,KAAKu+B,UAAY1Z,EAAmC,EAAzB8I,EAAawQ,WAIxCn+B,KAAKq/B,OAAS,EACdr/B,KAAKw+B,SAAW3Z,EAAU8I,EAAa2P,uBAAyB3P,EAAawQ,WAC7En+B,KAAKu/B,MAAQ,EACbv/B,KAAKy+B,QAAU5Z,EAAU8I,EAAa2P,uBAAyB3P,EAAawQ,WAC5En+B,KAAKy/B,KAAO,EAKZz/B,KAAK4+B,aAAe,EACpB5+B,KAAK++B,QAAU,EACf/+B,KAAK6+B,KAAO,EACZ7+B,KAAK8+B,KAAO,EACZ9+B,KAAK4xD,UAAY,EACjB5xD,KAAK6xD,MAAQ,EACb7xD,KAAKi/B,EAAIxZ,EAAQ,EAAKkI,EAAa8S,aAAe9S,EAAaqT,QAC/DhhC,KAAK0/B,EAAIja,EAAQ,EAAKkI,EAAa8S,aAAe9S,EAAaqT,OAElE,C,wBCUD,IACIrb,EADS5F,EAAQ,OACD4F,OAqOpBC,EAAO5F,QAnOP,WACC,IAAI4V,EAEJ51B,KAAKynB,WAAc,SAASqO,GAC3BF,EAAKE,CACL,EAED91B,KAAK0zB,eAAiB,SAAS3K,EAAKwK,GACnC,IACIu+B,EADA3pC,EAAMY,EAAIE,eAEVkE,EAAUhF,EAAIgF,QAEd4kC,EAAcn8B,EAAGrJ,aAAaxD,GAClCwK,EAAUvJ,MAAQ+nC,EAAiC,EAAnB5pC,EAAII,cAAoBJ,EAAIwL,QA6C5D,IAAIq+B,EAAa,KAAW7pC,EAAIwL,QAAU,EAMtC5K,EAAI8D,MAAQ,IAEfilC,EAAY,EAAMzmB,IAAmB,IAAZtiB,EAAI8D,OACxB9D,EAAI+D,eAAiB,MAAQ,EAAI,KAMtCglC,EAAY,MAOR/oC,EAAIynB,aACPshB,EAAY,EAAMzmB,IAAM,MAAUtiB,EAAI+D,eAAiB,MAAQ,EAAI,MAIrE3E,EAAIqpB,QAAUsgB,EAAYC,EACtB5pC,EAAIqpB,QAAUwgB,IACjB7pC,EAAIqpB,QAAUwgB,IACX7pC,EAAIqpB,QAAU,GAAKzoB,EAAIM,qBAC1BlB,EAAIqpB,QAAU,GAEf,IAAIygB,EAAgB1+B,EAAUvJ,KAAO7B,EAAIwL,QACrC9wB,KAAK+lB,IAAIT,EAAIiF,SAAUjF,EAAIqpB,SAoB/B,OAlBIygB,EAAgBH,IACnBG,EAAgBH,GAEjBnsC,EAAQ,GAAKwC,EAAIqpB,QAAU,GAC3B7rB,EAAQwC,EAAIqpB,SAAW,GAEvBrkB,EAAQqB,cAAgB,EAGP,MAAbrG,EAAI4Q,QAKP5Q,EAAI4Q,MAAMxF,UAAYA,EAAUvJ,KAAO,EACvC7B,EAAI4Q,MAAMm5B,SAAW/pC,EAAIiF,UAGnB6kC,CACP,EAODjyD,KAAKovD,YAAc,SAASrmC,EAAKwK,EAAWD,EAAW27B,GACtD,IACI1B,EADAplC,EAAMY,EAAIE,eAEJmE,EAAWjF,EAAIiF,SAAUokB,EAAUrpB,EAAIqpB,QAGtC,GAAPyd,IACH7hC,GAAYmG,GAEoB,IAAN,EAAtBpL,EAAIgmB,mBACRqD,GAAW,IAEZle,EAAUtJ,KAAOuJ,EAGF,GAAXnG,EAA0B,EAAVokB,GACnB+b,EAAWngC,EAAsB,EAAVokB,EAAe,GACtCle,EAAUtJ,MAAQujC,EAClBplC,EAAIgmB,iBAAmB,MAEvBof,EAAW,EACXplC,EAAIgmB,iBAAmB,IAMlBplB,EAAIM,mBAAqB,IAA4B,EAAtBlB,EAAIgmB,mBACvC7a,EAAUtJ,MAAQ,GAAKuJ,IAIzB,IAAI47B,EAAc/hC,EAA0B,EAAdjF,EAAIqpB,QAAe,GAAKpkB,EACnC,EAAdjF,EAAIqpB,QAAe,GAKxB,OAJA2d,GAAc5B,GAEG,IAChB4B,EAAa,GACPA,CACP,EAMDnvD,KAAK6rD,WAAa,SAAS1jC,EAAKyB,GAC/BzB,EAAIiF,UAAYxD,EAAG4F,eAAiB5F,EAAG6F,YACvC,EAMDzvB,KAAK80B,aAAe,SAAS3M,EAAKoL,GACjC,IAAI4+B,EACAhlC,EAAUhF,EAAIgF,QAElBhF,EAAIiF,UAAYmG,EAAYpL,EAAIwL,QAChC,IAAIy+B,EAAe,EACnBjlC,EAAQkE,eAAiB,EACzBlE,EAAQqB,cAAgB,EAGc,IAAjC2jC,EAAYhqC,EAAIiF,SAAW,KAC/BglC,GAAgBD,IAEjBA,EAAahqC,EAAIiF,SAAWglC,EAAgBjqC,EAAIqpB,SAChC,IACf7rB,EAAQ,GAAKwsC,EAAY,GACzBxsC,EAAQwsC,GAAa,GACrBC,GAAgBD,GAyBhB,IAAIE,EAAYxvD,KAAK+lB,IAA8B,EAA1BuE,EAAQE,gBAAqB+kC,GAAgB,EACtEjlC,EAAQqB,eAAiB,EAAI6jC,EAC7BD,GAAgB,EAAIC,EACpBlqC,EAAIiF,UAAY,EAAIilC,EACpBllC,EAAQE,iBAAmBglC,EAG5BllC,EAAQkE,gBAAkB+gC,EAC1BjqC,EAAIiF,UAAYglC,CAChB,CACD,C,wBC7RD,IAAIxtC,EAAS7E,EAAQ,OACjB+E,EAASF,EAAOE,OAWhBW,GAVUb,EAAOG,QACTH,EAAOI,MACFJ,EAAOK,WACbL,EAAOM,KACLN,EAAOO,OACFP,EAAOQ,YACVR,EAAOS,SACLT,EAAOU,WACRV,EAAOC,UACLD,EAAOY,YACXZ,EAAOa,SAIjBF,GAHYX,EAAOc,UACVd,EAAOe,OAEN5F,EAAQ,QA0BtB6F,EAAO5F,QAxBP,SAAkBsyC,EAAMC,EAAMC,EAAOC,GAEjCzyD,KAAKkmB,EAAIT,EAAQ,EAAIF,EAAQY,SAC7BnmB,KAAKW,EAAI8kB,EAAQ,EAAIF,EAAQa,SAC7BpmB,KAAKqmB,OAASZ,EAAQ,EAAIF,EAAQe,QAClCtmB,KAAKumB,OAASd,EAAQ,EAAIF,EAAQiB,QAClC,IAAIN,EAAIlmB,KAAKkmB,EACTvlB,EAAIX,KAAKW,EAEW,GAApB3J,UAAUC,SAGV+I,KAAKsyD,KAAOt7D,UAAU,GACtBgJ,KAAKuyD,KAAOv7D,UAAU,GACtBgJ,KAAKwyD,MAAQx7D,UAAU,GACvBgJ,KAAKyyD,MAAQz7D,UAAU,GAEvB8tB,EAAOsD,UAAUpoB,KAAKsyD,KAAM,EAAGpsC,EAAG,EAAGrjB,KAAK+lB,IAAI5oB,KAAKsyD,KAAKr7D,OAAQ+I,KAAKkmB,EAAEjvB,SACvE6tB,EAAOsD,UAAUpoB,KAAKuyD,KAAM,EAAG5xD,EAAG,EAAGkC,KAAK+lB,IAAI5oB,KAAKuyD,KAAKt7D,OAAQ+I,KAAKW,EAAE1J,SACvE6tB,EAAOsD,UAAUpoB,KAAKwyD,MAAO,EAAGxyD,KAAKqmB,OAAQ,EAAGxjB,KAAK+lB,IAAI5oB,KAAKwyD,MAAMv7D,OAAQ+I,KAAKqmB,OAAOpvB,SACxF6tB,EAAOsD,UAAUpoB,KAAKyyD,MAAO,EAAGzyD,KAAKumB,OAAQ,EAAG1jB,KAAK+lB,IAAI5oB,KAAKyyD,MAAMx7D,OAAQ+I,KAAKumB,OAAOtvB,SAE/F,C,oBCjDD,SAASy7D,EAAY9xB,EAAKr8B,EAAKs3C,EAAK8W,GAChC3yD,KAAK8qB,KAAO8V,EACZ5gC,KAAKmrB,OAAS5mB,EACdvE,KAAKuqB,MAAQsxB,EACb77C,KAAKwqB,KAAOmoC,CACf,CAED,IAAI5rC,EAAS,CAGbA,KAAc,CACV,EAAG,EACH,EAAG,GAGPA,KAAc,CACV,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GAGVA,KAAc,CACV,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GAGVA,KAAc,CACV,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GAGbA,KAAc,CACV,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GAGbA,KAAc,CACV,EAAG,EAAG,GAAI,GAAI,GAAI,GAClB,EAAG,EAAG,EAAG,GAAI,EAAG,EAChB,GAAI,EAAG,GAAI,GAAI,EAAG,EAClB,GAAI,GAAI,GAAI,GAAI,GAAI,EACpB,EAAG,EAAG,EAAG,GAAI,EAAG,EAChB,EAAG,EAAG,EAAG,EAAG,EAAG,GAGnBA,KAAc,CACV,EAAG,EAAG,EAAG,GAAI,GAAI,EACjB,EAAG,EAAG,EAAG,GAAI,EAAG,EAChB,EAAG,EAAG,EAAG,GAAI,EAAG,EAChB,GAAI,GAAI,GAAI,GAAI,GAAI,EACpB,GAAI,EAAG,EAAG,GAAI,EAAG,EACjB,GAAI,EAAG,EAAG,EAAG,EAAG,GAGpBA,KAAc,CACV,EAAG,EAAG,EAAG,GAAI,GAAI,EACjB,EAAG,EAAG,EAAG,EAAG,EAAG,EACf,EAAG,EAAG,EAAG,EAAG,EAAG,EACf,GAAI,EAAG,EAAG,GAAI,EAAG,EACjB,GAAI,EAAG,EAAG,EAAG,EAAG,EAChB,GAAI,EAAG,EAAG,EAAG,EAAG,GAGpBA,MAAe,CACX,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1B,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EACzB,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAC1B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGzBA,MAAe,CACX,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1B,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACzB,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAC3B,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EACzB,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG1BA,MAAe,CACX,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1B,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GACxB,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAC1B,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAG5BA,MAAezD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAG5DA,MAAe,CACX,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAClE,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7D,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC9D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7D,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC7D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC7D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAC1D,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAG5DA,MAAe,CACX,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAClE,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,EAC9D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GACnE,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACpE,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EACvE,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACvE,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACzE,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EACvE,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EACxE,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACzE,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAC1E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,EAC5E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAAM,IAAK,EAC7E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,EAC7E,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAG1DA,MAAe,CACX,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACtE,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACtE,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACvE,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACzE,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAC1E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAC3E,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAC5E,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGxDA,MAAe,CACX,EAAQ,GAAQ,EAAQ,GAAQ,GAAQ,GAAQ,GAAQ,GACxD,GAAQ,GAAQ,GAAQ,EAAQ,GAAQ,GAAQ,GAAQ,IAG5DA,MAAe,CACX,GAAS,GAAS,GAAS,GAAS,GAAS,GAAS,GAAQ,GAC9D,GAAQ,GAAQ,GAAQ,GAAQ,GAAQ,GAAQ,EAAQ,GAG5DA,IAAa,CACT,EAAG,EACH,EAAG,GAGPA,IAAa,CACT,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GAGVA,IAAa,CACT,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GAGVA,IAAa,CACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GACT,EAAG,EAAG,EAAG,IAGbA,IAAa,CACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GAGbA,IAAa,CACT,EAAG,EAAG,EAAG,EAAG,EAAG,GACf,EAAG,EAAG,EAAG,EAAG,EAAG,GACf,EAAG,EAAG,EAAG,GAAI,GAAI,GACjB,EAAG,EAAG,GAAI,GAAI,GAAI,GAClB,EAAG,EAAG,GAAI,GAAI,GAAI,GAClB,EAAG,GAAI,GAAI,GAAI,GAAI,IAGvBA,IAAa,CACT,EAAG,EAAG,EAAG,EAAG,EAAG,GACf,EAAG,EAAG,EAAG,GAAI,GAAI,GACjB,EAAG,EAAG,EAAG,GAAI,GAAI,GACjB,EAAG,GAAI,GAAI,GAAI,GAAI,GACnB,EAAG,EAAG,GAAI,GAAI,GAAI,GAClB,GAAI,GAAI,GAAI,GAAI,GAAI,IAGxBA,IAAa,CACT,EAAG,EAAG,EAAG,EAAG,EAAG,GACf,EAAG,EAAG,EAAG,EAAG,EAAG,GACf,EAAG,EAAG,EAAG,EAAG,EAAG,GACf,EAAG,EAAG,EAAG,EAAG,EAAG,GACf,EAAG,EAAG,EAAG,EAAG,GAAI,GAChB,EAAG,EAAG,GAAI,GAAI,GAAI,IAGtBA,KAAc,CACV,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GACxB,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GACxB,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACzB,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1B,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGhCA,KAAc,CACV,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GACtB,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GACvB,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GACxB,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACzB,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3B,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3B,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACzB,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAG9BA,KAAc,CACV,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GACvB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GACtB,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GACtB,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GACvB,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GACxB,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1B,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACzB,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGhCA,KAAc,CACV,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACvD,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACzD,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1D,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGhEA,KAAc,CACV,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACvD,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACzD,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGhEA,OAAgB,CACZ,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACzD,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGhEA,KAAc,CACV,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACzD,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAA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GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGhErtC,EAAOytC,KAAO,CACV,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxD,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,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,GAC3C,IAAIvB,EAAUhF,EAAIgF,QACd+G,EAAW/G,EAAQoC,GAAGd,GAAIC,GAK9Bk5B,EAAG+D,oBAAoBxjC,EAAKsG,EAAIC,EAAIvB,GAKR,GAAxBhF,EAAI8lB,kBACJ2Z,EAAGgE,oBAAoBzjC,EAAK+L,GAKhCT,EAAGo4B,WAAW1jC,EAAK+L,EACtB,CAIJ,CAmCD,SAASsB,IAER,IAAIqe,EAAW,EACb,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBAAuB,mBAEvB,mBACA,mBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBACA,mBACA,mBACA,mBACA,kBACA,kBAAuB,mBAEvB,mBACA,mBACA,mBACA,kBACA,kBACA,kBACA,mBACA,kBACA,kBACA,mBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAuB,mBAEvB,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAuB,mBAEvB,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,kBACA,oBACA,mBACA,mBACA,kBAAuB,mBAEvB,mBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,kBACA,mBACA,kBACA,mBACA,mBACA,oBACA,oBACA,kBACA,kBAAuB,mBAEvB,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,iBACA,kBAAuB,mBAEvB,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBACA,kBACA,oBACA,mBACA,oBACA,oBACA,mBACA,mBACA,mBAEA,mBACA,mBACA,oBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,mBACA,mBACA,mBACA,kBAAuB,mBAEvB,kBACA,iBACA,oBACA,kBACA,mBACA,mBACA,kBACA,mBACA,kBACA,kBACA,mBACA,oBACA,oBACA,oBACA,iBACA,mBACA,kBAAuB,kBAEvB,kBACA,kBACA,oBACA,kBACA,kBACA,mBACA,kBACA,mBACA,oBACA,iBACA,kBACA,mBACA,oBACA,oBACA,mBACA,kBACA,kBAAuB,kBAEvB,kBACA,kBACA,oBACA,kBACA,mBACA,mBACA,kBACA,mBACA,oBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBACA,kBACA,iBAAuB,mBAEvB,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBACA,mBACA,mBACA,oBACA,oBACA,mBACA,mBACA,kBACA,kBAAuB,mBAEvB,kBACA,iBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,oBACA,mBACA,mBACA,mBACA,oBACA,oBACA,mBACA,kBACA,mBAAuB,mBAEvB,iBACA,kBACA,oBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,oBACA,oBACA,oBACA,kBACA,mBAAuB,kBAEvB,WAAgB3uB,EAAK8W,MAAQ,GAAM,QACnC,WAAgB9W,EAAK8W,MAAQ,GAAM,QACnC,WAAe9W,EAAK8W,MAAQ,GAAM,QAClC,WAAe9W,EAAK8W,MAAQ,GAAM,QAClC,UAAc9W,EAAK8W,MAAQ,GAAM,QACjC,UAAc9W,EAAK8W,MAAQ,GAAM,QACjC,UAAc9W,EAAK8W,MAAQ,GAAM,QACjC,SAAa9W,EAAK8W,MAAQ,GAAM,QAEhC,mBAA2B,mBAC3B,kBAAyB,mBACzB,mBAA0B,mBAC1B,mBAGE8oC,EAAK,GACLC,EAAK,GAELjxB,EAAM,CACN,CACC,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,oBACA,qBACA,qBAEA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEC,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,sBAEF,CACC,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBAEA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEC,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,qBAED,EACA,EACA,EACA,EACA,EACA,GACC,sBACA,sBACA,sBAEF,CACC,kBACA,iBACA,kBAEA,kBACA,kBACA,iBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBAEA,iBACA,kBACA,kBACA,mBACC,mBACA,kBACD,kBACA,IAEC,mBACA,mBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBAED,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,iBACA,mBAED,CACC,EACA,EACA,EACA,EACA,EACA,EACA,qBACA,qBACA,qBAEA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,oBACA,sBAEC,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAEA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,uBAIFC,EAAWD,EAAIvuB,EAAQuL,YACvBkjB,EAAKF,EAAIvuB,EAAQuL,YACjBmjB,EAAKH,EAAIvuB,EAAQuL,YACjBojB,EAAKJ,EAAIvuB,EAAQuL,YAajBqjB,EAAQ,CACR,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GACtD,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAM5D,SAASC,EAAeppB,EAAIqpB,EAAOt7C,GAKlC,IAJA,IAuEWu7C,EAAGzyC,EA8BTsoB,EArGDoqB,EAAK,GAELtpB,EAAKopB,EAAQ,IAAM,GAAK,IAEnB/9C,GAAK,GAAIA,EAAI,EAAGA,IAAK,CAC7B,IAAIqmC,EAAGh8B,EAAG6zC,EAEV7X,EAAIkX,EAASU,GAAM,IACnB5zC,EAAIqqB,EAAG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","sources":["../node_modules/emoji-mart/dist/node_modules/@swc/helpers/src/_define_property.mjs","../node_modules/emoji-mart/dist/node_modules/preact/src/constants.js","../node_modules/emoji-mart/dist/node_modules/preact/src/util.js","../node_modules/emoji-mart/dist/node_modules/preact/src/options.js","../node_modules/emoji-mart/dist/node_modules/preact/src/create-element.js","../node_modules/emoji-mart/dist/node_modules/preact/src/component.js","../node_modules/emoji-mart/dist/node_modules/preact/src/diff/children.js","../node_modules/emoji-mart/dist/node_modules/preact/src/diff/props.js","../node_modules/emoji-mart/dist/node_modules/preact/src/diff/index.js","../node_modules/emoji-mart/dist/node_modules/preact/src/render.js","../node_modules/emoji-mart/dist/node_modules/preact/src/diff/catch-error.js","../node_modules/emoji-mart/dist/node_modules/preact/jsx-runtime/src/index.js","../node_modules/emoji-mart/dist/packages/emoji-mart/src/helpers/store.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/helpers/native-support.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/helpers/frequently-used.ts","../node_modules/emoji-mart/dist/packages/emoji-mart-data/i18n/en.json","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/Picker/PickerProps.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/config.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/helpers/search-index.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/helpers/index.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/utils.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/icons.tsx","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/Emoji/Emoji.tsx","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/HTMLElement/HTMLElement.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/HTMLElement/ShadowElement.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/Emoji/EmojiProps.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/Emoji/EmojiElement.jsx","../node_modules/emoji-mart/dist/node_modules/preact/hooks/src/index.js","../node_modules/emoji-mart/dist/node_modules/preact/compat/src/util.js","../node_modules/emoji-mart/dist/node_modules/preact/compat/src/PureComponent.js","../node_modules/emoji-mart/dist/node_modules/preact/compat/src/memo.js","../node_modules/emoji-mart/dist/node_modules/preact/compat/src/forwardRef.js","../node_modules/emoji-mart/dist/node_modules/preact/compat/src/suspense.js","../node_modules/emoji-mart/dist/node_modules/preact/compat/src/suspense-list.js","../node_modules/emoji-mart/dist/node_modules/preact/compat/src/render.js","../node_modules/emoji-mart/dist/node_modules/preact/compat/src/index.js","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/Navigation/Navigation.tsx","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/HOCs/PureInlineComponent.ts","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/Picker/Picker.tsx","../node_modules/emoji-mart/dist/packages/emoji-mart/src/components/Picker/PickerElement.tsx","../node_modules/emoji-mart/dist/node_modules/@parcel/runtime-js/lib/bundles/runtime-1b9572f9f2947a02.js","../node_modules/@mui/icons-material/ArrowBack.js","../node_modules/@mui/icons-material/Save.js","../node_modules/@mui/icons-material/esm/Mic.js","../node_modules/@mui/icons-material/esm/StopCircle.js","../node_modules/@mui/icons-material/utils/createSvgIcon.js","../node_modules/@mui/lab/LoadingButton/loadingButtonClasses.js","../node_modules/@mui/lab/LoadingButton/LoadingButton.js","../node_modules/@mui/material/utils/createChainedFunction.js","../node_modules/@mui/material/utils/deprecatedPropType.js","../node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.js","../node_modules/@mui/material/utils/requirePropFactory.js","../node_modules/@mui/utils/requirePropFactory/requirePropFactory.js","../node_modules/@mui/material/utils/setRef.js","../node_modules/@mui/material/utils/unsupportedProp.js","../node_modules/@mui/utils/unsupportedProp/unsupportedProp.js","../node_modules/@mui/material/utils/index.js","../node_modules/@mui/material/utils/useId.js","../node_modules/lamejs/src/js/ATH.js","../node_modules/lamejs/src/js/BitStream.js","../node_modules/lamejs/src/js/CBRNewIterationLoop.js","../node_modules/lamejs/src/js/CalcNoiseData.js","../node_modules/lamejs/src/js/CalcNoiseResult.js","../node_modules/lamejs/src/js/Encoder.js","../node_modules/lamejs/src/js/FFT.js","../node_modules/lamejs/src/js/GainAnalysis.js","../node_modules/lamejs/src/js/GrInfo.js","../node_modules/lamejs/src/js/IIISideInfo.js","../node_modules/lamejs/src/js/III_psy_ratio.js","../node_modules/lamejs/src/js/III_psy_xmin.js","../node_modules/lamejs/src/js/L3Side.js","../node_modules/lamejs/src/js/Lame.js","../node_modules/lamejs/src/js/LameGlobalFlags.js","../node_modules/lamejs/src/js/LameInternalFlags.js","../node_modules/lamejs/src/js/MPEGMode.js","../node_modules/lamejs/src/js/MeanBits.js","../node_modules/lamejs/src/js/NewMDCT.js","../node_modules/lamejs/src/js/NsPsy.js","../node_modules/lamejs/src/js/Presets.js","../node_modules/lamejs/src/js/PsyModel.js","../node_modules/lamejs/src/js/Quantize.js","../node_modules/lamejs/src/js/QuantizePVT.js","../node_modules/lamejs/src/js/ReplayGain.js","../node_modules/lamejs/src/js/Reservoir.js","../node_modules/lamejs/src/js/ScaleFac.js","../node_modules/lamejs/src/js/Tables.js","../node_modules/lamejs/src/js/Takehiro.js","../node_modules/lamejs/src/js/VBRQuantize.js","../node_modules/lamejs/src/js/VBRSeekInfo.js","../node_modules/lamejs/src/js/VBRTag.js","../node_modules/lamejs/src/js/Version.js","../node_modules/lamejs/src/js/common.js","../node_modules/lamejs/src/js/index.js","../node_modules/phosphor-react/src/icons/Camera.tsx","../node_modules/phosphor-react/src/icons/File.tsx","../node_modules/phosphor-react/src/icons/Sticker.tsx","../node_modules/recorder-core/src/engine/mp3-engine.js","../node_modules/recorder-core/src/engine/mp3.js","../node_modules/recorder-core/src/recorder-core.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","export const EMPTY_OBJ = {};\r\nexport const EMPTY_ARR = [];\r\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\r\n","import { EMPTY_ARR } from \"./constants\";\r\n\r\n/**\r\n * Assign properties from `props` to `obj`\r\n * @template O, P The obj and props types\r\n * @param {O} obj The object to copy properties to\r\n * @param {P} props The object to copy properties from\r\n * @returns {O & P}\r\n */\r\nexport function assign(obj, props) {\r\n\t// @ts-ignore We change the type of `obj` to be `O & P`\r\n\tfor (let i in props) obj[i] = props[i];\r\n\treturn /** @type {O & P} */ (obj);\r\n}\r\n\r\n/**\r\n * Remove a child node from its parent if attached. This is a workaround for\r\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\r\n * is smaller than including a dedicated polyfill.\r\n * @param {Node} node The node to remove\r\n */\r\nexport function removeNode(node) {\r\n\tlet parentNode = node.parentNode;\r\n\tif (parentNode) parentNode.removeChild(node);\r\n}\r\n\r\nexport const slice = EMPTY_ARR.slice;\r\n","import { _catchError } from './diff/catch-error';\r\n\r\n/**\r\n * The `option` object can potentially contain callback functions\r\n * that are called during various stages of our renderer. This is the\r\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\r\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\r\n * for a full list of available option hooks (most editors/IDEs allow you to\r\n * ctrl+click or cmd+click on mac the type definition below).\r\n * @type {import('./internal').Options}\r\n */\r\nconst options = {\r\n\t_catchError\r\n};\r\n\r\nexport default options;\r\n","import { slice } from './util';\r\nimport options from './options';\r\n\r\nlet vnodeId = 0;\r\n\r\n/**\r\n * Create an virtual node (used for JSX)\r\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\r\n * constructor for this virtual node\r\n * @param {object | null | undefined} [props] The properties of the virtual node\r\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\r\n * @returns {import('./internal').VNode}\r\n */\r\nexport function createElement(type, props, children) {\r\n\tlet normalizedProps = {},\r\n\t\tkey,\r\n\t\tref,\r\n\t\ti;\r\n\tfor (i in props) {\r\n\t\tif (i == 'key') key = props[i];\r\n\t\telse if (i == 'ref') ref = props[i];\r\n\t\telse normalizedProps[i] = props[i];\r\n\t}\r\n\r\n\tif (arguments.length > 2) {\r\n\t\tnormalizedProps.children =\r\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\r\n\t}\r\n\r\n\t// If a Component VNode, check for and apply defaultProps\r\n\t// Note: type may be undefined in development, must never error here.\r\n\tif (typeof type == 'function' && type.defaultProps != null) {\r\n\t\tfor (i in type.defaultProps) {\r\n\t\t\tif (normalizedProps[i] === undefined) {\r\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn createVNode(type, normalizedProps, key, ref, null);\r\n}\r\n\r\n/**\r\n * Create a VNode (used internally by Preact)\r\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\r\n * Constructor for this virtual node\r\n * @param {object | string | number | null} props The properties of this virtual node.\r\n * If this virtual node represents a text node, this is the text of the node (string or number).\r\n * @param {string | number | null} key The key for this virtual node, used when\r\n * diffing it against its children\r\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\r\n * receive a reference to its created child\r\n * @returns {import('./internal').VNode}\r\n */\r\nexport function createVNode(type, props, key, ref, original) {\r\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\r\n\t// Do not inline into createElement and coerceToVNode!\r\n\tconst vnode = {\r\n\t\ttype,\r\n\t\tprops,\r\n\t\tkey,\r\n\t\tref,\r\n\t\t_children: null,\r\n\t\t_parent: null,\r\n\t\t_depth: 0,\r\n\t\t_dom: null,\r\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\r\n\t\t// be set to dom.nextSibling which can return `null` and it is important\r\n\t\t// to be able to distinguish between an uninitialized _nextDom and\r\n\t\t// a _nextDom that has been set to `null`\r\n\t\t_nextDom: undefined,\r\n\t\t_component: null,\r\n\t\t_hydrating: null,\r\n\t\tconstructor: undefined,\r\n\t\t_original: original == null ? ++vnodeId : original\r\n\t};\r\n\r\n\t// Only invoke the vnode hook if this was *not* a direct copy:\r\n\tif (original == null && options.vnode != null) options.vnode(vnode);\r\n\r\n\treturn vnode;\r\n}\r\n\r\nexport function createRef() {\r\n\treturn { current: null };\r\n}\r\n\r\nexport function Fragment(props) {\r\n\treturn props.children;\r\n}\r\n\r\n/**\r\n * Check if a the argument is a valid Preact VNode.\r\n * @param {*} vnode\r\n * @returns {vnode is import('./internal').VNode}\r\n */\r\nexport const isValidElement = vnode =>\r\n\tvnode != null && vnode.constructor === undefined;\r\n","import { assign } from './util';\r\nimport { diff, commitRoot } from './diff/index';\r\nimport options from './options';\r\nimport { Fragment } from './create-element';\r\n\r\n/**\r\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\r\n * trigger rendering\r\n * @param {object} props The initial component props\r\n * @param {object} context The initial context from parent components'\r\n * getChildContext\r\n */\r\nexport function Component(props, context) {\r\n\tthis.props = props;\r\n\tthis.context = context;\r\n}\r\n\r\n/**\r\n * Update component state and schedule a re-render.\r\n * @this {import('./internal').Component}\r\n * @param {object | ((s: object, p: object) => object)} update A hash of state\r\n * properties to update with new values or a function that given the current\r\n * state and props returns a new partial state\r\n * @param {() => void} [callback] A function to be called once component state is\r\n * updated\r\n */\r\nComponent.prototype.setState = function(update, callback) {\r\n\t// only clone state when copying to nextState the first time.\r\n\tlet s;\r\n\tif (this._nextState != null && this._nextState !== this.state) {\r\n\t\ts = this._nextState;\r\n\t} else {\r\n\t\ts = this._nextState = assign({}, this.state);\r\n\t}\r\n\r\n\tif (typeof update == 'function') {\r\n\t\t// Some libraries like `immer` mark the current state as readonly,\r\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\r\n\t\tupdate = update(assign({}, s), this.props);\r\n\t}\r\n\r\n\tif (update) {\r\n\t\tassign(s, update);\r\n\t}\r\n\r\n\t// Skip update if updater function returned null\r\n\tif (update == null) return;\r\n\r\n\tif (this._vnode) {\r\n\t\tif (callback) this._renderCallbacks.push(callback);\r\n\t\tenqueueRender(this);\r\n\t}\r\n};\r\n\r\n/**\r\n * Immediately perform a synchronous re-render of the component\r\n * @this {import('./internal').Component}\r\n * @param {() => void} [callback] A function to be called after component is\r\n * re-rendered\r\n */\r\nComponent.prototype.forceUpdate = function(callback) {\r\n\tif (this._vnode) {\r\n\t\t// Set render mode so that we can differentiate where the render request\r\n\t\t// is coming from. We need this because forceUpdate should never call\r\n\t\t// shouldComponentUpdate\r\n\t\tthis._force = true;\r\n\t\tif (callback) this._renderCallbacks.push(callback);\r\n\t\tenqueueRender(this);\r\n\t}\r\n};\r\n\r\n/**\r\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\r\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\r\n * @param {object} props Props (eg: JSX attributes) received from parent\r\n * element/component\r\n * @param {object} state The component's current state\r\n * @param {object} context Context object, as returned by the nearest\r\n * ancestor's `getChildContext()`\r\n * @returns {import('./index').ComponentChildren | void}\r\n */\r\nComponent.prototype.render = Fragment;\r\n\r\n/**\r\n * @param {import('./internal').VNode} vnode\r\n * @param {number | null} [childIndex]\r\n */\r\nexport function getDomSibling(vnode, childIndex) {\r\n\tif (childIndex == null) {\r\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\r\n\t\treturn vnode._parent\r\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tlet sibling;\r\n\tfor (; childIndex < vnode._children.length; childIndex++) {\r\n\t\tsibling = vnode._children[childIndex];\r\n\r\n\t\tif (sibling != null && sibling._dom != null) {\r\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\r\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\r\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\r\n\t\t\treturn sibling._dom;\r\n\t\t}\r\n\t}\r\n\r\n\t// If we get here, we have not found a DOM node in this vnode's children.\r\n\t// We must resume from this vnode's sibling (in it's parent _children array)\r\n\t// Only climb up and search the parent if we aren't searching through a DOM\r\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\r\n\t// the search)\r\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\r\n}\r\n\r\n/**\r\n * Trigger in-place re-rendering of a component.\r\n * @param {import('./internal').Component} component The component to rerender\r\n */\r\nfunction renderComponent(component) {\r\n\tlet vnode = component._vnode,\r\n\t\toldDom = vnode._dom,\r\n\t\tparentDom = component._parentDom;\r\n\r\n\tif (parentDom) {\r\n\t\tlet commitQueue = [];\r\n\t\tconst oldVNode = assign({}, vnode);\r\n\t\toldVNode._original = vnode._original + 1;\r\n\r\n\t\tdiff(\r\n\t\t\tparentDom,\r\n\t\t\tvnode,\r\n\t\t\toldVNode,\r\n\t\t\tcomponent._globalContext,\r\n\t\t\tparentDom.ownerSVGElement !== undefined,\r\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\r\n\t\t\tcommitQueue,\r\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\r\n\t\t\tvnode._hydrating\r\n\t\t);\r\n\t\tcommitRoot(commitQueue, vnode);\r\n\r\n\t\tif (vnode._dom != oldDom) {\r\n\t\t\tupdateParentDomPointers(vnode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {import('./internal').VNode} vnode\r\n */\r\nfunction updateParentDomPointers(vnode) {\r\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\r\n\t\tvnode._dom = vnode._component.base = null;\r\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\r\n\t\t\tlet child = vnode._children[i];\r\n\t\t\tif (child != null && child._dom != null) {\r\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn updateParentDomPointers(vnode);\r\n\t}\r\n}\r\n\r\n/**\r\n * The render queue\r\n * @type {Array<import('./internal').Component>}\r\n */\r\nlet rerenderQueue = [];\r\n\r\n/**\r\n * Asynchronously schedule a callback\r\n * @type {(cb: () => void) => void}\r\n */\r\n/* istanbul ignore next */\r\n// Note the following line isn't tree-shaken by rollup cuz of rollup/rollup#2566\r\nconst defer =\r\n\ttypeof Promise == 'function'\r\n\t\t? Promise.prototype.then.bind(Promise.resolve())\r\n\t\t: setTimeout;\r\n\r\n/*\r\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\r\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\r\n * do, and when their effects will be applied. See the links below for some further reading on designing\r\n * asynchronous APIs.\r\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\r\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\r\n */\r\n\r\nlet prevDebounce;\r\n\r\n/**\r\n * Enqueue a rerender of a component\r\n * @param {import('./internal').Component} c The component to rerender\r\n */\r\nexport function enqueueRender(c) {\r\n\tif (\r\n\t\t(!c._dirty &&\r\n\t\t\t(c._dirty = true) &&\r\n\t\t\trerenderQueue.push(c) &&\r\n\t\t\t!process._rerenderCount++) ||\r\n\t\tprevDebounce !== options.debounceRendering\r\n\t) {\r\n\t\tprevDebounce = options.debounceRendering;\r\n\t\t(prevDebounce || defer)(process);\r\n\t}\r\n}\r\n\r\n/** Flush the render queue by rerendering all queued components */\r\nfunction process() {\r\n\tlet queue;\r\n\twhile ((process._rerenderCount = rerenderQueue.length)) {\r\n\t\tqueue = rerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\r\n\t\trerenderQueue = [];\r\n\t\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\r\n\t\t// process() calls from getting scheduled while `queue` is still being consumed.\r\n\t\tqueue.some(c => {\r\n\t\t\tif (c._dirty) renderComponent(c);\r\n\t\t});\r\n\t}\r\n}\r\nprocess._rerenderCount = 0;\r\n","import { diff, unmount, applyRef } from './index';\r\nimport { createVNode, Fragment } from '../create-element';\r\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\r\nimport { getDomSibling } from '../component';\r\n\r\n/**\r\n * Diff the children of a virtual node\r\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\r\n * children are being diffed\r\n * @param {import('../internal').ComponentChildren[]} renderResult\r\n * @param {import('../internal').VNode} newParentVNode The new virtual\r\n * node whose children should be diff'ed against oldParentVNode\r\n * @param {import('../internal').VNode} oldParentVNode The old virtual\r\n * node whose children should be diff'ed against newParentVNode\r\n * @param {object} globalContext The current context object - modified by getChildContext\r\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\r\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\r\n * @param {Array<import('../internal').Component>} commitQueue List of components\r\n * which have callbacks to invoke in commitRoot\r\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\r\n * element any new dom elements should be placed around. Likely `null` on first\r\n * render (except when hydrating). Can be a sibling DOM element when diffing\r\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\r\n * @param {boolean} isHydrating Whether or not we are in hydration\r\n */\r\nexport function diffChildren(\r\n\tparentDom,\r\n\trenderResult,\r\n\tnewParentVNode,\r\n\toldParentVNode,\r\n\tglobalContext,\r\n\tisSvg,\r\n\texcessDomChildren,\r\n\tcommitQueue,\r\n\toldDom,\r\n\tisHydrating\r\n) {\r\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\r\n\r\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\r\n\t// as EMPTY_OBJ._children should be `undefined`.\r\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\r\n\r\n\tlet oldChildrenLength = oldChildren.length;\r\n\r\n\tnewParentVNode._children = [];\r\n\tfor (i = 0; i < renderResult.length; i++) {\r\n\t\tchildVNode = renderResult[i];\r\n\r\n\t\tif (childVNode == null || typeof childVNode == 'boolean') {\r\n\t\t\tchildVNode = newParentVNode._children[i] = null;\r\n\t\t}\r\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\r\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\r\n\t\t// it's own DOM & etc. pointers\r\n\t\telse if (\r\n\t\t\ttypeof childVNode == 'string' ||\r\n\t\t\ttypeof childVNode == 'number' ||\r\n\t\t\t// eslint-disable-next-line valid-typeof\r\n\t\t\ttypeof childVNode == 'bigint'\r\n\t\t) {\r\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\r\n\t\t\t\tnull,\r\n\t\t\t\tchildVNode,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull,\r\n\t\t\t\tchildVNode\r\n\t\t\t);\r\n\t\t} else if (Array.isArray(childVNode)) {\r\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\r\n\t\t\t\tFragment,\r\n\t\t\t\t{ children: childVNode },\r\n\t\t\t\tnull,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull\r\n\t\t\t);\r\n\t\t} else if (childVNode._depth > 0) {\r\n\t\t\t// VNode is already in use, clone it. This can happen in the following\r\n\t\t\t// scenario:\r\n\t\t\t//   const reuse = <div />\r\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\r\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\r\n\t\t\t\tchildVNode.type,\r\n\t\t\t\tchildVNode.props,\r\n\t\t\t\tchildVNode.key,\r\n\t\t\t\tnull,\r\n\t\t\t\tchildVNode._original\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\r\n\t\t}\r\n\r\n\t\t// Terser removes the `continue` here and wraps the loop body\r\n\t\t// in a `if (childVNode) { ... } condition\r\n\t\tif (childVNode == null) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tchildVNode._parent = newParentVNode;\r\n\t\tchildVNode._depth = newParentVNode._depth + 1;\r\n\r\n\t\t// Check if we find a corresponding element in oldChildren.\r\n\t\t// If found, delete the array item by setting to `undefined`.\r\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\r\n\t\t// (holes).\r\n\t\toldVNode = oldChildren[i];\r\n\r\n\t\tif (\r\n\t\t\toldVNode === null ||\r\n\t\t\t(oldVNode &&\r\n\t\t\t\tchildVNode.key == oldVNode.key &&\r\n\t\t\t\tchildVNode.type === oldVNode.type)\r\n\t\t) {\r\n\t\t\toldChildren[i] = undefined;\r\n\t\t} else {\r\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\r\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\r\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\r\n\t\t\t\toldVNode = oldChildren[j];\r\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\r\n\t\t\t\t// We always match by type (in either case).\r\n\t\t\t\tif (\r\n\t\t\t\t\toldVNode &&\r\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\r\n\t\t\t\t\tchildVNode.type === oldVNode.type\r\n\t\t\t\t) {\r\n\t\t\t\t\toldChildren[j] = undefined;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\toldVNode = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\toldVNode = oldVNode || EMPTY_OBJ;\r\n\r\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\r\n\t\tdiff(\r\n\t\t\tparentDom,\r\n\t\t\tchildVNode,\r\n\t\t\toldVNode,\r\n\t\t\tglobalContext,\r\n\t\t\tisSvg,\r\n\t\t\texcessDomChildren,\r\n\t\t\tcommitQueue,\r\n\t\t\toldDom,\r\n\t\t\tisHydrating\r\n\t\t);\r\n\r\n\t\tnewDom = childVNode._dom;\r\n\r\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\r\n\t\t\tif (!refs) refs = [];\r\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\r\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\r\n\t\t}\r\n\r\n\t\tif (newDom != null) {\r\n\t\t\tif (firstChildDom == null) {\r\n\t\t\t\tfirstChildDom = newDom;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\ttypeof childVNode.type == 'function' &&\r\n\t\t\t\tchildVNode._children === oldVNode._children\r\n\t\t\t) {\r\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\r\n\t\t\t\t\tchildVNode,\r\n\t\t\t\t\toldDom,\r\n\t\t\t\t\tparentDom\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\toldDom = placeChild(\r\n\t\t\t\t\tparentDom,\r\n\t\t\t\t\tchildVNode,\r\n\t\t\t\t\toldVNode,\r\n\t\t\t\t\toldChildren,\r\n\t\t\t\t\tnewDom,\r\n\t\t\t\t\toldDom\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof newParentVNode.type == 'function') {\r\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\r\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\r\n\t\t\t\t//\r\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\r\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\r\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\r\n\t\t\t\t// node's nextSibling.\r\n\t\t\t\tnewParentVNode._nextDom = oldDom;\r\n\t\t\t}\r\n\t\t} else if (\r\n\t\t\toldDom &&\r\n\t\t\toldVNode._dom == oldDom &&\r\n\t\t\toldDom.parentNode != parentDom\r\n\t\t) {\r\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\r\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\r\n\t\t\toldDom = getDomSibling(oldVNode);\r\n\t\t}\r\n\t}\r\n\r\n\tnewParentVNode._dom = firstChildDom;\r\n\r\n\t// Remove remaining oldChildren if there are any.\r\n\tfor (i = oldChildrenLength; i--; ) {\r\n\t\tif (oldChildren[i] != null) {\r\n\t\t\tif (\r\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\r\n\t\t\t\toldChildren[i]._dom != null &&\r\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\r\n\t\t\t) {\r\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\r\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\r\n\t\t\t\t// _nextDom to it\r\n\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldParentVNode, i + 1);\r\n\t\t\t}\r\n\r\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Set refs only after unmount\r\n\tif (refs) {\r\n\t\tfor (i = 0; i < refs.length; i++) {\r\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction reorderChildren(childVNode, oldDom, parentDom) {\r\n\t// Note: VNodes in nested suspended trees may be missing _children.\r\n\tlet c = childVNode._children;\r\n\tlet tmp = 0;\r\n\tfor (; c && tmp < c.length; tmp++) {\r\n\t\tlet vnode = c[tmp];\r\n\t\tif (vnode) {\r\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\r\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\r\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\r\n\t\t\t// (childVNode here).\r\n\t\t\tvnode._parent = childVNode;\r\n\r\n\t\t\tif (typeof vnode.type == 'function') {\r\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\r\n\t\t\t} else {\r\n\t\t\t\toldDom = placeChild(\r\n\t\t\t\t\tparentDom,\r\n\t\t\t\t\tvnode,\r\n\t\t\t\t\tvnode,\r\n\t\t\t\t\tc,\r\n\t\t\t\t\tvnode._dom,\r\n\t\t\t\t\toldDom\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn oldDom;\r\n}\r\n\r\n/**\r\n * Flatten and loop through the children of a virtual node\r\n * @param {import('../index').ComponentChildren} children The unflattened\r\n * children of a virtual node\r\n * @returns {import('../internal').VNode[]}\r\n */\r\nexport function toChildArray(children, out) {\r\n\tout = out || [];\r\n\tif (children == null || typeof children == 'boolean') {\r\n\t} else if (Array.isArray(children)) {\r\n\t\tchildren.some(child => {\r\n\t\t\ttoChildArray(child, out);\r\n\t\t});\r\n\t} else {\r\n\t\tout.push(children);\r\n\t}\r\n\treturn out;\r\n}\r\n\r\nfunction placeChild(\r\n\tparentDom,\r\n\tchildVNode,\r\n\toldVNode,\r\n\toldChildren,\r\n\tnewDom,\r\n\toldDom\r\n) {\r\n\tlet nextDom;\r\n\tif (childVNode._nextDom !== undefined) {\r\n\t\t// Only Fragments or components that return Fragment like VNodes will\r\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\r\n\t\t// of last DOM child of this child VNode\r\n\t\tnextDom = childVNode._nextDom;\r\n\r\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\r\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\r\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\r\n\t\t// can clean up the property\r\n\t\tchildVNode._nextDom = undefined;\r\n\t} else if (\r\n\t\toldVNode == null ||\r\n\t\tnewDom != oldDom ||\r\n\t\tnewDom.parentNode == null\r\n\t) {\r\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\r\n\t\t\tparentDom.appendChild(newDom);\r\n\t\t\tnextDom = null;\r\n\t\t} else {\r\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\r\n\t\t\tfor (\r\n\t\t\t\tlet sibDom = oldDom, j = 0;\r\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\r\n\t\t\t\tj += 2\r\n\t\t\t) {\r\n\t\t\t\tif (sibDom == newDom) {\r\n\t\t\t\t\tbreak outer;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tparentDom.insertBefore(newDom, oldDom);\r\n\t\t\tnextDom = oldDom;\r\n\t\t}\r\n\t}\r\n\r\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\r\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\r\n\t// See more detail in create-element.js:createVNode\r\n\tif (nextDom !== undefined) {\r\n\t\toldDom = nextDom;\r\n\t} else {\r\n\t\toldDom = newDom.nextSibling;\r\n\t}\r\n\r\n\treturn oldDom;\r\n}\r\n","import { IS_NON_DIMENSIONAL } from '../constants';\r\nimport options from '../options';\r\n\r\n/**\r\n * Diff the old and new properties of a VNode and apply changes to the DOM node\r\n * @param {import('../internal').PreactElement} dom The DOM node to apply\r\n * changes to\r\n * @param {object} newProps The new props\r\n * @param {object} oldProps The old props\r\n * @param {boolean} isSvg Whether or not this node is an SVG node\r\n * @param {boolean} hydrate Whether or not we are in hydration mode\r\n */\r\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\r\n\tlet i;\r\n\r\n\tfor (i in oldProps) {\r\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\r\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (i in newProps) {\r\n\t\tif (\r\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\r\n\t\t\ti !== 'children' &&\r\n\t\t\ti !== 'key' &&\r\n\t\t\ti !== 'value' &&\r\n\t\t\ti !== 'checked' &&\r\n\t\t\toldProps[i] !== newProps[i]\r\n\t\t) {\r\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction setStyle(style, key, value) {\r\n\tif (key[0] === '-') {\r\n\t\tstyle.setProperty(key, value);\r\n\t} else if (value == null) {\r\n\t\tstyle[key] = '';\r\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\r\n\t\tstyle[key] = value;\r\n\t} else {\r\n\t\tstyle[key] = value + 'px';\r\n\t}\r\n}\r\n\r\n/**\r\n * Set a property value on a DOM node\r\n * @param {import('../internal').PreactElement} dom The DOM node to modify\r\n * @param {string} name The name of the property to set\r\n * @param {*} value The value to set the property to\r\n * @param {*} oldValue The old value the property had\r\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\r\n */\r\nexport function setProperty(dom, name, value, oldValue, isSvg) {\r\n\tlet useCapture;\r\n\r\n\to: if (name === 'style') {\r\n\t\tif (typeof value == 'string') {\r\n\t\t\tdom.style.cssText = value;\r\n\t\t} else {\r\n\t\t\tif (typeof oldValue == 'string') {\r\n\t\t\t\tdom.style.cssText = oldValue = '';\r\n\t\t\t}\r\n\r\n\t\t\tif (oldValue) {\r\n\t\t\t\tfor (name in oldValue) {\r\n\t\t\t\t\tif (!(value && name in value)) {\r\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value) {\r\n\t\t\t\tfor (name in value) {\r\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\r\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\r\n\telse if (name[0] === 'o' && name[1] === 'n') {\r\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\r\n\r\n\t\t// Infer correct casing for DOM built-in events:\r\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\r\n\t\telse name = name.slice(2);\r\n\r\n\t\tif (!dom._listeners) dom._listeners = {};\r\n\t\tdom._listeners[name + useCapture] = value;\r\n\r\n\t\tif (value) {\r\n\t\t\tif (!oldValue) {\r\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\r\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\r\n\t\t\tdom.removeEventListener(name, handler, useCapture);\r\n\t\t}\r\n\t} else if (name !== 'dangerouslySetInnerHTML') {\r\n\t\tif (isSvg) {\r\n\t\t\t// Normalize incorrect prop usage for SVG:\r\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\r\n\t\t\t// - className --> class\r\n\t\t\tname = name.replace(/xlink[H:h]/, 'h').replace(/sName$/, 's');\r\n\t\t} else if (\r\n\t\t\tname !== 'href' &&\r\n\t\t\tname !== 'list' &&\r\n\t\t\tname !== 'form' &&\r\n\t\t\t// Default value in browsers is `-1` and an empty string is\r\n\t\t\t// cast to `0` instead\r\n\t\t\tname !== 'tabIndex' &&\r\n\t\t\tname !== 'download' &&\r\n\t\t\tname in dom\r\n\t\t) {\r\n\t\t\ttry {\r\n\t\t\t\tdom[name] = value == null ? '' : value;\r\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\r\n\t\t\t\tbreak o;\r\n\t\t\t} catch (e) {}\r\n\t\t}\r\n\r\n\t\t// ARIA-attributes have a different notion of boolean values.\r\n\t\t// The value `false` is different from the attribute not\r\n\t\t// existing on the DOM, so we can't remove it. For non-boolean\r\n\t\t// ARIA-attributes we could treat false as a removal, but the\r\n\t\t// amount of exceptions would cost us too many bytes. On top of\r\n\t\t// that other VDOM frameworks also always stringify `false`.\r\n\r\n\t\tif (typeof value === 'function') {\r\n\t\t\t// never serialize functions as attribute values\r\n\t\t} else if (\r\n\t\t\tvalue != null &&\r\n\t\t\t(value !== false || (name[0] === 'a' && name[1] === 'r'))\r\n\t\t) {\r\n\t\t\tdom.setAttribute(name, value);\r\n\t\t} else {\r\n\t\t\tdom.removeAttribute(name);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Proxy an event to hooked event handlers\r\n * @param {Event} e The event object from the browser\r\n * @private\r\n */\r\nfunction eventProxy(e) {\r\n\tthis._listeners[e.type + false](options.event ? options.event(e) : e);\r\n}\r\n\r\nfunction eventProxyCapture(e) {\r\n\tthis._listeners[e.type + true](options.event ? options.event(e) : e);\r\n}\r\n","import { EMPTY_OBJ } from '../constants';\r\nimport { Component, getDomSibling } from '../component';\r\nimport { Fragment } from '../create-element';\r\nimport { diffChildren } from './children';\r\nimport { diffProps, setProperty } from './props';\r\nimport { assign, removeNode, slice } from '../util';\r\nimport options from '../options';\r\n\r\n/**\r\n * Diff two virtual nodes and apply proper changes to the DOM\r\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\r\n * @param {import('../internal').VNode} newVNode The new virtual node\r\n * @param {import('../internal').VNode} oldVNode The old virtual node\r\n * @param {object} globalContext The current context object. Modified by getChildContext\r\n * @param {boolean} isSvg Whether or not this element is an SVG node\r\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\r\n * @param {Array<import('../internal').Component>} commitQueue List of components\r\n * which have callbacks to invoke in commitRoot\r\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\r\n * element any new dom elements should be placed around. Likely `null` on first\r\n * render (except when hydrating). Can be a sibling DOM element when diffing\r\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\r\n * @param {boolean} [isHydrating] Whether or not we are in hydration\r\n */\r\nexport function diff(\r\n\tparentDom,\r\n\tnewVNode,\r\n\toldVNode,\r\n\tglobalContext,\r\n\tisSvg,\r\n\texcessDomChildren,\r\n\tcommitQueue,\r\n\toldDom,\r\n\tisHydrating\r\n) {\r\n\tlet tmp,\r\n\t\tnewType = newVNode.type;\r\n\r\n\t// When passing through createElement it assigns the object\r\n\t// constructor as undefined. This to prevent JSON-injection.\r\n\tif (newVNode.constructor !== undefined) return null;\r\n\r\n\t// If the previous diff bailed out, resume creating/hydrating.\r\n\tif (oldVNode._hydrating != null) {\r\n\t\tisHydrating = oldVNode._hydrating;\r\n\t\toldDom = newVNode._dom = oldVNode._dom;\r\n\t\t// if we resume, we want the tree to be \"unlocked\"\r\n\t\tnewVNode._hydrating = null;\r\n\t\texcessDomChildren = [oldDom];\r\n\t}\r\n\r\n\tif ((tmp = options._diff)) tmp(newVNode);\r\n\r\n\ttry {\r\n\t\touter: if (typeof newType == 'function') {\r\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\r\n\t\t\tlet newProps = newVNode.props;\r\n\r\n\t\t\t// Necessary for createContext api. Setting this property will pass\r\n\t\t\t// the context value as `this.context` just for this component.\r\n\t\t\ttmp = newType.contextType;\r\n\t\t\tlet provider = tmp && globalContext[tmp._id];\r\n\t\t\tlet componentContext = tmp\r\n\t\t\t\t? provider\r\n\t\t\t\t\t? provider.props.value\r\n\t\t\t\t\t: tmp._defaultValue\r\n\t\t\t\t: globalContext;\r\n\r\n\t\t\t// Get component and set it to `c`\r\n\t\t\tif (oldVNode._component) {\r\n\t\t\t\tc = newVNode._component = oldVNode._component;\r\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\r\n\t\t\t} else {\r\n\t\t\t\t// Instantiate the new component\r\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\r\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\r\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\r\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\r\n\t\t\t\t\tc.constructor = newType;\r\n\t\t\t\t\tc.render = doRender;\r\n\t\t\t\t}\r\n\t\t\t\tif (provider) provider.sub(c);\r\n\r\n\t\t\t\tc.props = newProps;\r\n\t\t\t\tif (!c.state) c.state = {};\r\n\t\t\t\tc.context = componentContext;\r\n\t\t\t\tc._globalContext = globalContext;\r\n\t\t\t\tisNew = c._dirty = true;\r\n\t\t\t\tc._renderCallbacks = [];\r\n\t\t\t}\r\n\r\n\t\t\t// Invoke getDerivedStateFromProps\r\n\t\t\tif (c._nextState == null) {\r\n\t\t\t\tc._nextState = c.state;\r\n\t\t\t}\r\n\t\t\tif (newType.getDerivedStateFromProps != null) {\r\n\t\t\t\tif (c._nextState == c.state) {\r\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tassign(\r\n\t\t\t\t\tc._nextState,\r\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\toldProps = c.props;\r\n\t\t\toldState = c.state;\r\n\r\n\t\t\t// Invoke pre-render lifecycle methods\r\n\t\t\tif (isNew) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\r\n\t\t\t\t\tc.componentWillMount != null\r\n\t\t\t\t) {\r\n\t\t\t\t\tc.componentWillMount();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (c.componentDidMount != null) {\r\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (\r\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\r\n\t\t\t\t\tnewProps !== oldProps &&\r\n\t\t\t\t\tc.componentWillReceiveProps != null\r\n\t\t\t\t) {\r\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t(!c._force &&\r\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\r\n\t\t\t\t\t\tc.shouldComponentUpdate(\r\n\t\t\t\t\t\t\tnewProps,\r\n\t\t\t\t\t\t\tc._nextState,\r\n\t\t\t\t\t\t\tcomponentContext\r\n\t\t\t\t\t\t) === false) ||\r\n\t\t\t\t\tnewVNode._original === oldVNode._original\r\n\t\t\t\t) {\r\n\t\t\t\t\tc.props = newProps;\r\n\t\t\t\t\tc.state = c._nextState;\r\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\r\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) c._dirty = false;\r\n\t\t\t\t\tc._vnode = newVNode;\r\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\r\n\t\t\t\t\tnewVNode._children = oldVNode._children;\r\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\r\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (c._renderCallbacks.length) {\r\n\t\t\t\t\t\tcommitQueue.push(c);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak outer;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (c.componentWillUpdate != null) {\r\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (c.componentDidUpdate != null) {\r\n\t\t\t\t\tc._renderCallbacks.push(() => {\r\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tc.context = componentContext;\r\n\t\t\tc.props = newProps;\r\n\t\t\tc.state = c._nextState;\r\n\r\n\t\t\tif ((tmp = options._render)) tmp(newVNode);\r\n\r\n\t\t\tc._dirty = false;\r\n\t\t\tc._vnode = newVNode;\r\n\t\t\tc._parentDom = parentDom;\r\n\r\n\t\t\ttmp = c.render(c.props, c.state, c.context);\r\n\r\n\t\t\t// Handle setState called in render, see #2553\r\n\t\t\tc.state = c._nextState;\r\n\r\n\t\t\tif (c.getChildContext != null) {\r\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\r\n\t\t\t}\r\n\r\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\r\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\r\n\t\t\t}\r\n\r\n\t\t\tlet isTopLevelFragment =\r\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\r\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\r\n\r\n\t\t\tdiffChildren(\r\n\t\t\t\tparentDom,\r\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\r\n\t\t\t\tnewVNode,\r\n\t\t\t\toldVNode,\r\n\t\t\t\tglobalContext,\r\n\t\t\t\tisSvg,\r\n\t\t\t\texcessDomChildren,\r\n\t\t\t\tcommitQueue,\r\n\t\t\t\toldDom,\r\n\t\t\t\tisHydrating\r\n\t\t\t);\r\n\r\n\t\t\tc.base = newVNode._dom;\r\n\r\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\r\n\t\t\tnewVNode._hydrating = null;\r\n\r\n\t\t\tif (c._renderCallbacks.length) {\r\n\t\t\t\tcommitQueue.push(c);\r\n\t\t\t}\r\n\r\n\t\t\tif (clearProcessingException) {\r\n\t\t\t\tc._pendingError = c._processingException = null;\r\n\t\t\t}\r\n\r\n\t\t\tc._force = false;\r\n\t\t} else if (\r\n\t\t\texcessDomChildren == null &&\r\n\t\t\tnewVNode._original === oldVNode._original\r\n\t\t) {\r\n\t\t\tnewVNode._children = oldVNode._children;\r\n\t\t\tnewVNode._dom = oldVNode._dom;\r\n\t\t} else {\r\n\t\t\tnewVNode._dom = diffElementNodes(\r\n\t\t\t\toldVNode._dom,\r\n\t\t\t\tnewVNode,\r\n\t\t\t\toldVNode,\r\n\t\t\t\tglobalContext,\r\n\t\t\t\tisSvg,\r\n\t\t\t\texcessDomChildren,\r\n\t\t\t\tcommitQueue,\r\n\t\t\t\tisHydrating\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\r\n\t} catch (e) {\r\n\t\tnewVNode._original = null;\r\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\r\n\t\tif (isHydrating || excessDomChildren != null) {\r\n\t\t\tnewVNode._dom = oldDom;\r\n\t\t\tnewVNode._hydrating = !!isHydrating;\r\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\r\n\t\t\t// ^ could possibly be simplified to:\r\n\t\t\t// excessDomChildren.length = 0;\r\n\t\t}\r\n\t\toptions._catchError(e, newVNode, oldVNode);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {Array<import('../internal').Component>} commitQueue List of components\r\n * which have callbacks to invoke in commitRoot\r\n * @param {import('../internal').VNode} root\r\n */\r\nexport function commitRoot(commitQueue, root) {\r\n\tif (options._commit) options._commit(root, commitQueue);\r\n\r\n\tcommitQueue.some(c => {\r\n\t\ttry {\r\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\r\n\t\t\tcommitQueue = c._renderCallbacks;\r\n\t\t\tc._renderCallbacks = [];\r\n\t\t\tcommitQueue.some(cb => {\r\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\r\n\t\t\t\tcb.call(c);\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\toptions._catchError(e, c._vnode);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Diff two virtual nodes representing DOM element\r\n * @param {import('../internal').PreactElement} dom The DOM element representing\r\n * the virtual nodes being diffed\r\n * @param {import('../internal').VNode} newVNode The new virtual node\r\n * @param {import('../internal').VNode} oldVNode The old virtual node\r\n * @param {object} globalContext The current context object\r\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\r\n * @param {*} excessDomChildren\r\n * @param {Array<import('../internal').Component>} commitQueue List of components\r\n * which have callbacks to invoke in commitRoot\r\n * @param {boolean} isHydrating Whether or not we are in hydration\r\n * @returns {import('../internal').PreactElement}\r\n */\r\nfunction diffElementNodes(\r\n\tdom,\r\n\tnewVNode,\r\n\toldVNode,\r\n\tglobalContext,\r\n\tisSvg,\r\n\texcessDomChildren,\r\n\tcommitQueue,\r\n\tisHydrating\r\n) {\r\n\tlet oldProps = oldVNode.props;\r\n\tlet newProps = newVNode.props;\r\n\tlet nodeType = newVNode.type;\r\n\tlet i = 0;\r\n\r\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\r\n\tif (nodeType === 'svg') isSvg = true;\r\n\r\n\tif (excessDomChildren != null) {\r\n\t\tfor (; i < excessDomChildren.length; i++) {\r\n\t\t\tconst child = excessDomChildren[i];\r\n\r\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\r\n\t\t\t// argument matches an element in excessDomChildren, remove it from\r\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\r\n\t\t\tif (\r\n\t\t\t\tchild &&\r\n\t\t\t\t'setAttribute' in child === !!nodeType &&\r\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\r\n\t\t\t) {\r\n\t\t\t\tdom = child;\r\n\t\t\t\texcessDomChildren[i] = null;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (dom == null) {\r\n\t\tif (nodeType === null) {\r\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\r\n\t\t\treturn document.createTextNode(newProps);\r\n\t\t}\r\n\r\n\t\tif (isSvg) {\r\n\t\t\tdom = document.createElementNS(\r\n\t\t\t\t'http://www.w3.org/2000/svg',\r\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\r\n\t\t\t\tnodeType\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tdom = document.createElement(\r\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\r\n\t\t\t\tnodeType,\r\n\t\t\t\tnewProps.is && newProps\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// we created a new parent, so none of the previously attached children can be reused:\r\n\t\texcessDomChildren = null;\r\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\r\n\t\tisHydrating = false;\r\n\t}\r\n\r\n\tif (nodeType === null) {\r\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\r\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\r\n\t\t\tdom.data = newProps;\r\n\t\t}\r\n\t} else {\r\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\r\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\r\n\r\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\r\n\r\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\r\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\r\n\r\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\r\n\t\t// @TODO we should warn in debug mode when props don't match here.\r\n\t\tif (!isHydrating) {\r\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\r\n\t\t\t// we should read the existing DOM attributes to diff them\r\n\t\t\tif (excessDomChildren != null) {\r\n\t\t\t\toldProps = {};\r\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\r\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (newHtml || oldHtml) {\r\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\r\n\t\t\t\tif (\r\n\t\t\t\t\t!newHtml ||\r\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\r\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\r\n\t\t\t\t) {\r\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\r\n\r\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\r\n\t\tif (newHtml) {\r\n\t\t\tnewVNode._children = [];\r\n\t\t} else {\r\n\t\t\ti = newVNode.props.children;\r\n\t\t\tdiffChildren(\r\n\t\t\t\tdom,\r\n\t\t\t\tArray.isArray(i) ? i : [i],\r\n\t\t\t\tnewVNode,\r\n\t\t\t\toldVNode,\r\n\t\t\t\tglobalContext,\r\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\r\n\t\t\t\texcessDomChildren,\r\n\t\t\t\tcommitQueue,\r\n\t\t\t\texcessDomChildren\r\n\t\t\t\t\t? excessDomChildren[0]\r\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\r\n\t\t\t\tisHydrating\r\n\t\t\t);\r\n\r\n\t\t\t// Remove children that are not part of any vnode.\r\n\t\t\tif (excessDomChildren != null) {\r\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\r\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// (as above, don't diff props during hydration)\r\n\t\tif (!isHydrating) {\r\n\t\t\tif (\r\n\t\t\t\t'value' in newProps &&\r\n\t\t\t\t(i = newProps.value) !== undefined &&\r\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\r\n\t\t\t\t// despite the attribute not being present. When the attribute\r\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\r\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\r\n\t\t\t\t(i !== oldProps.value ||\r\n\t\t\t\t\ti !== dom.value ||\r\n\t\t\t\t\t(nodeType === 'progress' && !i))\r\n\t\t\t) {\r\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\t'checked' in newProps &&\r\n\t\t\t\t(i = newProps.checked) !== undefined &&\r\n\t\t\t\ti !== dom.checked\r\n\t\t\t) {\r\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn dom;\r\n}\r\n\r\n/**\r\n * Invoke or update a ref, depending on whether it is a function or object ref.\r\n * @param {object|function} ref\r\n * @param {any} value\r\n * @param {import('../internal').VNode} vnode\r\n */\r\nexport function applyRef(ref, value, vnode) {\r\n\ttry {\r\n\t\tif (typeof ref == 'function') ref(value);\r\n\t\telse ref.current = value;\r\n\t} catch (e) {\r\n\t\toptions._catchError(e, vnode);\r\n\t}\r\n}\r\n\r\n/**\r\n * Unmount a virtual node from the tree and apply DOM changes\r\n * @param {import('../internal').VNode} vnode The virtual node to unmount\r\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\r\n * initiated the unmount\r\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\r\n * current element is already detached from the DOM.\r\n */\r\nexport function unmount(vnode, parentVNode, skipRemove) {\r\n\tlet r;\r\n\tif (options.unmount) options.unmount(vnode);\r\n\r\n\tif ((r = vnode.ref)) {\r\n\t\tif (!r.current || r.current === vnode._dom) applyRef(r, null, parentVNode);\r\n\t}\r\n\r\n\tif ((r = vnode._component) != null) {\r\n\t\tif (r.componentWillUnmount) {\r\n\t\t\ttry {\r\n\t\t\t\tr.componentWillUnmount();\r\n\t\t\t} catch (e) {\r\n\t\t\t\toptions._catchError(e, parentVNode);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tr.base = r._parentDom = null;\r\n\t}\r\n\r\n\tif ((r = vnode._children)) {\r\n\t\tfor (let i = 0; i < r.length; i++) {\r\n\t\t\tif (r[i]) {\r\n\t\t\t\tunmount(r[i], parentVNode, typeof vnode.type != 'function');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (!skipRemove && vnode._dom != null) removeNode(vnode._dom);\r\n\r\n\t// Must be set to `undefined` to properly clean up `_nextDom`\r\n\t// for which `null` is a valid value. See comment in `create-element.js`\r\n\tvnode._dom = vnode._nextDom = undefined;\r\n}\r\n\r\n/** The `.render()` method for a PFC backing instance. */\r\nfunction doRender(props, state, context) {\r\n\treturn this.constructor(props, context);\r\n}\r\n","import { EMPTY_OBJ } from './constants';\r\nimport { commitRoot, diff } from './diff/index';\r\nimport { createElement, Fragment } from './create-element';\r\nimport options from './options';\r\nimport { slice } from './util';\r\n\r\n/**\r\n * Render a Preact virtual node into a DOM element\r\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\r\n * @param {import('./internal').PreactElement} parentDom The DOM element to\r\n * render into\r\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\r\n * existing DOM tree rooted at `replaceNode`\r\n */\r\nexport function render(vnode, parentDom, replaceNode) {\r\n\tif (options._root) options._root(vnode, parentDom);\r\n\r\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\r\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\r\n\t// element..\r\n\tlet isHydrating = typeof replaceNode === 'function';\r\n\r\n\t// To be able to support calling `render()` multiple times on the same\r\n\t// DOM node, we need to obtain a reference to the previous tree. We do\r\n\t// this by assigning a new `_children` property to DOM nodes which points\r\n\t// to the last rendered tree. By default this property is not present, which\r\n\t// means that we are mounting a new tree for the first time.\r\n\tlet oldVNode = isHydrating\r\n\t\t? null\r\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\r\n\r\n\tvnode = (\r\n\t\t(!isHydrating && replaceNode) ||\r\n\t\tparentDom\r\n\t)._children = createElement(Fragment, null, [vnode]);\r\n\r\n\t// List of effects that need to be called after diffing.\r\n\tlet commitQueue = [];\r\n\tdiff(\r\n\t\tparentDom,\r\n\t\t// Determine the new vnode tree and store it on the DOM element on\r\n\t\t// our custom `_children` property.\r\n\t\tvnode,\r\n\t\toldVNode || EMPTY_OBJ,\r\n\t\tEMPTY_OBJ,\r\n\t\tparentDom.ownerSVGElement !== undefined,\r\n\t\t!isHydrating && replaceNode\r\n\t\t\t? [replaceNode]\r\n\t\t\t: oldVNode\r\n\t\t\t? null\r\n\t\t\t: parentDom.firstChild\r\n\t\t\t? slice.call(parentDom.childNodes)\r\n\t\t\t: null,\r\n\t\tcommitQueue,\r\n\t\t!isHydrating && replaceNode\r\n\t\t\t? replaceNode\r\n\t\t\t: oldVNode\r\n\t\t\t? oldVNode._dom\r\n\t\t\t: parentDom.firstChild,\r\n\t\tisHydrating\r\n\t);\r\n\r\n\t// Flush all queued effects\r\n\tcommitRoot(commitQueue, vnode);\r\n}\r\n\r\n/**\r\n * Update an existing DOM element with data from a Preact virtual node\r\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\r\n * @param {import('./internal').PreactElement} parentDom The DOM element to\r\n * update\r\n */\r\nexport function hydrate(vnode, parentDom) {\r\n\trender(vnode, parentDom, hydrate);\r\n}\r\n","/**\r\n * Find the closest error boundary to a thrown error and call it\r\n * @param {object} error The thrown value\r\n * @param {import('../internal').VNode} vnode The vnode that threw\r\n * the error that was caught (except for unmounting when this parameter\r\n * is the highest parent that was being unmounted)\r\n */\r\nexport function _catchError(error, vnode) {\r\n\t/** @type {import('../internal').Component} */\r\n\tlet component, ctor, handled;\r\n\r\n\tfor (; (vnode = vnode._parent); ) {\r\n\t\tif ((component = vnode._component) && !component._processingException) {\r\n\t\t\ttry {\r\n\t\t\t\tctor = component.constructor;\r\n\r\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\r\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\r\n\t\t\t\t\thandled = component._dirty;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (component.componentDidCatch != null) {\r\n\t\t\t\t\tcomponent.componentDidCatch(error);\r\n\t\t\t\t\thandled = component._dirty;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\r\n\t\t\t\tif (handled) {\r\n\t\t\t\t\treturn (component._pendingError = component);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\terror = e;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthrow error;\r\n}\r\n","import { options, Fragment } from 'preact';\r\n\r\n/** @typedef {import('preact').VNode} VNode */\r\n\r\nlet vnodeId = 0;\r\n\r\n/**\r\n * @fileoverview\r\n * This file exports various methods that implement Babel's \"automatic\" JSX runtime API:\r\n * - jsx(type, props, key)\r\n * - jsxs(type, props, key)\r\n * - jsxDEV(type, props, key, __source, __self)\r\n *\r\n * The implementation of createVNode here is optimized for performance.\r\n * Benchmarks: https://esbench.com/bench/5f6b54a0b4632100a7dcd2b3\r\n */\r\n\r\n/**\r\n * JSX.Element factory used by Babel's {runtime:\"automatic\"} JSX transform\r\n * @param {VNode['type']} type\r\n * @param {VNode['props']} props\r\n * @param {VNode['key']} [key]\r\n * @param {string} [__source]\r\n * @param {string} [__self]\r\n */\r\nfunction createVNode(type, props, key, __source, __self) {\r\n\t// We'll want to preserve `ref` in props to get rid of the need for\r\n\t// forwardRef components in the future, but that should happen via\r\n\t// a separate PR.\r\n\tlet normalizedProps = {},\r\n\t\tref,\r\n\t\ti;\r\n\tfor (i in props) {\r\n\t\tif (i == 'ref') {\r\n\t\t\tref = props[i];\r\n\t\t} else {\r\n\t\t\tnormalizedProps[i] = props[i];\r\n\t\t}\r\n\t}\r\n\r\n\tconst vnode = {\r\n\t\ttype,\r\n\t\tprops: normalizedProps,\r\n\t\tkey,\r\n\t\tref,\r\n\t\t_children: null,\r\n\t\t_parent: null,\r\n\t\t_depth: 0,\r\n\t\t_dom: null,\r\n\t\t_nextDom: undefined,\r\n\t\t_component: null,\r\n\t\t_hydrating: null,\r\n\t\tconstructor: undefined,\r\n\t\t_original: --vnodeId,\r\n\t\t__source,\r\n\t\t__self\r\n\t};\r\n\r\n\t// If a Component VNode, check for and apply defaultProps.\r\n\t// Note: `type` is often a String, and can be `undefined` in development.\r\n\tif (typeof type === 'function' && (ref = type.defaultProps)) {\r\n\t\tfor (i in ref)\r\n\t\t\tif (typeof normalizedProps[i] === 'undefined') {\r\n\t\t\t\tnormalizedProps[i] = ref[i];\r\n\t\t\t}\r\n\t}\r\n\r\n\tif (options.vnode) options.vnode(vnode);\r\n\treturn vnode;\r\n}\r\n\r\nexport {\r\n\tcreateVNode as jsx,\r\n\tcreateVNode as jsxs,\r\n\tcreateVNode as jsxDEV,\r\n\tFragment\r\n};\r\n","function set(key: string, value: string) {\n  try {\n    window.localStorage[`emoji-mart.${key}`] = JSON.stringify(value)\n  } catch (error) {}\n}\n\nfunction get(key: string): any {\n  try {\n    const value = window.localStorage[`emoji-mart.${key}`]\n\n    if (value) {\n      return JSON.parse(value)\n    }\n  } catch (error) {}\n}\n\nexport default { set, get }\n","const CACHE = new Map()\nconst VERSIONS = [\n  { v: 14, emoji: '🫠' },\n  { v: 13.1, emoji: '😶‍🌫️' },\n  { v: 13, emoji: '🥸' },\n  { v: 12.1, emoji: '🧑‍🦰' },\n  { v: 12, emoji: '🥱' },\n  { v: 11, emoji: '🥰' },\n  { v: 5, emoji: '🤩' },\n  { v: 4, emoji: '👱‍♀️' },\n  { v: 3, emoji: '🤣' },\n  { v: 2, emoji: '👋🏻' },\n  { v: 1, emoji: '🙃' },\n]\n\nfunction latestVersion() {\n  for (const { v, emoji } of VERSIONS) {\n    if (isSupported(emoji)) {\n      return v\n    }\n  }\n}\n\nfunction noCountryFlags() {\n  if (isSupported('🇨🇦')) {\n    return false\n  }\n\n  return true\n}\n\nfunction isSupported(emoji) {\n  if (CACHE.has(emoji)) {\n    return CACHE.get(emoji)\n  }\n\n  const supported = isEmojiSupported(emoji)\n  CACHE.set(emoji, supported)\n\n  return supported\n}\n\n// https://github.com/koala-interactive/is-emoji-supported\nconst isEmojiSupported = (() => {\n  let ctx = null\n  try {\n    if (!navigator.userAgent.includes('jsdom')) {\n      ctx = document\n        .createElement('canvas')\n        .getContext('2d', { willReadFrequently: true })\n    }\n  } catch {}\n\n  // Not in browser env\n  if (!ctx) {\n    return () => false\n  }\n\n  const CANVAS_HEIGHT = 25\n  const CANVAS_WIDTH = 20\n  const textSize = Math.floor(CANVAS_HEIGHT / 2)\n\n  // Initialize convas context\n  ctx.font = textSize + 'px Arial, Sans-Serif'\n  ctx.textBaseline = 'top'\n  ctx.canvas.width = CANVAS_WIDTH * 2\n  ctx.canvas.height = CANVAS_HEIGHT\n\n  return (unicode) => {\n    ctx.clearRect(0, 0, CANVAS_WIDTH * 2, CANVAS_HEIGHT)\n\n    // Draw in red on the left\n    ctx.fillStyle = '#FF0000'\n    ctx.fillText(unicode, 0, 22)\n\n    // Draw in blue on right\n    ctx.fillStyle = '#0000FF'\n    ctx.fillText(unicode, CANVAS_WIDTH, 22)\n\n    const a = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT).data\n    const count = a.length\n    let i = 0\n\n    // Search the first visible pixel\n    for (; i < count && !a[i + 3]; i += 4);\n\n    // No visible pixel\n    if (i >= count) {\n      return false\n    }\n\n    // Emoji has immutable color, so we check the color of the emoji in two different colors\n    // the result show be the same.\n    const x = CANVAS_WIDTH + ((i / 4) % CANVAS_WIDTH)\n    const y = Math.floor(i / 4 / CANVAS_WIDTH)\n    const b = ctx.getImageData(x, y, 1, 1).data\n\n    if (a[i] !== b[0] || a[i + 2] !== b[2]) {\n      return false\n    }\n\n    // Some emojis are a contraction of different ones, so if it's not\n    // supported, it will show multiple characters\n    if (ctx.measureText(unicode).width >= CANVAS_WIDTH) {\n      return false\n    }\n\n    // Supported\n    return true\n  }\n})()\n\nexport default { latestVersion, noCountryFlags }\n","// @ts-nocheck\nimport { Store } from '../helpers'\n\nconst DEFAULTS = [\n  '+1',\n  'grinning',\n  'kissing_heart',\n  'heart_eyes',\n  'laughing',\n  'stuck_out_tongue_winking_eye',\n  'sweat_smile',\n  'joy',\n  'scream',\n  'disappointed',\n  'unamused',\n  'weary',\n  'sob',\n  'sunglasses',\n  'heart',\n]\n\nlet Index: any | null = null\n\nfunction add(emoji: { id: string }) {\n  Index || (Index = Store.get('frequently') || {})\n\n  const emojiId = emoji.id || emoji\n  if (!emojiId) return\n\n  Index[emojiId] || (Index[emojiId] = 0)\n  Index[emojiId] += 1\n\n  Store.set('last', emojiId)\n  Store.set('frequently', Index)\n}\n\nfunction get({ maxFrequentRows, perLine }) {\n  if (!maxFrequentRows) return []\n\n  Index || (Index = Store.get('frequently'))\n  let emojiIds = []\n\n  if (!Index) {\n    Index = {}\n\n    for (let i in DEFAULTS.slice(0, perLine)) {\n      const emojiId = DEFAULTS[i]\n\n      Index[emojiId] = perLine - i\n      emojiIds.push(emojiId)\n    }\n\n    return emojiIds\n  }\n\n  const max = maxFrequentRows * perLine\n  const last = Store.get('last')\n\n  for (let emojiId in Index) {\n    emojiIds.push(emojiId)\n  }\n\n  emojiIds.sort((a, b) => {\n    const aScore = Index[b]\n    const bScore = Index[a]\n\n    if (aScore == bScore) {\n      return a.localeCompare(b)\n    }\n\n    return aScore - bScore\n  })\n\n  if (emojiIds.length > max) {\n    const removedIds = emojiIds.slice(max)\n    emojiIds = emojiIds.slice(0, max)\n\n    for (let removedId of removedIds) {\n      if (removedId == last) continue\n      delete Index[removedId]\n    }\n\n    if (last && emojiIds.indexOf(last) == -1) {\n      delete Index[emojiIds[emojiIds.length - 1]]\n      emojiIds.splice(-1, 1, last)\n    }\n\n    Store.set('frequently', Index)\n  }\n\n  return emojiIds\n}\n\nexport default { add, get, DEFAULTS }\n","{\n  \"search\": \"Search\",\n  \"search_no_results_1\": \"Oh no!\",\n  \"search_no_results_2\": \"That emoji couldn’t be found\",\n  \"pick\": \"Pick an emoji…\",\n  \"add_custom\": \"Add custom emoji\",\n  \"categories\": {\n    \"activity\": \"Activity\",\n    \"custom\": \"Custom\",\n    \"flags\": \"Flags\",\n    \"foods\": \"Food & Drink\",\n    \"frequent\": \"Frequently used\",\n    \"nature\": \"Animals & Nature\",\n    \"objects\": \"Objects\",\n    \"people\": \"Smileys & People\",\n    \"places\": \"Travel & Places\",\n    \"search\": \"Search Results\",\n    \"symbols\": \"Symbols\"\n  },\n  \"skins\": {\n    \"choose\": \"Choose default skin tone\",\n    \"1\": \"Default\",\n    \"2\": \"Light\",\n    \"3\": \"Medium-Light\",\n    \"4\": \"Medium\",\n    \"5\": \"Medium-Dark\",\n    \"6\": \"Dark\"\n  }\n}\n","export default {\n  autoFocus: {\n    value: false,\n  },\n  dynamicWidth: {\n    value: false,\n  },\n  emojiButtonColors: {\n    value: null,\n  },\n  emojiButtonRadius: {\n    value: '100%',\n  },\n  emojiButtonSize: {\n    value: 36,\n  },\n  emojiSize: {\n    value: 24,\n  },\n  emojiVersion: {\n    value: 14,\n    choices: [1, 2, 3, 4, 5, 11, 12, 12.1, 13, 13.1, 14],\n  },\n  exceptEmojis: {\n    value: [],\n  },\n  icons: {\n    value: 'auto',\n    choices: ['auto', 'outline', 'solid'],\n  },\n  locale: {\n    value: 'en',\n    choices: [\n      'en',\n      'ar',\n      'be',\n      'cs',\n      'de',\n      'es',\n      'fa',\n      'fi',\n      'fr',\n      'hi',\n      'it',\n      'ja',\n      'kr',\n      'nl',\n      'pl',\n      'pt',\n      'ru',\n      'sa',\n      'tr',\n      'uk',\n      'vi',\n      'zh',\n    ],\n  },\n  maxFrequentRows: {\n    value: 4,\n  },\n  navPosition: {\n    value: 'top',\n    choices: ['top', 'bottom', 'none'],\n  },\n  noCountryFlags: {\n    value: false,\n  },\n  noResultsEmoji: {\n    value: null,\n  },\n  perLine: {\n    value: 9,\n  },\n  previewEmoji: {\n    value: null,\n  },\n  previewPosition: {\n    value: 'bottom',\n    choices: ['top', 'bottom', 'none'],\n  },\n  searchPosition: {\n    value: 'sticky',\n    choices: ['sticky', 'static', 'none'],\n  },\n  set: {\n    value: 'native',\n    choices: ['native', 'apple', 'facebook', 'google', 'twitter'],\n  },\n  skin: {\n    value: 1,\n    choices: [1, 2, 3, 4, 5, 6],\n  },\n  skinTonePosition: {\n    value: 'preview',\n    choices: ['preview', 'search', 'none'],\n  },\n  theme: {\n    value: 'auto',\n    choices: ['auto', 'light', 'dark'],\n  },\n\n  // Data\n  categories: null,\n  categoryIcons: null,\n  custom: null,\n  data: null,\n  i18n: null,\n\n  // Callbacks\n  getImageURL: null,\n  getSpritesheetURL: null,\n  onAddCustomEmoji: null,\n  onClickOutside: null,\n  onEmojiSelect: null,\n\n  // Deprecated\n  stickySearch: {\n    deprecated: true,\n    value: true,\n  },\n}\n","// @ts-nocheck\nimport i18n_en from '@emoji-mart/data/i18n/en.json'\nimport PickerProps from './components/Picker/PickerProps'\nimport {\n  FrequentlyUsed,\n  NativeSupport,\n  SafeFlags,\n  SearchIndex,\n} from './helpers'\n\nexport let I18n = null\nexport let Data = null\n\nconst fetchCache = {}\nasync function fetchJSON(src) {\n  if (fetchCache[src]) {\n    return fetchCache[src]\n  }\n\n  const response = await fetch(src)\n  const json = await response.json()\n\n  fetchCache[src] = json\n  return json\n}\n\nlet promise: Promise<void> | null = null\nlet initiated = false\nlet initCallback = null\nlet initialized = false\n\nexport function init(options, { caller } = {}) {\n  promise ||\n    (promise = new Promise((resolve) => {\n      initCallback = resolve\n    }))\n\n  if (options) {\n    _init(options)\n  } else if (caller && !initialized) {\n    console.warn(\n      `\\`${caller}\\` requires data to be initialized first. Promise will be pending until \\`init\\` is called.`,\n    )\n  }\n\n  return promise\n}\n\nasync function _init(props) {\n  initialized = true\n\n  let { emojiVersion, set, locale } = props\n  emojiVersion || (emojiVersion = PickerProps.emojiVersion.value)\n  set || (set = PickerProps.set.value)\n  locale || (locale = PickerProps.locale.value)\n\n  if (!Data) {\n    Data =\n      (typeof props.data === 'function' ? await props.data() : props.data) ||\n      (await fetchJSON(\n        `https://cdn.jsdelivr.net/npm/@emoji-mart/data@latest/sets/${emojiVersion}/${set}.json`,\n      ))\n\n    Data.emoticons = {}\n    Data.natives = {}\n\n    Data.categories.unshift({\n      id: 'frequent',\n      emojis: [],\n    })\n\n    for (const alias in Data.aliases) {\n      const emojiId = Data.aliases[alias]\n      const emoji = Data.emojis[emojiId]\n      if (!emoji) continue\n\n      emoji.aliases || (emoji.aliases = [])\n      emoji.aliases.push(alias)\n    }\n\n    Data.originalCategories = Data.categories\n  } else {\n    Data.categories = Data.categories.filter((c) => {\n      const isCustom = !!c.name\n      if (!isCustom) return true\n\n      return false\n    })\n  }\n\n  I18n =\n    (typeof props.i18n === 'function' ? await props.i18n() : props.i18n) ||\n    (locale == 'en'\n      ? i18n_en\n      : await fetchJSON(\n          `https://cdn.jsdelivr.net/npm/@emoji-mart/data@latest/i18n/${locale}.json`,\n        ))\n\n  if (props.custom) {\n    for (let i in props.custom) {\n      i = parseInt(i)\n      const category = props.custom[i]\n      const prevCategory = props.custom[i - 1]\n\n      if (!category.emojis || !category.emojis.length) continue\n\n      category.id || (category.id = `custom_${i + 1}`)\n      category.name || (category.name = I18n.categories.custom)\n\n      if (prevCategory && !category.icon) {\n        category.target = prevCategory.target || prevCategory\n      }\n\n      Data.categories.push(category)\n\n      for (const emoji of category.emojis) {\n        Data.emojis[emoji.id] = emoji\n      }\n    }\n  }\n\n  if (props.categories) {\n    Data.categories = Data.originalCategories\n      .filter((c) => {\n        return props.categories.indexOf(c.id) != -1\n      })\n      .sort((c1, c2) => {\n        const i1 = props.categories.indexOf(c1.id)\n        const i2 = props.categories.indexOf(c2.id)\n\n        return i1 - i2\n      })\n  }\n\n  let latestVersionSupport = null\n  let noCountryFlags = null\n  if (set == 'native') {\n    latestVersionSupport = NativeSupport.latestVersion()\n    noCountryFlags = props.noCountryFlags || NativeSupport.noCountryFlags()\n  }\n\n  let categoryIndex = Data.categories.length\n  let resetSearchIndex = false\n  while (categoryIndex--) {\n    const category = Data.categories[categoryIndex]\n\n    if (category.id == 'frequent') {\n      let { maxFrequentRows, perLine } = props\n\n      maxFrequentRows =\n        maxFrequentRows >= 0\n          ? maxFrequentRows\n          : PickerProps.maxFrequentRows.value\n      perLine || (perLine = PickerProps.perLine.value)\n\n      category.emojis = FrequentlyUsed.get({ maxFrequentRows, perLine })\n    }\n\n    if (!category.emojis || !category.emojis.length) {\n      Data.categories.splice(categoryIndex, 1)\n      continue\n    }\n\n    const { categoryIcons } = props\n    if (categoryIcons) {\n      const icon = categoryIcons[category.id]\n      if (icon && !category.icon) {\n        category.icon = icon\n      }\n    }\n\n    let emojiIndex = category.emojis.length\n    while (emojiIndex--) {\n      const emojiId = category.emojis[emojiIndex]\n      const emoji = emojiId.id ? emojiId : Data.emojis[emojiId]\n\n      const ignore = () => {\n        category.emojis.splice(emojiIndex, 1)\n      }\n\n      if (\n        !emoji ||\n        (props.exceptEmojis && props.exceptEmojis.includes(emoji.id))\n      ) {\n        ignore()\n        continue\n      }\n\n      if (latestVersionSupport && emoji.version > latestVersionSupport) {\n        ignore()\n        continue\n      }\n\n      if (noCountryFlags && category.id == 'flags') {\n        if (!SafeFlags.includes(emoji.id)) {\n          ignore()\n          continue\n        }\n      }\n\n      if (!emoji.search) {\n        resetSearchIndex = true\n        emoji.search =\n          ',' +\n          [\n            [emoji.id, false],\n            [emoji.name, true],\n            [emoji.keywords, false],\n            [emoji.emoticons, false],\n          ]\n            .map(([strings, split]) => {\n              if (!strings) return\n              return (Array.isArray(strings) ? strings : [strings])\n                .map((string) => {\n                  return (split ? string.split(/[-|_|\\s]+/) : [string]).map(\n                    (s) => s.toLowerCase(),\n                  )\n                })\n                .flat()\n            })\n            .flat()\n            .filter((a) => a && a.trim())\n            .join(',')\n\n        if (emoji.emoticons) {\n          for (const emoticon of emoji.emoticons) {\n            if (Data.emoticons[emoticon]) continue\n            Data.emoticons[emoticon] = emoji.id\n          }\n        }\n\n        let skinIndex = 0\n        for (const skin of emoji.skins) {\n          if (!skin) continue\n          skinIndex++\n\n          const { native } = skin\n          if (native) {\n            Data.natives[native] = emoji.id\n            emoji.search += `,${native}`\n          }\n\n          const skinShortcodes =\n            skinIndex == 1 ? '' : `:skin-tone-${skinIndex}:`\n          skin.shortcodes = `:${emoji.id}:${skinShortcodes}`\n        }\n      }\n    }\n  }\n\n  if (resetSearchIndex) {\n    SearchIndex.reset()\n  }\n\n  initCallback()\n}\n\nexport function getProps(props, defaultProps, element) {\n  props || (props = {})\n\n  const _props = {}\n  for (let k in defaultProps) {\n    _props[k] = getProp(k, props, defaultProps, element)\n  }\n\n  return _props\n}\n\nexport function getProp(propName, props, defaultProps, element) {\n  const defaults = defaultProps[propName]\n  let value =\n    (element && element.getAttribute(propName)) ||\n    (props[propName] != null && props[propName] != undefined\n      ? props[propName]\n      : null)\n\n  if (!defaults) {\n    return value\n  }\n\n  if (\n    value != null &&\n    defaults.value &&\n    typeof defaults.value != typeof value\n  ) {\n    if (typeof defaults.value == 'boolean') {\n      value = value == 'false' ? false : true\n    } else {\n      value = defaults.value.constructor(value)\n    }\n  }\n\n  if (defaults.transform && value) {\n    value = defaults.transform(value)\n  }\n\n  if (\n    value == null ||\n    (defaults.choices && defaults.choices.indexOf(value) == -1)\n  ) {\n    value = defaults.value\n  }\n\n  return value\n}\n","// @ts-nocheck\nimport { init, Data } from '../config'\n\nconst SHORTCODES_REGEX = /^(?:\\:([^\\:]+)\\:)(?:\\:skin-tone-(\\d)\\:)?$/\nlet Pool = null\n\nfunction get(emojiId) {\n  if (emojiId.id) {\n    return emojiId\n  }\n\n  return (\n    Data.emojis[emojiId] ||\n    Data.emojis[Data.aliases[emojiId]] ||\n    Data.emojis[Data.natives[emojiId]]\n  )\n}\n\nfunction reset() {\n  Pool = null\n}\n\nasync function search(value, { maxResults, caller } = {}) {\n  if (!value || !value.trim().length) return null\n  maxResults || (maxResults = 90)\n\n  await init(null, { caller: caller || 'SearchIndex.search' })\n\n  const values = value\n    .toLowerCase()\n    .replace(/(\\w)-/, '$1 ')\n    .split(/[\\s|,]+/)\n    .filter((word, i, words) => {\n      return word.trim() && words.indexOf(word) == i\n    })\n\n  if (!values.length) return\n\n  let pool = Pool || (Pool = Object.values(Data.emojis))\n  let results, scores\n\n  for (const value of values) {\n    if (!pool.length) break\n\n    results = []\n    scores = {}\n\n    for (const emoji of pool) {\n      if (!emoji.search) continue\n      const score = emoji.search.indexOf(`,${value}`)\n      if (score == -1) continue\n\n      results.push(emoji)\n      scores[emoji.id] || (scores[emoji.id] = 0)\n      scores[emoji.id] += emoji.id == value ? 0 : score + 1\n    }\n\n    pool = results\n  }\n\n  if (results.length < 2) {\n    return results\n  }\n\n  results.sort((a, b) => {\n    const aScore = scores[a.id]\n    const bScore = scores[b.id]\n\n    if (aScore == bScore) {\n      return a.id.localeCompare(b.id)\n    }\n\n    return aScore - bScore\n  })\n\n  if (results.length > maxResults) {\n    results = results.slice(0, maxResults)\n  }\n\n  return results\n}\n\nexport default { search, get, reset, SHORTCODES_REGEX }\n","export { default as Store } from './store'\n\nexport { default as NativeSupport } from './native-support'\nexport { default as FrequentlyUsed } from './frequently-used'\nexport { default as SearchIndex } from './search-index'\n\nexport const SafeFlags = [\n  'checkered_flag',\n  'crossed_flags',\n  'pirate_flag',\n  'rainbow-flag',\n  'transgender_flag',\n  'triangular_flag_on_post',\n  'waving_black_flag',\n  'waving_white_flag',\n]\n","import { SearchIndex } from './helpers'\n\nexport function deepEqual(a: any, b: any): boolean {\n  return (\n    Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val == b[index])\n  )\n}\n\nexport async function sleep(frames = 1) {\n  for (let _ in [...Array(frames).keys()]) {\n    await new Promise(requestAnimationFrame)\n  }\n}\n\nexport function getEmojiData(emoji, { skinIndex = 0 } = {}) {\n  const skin =\n    emoji.skins[skinIndex] ||\n    (() => {\n      skinIndex = 0\n      return emoji.skins[skinIndex]\n    })()\n\n  const emojiData: any = {\n    id: emoji.id,\n    name: emoji.name,\n    native: skin.native,\n    unified: skin.unified,\n    keywords: emoji.keywords,\n    shortcodes: skin.shortcodes || emoji.shortcodes,\n  }\n\n  if (emoji.skins.length > 1) {\n    emojiData.skin = skinIndex + 1\n  }\n\n  if (skin.src) {\n    emojiData.src = skin.src\n  }\n\n  if (emoji.aliases && emoji.aliases.length) {\n    emojiData.aliases = emoji.aliases\n  }\n\n  if (emoji.emoticons && emoji.emoticons.length) {\n    emojiData.emoticons = emoji.emoticons\n  }\n\n  return emojiData\n}\n\nexport async function getEmojiDataFromNative(nativeString) {\n  const results = await SearchIndex.search(nativeString, {\n    maxResults: 1,\n    caller: 'getEmojiDataFromNative',\n  })\n  if (!results || !results.length) return null\n\n  const emoji = results[0]\n  let skinIndex = 0\n\n  for (let skin of emoji.skins) {\n    if (skin.native == nativeString) {\n      break\n    }\n\n    skinIndex++\n  }\n\n  return getEmojiData(emoji, { skinIndex })\n}\n","const categories = {\n  activity: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 0C5.373 0 0 5.372 0 12c0 6.627 5.373 12 12 12 6.628 0 12-5.373 12-12 0-6.628-5.372-12-12-12m9.949 11H17.05c.224-2.527 1.232-4.773 1.968-6.113A9.966 9.966 0 0 1 21.949 11M13 11V2.051a9.945 9.945 0 0 1 4.432 1.564c-.858 1.491-2.156 4.22-2.392 7.385H13zm-2 0H8.961c-.238-3.165-1.536-5.894-2.393-7.385A9.95 9.95 0 0 1 11 2.051V11zm0 2v8.949a9.937 9.937 0 0 1-4.432-1.564c.857-1.492 2.155-4.221 2.393-7.385H11zm4.04 0c.236 3.164 1.534 5.893 2.392 7.385A9.92 9.92 0 0 1 13 21.949V13h2.04zM4.982 4.887C5.718 6.227 6.726 8.473 6.951 11h-4.9a9.977 9.977 0 0 1 2.931-6.113M2.051 13h4.9c-.226 2.527-1.233 4.771-1.969 6.113A9.972 9.972 0 0 1 2.051 13m16.967 6.113c-.735-1.342-1.744-3.586-1.968-6.113h4.899a9.961 9.961 0 0 1-2.931 6.113\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n        <path d=\"M16.17 337.5c0 44.98 7.565 83.54 13.98 107.9C35.22 464.3 50.46 496 174.9 496c9.566 0 19.59-.4707 29.84-1.271L17.33 307.3C16.53 317.6 16.17 327.7 16.17 337.5zM495.8 174.5c0-44.98-7.565-83.53-13.98-107.9c-4.688-17.54-18.34-31.23-36.04-35.95C435.5 27.91 392.9 16 337 16c-9.564 0-19.59 .4707-29.84 1.271l187.5 187.5C495.5 194.4 495.8 184.3 495.8 174.5zM26.77 248.8l236.3 236.3c142-36.1 203.9-150.4 222.2-221.1L248.9 26.87C106.9 62.96 45.07 177.2 26.77 248.8zM256 335.1c0 9.141-7.474 16-16 16c-4.094 0-8.188-1.564-11.31-4.689L164.7 283.3C161.6 280.2 160 276.1 160 271.1c0-8.529 6.865-16 16-16c4.095 0 8.189 1.562 11.31 4.688l64.01 64C254.4 327.8 256 331.9 256 335.1zM304 287.1c0 9.141-7.474 16-16 16c-4.094 0-8.188-1.564-11.31-4.689L212.7 235.3C209.6 232.2 208 228.1 208 223.1c0-9.141 7.473-16 16-16c4.094 0 8.188 1.562 11.31 4.688l64.01 64.01C302.5 279.8 304 283.9 304 287.1zM256 175.1c0-9.141 7.473-16 16-16c4.094 0 8.188 1.562 11.31 4.688l64.01 64.01c3.125 3.125 4.688 7.219 4.688 11.31c0 9.133-7.468 16-16 16c-4.094 0-8.189-1.562-11.31-4.688l-64.01-64.01C257.6 184.2 256 180.1 256 175.1z\" />\n      </svg>\n    ),\n  },\n\n  custom: (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n      <path d=\"M417.1 368c-5.937 10.27-16.69 16-27.75 16c-5.422 0-10.92-1.375-15.97-4.281L256 311.4V448c0 17.67-14.33 32-31.1 32S192 465.7 192 448V311.4l-118.3 68.29C68.67 382.6 63.17 384 57.75 384c-11.06 0-21.81-5.734-27.75-16c-8.828-15.31-3.594-34.88 11.72-43.72L159.1 256L41.72 187.7C26.41 178.9 21.17 159.3 29.1 144C36.63 132.5 49.26 126.7 61.65 128.2C65.78 128.7 69.88 130.1 73.72 132.3L192 200.6V64c0-17.67 14.33-32 32-32S256 46.33 256 64v136.6l118.3-68.29c3.838-2.213 7.939-3.539 12.07-4.051C398.7 126.7 411.4 132.5 417.1 144c8.828 15.31 3.594 34.88-11.72 43.72L288 256l118.3 68.28C421.6 333.1 426.8 352.7 417.1 368z\" />\n    </svg>\n  ),\n\n  flags: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M0 0l6.084 24H8L1.916 0zM21 5h-4l-1-4H4l3 12h3l1 4h13L21 5zM6.563 3h7.875l2 8H8.563l-2-8zm8.832 10l-2.856 1.904L12.063 13h3.332zM19 13l-1.5-6h1.938l2 8H16l3-2z\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n        <path d=\"M64 496C64 504.8 56.75 512 48 512h-32C7.25 512 0 504.8 0 496V32c0-17.75 14.25-32 32-32s32 14.25 32 32V496zM476.3 0c-6.365 0-13.01 1.35-19.34 4.233c-45.69 20.86-79.56 27.94-107.8 27.94c-59.96 0-94.81-31.86-163.9-31.87C160.9 .3055 131.6 4.867 96 15.75v350.5c32-9.984 59.87-14.1 84.85-14.1c73.63 0 124.9 31.78 198.6 31.78c31.91 0 68.02-5.971 111.1-23.09C504.1 355.9 512 344.4 512 332.1V30.73C512 11.1 495.3 0 476.3 0z\" />\n      </svg>\n    ),\n  },\n\n  foods: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17 4.978c-1.838 0-2.876.396-3.68.934.513-1.172 1.768-2.934 4.68-2.934a1 1 0 0 0 0-2c-2.921 0-4.629 1.365-5.547 2.512-.064.078-.119.162-.18.244C11.73 1.838 10.798.023 9.207.023 8.579.022 7.85.306 7 .978 5.027 2.54 5.329 3.902 6.492 4.999 3.609 5.222 0 7.352 0 12.969c0 4.582 4.961 11.009 9 11.009 1.975 0 2.371-.486 3-1 .629.514 1.025 1 3 1 4.039 0 9-6.418 9-11 0-5.953-4.055-8-7-8M8.242 2.546c.641-.508.943-.523.965-.523.426.169.975 1.405 1.357 3.055-1.527-.629-2.741-1.352-2.98-1.846.059-.112.241-.356.658-.686M15 21.978c-1.08 0-1.21-.109-1.559-.402l-.176-.146c-.367-.302-.816-.452-1.266-.452s-.898.15-1.266.452l-.176.146c-.347.292-.477.402-1.557.402-2.813 0-7-5.389-7-9.009 0-5.823 4.488-5.991 5-5.991 1.939 0 2.484.471 3.387 1.251l.323.276a1.995 1.995 0 0 0 2.58 0l.323-.276c.902-.78 1.447-1.251 3.387-1.251.512 0 5 .168 5 6 0 3.617-4.187 9-7 9\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n        <path d=\"M481.9 270.1C490.9 279.1 496 291.3 496 304C496 316.7 490.9 328.9 481.9 337.9C472.9 346.9 460.7 352 448 352H64C51.27 352 39.06 346.9 30.06 337.9C21.06 328.9 16 316.7 16 304C16 291.3 21.06 279.1 30.06 270.1C39.06 261.1 51.27 256 64 256H448C460.7 256 472.9 261.1 481.9 270.1zM475.3 388.7C478.3 391.7 480 395.8 480 400V416C480 432.1 473.3 449.3 461.3 461.3C449.3 473.3 432.1 480 416 480H96C79.03 480 62.75 473.3 50.75 461.3C38.74 449.3 32 432.1 32 416V400C32 395.8 33.69 391.7 36.69 388.7C39.69 385.7 43.76 384 48 384H464C468.2 384 472.3 385.7 475.3 388.7zM50.39 220.8C45.93 218.6 42.03 215.5 38.97 211.6C35.91 207.7 33.79 203.2 32.75 198.4C31.71 193.5 31.8 188.5 32.99 183.7C54.98 97.02 146.5 32 256 32C365.5 32 457 97.02 479 183.7C480.2 188.5 480.3 193.5 479.2 198.4C478.2 203.2 476.1 207.7 473 211.6C469.1 215.5 466.1 218.6 461.6 220.8C457.2 222.9 452.3 224 447.3 224H64.67C59.73 224 54.84 222.9 50.39 220.8zM372.7 116.7C369.7 119.7 368 123.8 368 128C368 131.2 368.9 134.3 370.7 136.9C372.5 139.5 374.1 141.6 377.9 142.8C380.8 143.1 384 144.3 387.1 143.7C390.2 143.1 393.1 141.6 395.3 139.3C397.6 137.1 399.1 134.2 399.7 131.1C400.3 128 399.1 124.8 398.8 121.9C397.6 118.1 395.5 116.5 392.9 114.7C390.3 112.9 387.2 111.1 384 111.1C379.8 111.1 375.7 113.7 372.7 116.7V116.7zM244.7 84.69C241.7 87.69 240 91.76 240 96C240 99.16 240.9 102.3 242.7 104.9C244.5 107.5 246.1 109.6 249.9 110.8C252.8 111.1 256 112.3 259.1 111.7C262.2 111.1 265.1 109.6 267.3 107.3C269.6 105.1 271.1 102.2 271.7 99.12C272.3 96.02 271.1 92.8 270.8 89.88C269.6 86.95 267.5 84.45 264.9 82.7C262.3 80.94 259.2 79.1 256 79.1C251.8 79.1 247.7 81.69 244.7 84.69V84.69zM116.7 116.7C113.7 119.7 112 123.8 112 128C112 131.2 112.9 134.3 114.7 136.9C116.5 139.5 118.1 141.6 121.9 142.8C124.8 143.1 128 144.3 131.1 143.7C134.2 143.1 137.1 141.6 139.3 139.3C141.6 137.1 143.1 134.2 143.7 131.1C144.3 128 143.1 124.8 142.8 121.9C141.6 118.1 139.5 116.5 136.9 114.7C134.3 112.9 131.2 111.1 128 111.1C123.8 111.1 119.7 113.7 116.7 116.7L116.7 116.7z\" />\n      </svg>\n    ),\n  },\n\n  frequent: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13 4h-2l-.001 7H9v2h2v2h2v-2h4v-2h-4z\" />\n        <path d=\"M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n        <path d=\"M256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512zM232 256C232 264 236 271.5 242.7 275.1L338.7 339.1C349.7 347.3 364.6 344.3 371.1 333.3C379.3 322.3 376.3 307.4 365.3 300L280 243.2V120C280 106.7 269.3 96 255.1 96C242.7 96 231.1 106.7 231.1 120L232 256z\" />\n      </svg>\n    ),\n  },\n\n  nature: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 15.5 8M8.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 8.5 8\" />\n        <path d=\"M18.933 0h-.027c-.97 0-2.138.787-3.018 1.497-1.274-.374-2.612-.51-3.887-.51-1.285 0-2.616.133-3.874.517C7.245.79 6.069 0 5.093 0h-.027C3.352 0 .07 2.67.002 7.026c-.039 2.479.276 4.238 1.04 5.013.254.258.882.677 1.295.882.191 3.177.922 5.238 2.536 6.38.897.637 2.187.949 3.2 1.102C8.04 20.6 8 20.795 8 21c0 1.773 2.35 3 4 3 1.648 0 4-1.227 4-3 0-.201-.038-.393-.072-.586 2.573-.385 5.435-1.877 5.925-7.587.396-.22.887-.568 1.104-.788.763-.774 1.079-2.534 1.04-5.013C23.929 2.67 20.646 0 18.933 0M3.223 9.135c-.237.281-.837 1.155-.884 1.238-.15-.41-.368-1.349-.337-3.291.051-3.281 2.478-4.972 3.091-5.031.256.015.731.27 1.265.646-1.11 1.171-2.275 2.915-2.352 5.125-.133.546-.398.858-.783 1.313M12 22c-.901 0-1.954-.693-2-1 0-.654.475-1.236 1-1.602V20a1 1 0 1 0 2 0v-.602c.524.365 1 .947 1 1.602-.046.307-1.099 1-2 1m3-3.48v.02a4.752 4.752 0 0 0-1.262-1.02c1.092-.516 2.239-1.334 2.239-2.217 0-1.842-1.781-2.195-3.977-2.195-2.196 0-3.978.354-3.978 2.195 0 .883 1.148 1.701 2.238 2.217A4.8 4.8 0 0 0 9 18.539v-.025c-1-.076-2.182-.281-2.973-.842-1.301-.92-1.838-3.045-1.853-6.478l.023-.041c.496-.826 1.49-1.45 1.804-3.102 0-2.047 1.357-3.631 2.362-4.522C9.37 3.178 10.555 3 11.948 3c1.447 0 2.685.192 3.733.57 1 .9 2.316 2.465 2.316 4.48.313 1.651 1.307 2.275 1.803 3.102.035.058.068.117.102.178-.059 5.967-1.949 7.01-4.902 7.19m6.628-8.202c-.037-.065-.074-.13-.113-.195a7.587 7.587 0 0 0-.739-.987c-.385-.455-.648-.768-.782-1.313-.076-2.209-1.241-3.954-2.353-5.124.531-.376 1.004-.63 1.261-.647.636.071 3.044 1.764 3.096 5.031.027 1.81-.347 3.218-.37 3.235\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\">\n        <path d=\"M332.7 19.85C334.6 8.395 344.5 0 356.1 0C363.6 0 370.6 3.52 375.1 9.502L392 32H444.1C456.8 32 469.1 37.06 478.1 46.06L496 64H552C565.3 64 576 74.75 576 88V112C576 156.2 540.2 192 496 192H426.7L421.6 222.5L309.6 158.5L332.7 19.85zM448 64C439.2 64 432 71.16 432 80C432 88.84 439.2 96 448 96C456.8 96 464 88.84 464 80C464 71.16 456.8 64 448 64zM416 256.1V480C416 497.7 401.7 512 384 512H352C334.3 512 320 497.7 320 480V364.8C295.1 377.1 268.8 384 240 384C211.2 384 184 377.1 160 364.8V480C160 497.7 145.7 512 128 512H96C78.33 512 64 497.7 64 480V249.8C35.23 238.9 12.64 214.5 4.836 183.3L.9558 167.8C-3.331 150.6 7.094 133.2 24.24 128.1C41.38 124.7 58.76 135.1 63.05 152.2L66.93 167.8C70.49 182 83.29 191.1 97.97 191.1H303.8L416 256.1z\" />\n      </svg>\n    ),\n  },\n\n  objects: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 0a9 9 0 0 0-5 16.482V21s2.035 3 5 3 5-3 5-3v-4.518A9 9 0 0 0 12 0zm0 2c3.86 0 7 3.141 7 7s-3.14 7-7 7-7-3.141-7-7 3.14-7 7-7zM9 17.477c.94.332 1.946.523 3 .523s2.06-.19 3-.523v.834c-.91.436-1.925.689-3 .689a6.924 6.924 0 0 1-3-.69v-.833zm.236 3.07A8.854 8.854 0 0 0 12 21c.965 0 1.888-.167 2.758-.451C14.155 21.173 13.153 22 12 22c-1.102 0-2.117-.789-2.764-1.453z\" />\n        <path d=\"M14.745 12.449h-.004c-.852-.024-1.188-.858-1.577-1.824-.421-1.061-.703-1.561-1.182-1.566h-.009c-.481 0-.783.497-1.235 1.537-.436.982-.801 1.811-1.636 1.791l-.276-.043c-.565-.171-.853-.691-1.284-1.794-.125-.313-.202-.632-.27-.913-.051-.213-.127-.53-.195-.634C7.067 9.004 7.039 9 6.99 9A1 1 0 0 1 7 7h.01c1.662.017 2.015 1.373 2.198 2.134.486-.981 1.304-2.058 2.797-2.075 1.531.018 2.28 1.153 2.731 2.141l.002-.008C14.944 8.424 15.327 7 16.979 7h.032A1 1 0 1 1 17 9h-.011c-.149.076-.256.474-.319.709a6.484 6.484 0 0 1-.311.951c-.429.973-.79 1.789-1.614 1.789\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\">\n        <path d=\"M112.1 454.3c0 6.297 1.816 12.44 5.284 17.69l17.14 25.69c5.25 7.875 17.17 14.28 26.64 14.28h61.67c9.438 0 21.36-6.401 26.61-14.28l17.08-25.68c2.938-4.438 5.348-12.37 5.348-17.7L272 415.1h-160L112.1 454.3zM191.4 .0132C89.44 .3257 16 82.97 16 175.1c0 44.38 16.44 84.84 43.56 115.8c16.53 18.84 42.34 58.23 52.22 91.45c.0313 .25 .0938 .5166 .125 .7823h160.2c.0313-.2656 .0938-.5166 .125-.7823c9.875-33.22 35.69-72.61 52.22-91.45C351.6 260.8 368 220.4 368 175.1C368 78.61 288.9-.2837 191.4 .0132zM192 96.01c-44.13 0-80 35.89-80 79.1C112 184.8 104.8 192 96 192S80 184.8 80 176c0-61.76 50.25-111.1 112-111.1c8.844 0 16 7.159 16 16S200.8 96.01 192 96.01z\" />\n      </svg>\n    ),\n  },\n\n  people: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10\" />\n        <path d=\"M8 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 8 7M16 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 16 7M15.232 15c-.693 1.195-1.87 2-3.349 2-1.477 0-2.655-.805-3.347-2H15m3-2H6a6 6 0 1 0 12 0\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n        <path d=\"M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM256 432C332.1 432 396.2 382 415.2 314.1C419.1 300.4 407.8 288 393.6 288H118.4C104.2 288 92.92 300.4 96.76 314.1C115.8 382 179.9 432 256 432V432zM176.4 160C158.7 160 144.4 174.3 144.4 192C144.4 209.7 158.7 224 176.4 224C194 224 208.4 209.7 208.4 192C208.4 174.3 194 160 176.4 160zM336.4 224C354 224 368.4 209.7 368.4 192C368.4 174.3 354 160 336.4 160C318.7 160 304.4 174.3 304.4 192C304.4 209.7 318.7 224 336.4 224z\" />\n      </svg>\n    ),\n  },\n\n  places: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6.5 12C5.122 12 4 13.121 4 14.5S5.122 17 6.5 17 9 15.879 9 14.5 7.878 12 6.5 12m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5M17.5 12c-1.378 0-2.5 1.121-2.5 2.5s1.122 2.5 2.5 2.5 2.5-1.121 2.5-2.5-1.122-2.5-2.5-2.5m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5\" />\n        <path d=\"M22.482 9.494l-1.039-.346L21.4 9h.6c.552 0 1-.439 1-.992 0-.006-.003-.008-.003-.008H23c0-1-.889-2-1.984-2h-.642l-.731-1.717C19.262 3.012 18.091 2 16.764 2H7.236C5.909 2 4.738 3.012 4.357 4.283L3.626 6h-.642C1.889 6 1 7 1 8h.003S1 8.002 1 8.008C1 8.561 1.448 9 2 9h.6l-.043.148-1.039.346a2.001 2.001 0 0 0-1.359 2.097l.751 7.508a1 1 0 0 0 .994.901H3v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h6v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h1.096a.999.999 0 0 0 .994-.901l.751-7.508a2.001 2.001 0 0 0-1.359-2.097M6.273 4.857C6.402 4.43 6.788 4 7.236 4h9.527c.448 0 .834.43.963.857L19.313 9H4.688l1.585-4.143zM7 21H5v-1h2v1zm12 0h-2v-1h2v1zm2.189-3H2.811l-.662-6.607L3 11h18l.852.393L21.189 18z\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n        <path d=\"M39.61 196.8L74.8 96.29C88.27 57.78 124.6 32 165.4 32H346.6C387.4 32 423.7 57.78 437.2 96.29L472.4 196.8C495.6 206.4 512 229.3 512 256V448C512 465.7 497.7 480 480 480H448C430.3 480 416 465.7 416 448V400H96V448C96 465.7 81.67 480 64 480H32C14.33 480 0 465.7 0 448V256C0 229.3 16.36 206.4 39.61 196.8V196.8zM109.1 192H402.9L376.8 117.4C372.3 104.6 360.2 96 346.6 96H165.4C151.8 96 139.7 104.6 135.2 117.4L109.1 192zM96 256C78.33 256 64 270.3 64 288C64 305.7 78.33 320 96 320C113.7 320 128 305.7 128 288C128 270.3 113.7 256 96 256zM416 320C433.7 320 448 305.7 448 288C448 270.3 433.7 256 416 256C398.3 256 384 270.3 384 288C384 305.7 398.3 320 416 320z\" />\n      </svg>\n    ),\n  },\n\n  symbols: {\n    outline: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M0 0h11v2H0zM4 11h3V6h4V4H0v2h4zM15.5 17c1.381 0 2.5-1.116 2.5-2.493s-1.119-2.493-2.5-2.493S13 13.13 13 14.507 14.119 17 15.5 17m0-2.986c.276 0 .5.222.5.493 0 .272-.224.493-.5.493s-.5-.221-.5-.493.224-.493.5-.493M21.5 19.014c-1.381 0-2.5 1.116-2.5 2.493S20.119 24 21.5 24s2.5-1.116 2.5-2.493-1.119-2.493-2.5-2.493m0 2.986a.497.497 0 0 1-.5-.493c0-.271.224-.493.5-.493s.5.222.5.493a.497.497 0 0 1-.5.493M22 13l-9 9 1.513 1.5 8.99-9.009zM17 11c2.209 0 4-1.119 4-2.5V2s.985-.161 1.498.949C23.01 4.055 23 6 23 6s1-1.119 1-3.135C24-.02 21 0 21 0h-2v6.347A5.853 5.853 0 0 0 17 6c-2.209 0-4 1.119-4 2.5s1.791 2.5 4 2.5M10.297 20.482l-1.475-1.585a47.54 47.54 0 0 1-1.442 1.129c-.307-.288-.989-1.016-2.045-2.183.902-.836 1.479-1.466 1.729-1.892s.376-.871.376-1.336c0-.592-.273-1.178-.818-1.759-.546-.581-1.329-.871-2.349-.871-1.008 0-1.79.293-2.344.879-.556.587-.832 1.181-.832 1.784 0 .813.419 1.748 1.256 2.805-.847.614-1.444 1.208-1.794 1.784a3.465 3.465 0 0 0-.523 1.833c0 .857.308 1.56.924 2.107.616.549 1.423.823 2.42.823 1.173 0 2.444-.379 3.813-1.137L8.235 24h2.819l-2.09-2.383 1.333-1.135zm-6.736-6.389a1.02 1.02 0 0 1 .73-.286c.31 0 .559.085.747.254a.849.849 0 0 1 .283.659c0 .518-.419 1.112-1.257 1.784-.536-.651-.805-1.231-.805-1.742a.901.901 0 0 1 .302-.669M3.74 22c-.427 0-.778-.116-1.057-.349-.279-.232-.418-.487-.418-.766 0-.594.509-1.288 1.527-2.083.968 1.134 1.717 1.946 2.248 2.438-.921.507-1.686.76-2.3.76\" />\n      </svg>\n    ),\n    solid: (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n        <path d=\"M500.3 7.251C507.7 13.33 512 22.41 512 31.1V175.1C512 202.5 483.3 223.1 447.1 223.1C412.7 223.1 383.1 202.5 383.1 175.1C383.1 149.5 412.7 127.1 447.1 127.1V71.03L351.1 90.23V207.1C351.1 234.5 323.3 255.1 287.1 255.1C252.7 255.1 223.1 234.5 223.1 207.1C223.1 181.5 252.7 159.1 287.1 159.1V63.1C287.1 48.74 298.8 35.61 313.7 32.62L473.7 .6198C483.1-1.261 492.9 1.173 500.3 7.251H500.3zM74.66 303.1L86.5 286.2C92.43 277.3 102.4 271.1 113.1 271.1H174.9C185.6 271.1 195.6 277.3 201.5 286.2L213.3 303.1H239.1C266.5 303.1 287.1 325.5 287.1 351.1V463.1C287.1 490.5 266.5 511.1 239.1 511.1H47.1C21.49 511.1-.0019 490.5-.0019 463.1V351.1C-.0019 325.5 21.49 303.1 47.1 303.1H74.66zM143.1 359.1C117.5 359.1 95.1 381.5 95.1 407.1C95.1 434.5 117.5 455.1 143.1 455.1C170.5 455.1 191.1 434.5 191.1 407.1C191.1 381.5 170.5 359.1 143.1 359.1zM440.3 367.1H496C502.7 367.1 508.6 372.1 510.1 378.4C513.3 384.6 511.6 391.7 506.5 396L378.5 508C372.9 512.1 364.6 513.3 358.6 508.9C352.6 504.6 350.3 496.6 353.3 489.7L391.7 399.1H336C329.3 399.1 323.4 395.9 321 389.6C318.7 383.4 320.4 376.3 325.5 371.1L453.5 259.1C459.1 255 467.4 254.7 473.4 259.1C479.4 263.4 481.6 271.4 478.7 278.3L440.3 367.1zM116.7 219.1L19.85 119.2C-8.112 90.26-6.614 42.31 24.85 15.34C51.82-8.137 93.26-3.642 118.2 21.83L128.2 32.32L137.7 21.83C162.7-3.642 203.6-8.137 231.6 15.34C262.6 42.31 264.1 90.26 236.1 119.2L139.7 219.1C133.2 225.6 122.7 225.6 116.7 219.1H116.7z\" />\n      </svg>\n    ),\n  },\n}\n\nconst search = {\n  loupe: (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n      <path d=\"M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z\" />\n    </svg>\n  ),\n\n  delete: (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n      <path d=\"M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z\" />\n    </svg>\n  ),\n}\n\nexport default { categories, search }\n","import { Data } from '../../config'\nimport { SearchIndex } from '../../helpers'\n\nexport default function Emoji(props) {\n  let { id, skin, emoji } = props\n\n  if (props.shortcodes) {\n    const matches = props.shortcodes.match(SearchIndex.SHORTCODES_REGEX)\n\n    if (matches) {\n      id = matches[1]\n\n      if (matches[2]) {\n        skin = matches[2]\n      }\n    }\n  }\n\n  emoji || (emoji = SearchIndex.get(id || props.native))\n  if (!emoji) return props.fallback\n\n  const emojiSkin = emoji.skins[skin - 1] || emoji.skins[0]\n\n  const imageSrc =\n    emojiSkin.src ||\n    (props.set != 'native' && !props.spritesheet\n      ? typeof props.getImageURL === 'function'\n        ? props.getImageURL(props.set, emojiSkin.unified)\n        : `https://cdn.jsdelivr.net/npm/emoji-datasource-${props.set}@14.0.0/img/${props.set}/64/${emojiSkin.unified}.png`\n      : undefined)\n\n  const spritesheetSrc =\n    typeof props.getSpritesheetURL === 'function'\n      ? props.getSpritesheetURL(props.set)\n      : `https://cdn.jsdelivr.net/npm/emoji-datasource-${props.set}@14.0.0/img/${props.set}/sheets-256/64.png`\n\n  return (\n    <span class=\"emoji-mart-emoji\" data-emoji-set={props.set}>\n      {imageSrc ? (\n        <img\n          style={{\n            maxWidth: props.size || '1em',\n            maxHeight: props.size || '1em',\n            display: 'inline-block',\n          }}\n          alt={emojiSkin.native || emojiSkin.shortcodes}\n          src={imageSrc}\n        />\n      ) : props.set == 'native' ? (\n        <span\n          style={{\n            fontSize: props.size,\n            fontFamily:\n              '\"EmojiMart\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Segoe UI\", \"Apple Color Emoji\", \"Twemoji Mozilla\", \"Noto Color Emoji\", \"Android Emoji\"',\n          }}\n        >\n          {emojiSkin.native}\n        </span>\n      ) : (\n        <span\n          style={{\n            display: 'block',\n            width: props.size,\n            height: props.size,\n            backgroundImage: `url(${spritesheetSrc})`,\n            backgroundSize: `${100 * Data.sheet.cols}% ${\n              100 * Data.sheet.rows\n            }%`,\n            backgroundPosition: `${\n              (100 / (Data.sheet.cols - 1)) * emojiSkin.x\n            }% ${(100 / (Data.sheet.rows - 1)) * emojiSkin.y}%`,\n          }}\n        ></span>\n      )}\n    </span>\n  )\n}\n","// @ts-nocheck\nimport { getProp } from '../../config'\n\nconst WindowHTMLElement =\n  typeof window !== 'undefined' && window.HTMLElement\n    ? window.HTMLElement\n    : Object\n\nexport default class HTMLElement extends WindowHTMLElement {\n  static get observedAttributes() {\n    return Object.keys(this.Props)\n  }\n\n  constructor(props = {}) {\n    super()\n    this.props = props\n\n    if (props.parent || props.ref) {\n      let ref = null\n      const parent = props.parent || (ref = props.ref && props.ref.current)\n\n      if (ref) ref.innerHTML = ''\n      if (parent) parent.appendChild(this)\n    }\n  }\n\n  update(props = {}) {\n    for (let k in props) {\n      this.attributeChangedCallback(k, null, props[k])\n    }\n  }\n\n  attributeChangedCallback(attr, _, newValue) {\n    if (!this.component) return\n\n    const value = getProp(\n      attr,\n      { [attr]: newValue },\n      this.constructor.Props,\n      this,\n    )\n\n    if (this.component.componentWillReceiveProps) {\n      this.component.componentWillReceiveProps({ [attr]: value })\n    } else {\n      this.component.props[attr] = value\n      this.component.forceUpdate()\n    }\n  }\n\n  disconnectedCallback() {\n    this.disconnected = true\n\n    if (this.component && this.component.unregister) {\n      this.component.unregister()\n    }\n  }\n}\n","// @ts-nocheck\nimport { HTMLElement } from '.'\n\nexport default class ShadowElement extends HTMLElement {\n  constructor(props, { styles } = {}) {\n    super(props)\n\n    this.setShadow()\n    this.injectStyles(styles)\n  }\n\n  setShadow() {\n    this.attachShadow({ mode: 'open' })\n  }\n\n  injectStyles(styles) {\n    if (!styles) return\n\n    const style = document.createElement('style')\n    style.textContent = styles\n\n    this.shadowRoot.insertBefore(style, this.shadowRoot.firstChild)\n  }\n}\n","import PickerProps from '../Picker/PickerProps'\n\nexport default {\n  fallback: '',\n  id: '',\n  native: '',\n  shortcodes: '',\n  size: {\n    value: '',\n    transform: (value) => {\n      // If the value is a number, then we assume it’s a pixel value.\n      if (!/\\D/.test(value)) {\n        return `${value}px`\n      }\n\n      return value\n    },\n  },\n\n  // Shared\n  set: PickerProps.set,\n  skin: PickerProps.skin,\n}\n","import { render } from 'preact'\n\nimport { init, getProps } from '../../config'\nimport { HTMLElement } from '../HTMLElement'\nimport { Emoji } from '.'\nimport EmojiProps from './EmojiProps'\n\nexport default class EmojiElement extends HTMLElement {\n  static Props = EmojiProps\n\n  constructor(props) {\n    super(props)\n  }\n\n  async connectedCallback() {\n    const props = getProps(this.props, EmojiProps, this)\n    props.element = this\n    props.ref = (component) => {\n      this.component = component\n    }\n\n    await init()\n    if (this.disconnected) return\n\n    render(<Emoji {...props} />, this)\n  }\n}\n\nif (typeof customElements !== 'undefined' && !customElements.get('em-emoji')) {\n  customElements.define('em-emoji', EmojiElement)\n}\n","import { options } from 'preact';\r\n\r\n/** @type {number} */\r\nlet currentIndex;\r\n\r\n/** @type {import('./internal').Component} */\r\nlet currentComponent;\r\n\r\n/** @type {number} */\r\nlet currentHook = 0;\r\n\r\n/** @type {Array<import('./internal').Component>} */\r\nlet afterPaintEffects = [];\r\n\r\nlet oldBeforeDiff = options._diff;\r\nlet oldBeforeRender = options._render;\r\nlet oldAfterDiff = options.diffed;\r\nlet oldCommit = options._commit;\r\nlet oldBeforeUnmount = options.unmount;\r\n\r\nconst RAF_TIMEOUT = 100;\r\nlet prevRaf;\r\n\r\noptions._diff = vnode => {\r\n\tcurrentComponent = null;\r\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\r\n};\r\n\r\noptions._render = vnode => {\r\n\tif (oldBeforeRender) oldBeforeRender(vnode);\r\n\r\n\tcurrentComponent = vnode._component;\r\n\tcurrentIndex = 0;\r\n\r\n\tconst hooks = currentComponent.__hooks;\r\n\tif (hooks) {\r\n\t\thooks._pendingEffects.forEach(invokeCleanup);\r\n\t\thooks._pendingEffects.forEach(invokeEffect);\r\n\t\thooks._pendingEffects = [];\r\n\t}\r\n};\r\n\r\noptions.diffed = vnode => {\r\n\tif (oldAfterDiff) oldAfterDiff(vnode);\r\n\r\n\tconst c = vnode._component;\r\n\tif (c && c.__hooks && c.__hooks._pendingEffects.length) {\r\n\t\tafterPaint(afterPaintEffects.push(c));\r\n\t}\r\n\tcurrentComponent = null;\r\n};\r\n\r\noptions._commit = (vnode, commitQueue) => {\r\n\tcommitQueue.some(component => {\r\n\t\ttry {\r\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\r\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\r\n\t\t\t\tcb._value ? invokeEffect(cb) : true\r\n\t\t\t);\r\n\t\t} catch (e) {\r\n\t\t\tcommitQueue.some(c => {\r\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\r\n\t\t\t});\r\n\t\t\tcommitQueue = [];\r\n\t\t\toptions._catchError(e, component._vnode);\r\n\t\t}\r\n\t});\r\n\r\n\tif (oldCommit) oldCommit(vnode, commitQueue);\r\n};\r\n\r\noptions.unmount = vnode => {\r\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\r\n\r\n\tconst c = vnode._component;\r\n\tif (c && c.__hooks) {\r\n\t\tlet hasErrored;\r\n\t\tc.__hooks._list.forEach(s => {\r\n\t\t\ttry {\r\n\t\t\t\tinvokeCleanup(s);\r\n\t\t\t} catch (e) {\r\n\t\t\t\thasErrored = e;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\r\n\t}\r\n};\r\n\r\n/**\r\n * Get a hook's state from the currentComponent\r\n * @param {number} index The index of the hook to get\r\n * @param {number} type The index of the hook to get\r\n * @returns {any}\r\n */\r\nfunction getHookState(index, type) {\r\n\tif (options._hook) {\r\n\t\toptions._hook(currentComponent, index, currentHook || type);\r\n\t}\r\n\tcurrentHook = 0;\r\n\r\n\t// Largely inspired by:\r\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\r\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\r\n\t// Other implementations to look at:\r\n\t// * https://codesandbox.io/s/mnox05qp8\r\n\tconst hooks =\r\n\t\tcurrentComponent.__hooks ||\r\n\t\t(currentComponent.__hooks = {\r\n\t\t\t_list: [],\r\n\t\t\t_pendingEffects: []\r\n\t\t});\r\n\r\n\tif (index >= hooks._list.length) {\r\n\t\thooks._list.push({});\r\n\t}\r\n\treturn hooks._list[index];\r\n}\r\n\r\n/**\r\n * @param {import('./index').StateUpdater<any>} [initialState]\r\n */\r\nexport function useState(initialState) {\r\n\tcurrentHook = 1;\r\n\treturn useReducer(invokeOrReturn, initialState);\r\n}\r\n\r\n/**\r\n * @param {import('./index').Reducer<any, any>} reducer\r\n * @param {import('./index').StateUpdater<any>} initialState\r\n * @param {(initialState: any) => void} [init]\r\n * @returns {[ any, (state: any) => void ]}\r\n */\r\nexport function useReducer(reducer, initialState, init) {\r\n\t/** @type {import('./internal').ReducerHookState} */\r\n\tconst hookState = getHookState(currentIndex++, 2);\r\n\thookState._reducer = reducer;\r\n\tif (!hookState._component) {\r\n\t\thookState._value = [\r\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\r\n\r\n\t\t\taction => {\r\n\t\t\t\tconst nextValue = hookState._reducer(hookState._value[0], action);\r\n\t\t\t\tif (hookState._value[0] !== nextValue) {\r\n\t\t\t\t\thookState._value = [nextValue, hookState._value[1]];\r\n\t\t\t\t\thookState._component.setState({});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\thookState._component = currentComponent;\r\n\t}\r\n\r\n\treturn hookState._value;\r\n}\r\n\r\n/**\r\n * @param {import('./internal').Effect} callback\r\n * @param {any[]} args\r\n */\r\nexport function useEffect(callback, args) {\r\n\t/** @type {import('./internal').EffectHookState} */\r\n\tconst state = getHookState(currentIndex++, 3);\r\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\r\n\t\tstate._value = callback;\r\n\t\tstate._args = args;\r\n\r\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {import('./internal').Effect} callback\r\n * @param {any[]} args\r\n */\r\nexport function useLayoutEffect(callback, args) {\r\n\t/** @type {import('./internal').EffectHookState} */\r\n\tconst state = getHookState(currentIndex++, 4);\r\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\r\n\t\tstate._value = callback;\r\n\t\tstate._args = args;\r\n\r\n\t\tcurrentComponent._renderCallbacks.push(state);\r\n\t}\r\n}\r\n\r\nexport function useRef(initialValue) {\r\n\tcurrentHook = 5;\r\n\treturn useMemo(() => ({ current: initialValue }), []);\r\n}\r\n\r\n/**\r\n * @param {object} ref\r\n * @param {() => object} createHandle\r\n * @param {any[]} args\r\n */\r\nexport function useImperativeHandle(ref, createHandle, args) {\r\n\tcurrentHook = 6;\r\n\tuseLayoutEffect(\r\n\t\t() => {\r\n\t\t\tif (typeof ref == 'function') ref(createHandle());\r\n\t\t\telse if (ref) ref.current = createHandle();\r\n\t\t},\r\n\t\targs == null ? args : args.concat(ref)\r\n\t);\r\n}\r\n\r\n/**\r\n * @param {() => any} factory\r\n * @param {any[]} args\r\n */\r\nexport function useMemo(factory, args) {\r\n\t/** @type {import('./internal').MemoHookState} */\r\n\tconst state = getHookState(currentIndex++, 7);\r\n\tif (argsChanged(state._args, args)) {\r\n\t\tstate._value = factory();\r\n\t\tstate._args = args;\r\n\t\tstate._factory = factory;\r\n\t}\r\n\r\n\treturn state._value;\r\n}\r\n\r\n/**\r\n * @param {() => void} callback\r\n * @param {any[]} args\r\n */\r\nexport function useCallback(callback, args) {\r\n\tcurrentHook = 8;\r\n\treturn useMemo(() => callback, args);\r\n}\r\n\r\n/**\r\n * @param {import('./internal').PreactContext} context\r\n */\r\nexport function useContext(context) {\r\n\tconst provider = currentComponent.context[context._id];\r\n\t// We could skip this call here, but than we'd not call\r\n\t// `options._hook`. We need to do that in order to make\r\n\t// the devtools aware of this hook.\r\n\t/** @type {import('./internal').ContextHookState} */\r\n\tconst state = getHookState(currentIndex++, 9);\r\n\t// The devtools needs access to the context object to\r\n\t// be able to pull of the default value when no provider\r\n\t// is present in the tree.\r\n\tstate._context = context;\r\n\tif (!provider) return context._defaultValue;\r\n\t// This is probably not safe to convert to \"!\"\r\n\tif (state._value == null) {\r\n\t\tstate._value = true;\r\n\t\tprovider.sub(currentComponent);\r\n\t}\r\n\treturn provider.props.value;\r\n}\r\n\r\n/**\r\n * Display a custom label for a custom hook for the devtools panel\r\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\r\n */\r\nexport function useDebugValue(value, formatter) {\r\n\tif (options.useDebugValue) {\r\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {(error: any) => void} cb\r\n */\r\nexport function useErrorBoundary(cb) {\r\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\r\n\tconst state = getHookState(currentIndex++, 10);\r\n\tconst errState = useState();\r\n\tstate._value = cb;\r\n\tif (!currentComponent.componentDidCatch) {\r\n\t\tcurrentComponent.componentDidCatch = err => {\r\n\t\t\tif (state._value) state._value(err);\r\n\t\t\terrState[1](err);\r\n\t\t};\r\n\t}\r\n\treturn [\r\n\t\terrState[0],\r\n\t\t() => {\r\n\t\t\terrState[1](undefined);\r\n\t\t}\r\n\t];\r\n}\r\n\r\n/**\r\n * After paint effects consumer.\r\n */\r\nfunction flushAfterPaintEffects() {\r\n\tlet component;\r\n\t// sort the queue by depth (outermost to innermost)\r\n\tafterPaintEffects.sort((a, b) => a._vnode._depth - b._vnode._depth);\r\n\twhile (component = afterPaintEffects.pop()) {\r\n\t\tif (!component._parentDom) continue;\r\n\t\ttry {\r\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\r\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\r\n\t\t\tcomponent.__hooks._pendingEffects = [];\r\n\t\t} catch (e) {\r\n\t\t\tcomponent.__hooks._pendingEffects = [];\r\n\t\t\toptions._catchError(e, component._vnode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\r\n\r\n/**\r\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\r\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\r\n * the next browser frame.\r\n *\r\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\r\n * even if RAF doesn't fire (for example if the browser tab is not visible)\r\n *\r\n * @param {() => void} callback\r\n */\r\nfunction afterNextFrame(callback) {\r\n\tconst done = () => {\r\n\t\tclearTimeout(timeout);\r\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\r\n\t\tsetTimeout(callback);\r\n\t};\r\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\r\n\r\n\tlet raf;\r\n\tif (HAS_RAF) {\r\n\t\traf = requestAnimationFrame(done);\r\n\t}\r\n}\r\n\r\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\r\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\r\n// Perhaps this is not such a big deal.\r\n/**\r\n * Schedule afterPaintEffects flush after the browser paints\r\n * @param {number} newQueueLength\r\n */\r\nfunction afterPaint(newQueueLength) {\r\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\r\n\t\tprevRaf = options.requestAnimationFrame;\r\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {import('./internal').EffectHookState} hook\r\n */\r\nfunction invokeCleanup(hook) {\r\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\r\n\t// and move the currentComponent away.\r\n\tconst comp = currentComponent;\r\n\tlet cleanup = hook._cleanup;\r\n\tif (typeof cleanup == 'function') {\r\n\t\thook._cleanup = undefined;\r\n\t\tcleanup();\r\n\t}\r\n\tcurrentComponent = comp;\r\n}\r\n\r\n/**\r\n * Invoke a Hook's effect\r\n * @param {import('./internal').EffectHookState} hook\r\n */\r\nfunction invokeEffect(hook) {\r\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\r\n\t// and move the currentComponent away.\r\n\tconst comp = currentComponent;\r\n\thook._cleanup = hook._value();\r\n\tcurrentComponent = comp;\r\n}\r\n\r\n/**\r\n * @param {any[]} oldArgs\r\n * @param {any[]} newArgs\r\n */\r\nfunction argsChanged(oldArgs, newArgs) {\r\n\treturn (\r\n\t\t!oldArgs ||\r\n\t\toldArgs.length !== newArgs.length ||\r\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\r\n\t);\r\n}\r\n\r\nfunction invokeOrReturn(arg, f) {\r\n\treturn typeof f == 'function' ? f(arg) : f;\r\n}\r\n","/**\r\n * Assign properties from `props` to `obj`\r\n * @template O, P The obj and props types\r\n * @param {O} obj The object to copy properties to\r\n * @param {P} props The object to copy properties from\r\n * @returns {O & P}\r\n */\r\nexport function assign(obj, props) {\r\n\tfor (let i in props) obj[i] = props[i];\r\n\treturn /** @type {O & P} */ (obj);\r\n}\r\n\r\n/**\r\n * Check if two objects have a different shape\r\n * @param {object} a\r\n * @param {object} b\r\n * @returns {boolean}\r\n */\r\nexport function shallowDiffers(a, b) {\r\n\tfor (let i in a) if (i !== '__source' && !(i in b)) return true;\r\n\tfor (let i in b) if (i !== '__source' && a[i] !== b[i]) return true;\r\n\treturn false;\r\n}\r\n\r\nexport function removeNode(node) {\r\n\tlet parentNode = node.parentNode;\r\n\tif (parentNode) parentNode.removeChild(node);\r\n}\r\n","import { Component } from 'preact';\r\nimport { shallowDiffers } from './util';\r\n\r\n/**\r\n * Component class with a predefined `shouldComponentUpdate` implementation\r\n */\r\nexport function PureComponent(p) {\r\n\tthis.props = p;\r\n}\r\nPureComponent.prototype = new Component();\r\n// Some third-party libraries check if this property is present\r\nPureComponent.prototype.isPureReactComponent = true;\r\nPureComponent.prototype.shouldComponentUpdate = function(props, state) {\r\n\treturn shallowDiffers(this.props, props) || shallowDiffers(this.state, state);\r\n};\r\n","import { createElement } from 'preact';\r\nimport { shallowDiffers } from './util';\r\n\r\n/**\r\n * Memoize a component, so that it only updates when the props actually have\r\n * changed. This was previously known as `React.pure`.\r\n * @param {import('./internal').FunctionComponent} c functional component\r\n * @param {(prev: object, next: object) => boolean} [comparer] Custom equality function\r\n * @returns {import('./internal').FunctionComponent}\r\n */\r\nexport function memo(c, comparer) {\r\n\tfunction shouldUpdate(nextProps) {\r\n\t\tlet ref = this.props.ref;\r\n\t\tlet updateRef = ref == nextProps.ref;\r\n\t\tif (!updateRef && ref) {\r\n\t\t\tref.call ? ref(null) : (ref.current = null);\r\n\t\t}\r\n\r\n\t\tif (!comparer) {\r\n\t\t\treturn shallowDiffers(this.props, nextProps);\r\n\t\t}\r\n\r\n\t\treturn !comparer(this.props, nextProps) || !updateRef;\r\n\t}\r\n\r\n\tfunction Memoed(props) {\r\n\t\tthis.shouldComponentUpdate = shouldUpdate;\r\n\t\treturn createElement(c, props);\r\n\t}\r\n\tMemoed.displayName = 'Memo(' + (c.displayName || c.name) + ')';\r\n\tMemoed.prototype.isReactComponent = true;\r\n\tMemoed._forwarded = true;\r\n\treturn Memoed;\r\n}\r\n","import { options } from 'preact';\r\nimport { assign } from './util';\r\n\r\nlet oldDiffHook = options._diff;\r\noptions._diff = vnode => {\r\n\tif (vnode.type && vnode.type._forwarded && vnode.ref) {\r\n\t\tvnode.props.ref = vnode.ref;\r\n\t\tvnode.ref = null;\r\n\t}\r\n\tif (oldDiffHook) oldDiffHook(vnode);\r\n};\r\n\r\nexport const REACT_FORWARD_SYMBOL =\r\n\t(typeof Symbol != 'undefined' &&\r\n\t\tSymbol.for &&\r\n\t\tSymbol.for('react.forward_ref')) ||\r\n\t0xf47;\r\n\r\n/**\r\n * Pass ref down to a child. This is mainly used in libraries with HOCs that\r\n * wrap components. Using `forwardRef` there is an easy way to get a reference\r\n * of the wrapped component instead of one of the wrapper itself.\r\n * @param {import('./index').ForwardFn} fn\r\n * @returns {import('./internal').FunctionComponent}\r\n */\r\nexport function forwardRef(fn) {\r\n\t// We always have ref in props.ref, except for\r\n\t// mobx-react. It will call this function directly\r\n\t// and always pass ref as the second argument.\r\n\tfunction Forwarded(props, ref) {\r\n\t\tlet clone = assign({}, props);\r\n\t\tdelete clone.ref;\r\n\t\tref = props.ref || ref;\r\n\t\treturn fn(\r\n\t\t\tclone,\r\n\t\t\t!ref || (typeof ref === 'object' && !('current' in ref)) ? null : ref\r\n\t\t);\r\n\t}\r\n\r\n\t// mobx-react checks for this being present\r\n\tForwarded.$$typeof = REACT_FORWARD_SYMBOL;\r\n\t// mobx-react heavily relies on implementation details.\r\n\t// It expects an object here with a `render` property,\r\n\t// and prototype.render will fail. Without this\r\n\t// mobx-react throws.\r\n\tForwarded.render = Forwarded;\r\n\r\n\tForwarded.prototype.isReactComponent = Forwarded._forwarded = true;\r\n\tForwarded.displayName = 'ForwardRef(' + (fn.displayName || fn.name) + ')';\r\n\treturn Forwarded;\r\n}\r\n","import { Component, createElement, options, Fragment } from 'preact';\r\nimport { assign } from './util';\r\n\r\nconst oldCatchError = options._catchError;\r\noptions._catchError = function(error, newVNode, oldVNode) {\r\n\tif (error.then) {\r\n\t\t/** @type {import('./internal').Component} */\r\n\t\tlet component;\r\n\t\tlet vnode = newVNode;\r\n\r\n\t\tfor (; (vnode = vnode._parent); ) {\r\n\t\t\tif ((component = vnode._component) && component._childDidSuspend) {\r\n\t\t\t\tif (newVNode._dom == null) {\r\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\r\n\t\t\t\t\tnewVNode._children = oldVNode._children;\r\n\t\t\t\t}\r\n\t\t\t\t// Don't call oldCatchError if we found a Suspense\r\n\t\t\t\treturn component._childDidSuspend(error, newVNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\toldCatchError(error, newVNode, oldVNode);\r\n};\r\n\r\nconst oldUnmount = options.unmount;\r\noptions.unmount = function(vnode) {\r\n\t/** @type {import('./internal').Component} */\r\n\tconst component = vnode._component;\r\n\tif (component && component._onResolve) {\r\n\t\tcomponent._onResolve();\r\n\t}\r\n\r\n\t// if the component is still hydrating\r\n\t// most likely it is because the component is suspended\r\n\t// we set the vnode.type as `null` so that it is not a typeof function\r\n\t// so the unmount will remove the vnode._dom\r\n\tif (component && vnode._hydrating === true) {\r\n\t\tvnode.type = null;\r\n\t}\r\n\r\n\tif (oldUnmount) oldUnmount(vnode);\r\n};\r\n\r\nfunction detachedClone(vnode, detachedParent, parentDom) {\r\n\tif (vnode) {\r\n\t\tif (vnode._component && vnode._component.__hooks) {\r\n\t\t\tvnode._component.__hooks._list.forEach(effect => {\r\n\t\t\t\tif (typeof effect._cleanup == 'function') effect._cleanup();\r\n\t\t\t});\r\n\r\n\t\t\tvnode._component.__hooks = null;\r\n\t\t}\r\n\r\n\t\tvnode = assign({}, vnode);\r\n\t\tif (vnode._component != null) {\r\n\t\t\tif (vnode._component._parentDom === parentDom) {\r\n\t\t\t\tvnode._component._parentDom = detachedParent;\r\n\t\t\t}\r\n\t\t\tvnode._component = null;\r\n\t\t}\r\n\r\n\t\tvnode._children =\r\n\t\t\tvnode._children &&\r\n\t\t\tvnode._children.map(child =>\r\n\t\t\t\tdetachedClone(child, detachedParent, parentDom)\r\n\t\t\t);\r\n\t}\r\n\r\n\treturn vnode;\r\n}\r\n\r\nfunction removeOriginal(vnode, detachedParent, originalParent) {\r\n\tif (vnode) {\r\n\t\tvnode._original = null;\r\n\t\tvnode._children =\r\n\t\t\tvnode._children &&\r\n\t\t\tvnode._children.map(child =>\r\n\t\t\t\tremoveOriginal(child, detachedParent, originalParent)\r\n\t\t\t);\r\n\r\n\t\tif (vnode._component) {\r\n\t\t\tif (vnode._component._parentDom === detachedParent) {\r\n\t\t\t\tif (vnode._dom) {\r\n\t\t\t\t\toriginalParent.insertBefore(vnode._dom, vnode._nextDom);\r\n\t\t\t\t}\r\n\t\t\t\tvnode._component._force = true;\r\n\t\t\t\tvnode._component._parentDom = originalParent;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn vnode;\r\n}\r\n\r\n// having custom inheritance instead of a class here saves a lot of bytes\r\nexport function Suspense() {\r\n\t// we do not call super here to golf some bytes...\r\n\tthis._pendingSuspensionCount = 0;\r\n\tthis._suspenders = null;\r\n\tthis._detachOnNextRender = null;\r\n}\r\n\r\n// Things we do here to save some bytes but are not proper JS inheritance:\r\n// - call `new Component()` as the prototype\r\n// - do not set `Suspense.prototype.constructor` to `Suspense`\r\nSuspense.prototype = new Component();\r\n\r\n/**\r\n * @this {import('./internal').SuspenseComponent}\r\n * @param {Promise} promise The thrown promise\r\n * @param {import('./internal').VNode<any, any>} suspendingVNode The suspending component\r\n */\r\nSuspense.prototype._childDidSuspend = function(promise, suspendingVNode) {\r\n\tconst suspendingComponent = suspendingVNode._component;\r\n\r\n\t/** @type {import('./internal').SuspenseComponent} */\r\n\tconst c = this;\r\n\r\n\tif (c._suspenders == null) {\r\n\t\tc._suspenders = [];\r\n\t}\r\n\tc._suspenders.push(suspendingComponent);\r\n\r\n\tconst resolve = suspended(c._vnode);\r\n\r\n\tlet resolved = false;\r\n\tconst onResolved = () => {\r\n\t\tif (resolved) return;\r\n\r\n\t\tresolved = true;\r\n\t\tsuspendingComponent._onResolve = null;\r\n\r\n\t\tif (resolve) {\r\n\t\t\tresolve(onSuspensionComplete);\r\n\t\t} else {\r\n\t\t\tonSuspensionComplete();\r\n\t\t}\r\n\t};\r\n\r\n\tsuspendingComponent._onResolve = onResolved;\r\n\r\n\tconst onSuspensionComplete = () => {\r\n\t\tif (!--c._pendingSuspensionCount) {\r\n\t\t\t// If the suspension was during hydration we don't need to restore the\r\n\t\t\t// suspended children into the _children array\r\n\t\t\tif (c.state._suspended) {\r\n\t\t\t\tconst suspendedVNode = c.state._suspended;\r\n\t\t\t\tc._vnode._children[0] = removeOriginal(\r\n\t\t\t\t\tsuspendedVNode,\r\n\t\t\t\t\tsuspendedVNode._component._parentDom,\r\n\t\t\t\t\tsuspendedVNode._component._originalParentDom\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tc.setState({ _suspended: (c._detachOnNextRender = null) });\r\n\r\n\t\t\tlet suspended;\r\n\t\t\twhile ((suspended = c._suspenders.pop())) {\r\n\t\t\t\tsuspended.forceUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * We do not set `suspended: true` during hydration because we want the actual markup\r\n\t * to remain on screen and hydrate it when the suspense actually gets resolved.\r\n\t * While in non-hydration cases the usual fallback -> component flow would occour.\r\n\t */\r\n\tconst wasHydrating = suspendingVNode._hydrating === true;\r\n\tif (!c._pendingSuspensionCount++ && !wasHydrating) {\r\n\t\tc.setState({ _suspended: (c._detachOnNextRender = c._vnode._children[0]) });\r\n\t}\r\n\tpromise.then(onResolved, onResolved);\r\n};\r\n\r\nSuspense.prototype.componentWillUnmount = function() {\r\n\tthis._suspenders = [];\r\n};\r\n\r\n/**\r\n * @this {import('./internal').SuspenseComponent}\r\n * @param {import('./internal').SuspenseComponent[\"props\"]} props\r\n * @param {import('./internal').SuspenseState} state\r\n */\r\nSuspense.prototype.render = function(props, state) {\r\n\tif (this._detachOnNextRender) {\r\n\t\t// When the Suspense's _vnode was created by a call to createVNode\r\n\t\t// (i.e. due to a setState further up in the tree)\r\n\t\t// it's _children prop is null, in this case we \"forget\" about the parked vnodes to detach\r\n\t\tif (this._vnode._children) {\r\n\t\t\tconst detachedParent = document.createElement('div');\r\n\t\t\tconst detachedComponent = this._vnode._children[0]._component;\r\n\t\t\tthis._vnode._children[0] = detachedClone(\r\n\t\t\t\tthis._detachOnNextRender,\r\n\t\t\t\tdetachedParent,\r\n\t\t\t\t(detachedComponent._originalParentDom = detachedComponent._parentDom)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis._detachOnNextRender = null;\r\n\t}\r\n\r\n\t// Wrap fallback tree in a VNode that prevents itself from being marked as aborting mid-hydration:\r\n\t/** @type {import('./internal').VNode} */\r\n\tconst fallback =\r\n\t\tstate._suspended && createElement(Fragment, null, props.fallback);\r\n\tif (fallback) fallback._hydrating = null;\r\n\r\n\treturn [\r\n\t\tcreateElement(Fragment, null, state._suspended ? null : props.children),\r\n\t\tfallback\r\n\t];\r\n};\r\n\r\n/**\r\n * Checks and calls the parent component's _suspended method, passing in the\r\n * suspended vnode. This is a way for a parent (e.g. SuspenseList) to get notified\r\n * that one of its children/descendants suspended.\r\n *\r\n * The parent MAY return a callback. The callback will get called when the\r\n * suspension resolves, notifying the parent of the fact.\r\n * Moreover, the callback gets function `unsuspend` as a parameter. The resolved\r\n * child descendant will not actually get unsuspended until `unsuspend` gets called.\r\n * This is a way for the parent to delay unsuspending.\r\n *\r\n * If the parent does not return a callback then the resolved vnode\r\n * gets unsuspended immediately when it resolves.\r\n *\r\n * @param {import('./internal').VNode} vnode\r\n * @returns {((unsuspend: () => void) => void)?}\r\n */\r\nexport function suspended(vnode) {\r\n\t/** @type {import('./internal').Component} */\r\n\tlet component = vnode._parent._component;\r\n\treturn component && component._suspended && component._suspended(vnode);\r\n}\r\n\r\nexport function lazy(loader) {\r\n\tlet prom;\r\n\tlet component;\r\n\tlet error;\r\n\r\n\tfunction Lazy(props) {\r\n\t\tif (!prom) {\r\n\t\t\tprom = loader();\r\n\t\t\tprom.then(\r\n\t\t\t\texports => {\r\n\t\t\t\t\tcomponent = exports.default || exports;\r\n\t\t\t\t},\r\n\t\t\t\te => {\r\n\t\t\t\t\terror = e;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (error) {\r\n\t\t\tthrow error;\r\n\t\t}\r\n\r\n\t\tif (!component) {\r\n\t\t\tthrow prom;\r\n\t\t}\r\n\r\n\t\treturn createElement(component, props);\r\n\t}\r\n\r\n\tLazy.displayName = 'Lazy';\r\n\tLazy._forwarded = true;\r\n\treturn Lazy;\r\n}\r\n","import { Component, toChildArray } from 'preact';\r\nimport { suspended } from './suspense.js';\r\n\r\n// Indexes to linked list nodes (nodes are stored as arrays to save bytes).\r\nconst SUSPENDED_COUNT = 0;\r\nconst RESOLVED_COUNT = 1;\r\nconst NEXT_NODE = 2;\r\n\r\n// Having custom inheritance instead of a class here saves a lot of bytes.\r\nexport function SuspenseList() {\r\n\tthis._next = null;\r\n\tthis._map = null;\r\n}\r\n\r\n// Mark one of child's earlier suspensions as resolved.\r\n// Some pending callbacks may become callable due to this\r\n// (e.g. the last suspended descendant gets resolved when\r\n// revealOrder === 'together'). Process those callbacks as well.\r\nconst resolve = (list, child, node) => {\r\n\tif (++node[RESOLVED_COUNT] === node[SUSPENDED_COUNT]) {\r\n\t\t// The number a child (or any of its descendants) has been suspended\r\n\t\t// matches the number of times it's been resolved. Therefore we\r\n\t\t// mark the child as completely resolved by deleting it from ._map.\r\n\t\t// This is used to figure out when *all* children have been completely\r\n\t\t// resolved when revealOrder is 'together'.\r\n\t\tlist._map.delete(child);\r\n\t}\r\n\r\n\t// If revealOrder is falsy then we can do an early exit, as the\r\n\t// callbacks won't get queued in the node anyway.\r\n\t// If revealOrder is 'together' then also do an early exit\r\n\t// if all suspended descendants have not yet been resolved.\r\n\tif (\r\n\t\t!list.props.revealOrder ||\r\n\t\t(list.props.revealOrder[0] === 't' && list._map.size)\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Walk the currently suspended children in order, calling their\r\n\t// stored callbacks on the way. Stop if we encounter a child that\r\n\t// has not been completely resolved yet.\r\n\tnode = list._next;\r\n\twhile (node) {\r\n\t\twhile (node.length > 3) {\r\n\t\t\tnode.pop()();\r\n\t\t}\r\n\t\tif (node[RESOLVED_COUNT] < node[SUSPENDED_COUNT]) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tlist._next = node = node[NEXT_NODE];\r\n\t}\r\n};\r\n\r\n// Things we do here to save some bytes but are not proper JS inheritance:\r\n// - call `new Component()` as the prototype\r\n// - do not set `Suspense.prototype.constructor` to `Suspense`\r\nSuspenseList.prototype = new Component();\r\n\r\nSuspenseList.prototype._suspended = function(child) {\r\n\tconst list = this;\r\n\tconst delegated = suspended(list._vnode);\r\n\r\n\tlet node = list._map.get(child);\r\n\tnode[SUSPENDED_COUNT]++;\r\n\r\n\treturn unsuspend => {\r\n\t\tconst wrappedUnsuspend = () => {\r\n\t\t\tif (!list.props.revealOrder) {\r\n\t\t\t\t// Special case the undefined (falsy) revealOrder, as there\r\n\t\t\t\t// is no need to coordinate a specific order or unsuspends.\r\n\t\t\t\tunsuspend();\r\n\t\t\t} else {\r\n\t\t\t\tnode.push(unsuspend);\r\n\t\t\t\tresolve(list, child, node);\r\n\t\t\t}\r\n\t\t};\r\n\t\tif (delegated) {\r\n\t\t\tdelegated(wrappedUnsuspend);\r\n\t\t} else {\r\n\t\t\twrappedUnsuspend();\r\n\t\t}\r\n\t};\r\n};\r\n\r\nSuspenseList.prototype.render = function(props) {\r\n\tthis._next = null;\r\n\tthis._map = new Map();\r\n\r\n\tconst children = toChildArray(props.children);\r\n\tif (props.revealOrder && props.revealOrder[0] === 'b') {\r\n\t\t// If order === 'backwards' (or, well, anything starting with a 'b')\r\n\t\t// then flip the child list around so that the last child will be\r\n\t\t// the first in the linked list.\r\n\t\tchildren.reverse();\r\n\t}\r\n\t// Build the linked list. Iterate through the children in reverse order\r\n\t// so that `_next` points to the first linked list node to be resolved.\r\n\tfor (let i = children.length; i--; ) {\r\n\t\t// Create a new linked list node as an array of form:\r\n\t\t// \t[suspended_count, resolved_count, next_node]\r\n\t\t// where suspended_count and resolved_count are numeric counters for\r\n\t\t// keeping track how many times a node has been suspended and resolved.\r\n\t\t//\r\n\t\t// Note that suspended_count starts from 1 instead of 0, so we can block\r\n\t\t// processing callbacks until componentDidMount has been called. In a sense\r\n\t\t// node is suspended at least until componentDidMount gets called!\r\n\t\t//\r\n\t\t// Pending callbacks are added to the end of the node:\r\n\t\t// \t[suspended_count, resolved_count, next_node, callback_0, callback_1, ...]\r\n\t\tthis._map.set(children[i], (this._next = [1, 0, this._next]));\r\n\t}\r\n\treturn props.children;\r\n};\r\n\r\nSuspenseList.prototype.componentDidUpdate = SuspenseList.prototype.componentDidMount = function() {\r\n\t// Iterate through all children after mounting for two reasons:\r\n\t// 1. As each node[SUSPENDED_COUNT] starts from 1, this iteration increases\r\n\t//    each node[RELEASED_COUNT] by 1, therefore balancing the counters.\r\n\t//    The nodes can now be completely consumed from the linked list.\r\n\t// 2. Handle nodes that might have gotten resolved between render and\r\n\t//    componentDidMount.\r\n\tthis._map.forEach((node, child) => {\r\n\t\tresolve(this, child, node);\r\n\t});\r\n};\r\n","import {\r\n\trender as preactRender,\r\n\thydrate as preactHydrate,\r\n\toptions,\r\n\ttoChildArray,\r\n\tComponent\r\n} from 'preact';\r\n\r\nexport const REACT_ELEMENT_TYPE =\r\n\t(typeof Symbol != 'undefined' && Symbol.for && Symbol.for('react.element')) ||\r\n\t0xeac7;\r\n\r\nconst CAMEL_PROPS = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;\r\n\r\nconst IS_DOM = typeof document !== 'undefined';\r\n\r\n// Input types for which onchange should not be converted to oninput.\r\n// type=\"file|checkbox|radio\", plus \"range\" in IE11.\r\n// (IE11 doesn't support Symbol, which we use here to turn `rad` into `ra` which matches \"range\")\r\nconst onChangeInputType = type =>\r\n\t(typeof Symbol != 'undefined' && typeof Symbol() == 'symbol'\r\n\t\t? /fil|che|rad/i\r\n\t\t: /fil|che|ra/i\r\n\t).test(type);\r\n\r\n// Some libraries like `react-virtualized` explicitly check for this.\r\nComponent.prototype.isReactComponent = {};\r\n\r\n// `UNSAFE_*` lifecycle hooks\r\n// Preact only ever invokes the unprefixed methods.\r\n// Here we provide a base \"fallback\" implementation that calls any defined UNSAFE_ prefixed method.\r\n// - If a component defines its own `componentDidMount()` (including via defineProperty), use that.\r\n// - If a component defines `UNSAFE_componentDidMount()`, `componentDidMount` is the alias getter/setter.\r\n// - If anything assigns to an `UNSAFE_*` property, the assignment is forwarded to the unprefixed property.\r\n// See https://github.com/preactjs/preact/issues/1941\r\n[\r\n\t'componentWillMount',\r\n\t'componentWillReceiveProps',\r\n\t'componentWillUpdate'\r\n].forEach(key => {\r\n\tObject.defineProperty(Component.prototype, key, {\r\n\t\tconfigurable: true,\r\n\t\tget() {\r\n\t\t\treturn this['UNSAFE_' + key];\r\n\t\t},\r\n\t\tset(v) {\r\n\t\t\tObject.defineProperty(this, key, {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\twritable: true,\r\n\t\t\t\tvalue: v\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n});\r\n\r\n/**\r\n * Proxy render() since React returns a Component reference.\r\n * @param {import('./internal').VNode} vnode VNode tree to render\r\n * @param {import('./internal').PreactElement} parent DOM node to render vnode tree into\r\n * @param {() => void} [callback] Optional callback that will be called after rendering\r\n * @returns {import('./internal').Component | null} The root component reference or null\r\n */\r\nexport function render(vnode, parent, callback) {\r\n\t// React destroys any existing DOM nodes, see #1727\r\n\t// ...but only on the first render, see #1828\r\n\tif (parent._children == null) {\r\n\t\tparent.textContent = '';\r\n\t}\r\n\r\n\tpreactRender(vnode, parent);\r\n\tif (typeof callback == 'function') callback();\r\n\r\n\treturn vnode ? vnode._component : null;\r\n}\r\n\r\nexport function hydrate(vnode, parent, callback) {\r\n\tpreactHydrate(vnode, parent);\r\n\tif (typeof callback == 'function') callback();\r\n\r\n\treturn vnode ? vnode._component : null;\r\n}\r\n\r\nlet oldEventHook = options.event;\r\noptions.event = e => {\r\n\tif (oldEventHook) e = oldEventHook(e);\r\n\te.persist = empty;\r\n\te.isPropagationStopped = isPropagationStopped;\r\n\te.isDefaultPrevented = isDefaultPrevented;\r\n\treturn (e.nativeEvent = e);\r\n};\r\n\r\nfunction empty() {}\r\n\r\nfunction isPropagationStopped() {\r\n\treturn this.cancelBubble;\r\n}\r\n\r\nfunction isDefaultPrevented() {\r\n\treturn this.defaultPrevented;\r\n}\r\n\r\nlet classNameDescriptor = {\r\n\tconfigurable: true,\r\n\tget() {\r\n\t\treturn this.class;\r\n\t}\r\n};\r\n\r\nlet oldVNodeHook = options.vnode;\r\noptions.vnode = vnode => {\r\n\tlet type = vnode.type;\r\n\tlet props = vnode.props;\r\n\tlet normalizedProps = props;\r\n\r\n\t// only normalize props on Element nodes\r\n\tif (typeof type === 'string') {\r\n\t\tconst nonCustomElement = type.indexOf('-') === -1;\r\n\t\tnormalizedProps = {};\r\n\r\n\t\tfor (let i in props) {\r\n\t\t\tlet value = props[i];\r\n\r\n\t\t\tif (IS_DOM && i === 'children' && type === 'noscript') {\r\n\t\t\t\t// Emulate React's behavior of not rendering the contents of noscript tags on the client.\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\telse if (i === 'value' && 'defaultValue' in props && value == null) {\r\n\t\t\t\t// Skip applying value if it is null/undefined and we already set\r\n\t\t\t\t// a default value\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (\r\n\t\t\t\ti === 'defaultValue' &&\r\n\t\t\t\t'value' in props &&\r\n\t\t\t\tprops.value == null\r\n\t\t\t) {\r\n\t\t\t\t// `defaultValue` is treated as a fallback `value` when a value prop is present but null/undefined.\r\n\t\t\t\t// `defaultValue` for Elements with no value prop is the same as the DOM defaultValue property.\r\n\t\t\t\ti = 'value';\r\n\t\t\t} else if (i === 'download' && value === true) {\r\n\t\t\t\t// Calling `setAttribute` with a truthy value will lead to it being\r\n\t\t\t\t// passed as a stringified value, e.g. `download=\"true\"`. React\r\n\t\t\t\t// converts it to an empty string instead, otherwise the attribute\r\n\t\t\t\t// value will be used as the file name and the file will be called\r\n\t\t\t\t// \"true\" upon downloading it.\r\n\t\t\t\tvalue = '';\r\n\t\t\t} else if (/ondoubleclick/i.test(i)) {\r\n\t\t\t\ti = 'ondblclick';\r\n\t\t\t} else if (\r\n\t\t\t\t/^onchange(textarea|input)/i.test(i + type) &&\r\n\t\t\t\t!onChangeInputType(props.type)\r\n\t\t\t) {\r\n\t\t\t\ti = 'oninput';\r\n\t\t\t} else if (/^onfocus$/i.test(i)) {\r\n\t\t\t\ti = 'onfocusin';\r\n\t\t\t} else if (/^onblur$/i.test(i)) {\r\n\t\t\t\ti = 'onfocusout';\r\n\t\t\t} else if (/^on(Ani|Tra|Tou|BeforeInp)/.test(i)) {\r\n\t\t\t\ti = i.toLowerCase();\r\n\t\t\t} else if (nonCustomElement && CAMEL_PROPS.test(i)) {\r\n\t\t\t\ti = i.replace(/[A-Z0-9]/, '-$&').toLowerCase();\r\n\t\t\t} else if (value === null) {\r\n\t\t\t\tvalue = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tnormalizedProps[i] = value;\r\n\t\t}\r\n\r\n\t\t// Add support for array select values: <select multiple value={[]} />\r\n\t\tif (\r\n\t\t\ttype == 'select' &&\r\n\t\t\tnormalizedProps.multiple &&\r\n\t\t\tArray.isArray(normalizedProps.value)\r\n\t\t) {\r\n\t\t\t// forEach() always returns undefined, which we abuse here to unset the value prop.\r\n\t\t\tnormalizedProps.value = toChildArray(props.children).forEach(child => {\r\n\t\t\t\tchild.props.selected =\r\n\t\t\t\t\tnormalizedProps.value.indexOf(child.props.value) != -1;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Adding support for defaultValue in select tag\r\n\t\tif (type == 'select' && normalizedProps.defaultValue != null) {\r\n\t\t\tnormalizedProps.value = toChildArray(props.children).forEach(child => {\r\n\t\t\t\tif (normalizedProps.multiple) {\r\n\t\t\t\t\tchild.props.selected =\r\n\t\t\t\t\t\tnormalizedProps.defaultValue.indexOf(child.props.value) != -1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchild.props.selected =\r\n\t\t\t\t\t\tnormalizedProps.defaultValue == child.props.value;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvnode.props = normalizedProps;\r\n\r\n\t\tif (props.class != props.className) {\r\n\t\t\tclassNameDescriptor.enumerable = 'className' in props;\r\n\t\t\tif (props.className != null) normalizedProps.class = props.className;\r\n\t\t\tObject.defineProperty(normalizedProps, 'className', classNameDescriptor);\r\n\t\t}\r\n\t}\r\n\r\n\tvnode.$$typeof = REACT_ELEMENT_TYPE;\r\n\r\n\tif (oldVNodeHook) oldVNodeHook(vnode);\r\n};\r\n\r\n// Only needed for react-relay\r\nlet currentComponent;\r\nconst oldBeforeRender = options._render;\r\noptions._render = function(vnode) {\r\n\tif (oldBeforeRender) {\r\n\t\toldBeforeRender(vnode);\r\n\t}\r\n\tcurrentComponent = vnode._component;\r\n};\r\n\r\n// This is a very very private internal function for React it\r\n// is used to sort-of do runtime dependency injection. So far\r\n// only `react-relay` makes use of it. It uses it to read the\r\n// context value.\r\nexport const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {\r\n\tReactCurrentDispatcher: {\r\n\t\tcurrent: {\r\n\t\t\treadContext(context) {\r\n\t\t\t\treturn currentComponent._globalContext[context._id].props.value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n","import {\r\n\tcreateElement,\r\n\trender as preactRender,\r\n\tcloneElement as preactCloneElement,\r\n\tcreateRef,\r\n\tComponent,\r\n\tcreateContext,\r\n\tFragment\r\n} from 'preact';\r\nimport {\r\n\tuseState,\r\n\tuseReducer,\r\n\tuseEffect,\r\n\tuseLayoutEffect,\r\n\tuseRef,\r\n\tuseImperativeHandle,\r\n\tuseMemo,\r\n\tuseCallback,\r\n\tuseContext,\r\n\tuseDebugValue\r\n} from 'preact/hooks';\r\nimport { PureComponent } from './PureComponent';\r\nimport { memo } from './memo';\r\nimport { forwardRef } from './forwardRef';\r\nimport { Children } from './Children';\r\nimport { Suspense, lazy } from './suspense';\r\nimport { SuspenseList } from './suspense-list';\r\nimport { createPortal } from './portals';\r\nimport {\r\n\thydrate,\r\n\trender,\r\n\tREACT_ELEMENT_TYPE,\r\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\r\n} from './render';\r\n\r\nconst version = '17.0.2'; // trick libraries to think we are react\r\n\r\n/**\r\n * Legacy version of createElement.\r\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component constructor\r\n */\r\nfunction createFactory(type) {\r\n\treturn createElement.bind(null, type);\r\n}\r\n\r\n/**\r\n * Check if the passed element is a valid (p)react node.\r\n * @param {*} element The element to check\r\n * @returns {boolean}\r\n */\r\nfunction isValidElement(element) {\r\n\treturn !!element && element.$$typeof === REACT_ELEMENT_TYPE;\r\n}\r\n\r\n/**\r\n * Wrap `cloneElement` to abort if the passed element is not a valid element and apply\r\n * all vnode normalizations.\r\n * @param {import('./internal').VNode} element The vnode to clone\r\n * @param {object} props Props to add when cloning\r\n * @param {Array<import('./internal').ComponentChildren>} rest Optional component children\r\n */\r\nfunction cloneElement(element) {\r\n\tif (!isValidElement(element)) return element;\r\n\treturn preactCloneElement.apply(null, arguments);\r\n}\r\n\r\n/**\r\n * Remove a component tree from the DOM, including state and event handlers.\r\n * @param {import('./internal').PreactElement} container\r\n * @returns {boolean}\r\n */\r\nfunction unmountComponentAtNode(container) {\r\n\tif (container._children) {\r\n\t\tpreactRender(null, container);\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * Get the matching DOM node for a component\r\n * @param {import('./internal').Component} component\r\n * @returns {import('./internal').PreactElement | null}\r\n */\r\nfunction findDOMNode(component) {\r\n\treturn (\r\n\t\t(component &&\r\n\t\t\t(component.base || (component.nodeType === 1 && component))) ||\r\n\t\tnull\r\n\t);\r\n}\r\n\r\n/**\r\n * Deprecated way to control batched rendering inside the reconciler, but we\r\n * already schedule in batches inside our rendering code\r\n * @template Arg\r\n * @param {(arg: Arg) => void} callback function that triggers the updated\r\n * @param {Arg} [arg] Optional argument that can be passed to the callback\r\n */\r\n// eslint-disable-next-line camelcase\r\nconst unstable_batchedUpdates = (callback, arg) => callback(arg);\r\n\r\n/**\r\n * In React, `flushSync` flushes the entire tree and forces a rerender. It's\r\n * implmented here as a no-op.\r\n * @template Arg\r\n * @template Result\r\n * @param {(arg: Arg) => Result} callback function that runs before the flush\r\n * @param {Arg} [arg] Optional arugment that can be passed to the callback\r\n * @returns\r\n */\r\nconst flushSync = (callback, arg) => callback(arg);\r\n\r\n/**\r\n * Strict Mode is not implemented in Preact, so we provide a stand-in for it\r\n * that just renders its children without imposing any restrictions.\r\n */\r\nconst StrictMode = Fragment;\r\n\r\nexport * from 'preact/hooks';\r\nexport {\r\n\tversion,\r\n\tChildren,\r\n\trender,\r\n\thydrate,\r\n\tunmountComponentAtNode,\r\n\tcreatePortal,\r\n\tcreateElement,\r\n\tcreateContext,\r\n\tcreateFactory,\r\n\tcloneElement,\r\n\tcreateRef,\r\n\tFragment,\r\n\tisValidElement,\r\n\tfindDOMNode,\r\n\tComponent,\r\n\tPureComponent,\r\n\tmemo,\r\n\tforwardRef,\r\n\tflushSync,\r\n\t// eslint-disable-next-line camelcase\r\n\tunstable_batchedUpdates,\r\n\tStrictMode,\r\n\tSuspense,\r\n\tSuspenseList,\r\n\tlazy,\r\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\r\n};\r\n\r\n// React copies the named exports to the default one.\r\nexport default {\r\n\tuseState,\r\n\tuseReducer,\r\n\tuseEffect,\r\n\tuseLayoutEffect,\r\n\tuseRef,\r\n\tuseImperativeHandle,\r\n\tuseMemo,\r\n\tuseCallback,\r\n\tuseContext,\r\n\tuseDebugValue,\r\n\tversion,\r\n\tChildren,\r\n\trender,\r\n\thydrate,\r\n\tunmountComponentAtNode,\r\n\tcreatePortal,\r\n\tcreateElement,\r\n\tcreateContext,\r\n\tcreateFactory,\r\n\tcloneElement,\r\n\tcreateRef,\r\n\tFragment,\r\n\tisValidElement,\r\n\tfindDOMNode,\r\n\tComponent,\r\n\tPureComponent,\r\n\tmemo,\r\n\tforwardRef,\r\n\tflushSync,\r\n\tunstable_batchedUpdates,\r\n\tStrictMode,\r\n\tSuspense,\r\n\tSuspenseList,\r\n\tlazy,\r\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\r\n};\r\n","// @ts-nocheck\nimport { PureComponent } from 'preact/compat'\nimport { Data, I18n } from '../../config'\nimport Icons from '../../icons'\n\nconst THEME_ICONS = {\n  light: 'outline',\n  dark: 'solid',\n}\n\nexport default class Navigation extends PureComponent {\n  constructor() {\n    super()\n\n    this.categories = Data.categories.filter((category) => {\n      return !category.target\n    })\n\n    this.state = {\n      categoryId: this.categories[0].id,\n    }\n  }\n\n  renderIcon(category) {\n    const { icon } = category\n\n    if (icon) {\n      if (icon.svg) {\n        return (\n          <span\n            class=\"flex\"\n            dangerouslySetInnerHTML={{ __html: icon.svg }}\n          ></span>\n        )\n      }\n\n      if (icon.src) {\n        return <img src={icon.src} />\n      }\n    }\n\n    const categoryIcons =\n      Icons.categories[category.id] || Icons.categories.custom\n\n    const style =\n      this.props.icons == 'auto'\n        ? THEME_ICONS[this.props.theme]\n        : this.props.icons\n\n    return categoryIcons[style] || categoryIcons\n  }\n\n  render() {\n    let selectedCategoryIndex = null\n\n    return (\n      <nav\n        id=\"nav\"\n        class=\"padding\"\n        data-position={this.props.position}\n        dir={this.props.dir}\n      >\n        <div class=\"flex relative\">\n          {this.categories.map((category, i) => {\n            const title = category.name || I18n.categories[category.id]\n            const selected =\n              !this.props.unfocused && category.id == this.state.categoryId\n\n            if (selected) {\n              selectedCategoryIndex = i\n            }\n\n            return (\n              <button\n                aria-label={title}\n                aria-selected={selected || undefined}\n                title={title}\n                type=\"button\"\n                class=\"flex flex-grow flex-center\"\n                onMouseDown={(e) => e.preventDefault()}\n                onClick={() => {\n                  this.props.onClick({ category, i })\n                }}\n              >\n                {this.renderIcon(category)}\n              </button>\n            )\n          })}\n\n          <div\n            class=\"bar\"\n            style={{\n              width: `${100 / this.categories.length}%`,\n              opacity: selectedCategoryIndex == null ? 0 : 1,\n              transform:\n                this.props.dir === 'rtl'\n                  ? `scaleX(-1) translateX(${selectedCategoryIndex * 100}%)`\n                  : `translateX(${selectedCategoryIndex * 100}%)`,\n            }}\n          ></div>\n        </div>\n      </nav>\n    )\n  }\n}\n","import { PureComponent } from 'preact/compat'\n\nexport default class PureInlineComponent extends PureComponent {\n  shouldComponentUpdate(nextProps) {\n    for (let k in nextProps) {\n      if (k == 'children') continue\n\n      if (nextProps[k] != this.props[k]) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n","// @ts-nocheck\nimport { Component, createRef } from 'preact'\n\nimport { deepEqual, sleep, getEmojiData } from '../../utils'\nimport { Data, I18n, init } from '../../config'\nimport { SearchIndex, Store, FrequentlyUsed } from '../../helpers'\nimport Icons from '../../icons'\n\nimport { Emoji } from '../Emoji'\nimport { Navigation } from '../Navigation'\nimport { PureInlineComponent } from '../HOCs'\n\nconst Performance = {\n  rowsPerRender: 10,\n}\n\nexport default class Picker extends Component {\n  constructor(props) {\n    super()\n\n    this.observers = []\n\n    this.state = {\n      pos: [-1, -1],\n      perLine: this.initDynamicPerLine(props),\n      visibleRows: { 0: true },\n      ...this.getInitialState(props),\n    }\n  }\n\n  getInitialState(props = this.props) {\n    return {\n      skin: Store.get('skin') || props.skin,\n      theme: this.initTheme(props.theme),\n    }\n  }\n\n  componentWillMount() {\n    this.dir = I18n.rtl ? 'rtl' : 'ltr'\n    this.refs = {\n      menu: createRef(),\n      navigation: createRef(),\n      scroll: createRef(),\n      search: createRef(),\n      searchInput: createRef(),\n      skinToneButton: createRef(),\n      skinToneRadio: createRef(),\n    }\n\n    this.initGrid()\n\n    if (\n      this.props.stickySearch == false &&\n      this.props.searchPosition == 'sticky'\n    ) {\n      console.warn(\n        '[EmojiMart] Deprecation warning: `stickySearch` has been renamed `searchPosition`.',\n      )\n\n      this.props.searchPosition = 'static'\n    }\n  }\n\n  componentDidMount() {\n    this.register()\n\n    this.shadowRoot = this.base.parentNode\n\n    if (this.props.autoFocus) {\n      const { searchInput } = this.refs\n      if (searchInput.current) {\n        searchInput.current.focus()\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.nextState || (this.nextState = {})\n\n    for (const k in nextProps) {\n      this.nextState[k] = nextProps[k]\n    }\n\n    clearTimeout(this.nextStateTimer)\n    this.nextStateTimer = setTimeout(() => {\n      let requiresGridReset = false\n\n      for (const k in this.nextState) {\n        this.props[k] = this.nextState[k]\n\n        if (k === 'custom' || k === 'categories') {\n          requiresGridReset = true\n        }\n      }\n\n      delete this.nextState\n      const nextState = this.getInitialState()\n\n      if (requiresGridReset) {\n        return this.reset(nextState)\n      }\n\n      this.setState(nextState)\n    })\n  }\n\n  componentWillUnmount() {\n    this.unregister()\n  }\n\n  async reset(nextState = {}) {\n    await init(this.props)\n\n    this.initGrid()\n    this.unobserve()\n\n    this.setState(nextState, () => {\n      this.observeCategories()\n      this.observeRows()\n    })\n  }\n\n  register() {\n    document.addEventListener('click', this.handleClickOutside)\n    this.observe()\n  }\n\n  unregister() {\n    document.removeEventListener('click', this.handleClickOutside)\n    this.unobserve()\n  }\n\n  observe() {\n    this.observeCategories()\n    this.observeRows()\n  }\n\n  unobserve({ except = [] } = {}) {\n    if (!Array.isArray(except)) {\n      except = [except]\n    }\n\n    for (const observer of this.observers) {\n      if (except.includes(observer)) continue\n      observer.disconnect()\n    }\n\n    this.observers = [].concat(except)\n  }\n\n  initGrid() {\n    const { categories } = Data\n\n    this.refs.categories = new Map()\n\n    const navKey = Data.categories.map((category) => category.id).join(',')\n    if (this.navKey && this.navKey != navKey) {\n      this.refs.scroll.current && (this.refs.scroll.current.scrollTop = 0)\n    }\n    this.navKey = navKey\n\n    this.grid = []\n    this.grid.setsize = 0\n\n    const addRow = (rows, category) => {\n      const row = []\n      row.__categoryId = category.id\n      row.__index = rows.length\n      this.grid.push(row)\n\n      const rowIndex = this.grid.length - 1\n      const rowRef = rowIndex % Performance.rowsPerRender ? {} : createRef()\n      rowRef.index = rowIndex\n      rowRef.posinset = this.grid.setsize + 1\n      rows.push(rowRef)\n\n      return row\n    }\n\n    for (let category of categories) {\n      const rows = []\n      let row = addRow(rows, category)\n\n      for (let emoji of category.emojis) {\n        if (row.length == this.getPerLine()) {\n          row = addRow(rows, category)\n        }\n\n        this.grid.setsize += 1\n        row.push(emoji)\n      }\n\n      this.refs.categories.set(category.id, { root: createRef(), rows })\n    }\n  }\n\n  initTheme(theme) {\n    if (theme != 'auto') return theme\n\n    if (!this.darkMedia) {\n      this.darkMedia = matchMedia('(prefers-color-scheme: dark)')\n      if (this.darkMedia.media.match(/^not/)) return 'light'\n\n      this.darkMedia.addListener(() => {\n        if (this.props.theme != 'auto') return\n        this.setState({ theme: this.darkMedia.matches ? 'dark' : 'light' })\n      })\n    }\n\n    return this.darkMedia.matches ? 'dark' : 'light'\n  }\n\n  handleClickOutside = (e) => {\n    const { element } = this.props\n\n    if (e.target != element) {\n      if (this.state.showSkins) {\n        this.closeSkins()\n      }\n\n      if (this.props.onClickOutside) {\n        this.props.onClickOutside(e)\n      }\n    }\n  }\n\n  handleBaseClick = (e) => {\n    if (!this.state.showSkins) return\n    if (!e.target.closest('.menu')) {\n      e.preventDefault()\n      e.stopImmediatePropagation()\n\n      this.closeSkins()\n    }\n  }\n\n  handleBaseKeydown = (e) => {\n    if (!this.state.showSkins) return\n    if (e.key == 'Escape') {\n      e.preventDefault()\n      e.stopImmediatePropagation()\n\n      this.closeSkins()\n    }\n  }\n\n  initDynamicPerLine(props = this.props) {\n    if (!props.dynamicWidth) return\n    const { element, emojiButtonSize } = props\n\n    const calculatePerLine = () => {\n      const { width } = element.getBoundingClientRect()\n      return Math.floor(width / emojiButtonSize)\n    }\n\n    const observer = new ResizeObserver(() => {\n      this.unobserve({ except: observer })\n      this.setState({ perLine: calculatePerLine() }, () => {\n        this.initGrid()\n        this.forceUpdate(() => {\n          this.observeCategories()\n          this.observeRows()\n        })\n      })\n    })\n\n    observer.observe(element)\n    this.observers.push(observer)\n\n    return calculatePerLine()\n  }\n\n  getPerLine() {\n    return this.state.perLine || this.props.perLine\n  }\n\n  getEmojiByPos([p1, p2]) {\n    const grid = this.state.searchResults || this.grid\n    const emoji = grid[p1] && grid[p1][p2]\n\n    if (!emoji) return\n    return SearchIndex.get(emoji)\n  }\n\n  observeCategories() {\n    const navigation = this.refs.navigation.current\n    if (!navigation) return\n\n    const visibleCategories = new Map()\n    const setFocusedCategory = (categoryId) => {\n      if (categoryId != navigation.state.categoryId) {\n        navigation.setState({ categoryId })\n      }\n    }\n\n    const observerOptions = {\n      root: this.refs.scroll.current,\n      threshold: [0.0, 1.0],\n    }\n\n    const observer = new IntersectionObserver((entries) => {\n      for (const entry of entries) {\n        const id = entry.target.dataset.id\n        visibleCategories.set(id, entry.intersectionRatio)\n      }\n\n      const ratios = [...visibleCategories]\n      for (const [id, ratio] of ratios) {\n        if (ratio) {\n          setFocusedCategory(id)\n          break\n        }\n      }\n    }, observerOptions)\n\n    for (const { root } of this.refs.categories.values()) {\n      observer.observe(root.current)\n    }\n\n    this.observers.push(observer)\n  }\n\n  observeRows() {\n    const visibleRows = { ...this.state.visibleRows }\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        for (const entry of entries) {\n          const index = parseInt(entry.target.dataset.index)\n\n          if (entry.isIntersecting) {\n            visibleRows[index] = true\n          } else {\n            delete visibleRows[index]\n          }\n        }\n\n        this.setState({ visibleRows })\n      },\n      {\n        root: this.refs.scroll.current,\n        rootMargin: `${\n          this.props.emojiButtonSize * (Performance.rowsPerRender + 5)\n        }px 0px ${this.props.emojiButtonSize * Performance.rowsPerRender}px`,\n      },\n    )\n\n    for (const { rows } of this.refs.categories.values()) {\n      for (const row of rows) {\n        if (row.current) {\n          observer.observe(row.current)\n        }\n      }\n    }\n\n    this.observers.push(observer)\n  }\n\n  preventDefault(e) {\n    e.preventDefault()\n  }\n\n  handleSearchClick = () => {\n    const emoji = this.getEmojiByPos(this.state.pos)\n    if (!emoji) return\n\n    this.setState({ pos: [-1, -1] })\n  }\n\n  handleSearchInput = async () => {\n    const input = this.refs.searchInput.current\n    if (!input) return\n\n    const { value } = input\n    const searchResults = await SearchIndex.search(value)\n    const afterRender = () => {\n      if (!this.refs.scroll.current) return\n      this.refs.scroll.current.scrollTop = 0\n    }\n\n    if (!searchResults) {\n      return this.setState({ searchResults, pos: [-1, -1] }, afterRender)\n    }\n\n    const pos = input.selectionStart == input.value.length ? [0, 0] : [-1, -1]\n    const grid = []\n    grid.setsize = searchResults.length\n    let row = null\n\n    for (let emoji of searchResults) {\n      if (!grid.length || row.length == this.getPerLine()) {\n        row = []\n        row.__categoryId = 'search'\n        row.__index = grid.length\n        grid.push(row)\n      }\n\n      row.push(emoji)\n    }\n\n    this.ignoreMouse()\n    this.setState({ searchResults: grid, pos }, afterRender)\n  }\n\n  handleSearchKeyDown = (e) => {\n    // const specialKey = e.altKey || e.ctrlKey || e.metaKey\n    const input = e.currentTarget\n    e.stopImmediatePropagation()\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        // if (specialKey) return\n        // e.preventDefault()\n        this.navigate({ e, input, left: true })\n        break\n\n      case 'ArrowRight':\n        // if (specialKey) return\n        // e.preventDefault()\n        this.navigate({ e, input, right: true })\n        break\n\n      case 'ArrowUp':\n        // if (specialKey) return\n        // e.preventDefault()\n        this.navigate({ e, input, up: true })\n        break\n\n      case 'ArrowDown':\n        // if (specialKey) return\n        // e.preventDefault()\n        this.navigate({ e, input, down: true })\n        break\n\n      case 'Enter':\n        e.preventDefault()\n        this.handleEmojiClick({ e, pos: this.state.pos })\n        break\n\n      case 'Escape':\n        e.preventDefault()\n        if (this.state.searchResults) {\n          this.clearSearch()\n        } else {\n          this.unfocusSearch()\n        }\n        break\n\n      default:\n        break\n    }\n  }\n\n  clearSearch = () => {\n    const input = this.refs.searchInput.current\n    if (!input) return\n\n    input.value = ''\n    input.focus()\n\n    this.handleSearchInput()\n  }\n\n  unfocusSearch() {\n    const input = this.refs.searchInput.current\n    if (!input) return\n\n    input.blur()\n  }\n\n  navigate({ e, input, left, right, up, down }) {\n    const grid = this.state.searchResults || this.grid\n    if (!grid.length) return\n\n    let [p1, p2] = this.state.pos\n\n    const pos = (() => {\n      if (p1 == 0) {\n        if (p2 == 0 && !e.repeat && (left || up)) {\n          return null\n        }\n      }\n\n      if (p1 == -1) {\n        if (\n          !e.repeat &&\n          (right || down) &&\n          input.selectionStart == input.value.length\n        ) {\n          return [0, 0]\n        }\n\n        return null\n      }\n\n      if (left || right) {\n        let row = grid[p1]\n        const increment = left ? -1 : 1\n\n        p2 += increment\n        if (!row[p2]) {\n          p1 += increment\n          row = grid[p1]\n\n          if (!row) {\n            p1 = left ? 0 : grid.length - 1\n            p2 = left ? 0 : grid[p1].length - 1\n\n            return [p1, p2]\n          }\n\n          p2 = left ? row.length - 1 : 0\n        }\n\n        return [p1, p2]\n      }\n\n      if (up || down) {\n        p1 += up ? -1 : 1\n        const row = grid[p1]\n\n        if (!row) {\n          p1 = up ? 0 : grid.length - 1\n          p2 = up ? 0 : grid[p1].length - 1\n\n          return [p1, p2]\n        }\n\n        if (!row[p2]) {\n          p2 = row.length - 1\n        }\n\n        return [p1, p2]\n      }\n    })()\n\n    if (pos) {\n      e.preventDefault()\n    } else {\n      if (this.state.pos[0] > -1) {\n        this.setState({ pos: [-1, -1] })\n      }\n\n      return\n    }\n\n    this.setState({ pos, keyboard: true }, () => {\n      this.scrollTo({ row: pos[0] })\n    })\n  }\n\n  scrollTo({ categoryId, row }) {\n    const grid = this.state.searchResults || this.grid\n    if (!grid.length) return\n\n    const scroll = this.refs.scroll.current\n    const scrollRect = scroll.getBoundingClientRect()\n\n    let scrollTop = 0\n\n    if (row >= 0) {\n      categoryId = grid[row].__categoryId\n    }\n\n    if (categoryId) {\n      const ref =\n        this.refs[categoryId] || this.refs.categories.get(categoryId).root\n      const categoryRect = ref.current.getBoundingClientRect()\n\n      scrollTop = categoryRect.top - (scrollRect.top - scroll.scrollTop) + 1\n    }\n\n    if (row >= 0) {\n      if (!row) {\n        scrollTop = 0\n      } else {\n        const rowIndex = grid[row].__index\n        const rowTop = scrollTop + rowIndex * this.props.emojiButtonSize\n        const rowBot =\n          rowTop +\n          this.props.emojiButtonSize +\n          this.props.emojiButtonSize * 0.88\n\n        if (rowTop < scroll.scrollTop) {\n          scrollTop = rowTop\n        } else if (rowBot > scroll.scrollTop + scrollRect.height) {\n          scrollTop = rowBot - scrollRect.height\n        } else {\n          return\n        }\n      }\n    }\n\n    this.ignoreMouse()\n    scroll.scrollTop = scrollTop\n  }\n\n  ignoreMouse() {\n    this.mouseIsIgnored = true\n    clearTimeout(this.ignoreMouseTimer)\n    this.ignoreMouseTimer = setTimeout(() => {\n      delete this.mouseIsIgnored\n    }, 100)\n  }\n\n  handleCategoryClick = ({ category, i }) => {\n    this.scrollTo(i == 0 ? { row: -1 } : { categoryId: category.id })\n  }\n\n  handleEmojiOver(pos) {\n    if (this.mouseIsIgnored || this.state.showSkins) return\n    this.setState({ pos: pos || [-1, -1], keyboard: false })\n  }\n\n  handleEmojiClick({ e, emoji, pos }) {\n    if (!this.props.onEmojiSelect) return\n\n    if (!emoji && pos) {\n      emoji = this.getEmojiByPos(pos)\n    }\n\n    if (emoji) {\n      const emojiData = getEmojiData(emoji, { skinIndex: this.state.skin - 1 })\n\n      if (this.props.maxFrequentRows) {\n        FrequentlyUsed.add(emojiData, this.props)\n      }\n\n      this.props.onEmojiSelect(emojiData, e)\n    }\n  }\n\n  openSkins = (e) => {\n    const { currentTarget } = e\n    const rect = currentTarget.getBoundingClientRect()\n\n    this.setState({ showSkins: rect }, async () => {\n      // Firefox requires 2 frames for the transition to consistenly work\n      await sleep(2)\n\n      const menu = this.refs.menu.current\n      if (!menu) return\n\n      menu.classList.remove('hidden')\n      this.refs.skinToneRadio.current.focus()\n\n      this.base.addEventListener('click', this.handleBaseClick, true)\n      this.base.addEventListener('keydown', this.handleBaseKeydown, true)\n    })\n  }\n\n  closeSkins() {\n    if (!this.state.showSkins) return\n    this.setState({ showSkins: null, tempSkin: null })\n\n    this.base.removeEventListener('click', this.handleBaseClick)\n    this.base.removeEventListener('keydown', this.handleBaseKeydown)\n  }\n\n  handleSkinMouseOver(tempSkin) {\n    this.setState({ tempSkin })\n  }\n\n  handleSkinClick(skin) {\n    this.ignoreMouse()\n    this.closeSkins()\n\n    this.setState({ skin, tempSkin: null })\n    Store.set('skin', skin)\n  }\n\n  renderNav() {\n    return (\n      <Navigation\n        key={this.navKey}\n        ref={this.refs.navigation}\n        icons={this.props.icons}\n        theme={this.state.theme}\n        dir={this.dir}\n        unfocused={!!this.state.searchResults}\n        position={this.props.navPosition}\n        onClick={this.handleCategoryClick}\n      />\n    )\n  }\n\n  renderPreview() {\n    const emoji = this.getEmojiByPos(this.state.pos)\n    const noSearchResults =\n      this.state.searchResults && !this.state.searchResults.length\n\n    return (\n      <div\n        id=\"preview\"\n        class=\"flex flex-middle\"\n        dir={this.dir}\n        data-position={this.props.previewPosition}\n      >\n        <div class=\"flex flex-middle flex-grow\">\n          <div\n            class=\"flex flex-auto flex-middle flex-center\"\n            style={{\n              height: this.props.emojiButtonSize,\n              fontSize: this.props.emojiButtonSize,\n            }}\n          >\n            <Emoji\n              emoji={emoji}\n              id={\n                noSearchResults\n                  ? this.props.noResultsEmoji || 'cry'\n                  : this.props.previewEmoji ||\n                    (this.props.previewPosition == 'top'\n                      ? 'point_down'\n                      : 'point_up')\n              }\n              set={this.props.set}\n              size={this.props.emojiButtonSize}\n              skin={this.state.tempSkin || this.state.skin}\n              spritesheet={true}\n              getSpritesheetURL={this.props.getSpritesheetURL}\n            />\n          </div>\n\n          <div class={`margin-${this.dir[0]}`}>\n            {emoji || noSearchResults ? (\n              <div class={`padding-${this.dir[2]} align-${this.dir[0]}`}>\n                <div class=\"preview-title ellipsis\">\n                  {emoji ? emoji.name : I18n.search_no_results_1}\n                </div>\n                <div class=\"preview-subtitle ellipsis color-c\">\n                  {emoji ? emoji.skins[0].shortcodes : I18n.search_no_results_2}\n                </div>\n              </div>\n            ) : (\n              <div class=\"preview-placeholder color-c\">{I18n.pick}</div>\n            )}\n          </div>\n        </div>\n\n        {!emoji &&\n          this.props.skinTonePosition == 'preview' &&\n          this.renderSkinToneButton()}\n      </div>\n    )\n  }\n\n  renderEmojiButton(emoji, { pos, posinset, grid }) {\n    const size = this.props.emojiButtonSize\n    const skin = this.state.tempSkin || this.state.skin\n    const emojiSkin = emoji.skins[skin - 1] || emoji.skins[0]\n    const native = emojiSkin.native\n    const selected = deepEqual(this.state.pos, pos)\n    const key = pos.concat(emoji.id).join('')\n\n    return (\n      <PureInlineComponent key={key} {...{ selected, skin, size }}>\n        <button\n          aria-label={native}\n          aria-selected={selected || undefined}\n          aria-posinset={posinset}\n          aria-setsize={grid.setsize}\n          data-keyboard={this.state.keyboard}\n          title={this.props.previewPosition == 'none' ? emoji.name : undefined}\n          type=\"button\"\n          class=\"flex flex-center flex-middle\"\n          tabindex=\"-1\"\n          onClick={(e) => this.handleEmojiClick({ e, emoji })}\n          onMouseEnter={() => this.handleEmojiOver(pos)}\n          onMouseLeave={() => this.handleEmojiOver()}\n          style={{\n            width: this.props.emojiButtonSize,\n            height: this.props.emojiButtonSize,\n            fontSize: this.props.emojiSize,\n            lineHeight: 0,\n          }}\n        >\n          <div\n            aria-hidden=\"true\"\n            class=\"background\"\n            style={{\n              borderRadius: this.props.emojiButtonRadius,\n              backgroundColor: this.props.emojiButtonColors\n                ? this.props.emojiButtonColors[\n                    (posinset - 1) % this.props.emojiButtonColors.length\n                  ]\n                : undefined,\n            }}\n          ></div>\n          <Emoji\n            emoji={emoji}\n            set={this.props.set}\n            size={this.props.emojiSize}\n            skin={skin}\n            spritesheet={true}\n            getSpritesheetURL={this.props.getSpritesheetURL}\n          />\n        </button>\n      </PureInlineComponent>\n    )\n  }\n\n  renderSearch() {\n    const renderSkinTone =\n      this.props.previewPosition == 'none' ||\n      this.props.skinTonePosition == 'search'\n\n    return (\n      <div>\n        <div class=\"spacer\"></div>\n        <div class=\"flex flex-middle\">\n          <div class=\"search relative flex-grow\">\n            <input\n              type=\"search\"\n              ref={this.refs.searchInput}\n              placeholder={I18n.search}\n              onClick={this.handleSearchClick}\n              onInput={this.handleSearchInput}\n              onKeyDown={this.handleSearchKeyDown}\n              autoComplete=\"off\"\n            ></input>\n            <span class=\"icon loupe flex\">{Icons.search.loupe}</span>\n            {this.state.searchResults && (\n              <button\n                title=\"Clear\"\n                aria-label=\"Clear\"\n                type=\"button\"\n                class=\"icon delete flex\"\n                onClick={this.clearSearch}\n                onMouseDown={this.preventDefault}\n              >\n                {Icons.search.delete}\n              </button>\n            )}\n          </div>\n\n          {renderSkinTone && this.renderSkinToneButton()}\n        </div>\n      </div>\n    )\n  }\n\n  renderSearchResults() {\n    const { searchResults } = this.state\n    if (!searchResults) return null\n\n    return (\n      <div class=\"category\" ref={this.refs.search}>\n        <div class={`sticky padding-small align-${this.dir[0]}`}>\n          {I18n.categories.search}\n        </div>\n        <div>\n          {!searchResults.length ? (\n            <div class={`padding-small align-${this.dir[0]}`}>\n              {this.props.onAddCustomEmoji && (\n                <a onClick={this.props.onAddCustomEmoji}>{I18n.add_custom}</a>\n              )}\n            </div>\n          ) : (\n            searchResults.map((row, i) => {\n              return (\n                <div class=\"flex\">\n                  {row.map((emoji, ii) => {\n                    return this.renderEmojiButton(emoji, {\n                      pos: [i, ii],\n                      posinset: i * this.props.perLine + ii + 1,\n                      grid: searchResults,\n                    })\n                  })}\n                </div>\n              )\n            })\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  renderCategories() {\n    const { categories } = Data\n    const hidden = !!this.state.searchResults\n    const perLine = this.getPerLine()\n\n    return (\n      <div\n        style={{\n          visibility: hidden ? 'hidden' : undefined,\n          display: hidden ? 'none' : undefined,\n          height: '100%',\n        }}\n      >\n        {categories.map((category) => {\n          const { root, rows } = this.refs.categories.get(category.id)\n\n          return (\n            <div\n              data-id={category.target ? category.target.id : category.id}\n              class=\"category\"\n              ref={root}\n            >\n              <div class={`sticky padding-small align-${this.dir[0]}`}>\n                {category.name || I18n.categories[category.id]}\n              </div>\n              <div\n                class=\"relative\"\n                style={{\n                  height: rows.length * this.props.emojiButtonSize,\n                }}\n              >\n                {rows.map((row, i) => {\n                  const targetRow =\n                    row.index - (row.index % Performance.rowsPerRender)\n                  const visible = this.state.visibleRows[targetRow]\n                  const ref = 'current' in row ? row : undefined\n\n                  if (!visible && !ref) {\n                    return null\n                  }\n\n                  const start = i * perLine\n                  const end = start + perLine\n                  const emojiIds = category.emojis.slice(start, end)\n\n                  if (emojiIds.length < perLine) {\n                    emojiIds.push(...new Array(perLine - emojiIds.length))\n                  }\n\n                  return (\n                    <div\n                      key={row.index}\n                      data-index={row.index}\n                      ref={ref}\n                      class=\"flex row\"\n                      style={{ top: i * this.props.emojiButtonSize }}\n                    >\n                      {visible &&\n                        emojiIds.map((emojiId, ii) => {\n                          if (!emojiId) {\n                            return (\n                              <div\n                                style={{\n                                  width: this.props.emojiButtonSize,\n                                  height: this.props.emojiButtonSize,\n                                }}\n                              ></div>\n                            )\n                          }\n\n                          const emoji = SearchIndex.get(emojiId)\n\n                          return this.renderEmojiButton(emoji, {\n                            pos: [row.index, ii],\n                            posinset: row.posinset + ii,\n                            grid: this.grid,\n                          })\n                        })}\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  renderSkinToneButton() {\n    if (this.props.skinTonePosition == 'none') {\n      return null\n    }\n\n    return (\n      <div\n        class=\"flex flex-auto flex-center flex-middle\"\n        style={{\n          position: 'relative',\n          width: this.props.emojiButtonSize,\n          height: this.props.emojiButtonSize,\n        }}\n      >\n        <button\n          type=\"button\"\n          ref={this.refs.skinToneButton}\n          class=\"skin-tone-button flex flex-auto flex-center flex-middle\"\n          aria-selected={this.state.showSkins ? '' : undefined}\n          aria-label={I18n.skins.choose}\n          title={I18n.skins.choose}\n          onClick={this.openSkins}\n          style={{\n            width: this.props.emojiSize,\n            height: this.props.emojiSize,\n          }}\n        >\n          <span class={`skin-tone skin-tone-${this.state.skin}`}></span>\n        </button>\n      </div>\n    )\n  }\n\n  renderLiveRegion() {\n    const emoji = this.getEmojiByPos(this.state.pos)\n    const contents = emoji ? emoji.name : ''\n\n    return (\n      <div aria-live=\"polite\" class=\"sr-only\">\n        {contents}\n      </div>\n    )\n  }\n\n  renderSkins() {\n    const skinToneButton = this.refs.skinToneButton.current\n    const skinToneButtonRect = skinToneButton.getBoundingClientRect()\n    const baseRect = this.base.getBoundingClientRect()\n\n    const position = {}\n\n    if (this.dir == 'ltr') {\n      position.right = baseRect.right - skinToneButtonRect.right - 3\n    } else {\n      position.left = skinToneButtonRect.left - baseRect.left - 3\n    }\n\n    if (\n      this.props.previewPosition == 'bottom' &&\n      this.props.skinTonePosition == 'preview'\n    ) {\n      position.bottom = baseRect.bottom - skinToneButtonRect.top + 6\n    } else {\n      position.top = skinToneButtonRect.bottom - baseRect.top + 3\n      position.bottom = 'auto'\n    }\n\n    return (\n      <div\n        ref={this.refs.menu}\n        role=\"radiogroup\"\n        dir={this.dir}\n        aria-label={I18n.skins.choose}\n        class=\"menu hidden\"\n        data-position={position.top ? 'top' : 'bottom'}\n        style={position}\n      >\n        {[...Array(6).keys()].map((i) => {\n          const skin = i + 1\n          const checked = this.state.skin == skin\n\n          return (\n            <div>\n              <input\n                type=\"radio\"\n                name=\"skin-tone\"\n                value={skin}\n                aria-label={I18n.skins[skin]}\n                ref={checked ? this.refs.skinToneRadio : null}\n                defaultChecked={checked}\n                onChange={() => this.handleSkinMouseOver(skin)}\n                onKeyDown={(e) => {\n                  if (\n                    e.code == 'Enter' ||\n                    e.code == 'Space' ||\n                    e.code == 'Tab'\n                  ) {\n                    e.preventDefault()\n                    this.handleSkinClick(skin)\n                  }\n                }}\n              ></input>\n\n              <button\n                aria-hidden=\"true\"\n                tabindex=\"-1\"\n                onClick={() => this.handleSkinClick(skin)}\n                onMouseEnter={() => this.handleSkinMouseOver(skin)}\n                onMouseLeave={() => this.handleSkinMouseOver()}\n                class=\"option flex flex-grow flex-middle\"\n              >\n                <span class={`skin-tone skin-tone-${skin}`}></span>\n                <span class=\"margin-small-lr\">{I18n.skins[skin]}</span>\n              </button>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  render() {\n    const lineWidth = this.props.perLine * this.props.emojiButtonSize\n\n    return (\n      <section\n        id=\"root\"\n        class=\"flex flex-column\"\n        dir={this.dir}\n        style={{\n          width: this.props.dynamicWidth\n            ? '100%'\n            : `calc(${lineWidth}px + (var(--padding) + var(--sidebar-width)))`,\n        }}\n        data-emoji-set={this.props.set}\n        data-theme={this.state.theme}\n        data-menu={this.state.showSkins ? '' : undefined}\n      >\n        {this.props.previewPosition == 'top' && this.renderPreview()}\n        {this.props.navPosition == 'top' && this.renderNav()}\n        {this.props.searchPosition == 'sticky' && (\n          <div class=\"padding-lr\">{this.renderSearch()}</div>\n        )}\n\n        <div ref={this.refs.scroll} class=\"scroll flex-grow padding-lr\">\n          <div\n            style={{\n              width: this.props.dynamicWidth ? '100%' : lineWidth,\n              height: '100%',\n            }}\n          >\n            {this.props.searchPosition == 'static' && this.renderSearch()}\n            {this.renderSearchResults()}\n            {this.renderCategories()}\n          </div>\n        </div>\n\n        {this.props.navPosition == 'bottom' && this.renderNav()}\n        {this.props.previewPosition == 'bottom' && this.renderPreview()}\n        {this.state.showSkins && this.renderSkins()}\n        {this.renderLiveRegion()}\n      </section>\n    )\n  }\n}\n","// @ts-nocheck\nimport { render } from 'preact'\n\nimport { init, getProps } from '../../config'\nimport { ShadowElement } from '../HTMLElement'\nimport { Picker, PickerStyles } from '.'\nimport PickerProps from './PickerProps'\n\nexport default class PickerElement extends ShadowElement {\n  static Props = PickerProps\n\n  constructor(props) {\n    super(props, { styles: PickerStyles })\n  }\n\n  async connectedCallback() {\n    const props = getProps(this.props, PickerProps, this)\n    props.element = this\n    props.ref = (component) => {\n      this.component = component\n    }\n\n    await init(props)\n    if (this.disconnected) return\n\n    render(<Picker {...props} />, this.shadowRoot)\n  }\n}\n\nif (\n  typeof customElements !== 'undefined' &&\n  !customElements.get('em-emoji-picker')\n) {\n  customElements.define('em-emoji-picker', PickerElement)\n}\n","module.exports = \"565112e37e99085c\";","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z\"\n}), 'ArrowBack');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z\"\n}), 'Save');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3m5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72z\"\n}), 'Mic');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m4 14H8V8h8z\"\n}), 'StopCircle');","\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _utils.createSvgIcon;\n  }\n});\nvar _utils = require(\"@mui/material/utils\");","import generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nexport function getLoadingButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiLoadingButton', slot);\n}\nconst loadingButtonClasses = generateUtilityClasses('MuiLoadingButton', ['root', 'loading', 'loadingIndicator', 'loadingIndicatorCenter', 'loadingIndicatorStart', 'loadingIndicatorEnd', 'endIconLoadingEnd', 'startIconLoadingStart']);\nexport default loadingButtonClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"disabled\", \"id\", \"loading\", \"loadingIndicator\", \"loadingPosition\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@mui/utils';\nimport { capitalize, unstable_useId as useId } from '@mui/material/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport { ButtonGroupContext } from '@mui/material/ButtonGroup';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport resolveProps from '@mui/utils/resolveProps';\nimport loadingButtonClasses, { getLoadingButtonUtilityClass } from './loadingButtonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    loading,\n    loadingPosition,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', loading && 'loading'],\n    startIcon: [loading && `startIconLoading${capitalize(loadingPosition)}`],\n    endIcon: [loading && `endIconLoading${capitalize(loadingPosition)}`],\n    loadingIndicator: ['loadingIndicator', loading && `loadingIndicator${capitalize(loadingPosition)}`]\n  };\n  const composedClasses = composeClasses(slots, getLoadingButtonUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\n// TODO use `import { rootShouldForwardProp } from '../styles/styled';` once move to core\nconst rootShouldForwardProp = prop => prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as' && prop !== 'classes';\nconst LoadingButtonRoot = styled(Button, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiLoadingButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root, styles.startIconLoadingStart && {\n      [`& .${loadingButtonClasses.startIconLoadingStart}`]: styles.startIconLoadingStart\n    }, styles.endIconLoadingEnd && {\n      [`& .${loadingButtonClasses.endIconLoadingEnd}`]: styles.endIconLoadingEnd\n    }];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  [`& .${loadingButtonClasses.startIconLoadingStart}, & .${loadingButtonClasses.endIconLoadingEnd}`]: {\n    transition: theme.transitions.create(['opacity'], {\n      duration: theme.transitions.duration.short\n    }),\n    opacity: 0\n  }\n}, ownerState.loadingPosition === 'center' && {\n  transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color'], {\n    duration: theme.transitions.duration.short\n  }),\n  [`&.${loadingButtonClasses.loading}`]: {\n    color: 'transparent'\n  }\n}, ownerState.loadingPosition === 'start' && ownerState.fullWidth && {\n  [`& .${loadingButtonClasses.startIconLoadingStart}, & .${loadingButtonClasses.endIconLoadingEnd}`]: {\n    transition: theme.transitions.create(['opacity'], {\n      duration: theme.transitions.duration.short\n    }),\n    opacity: 0,\n    marginRight: -8\n  }\n}, ownerState.loadingPosition === 'end' && ownerState.fullWidth && {\n  [`& .${loadingButtonClasses.startIconLoadingStart}, & .${loadingButtonClasses.endIconLoadingEnd}`]: {\n    transition: theme.transitions.create(['opacity'], {\n      duration: theme.transitions.duration.short\n    }),\n    opacity: 0,\n    marginLeft: -8\n  }\n}));\nconst LoadingButtonLoadingIndicator = styled('span', {\n  name: 'MuiLoadingButton',\n  slot: 'LoadingIndicator',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.loadingIndicator, styles[`loadingIndicator${capitalize(ownerState.loadingPosition)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  position: 'absolute',\n  visibility: 'visible',\n  display: 'flex'\n}, ownerState.loadingPosition === 'start' && (ownerState.variant === 'outlined' || ownerState.variant === 'contained') && {\n  left: ownerState.size === 'small' ? 10 : 14\n}, ownerState.loadingPosition === 'start' && ownerState.variant === 'text' && {\n  left: 6\n}, ownerState.loadingPosition === 'center' && {\n  left: '50%',\n  transform: 'translate(-50%)',\n  color: (theme.vars || theme).palette.action.disabled\n}, ownerState.loadingPosition === 'end' && (ownerState.variant === 'outlined' || ownerState.variant === 'contained') && {\n  right: ownerState.size === 'small' ? 10 : 14\n}, ownerState.loadingPosition === 'end' && ownerState.variant === 'text' && {\n  right: 6\n}, ownerState.loadingPosition === 'start' && ownerState.fullWidth && {\n  position: 'relative',\n  left: -10\n}, ownerState.loadingPosition === 'end' && ownerState.fullWidth && {\n  position: 'relative',\n  right: -10\n}));\nconst LoadingButton = /*#__PURE__*/React.forwardRef(function LoadingButton(inProps, ref) {\n  const contextProps = React.useContext(ButtonGroupContext);\n  const resolvedProps = resolveProps(contextProps, inProps);\n  const props = useThemeProps({\n    props: resolvedProps,\n    name: 'MuiLoadingButton'\n  });\n  const {\n      children,\n      disabled = false,\n      id: idProp,\n      loading = false,\n      loadingIndicator: loadingIndicatorProp,\n      loadingPosition = 'center',\n      variant = 'text'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const id = useId(idProp);\n  const loadingIndicator = loadingIndicatorProp != null ? loadingIndicatorProp : /*#__PURE__*/_jsx(CircularProgress, {\n    \"aria-labelledby\": id,\n    color: \"inherit\",\n    size: 16\n  });\n  const ownerState = _extends({}, props, {\n    disabled,\n    loading,\n    loadingIndicator,\n    loadingPosition,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const loadingButtonLoadingIndicator = loading ? /*#__PURE__*/_jsx(LoadingButtonLoadingIndicator, {\n    className: classes.loadingIndicator,\n    ownerState: ownerState,\n    children: loadingIndicator\n  }) : null;\n  return /*#__PURE__*/_jsxs(LoadingButtonRoot, _extends({\n    disabled: disabled || loading,\n    id: id,\n    ref: ref\n  }, other, {\n    variant: variant,\n    classes: classes,\n    ownerState: ownerState,\n    children: [ownerState.loadingPosition === 'end' ? children : loadingButtonLoadingIndicator, ownerState.loadingPosition === 'end' ? loadingButtonLoadingIndicator : children]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? LoadingButton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the loading indicator is shown and the button becomes disabled.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Element placed before the children if the button is in loading state.\n   * The node should contain an element with `role=\"progressbar\"` with an accessible name.\n   * By default we render a `CircularProgress` that is labelled by the button itself.\n   * @default <CircularProgress color=\"inherit\" size={16} />\n   */\n  loadingIndicator: PropTypes.node,\n  /**\n   * The loading indicator can be positioned on the start, end, or the center of the button.\n   * @default 'center'\n   */\n  loadingPosition: chainPropTypes(PropTypes.oneOf(['start', 'end', 'center']), props => {\n    if (props.loadingPosition === 'start' && !props.startIcon) {\n      return new Error(`MUI: The loadingPosition=\"start\" should be used in combination with startIcon.`);\n    }\n    if (props.loadingPosition === 'end' && !props.endIcon) {\n      return new Error(`MUI: The loadingPosition=\"end\" should be used in combination with endIcon.`);\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * @default 'text'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])\n} : void 0;\nexport default LoadingButton;","import createChainedFunction from '@mui/utils/createChainedFunction';\nexport default createChainedFunction;","import deprecatedPropType from '@mui/utils/deprecatedPropType';\nexport default deprecatedPropType;","export default function deprecatedPropType(validator, reason) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n  return (props, propName, componentName, location, propFullName) => {\n    const componentNameSafe = componentName || '<<anonymous>>';\n    const propFullNameSafe = propFullName || propName;\n    if (typeof props[propName] !== 'undefined') {\n      return new Error(`The ${location} \\`${propFullNameSafe}\\` of ` + `\\`${componentNameSafe}\\` is deprecated. ${reason}`);\n    }\n    return null;\n  };\n}","import requirePropFactory from '@mui/utils/requirePropFactory';\nexport default requirePropFactory;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport default function requirePropFactory(componentNameInError, Component) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  }\n\n  // eslint-disable-next-line react/forbid-foreign-prop-types\n  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;\n  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {\n    const propFullNameSafe = propFullName || propName;\n    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];\n    if (defaultTypeChecker) {\n      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);\n      if (typeCheckerResult) {\n        return typeCheckerResult;\n      }\n    }\n    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {\n      return new Error(`The prop \\`${propFullNameSafe}\\` of ` + `\\`${componentNameInError}\\` can only be used together with the \\`${requiredProp}\\` prop.`);\n    }\n    return null;\n  };\n  return requireProp;\n}","import setRef from '@mui/utils/setRef';\nexport default setRef;","import unsupportedProp from '@mui/utils/unsupportedProp';\nexport default unsupportedProp;","export default function unsupportedProp(props, propName, componentName, location, propFullName) {\n  if (process.env.NODE_ENV === 'production') {\n    return null;\n  }\n  const propFullNameSafe = propFullName || propName;\n  if (typeof props[propName] !== 'undefined') {\n    return new Error(`The prop \\`${propFullNameSafe}\\` is not supported. Please remove it.`);\n  }\n  return null;\n}","'use client';\n\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/base/ClassNameGenerator';\nexport { default as capitalize } from './capitalize';\nexport { default as createChainedFunction } from './createChainedFunction';\nexport { default as createSvgIcon } from './createSvgIcon';\nexport { default as debounce } from './debounce';\nexport { default as deprecatedPropType } from './deprecatedPropType';\nexport { default as isMuiElement } from './isMuiElement';\nexport { default as ownerDocument } from './ownerDocument';\nexport { default as ownerWindow } from './ownerWindow';\nexport { default as requirePropFactory } from './requirePropFactory';\nexport { default as setRef } from './setRef';\nexport { default as unstable_useEnhancedEffect } from './useEnhancedEffect';\nexport { default as unstable_useId } from './useId';\nexport { default as unsupportedProp } from './unsupportedProp';\nexport { default as useControlled } from './useControlled';\nexport { default as useEventCallback } from './useEventCallback';\nexport { default as useForkRef } from './useForkRef';\nexport { default as useIsFocusVisible } from './useIsFocusVisible';\n// TODO: remove this export once ClassNameGenerator is stable\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_ClassNameGenerator = {\n  configure: generator => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', \"You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead\", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\\n'));\n    }\n    ClassNameGenerator.configure(generator);\n  }\n};","'use client';\n\nimport useId from '@mui/utils/useId';\nexport default useId;","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\nfunction ATH() {\n    /**\n     * Method for the auto adjustment.\n     */\n    this.useAdjust = 0;\n    /**\n     * factor for tuning the (sample power) point below which adaptive threshold\n     * of hearing adjustment occurs\n     */\n    this.aaSensitivityP = 0.;\n    /**\n     * Lowering based on peak volume, 1 = no lowering.\n     */\n    this.adjust = 0.;\n    /**\n     * Limit for dynamic ATH adjust.\n     */\n    this.adjustLimit = 0.;\n    /**\n     * Determined to lower x dB each second.\n     */\n    this.decay = 0.;\n    /**\n     * Lowest ATH value.\n     */\n    this.floor = 0.;\n    /**\n     * ATH for sfbs in long blocks.\n     */\n    this.l = new_float(Encoder.SBMAX_l);\n    /**\n     * ATH for sfbs in short blocks.\n     */\n    this.s = new_float(Encoder.SBMAX_s);\n    /**\n     * ATH for partitioned sfb21 in long blocks.\n     */\n    this.psfb21 = new_float(Encoder.PSFB21);\n    /**\n     * ATH for partitioned sfb12 in short blocks.\n     */\n    this.psfb12 = new_float(Encoder.PSFB12);\n    /**\n     * ATH for long block convolution bands.\n     */\n    this.cb_l = new_float(Encoder.CBANDS);\n    /**\n     * ATH for short block convolution bands.\n     */\n    this.cb_s = new_float(Encoder.CBANDS);\n    /**\n     * Equal loudness weights (based on ATH).\n     */\n    this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\n\nmodule.exports = ATH;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Takehiro = require('./Takehiro.js');\nvar Tables = require('./Tables.js');\nvar Encoder = require('./Encoder.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nBitStream.EQ = function (a, b) {\n    return (Math.abs(a) > Math.abs(b)) ? (Math.abs((a) - (b)) <= (Math\n        .abs(a) * 1e-6))\n        : (Math.abs((a) - (b)) <= (Math.abs(b) * 1e-6));\n};\n\nBitStream.NEQ = function (a, b) {\n    return !BitStream.EQ(a, b);\n};\n\nfunction BitStream() {\n    var Lame = require('./Lame.js');\n    var self = this;\n    var CRC16_POLYNOMIAL = 0x8005;\n\n    /*\n     * we work with ints, so when doing bit manipulation, we limit ourselves to\n     * MAX_LENGTH-2 just to be on the safe side\n     */\n    var MAX_LENGTH = 32;\n\n    //GainAnalysis ga;\n    //MPGLib mpg;\n    //Version ver;\n    //VBRTag vbr;\n    var ga = null;\n    var mpg = null;\n    var ver = null;\n    var vbr = null;\n\n    //public final void setModules(GainAnalysis ga, MPGLib mpg, Version ver,\n    //\tVBRTag vbr) {\n\n    this.setModules = function (_ga, _mpg, _ver, _vbr) {\n        ga = _ga;\n        mpg = _mpg;\n        ver = _ver;\n        vbr = _vbr;\n    };\n\n    /**\n     * Bit stream buffer.\n     */\n    //private byte[] buf;\n    var buf = null;\n    /**\n     * Bit counter of bit stream.\n     */\n    var totbit = 0;\n    /**\n     * Pointer to top byte in buffer.\n     */\n    var bufByteIdx = 0;\n    /**\n     * Pointer to top bit of top byte in buffer.\n     */\n    var bufBitIdx = 0;\n\n    /**\n     * compute bitsperframe and mean_bits for a layer III frame\n     */\n    this.getframebits = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var bit_rate;\n\n        /* get bitrate in kbps [?] */\n        if (gfc.bitrate_index != 0)\n            bit_rate = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        else\n            bit_rate = gfp.brate;\n        assert(8 <= bit_rate && bit_rate <= 640);\n\n        /* main encoding routine toggles padding on and off */\n        /* one Layer3 Slot consists of 8 bits */\n        var bytes = 0 | (gfp.version + 1) * 72000 * bit_rate / gfp.out_samplerate + gfc.padding;\n        return 8 * bytes;\n    };\n\n    function putheader_bits(gfc) {\n        System.arraycopy(gfc.header[gfc.w_ptr].buf, 0, buf, bufByteIdx, gfc.sideinfo_len);\n        bufByteIdx += gfc.sideinfo_len;\n        totbit += gfc.sideinfo_len * 8;\n        gfc.w_ptr = (gfc.w_ptr + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n    }\n\n    /**\n     * write j bits into the bit stream\n     */\n    function putbits2(gfc, val, j) {\n        assert(j < MAX_LENGTH - 2);\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                assert(bufByteIdx < Lame.LAME_MAXMP3BUFFER);\n                assert(gfc.header[gfc.w_ptr].write_timing >= totbit);\n                if (gfc.header[gfc.w_ptr].write_timing == totbit) {\n                    putheader_bits(gfc);\n                }\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            assert(j < MAX_LENGTH);\n            /* 32 too large on 32 bit machines */\n            assert(bufBitIdx < MAX_LENGTH);\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * write j bits into the bit stream, ignoring frame headers\n     */\n    function putbits_noheaders(gfc, val, j) {\n        assert(j < MAX_LENGTH - 2);\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                assert(bufByteIdx < Lame.LAME_MAXMP3BUFFER);\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            assert(j < MAX_LENGTH);\n            /* 32 too large on 32 bit machines */\n            assert(bufBitIdx < MAX_LENGTH);\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    /**\n     * Some combinations of bitrate, Fs, and stereo make it impossible to stuff\n     * out a frame using just main_data, due to the limited number of bits to\n     * indicate main_data_length. In these situations, we put stuffing bits into\n     * the ancillary data...\n     */\n    function drain_into_ancillary(gfp, remainingBits) {\n        var gfc = gfp.internal_flags;\n        var i;\n        assert(remainingBits >= 0);\n\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4c, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x41, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4d, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x45, 8);\n            remainingBits -= 8;\n        }\n\n        if (remainingBits >= 32) {\n            var version = ver.getLameShortVersion();\n            if (remainingBits >= 32)\n                for (i = 0; i < version.length && remainingBits >= 8; ++i) {\n                    remainingBits -= 8;\n                    putbits2(gfc, version.charAt(i), 8);\n                }\n        }\n\n        for (; remainingBits >= 1; remainingBits -= 1) {\n            putbits2(gfc, gfc.ancillary_flag, 1);\n            gfc.ancillary_flag ^= (!gfp.disable_reservoir ? 1 : 0);\n        }\n\n        assert(remainingBits == 0);\n\n    }\n\n    /**\n     * write N bits into the header\n     */\n    function writeheader(gfc, val, j) {\n        var ptr = gfc.header[gfc.h_ptr].ptr;\n\n        while (j > 0) {\n            var k = Math.min(j, 8 - (ptr & 7));\n            j -= k;\n            assert(j < MAX_LENGTH);\n            /* >> 32 too large for 32 bit machines */\n\n            gfc.header[gfc.h_ptr].buf[ptr >> 3] |= ((val >> j)) << (8 - (ptr & 7) - k);\n            ptr += k;\n        }\n        gfc.header[gfc.h_ptr].ptr = ptr;\n    }\n\n    function CRC_update(value, crc) {\n        value <<= 8;\n        for (var i = 0; i < 8; i++) {\n            value <<= 1;\n            crc <<= 1;\n\n            if ((((crc ^ value) & 0x10000) != 0))\n                crc ^= CRC16_POLYNOMIAL;\n        }\n        return crc;\n    }\n\n    this.CRC_writeheader = function (gfc, header) {\n        var crc = 0xffff;\n        /* (jo) init crc16 for error_protection */\n\n        crc = CRC_update(header[2] & 0xff, crc);\n        crc = CRC_update(header[3] & 0xff, crc);\n        for (var i = 6; i < gfc.sideinfo_len; i++) {\n            crc = CRC_update(header[i] & 0xff, crc);\n        }\n\n        header[4] = (byte)(crc >> 8);\n        header[5] = (byte)(crc & 255);\n    };\n\n    function encodeSideInfo2(gfp, bitsPerFrame) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var gr, ch;\n\n        l3_side = gfc.l3_side;\n        gfc.header[gfc.h_ptr].ptr = 0;\n        Arrays.fill(gfc.header[gfc.h_ptr].buf, 0, gfc.sideinfo_len, 0);\n        if (gfp.out_samplerate < 16000)\n            writeheader(gfc, 0xffe, 12);\n        else\n            writeheader(gfc, 0xfff, 12);\n        writeheader(gfc, (gfp.version), 1);\n        writeheader(gfc, 4 - 3, 2);\n        writeheader(gfc, (!gfp.error_protection ? 1 : 0), 1);\n        writeheader(gfc, (gfc.bitrate_index), 4);\n        writeheader(gfc, (gfc.samplerate_index), 2);\n        writeheader(gfc, (gfc.padding), 1);\n        writeheader(gfc, (gfp.extension), 1);\n        writeheader(gfc, (gfp.mode.ordinal()), 2);\n        writeheader(gfc, (gfc.mode_ext), 2);\n        writeheader(gfc, (gfp.copyright), 1);\n        writeheader(gfc, (gfp.original), 1);\n        writeheader(gfc, (gfp.emphasis), 2);\n        if (gfp.error_protection) {\n            writeheader(gfc, 0, 16);\n            /* dummy */\n        }\n\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            assert(l3_side.main_data_begin >= 0);\n            writeheader(gfc, (l3_side.main_data_begin), 9);\n\n            if (gfc.channels_out == 2)\n                writeheader(gfc, l3_side.private_bits, 3);\n            else\n                writeheader(gfc, l3_side.private_bits, 5);\n\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var band;\n                for (band = 0; band < 4; band++) {\n                    writeheader(gfc, l3_side.scfsi[ch][band], 1);\n                }\n            }\n\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                    writeheader(gfc, gi.big_values / 2, 9);\n                    writeheader(gfc, gi.global_gain, 8);\n                    writeheader(gfc, gi.scalefac_compress, 4);\n\n                    if (gi.block_type != Encoder.NORM_TYPE) {\n                        writeheader(gfc, 1, 1);\n                        /* window_switching_flag */\n                        writeheader(gfc, gi.block_type, 2);\n                        writeheader(gfc, gi.mixed_block_flag, 1);\n\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n\n                        writeheader(gfc, gi.subblock_gain[0], 3);\n                        writeheader(gfc, gi.subblock_gain[1], 3);\n                        writeheader(gfc, gi.subblock_gain[2], 3);\n                    } else {\n                        writeheader(gfc, 0, 1);\n                        /* window_switching_flag */\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n                        if (gi.table_select[2] == 14)\n                            gi.table_select[2] = 16;\n                        writeheader(gfc, gi.table_select[2], 5);\n\n                        assert(0 <= gi.region0_count && gi.region0_count < 16);\n                        assert(0 <= gi.region1_count && gi.region1_count < 8);\n                        writeheader(gfc, gi.region0_count, 4);\n                        writeheader(gfc, gi.region1_count, 3);\n                    }\n                    writeheader(gfc, gi.preflag, 1);\n                    writeheader(gfc, gi.scalefac_scale, 1);\n                    writeheader(gfc, gi.count1table_select, 1);\n                }\n            }\n        } else {\n            /* MPEG2 */\n            assert(l3_side.main_data_begin >= 0);\n            writeheader(gfc, (l3_side.main_data_begin), 8);\n            writeheader(gfc, l3_side.private_bits, gfc.channels_out);\n\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                writeheader(gfc, gi.big_values / 2, 9);\n                writeheader(gfc, gi.global_gain, 8);\n                writeheader(gfc, gi.scalefac_compress, 9);\n\n                if (gi.block_type != Encoder.NORM_TYPE) {\n                    writeheader(gfc, 1, 1);\n                    /* window_switching_flag */\n                    writeheader(gfc, gi.block_type, 2);\n                    writeheader(gfc, gi.mixed_block_flag, 1);\n\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n\n                    writeheader(gfc, gi.subblock_gain[0], 3);\n                    writeheader(gfc, gi.subblock_gain[1], 3);\n                    writeheader(gfc, gi.subblock_gain[2], 3);\n                } else {\n                    writeheader(gfc, 0, 1);\n                    /* window_switching_flag */\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n                    if (gi.table_select[2] == 14)\n                        gi.table_select[2] = 16;\n                    writeheader(gfc, gi.table_select[2], 5);\n\n                    assert(0 <= gi.region0_count && gi.region0_count < 16);\n                    assert(0 <= gi.region1_count && gi.region1_count < 8);\n                    writeheader(gfc, gi.region0_count, 4);\n                    writeheader(gfc, gi.region1_count, 3);\n                }\n\n                writeheader(gfc, gi.scalefac_scale, 1);\n                writeheader(gfc, gi.count1table_select, 1);\n            }\n        }\n\n        if (gfp.error_protection) {\n            /* (jo) error_protection: add crc16 information to header */\n            CRC_writeheader(gfc, gfc.header[gfc.h_ptr].buf);\n        }\n\n        {\n            var old = gfc.h_ptr;\n            assert(gfc.header[old].ptr == gfc.sideinfo_len * 8);\n\n            gfc.h_ptr = (old + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n            gfc.header[gfc.h_ptr].write_timing = gfc.header[old].write_timing\n                + bitsPerFrame;\n\n            if (gfc.h_ptr == gfc.w_ptr) {\n                /* yikes! we are out of header buffer space */\n                System.err\n                    .println(\"Error: MAX_HEADER_BUF too small in bitstream.c \\n\");\n            }\n\n        }\n    }\n\n    function huffman_coder_count1(gfc, gi) {\n        /* Write count1 area */\n        var h = Tables.ht[gi.count1table_select + 32];\n        var i, bits = 0;\n\n        var ix = gi.big_values;\n        var xr = gi.big_values;\n        assert(gi.count1table_select < 2);\n\n        for (i = (gi.count1 - gi.big_values) / 4; i > 0; --i) {\n            var huffbits = 0;\n            var p = 0, v;\n\n            v = gi.l3_enc[ix + 0];\n            if (v != 0) {\n                p += 8;\n                if (gi.xr[xr + 0] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 1];\n            if (v != 0) {\n                p += 4;\n                huffbits *= 2;\n                if (gi.xr[xr + 1] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 2];\n            if (v != 0) {\n                p += 2;\n                huffbits *= 2;\n                if (gi.xr[xr + 2] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            v = gi.l3_enc[ix + 3];\n            if (v != 0) {\n                p++;\n                huffbits *= 2;\n                if (gi.xr[xr + 3] < 0)\n                    huffbits++;\n                assert(v <= 1);\n            }\n\n            ix += 4;\n            xr += 4;\n            putbits2(gfc, huffbits + h.table[p], h.hlen[p]);\n            bits += h.hlen[p];\n        }\n        return bits;\n    }\n\n    /**\n     * Implements the pseudocode of page 98 of the IS\n     */\n    function Huffmancode(gfc, tableindex, start, end, gi) {\n        var h = Tables.ht[tableindex];\n        var bits = 0;\n\n        assert(tableindex < 32);\n        if (0 == tableindex)\n            return bits;\n\n        for (var i = start; i < end; i += 2) {\n            var cbits = 0;\n            var xbits = 0;\n            var linbits = h.xlen;\n            var xlen = h.xlen;\n            var ext = 0;\n            var x1 = gi.l3_enc[i];\n            var x2 = gi.l3_enc[i + 1];\n\n            if (x1 != 0) {\n                if (gi.xr[i] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            if (tableindex > 15) {\n                /* use ESC-words */\n                if (x1 > 14) {\n                    var linbits_x1 = x1 - 15;\n                    assert(linbits_x1 <= h.linmax);\n                    ext |= linbits_x1 << 1;\n                    xbits = linbits;\n                    x1 = 15;\n                }\n\n                if (x2 > 14) {\n                    var linbits_x2 = x2 - 15;\n                    assert(linbits_x2 <= h.linmax);\n                    ext <<= linbits;\n                    ext |= linbits_x2;\n                    xbits += linbits;\n                    x2 = 15;\n                }\n                xlen = 16;\n            }\n\n            if (x2 != 0) {\n                ext <<= 1;\n                if (gi.xr[i + 1] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            assert((x1 | x2) < 16);\n\n            x1 = x1 * xlen + x2;\n            xbits -= cbits;\n            cbits += h.hlen[x1];\n\n            assert(cbits <= MAX_LENGTH);\n            assert(xbits <= MAX_LENGTH);\n\n            putbits2(gfc, h.table[x1], cbits);\n            putbits2(gfc, ext, xbits);\n            bits += cbits + xbits;\n        }\n        return bits;\n    }\n\n    /**\n     * Note the discussion of huffmancodebits() on pages 28 and 29 of the IS, as\n     * well as the definitions of the side information on pages 26 and 27.\n     */\n    function ShortHuffmancodebits(gfc, gi) {\n        var region1Start = 3 * gfc.scalefac_band.s[3];\n        if (region1Start > gi.big_values)\n            region1Start = gi.big_values;\n\n        /* short blocks do not have a region2 */\n        var bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            gi.big_values, gi);\n        return bits;\n    }\n\n    function LongHuffmancodebits(gfc, gi) {\n        var bigvalues, bits;\n        var region1Start, region2Start;\n\n        bigvalues = gi.big_values;\n        assert(0 <= bigvalues && bigvalues <= 576);\n\n        var i = gi.region0_count + 1;\n        assert(0 <= i);\n        assert(i < gfc.scalefac_band.l.length);\n        region1Start = gfc.scalefac_band.l[i];\n        i += gi.region1_count + 1;\n        assert(0 <= i);\n        assert(i < gfc.scalefac_band.l.length);\n        region2Start = gfc.scalefac_band.l[i];\n\n        if (region1Start > bigvalues)\n            region1Start = bigvalues;\n\n        if (region2Start > bigvalues)\n            region2Start = bigvalues;\n\n        bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            region2Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[2], region2Start, bigvalues,\n            gi);\n        return bits;\n    }\n\n    function writeMainData(gfp) {\n        var gr, ch, sfb, data_bits, tot_bits = 0;\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n\n        if (gfp.version == 1) {\n            /* MPEG 1 */\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    var slen1 = Takehiro.slen1_tab[gi.scalefac_compress];\n                    var slen2 = Takehiro.slen2_tab[gi.scalefac_compress];\n                    data_bits = 0;\n                    for (sfb = 0; sfb < gi.sfbdivide; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen1);\n                        data_bits += slen1;\n                    }\n                    for (; sfb < gi.sfbmax; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen2);\n                        data_bits += slen2;\n                    }\n                    assert(data_bits == gi.part2_length);\n\n                    if (gi.block_type == Encoder.SHORT_TYPE) {\n                        data_bits += ShortHuffmancodebits(gfc, gi);\n                    } else {\n                        data_bits += LongHuffmancodebits(gfc, gi);\n                    }\n                    data_bits += huffman_coder_count1(gfc, gi);\n                    /* does bitcount in quantize.c agree with actual bit count? */\n                    assert(data_bits == gi.part2_3_length + gi.part2_length);\n                    tot_bits += data_bits;\n                }\n                /* for ch */\n            }\n            /* for gr */\n        } else {\n            /* MPEG 2 */\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                var i, sfb_partition, scale_bits = 0;\n                assert(gi.sfb_partition_table != null);\n                data_bits = 0;\n                sfb = 0;\n                sfb_partition = 0;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition] / 3;\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 0], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 1], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 2], 0), slen);\n                            scale_bits += 3 * slen;\n                        }\n                    }\n                    data_bits += ShortHuffmancodebits(gfc, gi);\n                } else {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition];\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc, Math.max(gi.scalefac[sfb], 0), slen);\n                            scale_bits += slen;\n                        }\n                    }\n                    data_bits += LongHuffmancodebits(gfc, gi);\n                }\n                data_bits += huffman_coder_count1(gfc, gi);\n                /* does bitcount in quantize.c agree with actual bit count? */\n                assert(data_bits == gi.part2_3_length);\n                assert(scale_bits == gi.part2_length);\n                tot_bits += scale_bits + data_bits;\n            }\n            /* for ch */\n        }\n        /* for gf */\n        return tot_bits;\n    }\n\n    /* main_data */\n\n    function TotalBytes() {\n        this.total = 0;\n    }\n\n    /*\n     * compute the number of bits required to flush all mp3 frames currently in\n     * the buffer. This should be the same as the reservoir size. Only call this\n     * routine between frames - i.e. only after all headers and data have been\n     * added to the buffer by format_bitstream().\n     *\n     * Also compute total_bits_output = size of mp3 buffer (including frame\n     * headers which may not have yet been send to the mp3 buffer) + number of\n     * bits needed to flush all mp3 frames.\n     *\n     * total_bytes_output is the size of the mp3 output buffer if\n     * lame_encode_flush_nogap() was called right now.\n     */\n    function compute_flushbits(gfp, total_bytes_output) {\n        var gfc = gfp.internal_flags;\n        var flushbits, remaining_headers;\n        var bitsPerFrame;\n        var last_ptr, first_ptr;\n        first_ptr = gfc.w_ptr;\n        /* first header to add to bitstream */\n        last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n\n        /* add this many bits to bitstream so we can flush all headers */\n        flushbits = gfc.header[last_ptr].write_timing - totbit;\n        total_bytes_output.total = flushbits;\n\n        if (flushbits >= 0) {\n            /* if flushbits >= 0, some headers have not yet been written */\n            /* reduce flushbits by the size of the headers */\n            remaining_headers = 1 + last_ptr - first_ptr;\n            if (last_ptr < first_ptr)\n                remaining_headers = 1 + last_ptr - first_ptr\n                    + LameInternalFlags.MAX_HEADER_BUF;\n            flushbits -= remaining_headers * 8 * gfc.sideinfo_len;\n        }\n\n        /*\n         * finally, add some bits so that the last frame is complete these bits\n         * are not necessary to decode the last frame, but some decoders will\n         * ignore last frame if these bits are missing\n         */\n        bitsPerFrame = self.getframebits(gfp);\n        flushbits += bitsPerFrame;\n        total_bytes_output.total += bitsPerFrame;\n        /* round up: */\n        if ((total_bytes_output.total % 8) != 0)\n            total_bytes_output.total = 1 + (total_bytes_output.total / 8);\n        else\n            total_bytes_output.total = (total_bytes_output.total / 8);\n        total_bytes_output.total += bufByteIdx + 1;\n\n        if (flushbits < 0) {\n            System.err.println(\"strange error flushing buffer ... \\n\");\n        }\n        return flushbits;\n    }\n\n    this.flush_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var flushbits;\n        var last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n        l3_side = gfc.l3_side;\n\n        if ((flushbits = compute_flushbits(gfp, new TotalBytes())) < 0)\n            return;\n        drain_into_ancillary(gfp, flushbits);\n\n        /* check that the 100% of the last frame has been written to bitstream */\n        assert(gfc.header[last_ptr].write_timing + this.getframebits(gfp) == totbit);\n\n        /*\n         * we have padded out all frames with ancillary data, which is the same\n         * as filling the bitreservoir with ancillary data, so :\n         */\n        gfc.ResvSize = 0;\n        l3_side.main_data_begin = 0;\n\n        /* save the ReplayGain value */\n        if (gfc.findReplayGain) {\n            var RadioGain = ga.GetTitleGain(gfc.rgdata);\n            assert(NEQ(RadioGain, GainAnalysis.GAIN_NOT_ENOUGH_SAMPLES));\n            gfc.RadioGain = Math.floor(RadioGain * 10.0 + 0.5) | 0;\n            /* round to nearest */\n        }\n\n        /* find the gain and scale change required for no clipping */\n        if (gfc.findPeakSample) {\n            gfc.noclipGainChange = Math.ceil(Math\n                        .log10(gfc.PeakSample / 32767.0) * 20.0 * 10.0) | 0;\n            /* round up */\n\n            if (gfc.noclipGainChange > 0) {\n                /* clipping occurs */\n                if (EQ(gfp.scale, 1.0) || EQ(gfp.scale, 0.0))\n                    gfc.noclipScale = (Math\n                        .floor((32767.0 / gfc.PeakSample) * 100.0) / 100.0);\n                /* round down */\n                else {\n                    /*\n                     * the user specified his own scaling factor. We could\n                     * suggest the scaling factor of\n                     * (32767.0/gfp.PeakSample)*(gfp.scale) but it's usually\n                     * very inaccurate. So we'd rather not advice him on the\n                     * scaling factor.\n                     */\n                    gfc.noclipScale = -1;\n                }\n            } else\n            /* no clipping */\n                gfc.noclipScale = -1;\n        }\n    };\n\n    this.add_dummy_byte = function (gfp, val, n) {\n        var gfc = gfp.internal_flags;\n        var i;\n\n        while (n-- > 0) {\n            putbits_noheaders(gfc, val, 8);\n\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing += 8;\n        }\n    };\n\n    /**\n     * This is called after a frame of audio has been quantized and coded. It\n     * will write the encoded audio to the bitstream. Note that from a layer3\n     * encoder's perspective the bit stream is primarily a series of main_data()\n     * blocks, with header and side information inserted at the proper locations\n     * to maintain framing. (See Figure A.7 in the IS).\n     */\n    this.format_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        l3_side = gfc.l3_side;\n\n        var bitsPerFrame = this.getframebits(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_pre);\n\n        encodeSideInfo2(gfp, bitsPerFrame);\n        var bits = 8 * gfc.sideinfo_len;\n        bits += writeMainData(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_post);\n        bits += l3_side.resvDrain_post;\n\n        l3_side.main_data_begin += (bitsPerFrame - bits) / 8;\n\n        /*\n         * compare number of bits needed to clear all buffered mp3 frames with\n         * what we think the resvsize is:\n         */\n        if (compute_flushbits(gfp, new TotalBytes()) != gfc.ResvSize) {\n            System.err.println(\"Internal buffer inconsistency. flushbits <> ResvSize\");\n        }\n\n        /*\n         * compare main_data_begin for the next frame with what we think the\n         * resvsize is:\n         */\n        if ((l3_side.main_data_begin * 8) != gfc.ResvSize) {\n            System.err.printf(\"bit reservoir error: \\n\"\n                + \"l3_side.main_data_begin: %d \\n\"\n                + \"Resvoir size:             %d \\n\"\n                + \"resv drain (post)         %d \\n\"\n                + \"resv drain (pre)          %d \\n\"\n                + \"header and sideinfo:      %d \\n\"\n                + \"data bits:                %d \\n\"\n                + \"total bits:               %d (remainder: %d) \\n\"\n                + \"bitsperframe:             %d \\n\",\n                8 * l3_side.main_data_begin, gfc.ResvSize,\n                l3_side.resvDrain_post, l3_side.resvDrain_pre,\n                8 * gfc.sideinfo_len, bits - l3_side.resvDrain_post - 8\n                * gfc.sideinfo_len, bits, bits % 8, bitsPerFrame);\n\n            System.err.println(\"This is a fatal error.  It has several possible causes:\");\n            System.err.println(\"90%%  LAME compiled with buggy version of gcc using advanced optimizations\");\n            System.err.println(\" 9%%  Your system is overclocked\");\n            System.err.println(\" 1%%  bug in LAME encoding library\");\n\n            gfc.ResvSize = l3_side.main_data_begin * 8;\n        }\n        //;\n        assert(totbit % 8 == 0);\n\n        if (totbit > 1000000000) {\n            /*\n             * to avoid totbit overflow, (at 8h encoding at 128kbs) lets reset\n             * bit counter\n             */\n            var i;\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing -= totbit;\n            totbit = 0;\n        }\n\n        return 0;\n    };\n\n    /**\n     * <PRE>\n     * copy data out of the internal MP3 bit buffer into a user supplied\n     *       unsigned char buffer.\n     *\n     *       mp3data=0      indicates data in buffer is an id3tags and VBR tags\n     *       mp3data=1      data is real mp3 frame data.\n     * </PRE>\n     */\n    this.copy_buffer = function (gfc, buffer, bufferPos, size, mp3data) {\n        var minimum = bufByteIdx + 1;\n        if (minimum <= 0)\n            return 0;\n        if (size != 0 && minimum > size) {\n            /* buffer is too small */\n            return -1;\n        }\n        System.arraycopy(buf, 0, buffer, bufferPos, minimum);\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n\n        if (mp3data != 0) {\n            var crc = new_int(1);\n            crc[0] = gfc.nMusicCRC;\n            vbr.updateMusicCRC(crc, buffer, bufferPos, minimum);\n            gfc.nMusicCRC = crc[0];\n\n            /**\n             * sum number of bytes belonging to the mp3 stream this info will be\n             * written into the Xing/LAME header for seeking\n             */\n            if (minimum > 0) {\n                gfc.VBR_seek_table.nBytesWritten += minimum;\n            }\n\n            if (gfc.decode_on_the_fly) { /* decode the frame */\n                var pcm_buf = new_float_n([2, 1152]);\n                var mp3_in = minimum;\n                var samples_out = -1;\n                var i;\n\n                /* re-synthesis to pcm. Repeat until we get a samples_out=0 */\n                while (samples_out != 0) {\n\n                    samples_out = mpg.hip_decode1_unclipped(gfc.hip, buffer,\n                        bufferPos, mp3_in, pcm_buf[0], pcm_buf[1]);\n                    /*\n                     * samples_out = 0: need more data to decode samples_out =\n                     * -1: error. Lets assume 0 pcm output samples_out = number\n                     * of samples output\n                     */\n\n                    /*\n                     * set the lenght of the mp3 input buffer to zero, so that\n                     * in the next iteration of the loop we will be querying\n                     * mpglib about buffered data\n                     */\n                    mp3_in = 0;\n\n                    if (samples_out == -1) {\n                        /*\n                         * error decoding. Not fatal, but might screw up the\n                         * ReplayGain tag. What should we do? Ignore for now\n                         */\n                        samples_out = 0;\n                    }\n                    if (samples_out > 0) {\n                        /* process the PCM data */\n\n                        /*\n                         * this should not be possible, and indicates we have\n                         * overflown the pcm_buf buffer\n                         */\n                        assert(samples_out <= 1152);\n\n                        if (gfc.findPeakSample) {\n                            for (i = 0; i < samples_out; i++) {\n                                if (pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = pcm_buf[0][i];\n                                else if (-pcm_buf[0][i] > gfc.PeakSample)\n                                    gfc.PeakSample = -pcm_buf[0][i];\n                            }\n                            if (gfc.channels_out > 1)\n                                for (i = 0; i < samples_out; i++) {\n                                    if (pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = pcm_buf[1][i];\n                                    else if (-pcm_buf[1][i] > gfc.PeakSample)\n                                        gfc.PeakSample = -pcm_buf[1][i];\n                                }\n                        }\n\n                        if (gfc.findReplayGain)\n                            if (ga.AnalyzeSamples(gfc.rgdata, pcm_buf[0], 0,\n                                    pcm_buf[1], 0, samples_out,\n                                    gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                                return -6;\n\n                    }\n                    /* if (samples_out>0) */\n                }\n                /* while (samples_out!=0) */\n            }\n            /* if (gfc.decode_on_the_fly) */\n\n        }\n        /* if (mp3data) */\n        return minimum;\n    };\n\n    this.init_bit_stream_w = function (gfc) {\n        buf = new_byte(Lame.LAME_MAXMP3BUFFER);\n\n        gfc.h_ptr = gfc.w_ptr = 0;\n        gfc.header[gfc.h_ptr].write_timing = 0;\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n        totbit = 0;\n    };\n\n    // From machine.h\n\n\n}\n\nmodule.exports = BitStream;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar MeanBits = require('./MeanBits.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nfunction CBRNewIterationLoop(_quantize)  {\n    var quantize = _quantize;\n    this.quantize = quantize;\n\tthis.iteration_loop = function(gfp, pe, ms_ener_ratio, ratio) {\n\t\tvar gfc = gfp.internal_flags;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n\t\tvar xrpow = new_float(576);\n\t\tvar targ_bits = new_int(2);\n\t\tvar mean_bits = 0, max_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar mb = new MeanBits(mean_bits);\n\t\tthis.quantize.rv.ResvFrameBegin(gfp, mb);\n\t\tmean_bits = mb.bits;\n\n\t\t/* quantize! */\n\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\n\t\t\t/*\n\t\t\t * calculate needed bits\n\t\t\t */\n\t\t\tmax_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits,\n\t\t\t\t\tgr, gr);\n\n\t\t\tif (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n\t\t\t\tthis.quantize.ms_convert(gfc.l3_side, gr);\n\t\t\t\tthis.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr],\n\t\t\t\t\t\tmean_bits, max_bits);\n\t\t\t}\n\n\t\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\t\tvar adjust, masking_lower_db;\n\t\t\t\tvar cod_info = l3_side.tt[gr][ch];\n\n\t\t\t\tif (cod_info.block_type != Encoder.SHORT_TYPE) {\n\t\t\t\t\t// NORM, START or STOP type\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust - adjust;\n\t\t\t\t} else {\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n\t\t\t\t}\n\t\t\t\tgfc.masking_lower =  Math.pow(10.0,\n\t\t\t\t\t\tmasking_lower_db * 0.1);\n\n\t\t\t\t/*\n\t\t\t\t * init_outer_loop sets up cod_info, scalefac and xrpow\n\t\t\t\t */\n\t\t\t\tthis.quantize.init_outer_loop(gfc, cod_info);\n\t\t\t\tif (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n\t\t\t\t\t/*\n\t\t\t\t\t * xr contains energy we will have to encode calculate the\n\t\t\t\t\t * masking abilities find some good quantization in\n\t\t\t\t\t * outer_loop\n\t\t\t\t\t */\n\t\t\t\t\tthis.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n\t\t\t\t\t\t\tl3_xmin);\n\t\t\t\t\tthis.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch,\n\t\t\t\t\t\t\ttarg_bits[ch]);\n\t\t\t\t}\n\n\t\t\t\tthis.quantize.iteration_finish_one(gfc, gr, ch);\n\t\t\t\tassert (cod_info.part2_3_length <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n\t\t\t\tassert (cod_info.part2_3_length <= targ_bits[ch]);\n\t\t\t} /* for ch */\n\t\t} /* for gr */\n\n\t\tthis.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n\t}\n}\nmodule.exports = CBRNewIterationLoop;\n","var common = require('./common.js');\nvar new_float = common.new_float;\nvar new_int = common.new_int;\nvar assert = common.assert;\n\nfunction CalcNoiseData() {\n    this.global_gain = 0;\n    this.sfb_count1 = 0;\n    this.step = new_int(39);\n    this.noise = new_float(39);\n    this.noise_log = new_float(39);\n}\n\nmodule.exports = CalcNoiseData;\n","//package mp3;\n\nfunction CalcNoiseResult() {\n    /**\n     * sum of quantization noise > masking\n     */\n    this.over_noise = 0.;\n    /**\n     * sum of all quantization noise\n     */\n    this.tot_noise = 0.;\n    /**\n     * max quantization noise\n     */\n    this.max_noise = 0.;\n    /**\n     * number of quantization noise > masking\n     */\n    this.over_count = 0;\n    /**\n     * SSD-like cost of distorted bands\n     */\n    this.over_SSD = 0;\n    this.bits = 0;\n}\n\nmodule.exports = CalcNoiseResult;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * ENCDELAY The encoder delay.\n *\n * Minimum allowed is MDCTDELAY (see below)\n *\n * The first 96 samples will be attenuated, so using a value less than 96\n * will result in corrupt data for the first 96-ENCDELAY samples.\n *\n * suggested: 576 set to 1160 to sync with FhG.\n */\nEncoder.ENCDELAY = 576;\n/**\n * make sure there is at least one complete frame after the last frame\n * containing real data\n *\n * Using a value of 288 would be sufficient for a a very sophisticated\n * decoder that can decode granule-by-granule instead of frame by frame. But\n * lets not assume this, and assume the decoder will not decode frame N\n * unless it also has data for frame N+1\n */\nEncoder.POSTDELAY = 1152;\n\n/**\n * delay of the MDCT used in mdct.c original ISO routines had a delay of\n * 528! Takehiro's routines:\n */\nEncoder.MDCTDELAY = 48;\nEncoder.FFTOFFSET = (224 + Encoder.MDCTDELAY);\n\n/**\n * Most decoders, including the one we use, have a delay of 528 samples.\n */\nEncoder.DECDELAY = 528;\n\n/**\n * number of subbands\n */\nEncoder.SBLIMIT = 32;\n\n/**\n * parition bands bands\n */\nEncoder.CBANDS = 64;\n\n/**\n * number of critical bands/scale factor bands where masking is computed\n */\nEncoder.SBPSY_l = 21;\nEncoder.SBPSY_s = 12;\n\n/**\n * total number of scalefactor bands encoded\n */\nEncoder.SBMAX_l = 22;\nEncoder.SBMAX_s = 13;\nEncoder.PSFB21 = 6;\nEncoder.PSFB12 = 6;\n\n/**\n * FFT sizes\n */\nEncoder.BLKSIZE = 1024;\nEncoder.HBLKSIZE = (Encoder.BLKSIZE / 2 + 1);\nEncoder.BLKSIZE_s = 256;\nEncoder.HBLKSIZE_s = (Encoder.BLKSIZE_s / 2 + 1);\n\nEncoder.NORM_TYPE = 0;\nEncoder.START_TYPE = 1;\nEncoder.SHORT_TYPE = 2;\nEncoder.STOP_TYPE = 3;\n\n/**\n * <PRE>\n * Mode Extention:\n * When we are in stereo mode, there are 4 possible methods to store these\n * two channels. The stereo modes -m? are using a subset of them.\n *\n *  -ms: MPG_MD_LR_LR\n *  -mj: MPG_MD_LR_LR and MPG_MD_MS_LR\n *  -mf: MPG_MD_MS_LR\n *  -mi: all\n * </PRE>\n */\nEncoder.MPG_MD_LR_LR = 0;\nEncoder.MPG_MD_LR_I = 1;\nEncoder.MPG_MD_MS_LR = 2;\nEncoder.MPG_MD_MS_I = 3;\n\nEncoder.fircoef = [-0.0207887 * 5, -0.0378413 * 5,\n    -0.0432472 * 5, -0.031183 * 5, 7.79609e-18 * 5, 0.0467745 * 5,\n    0.10091 * 5, 0.151365 * 5, 0.187098 * 5];\n\nfunction Encoder() {\n    var NewMDCT = require('./NewMDCT.js');\n    var III_psy_ratio = require('./III_psy_ratio.js');\n    var MPEGMode = require('./MPEGMode.js');\n\n    var FFTOFFSET = Encoder.FFTOFFSET;\n    var MPG_MD_MS_LR = Encoder.MPG_MD_MS_LR;\n    //BitStream bs;\n    //PsyModel psy;\n    //VBRTag vbr;\n    //QuantizePVT qupvt;\n    var bs = null;\n    this.psy = null;\n    var psy = null;\n    var vbr = null;\n    var qupvt = null;\n\n    //public final void setModules(BitStream bs, PsyModel psy, QuantizePVT qupvt,\n    //    VBRTag vbr) {\n    this.setModules = function (_bs, _psy, _qupvt, _vbr) {\n        bs = _bs;\n        this.psy = _psy;\n        psy = _psy;\n        vbr = _vbr;\n        qupvt = _qupvt;\n    };\n\n    var newMDCT = new NewMDCT();\n\n    /***********************************************************************\n     *\n     * encoder and decoder delays\n     *\n     ***********************************************************************/\n\n    /**\n     * <PRE>\n     * layer III enc->dec delay:  1056 (1057?)   (observed)\n     * layer  II enc->dec delay:   480  (481?)   (observed)\n     *\n     * polyphase 256-16             (dec or enc)        = 240\n     * mdct      256+32  (9*32)     (dec or enc)        = 288\n     * total:    512+16\n     *\n     * My guess is that delay of polyphase filterbank is actualy 240.5\n     * (there are technical reasons for this, see postings in mp3encoder).\n     * So total Encode+Decode delay = ENCDELAY + 528 + 1\n     * </PRE>\n     */\n\n\n    /**\n     * auto-adjust of ATH, useful for low volume Gabriel Bouvigne 3 feb 2001\n     *\n     * modifies some values in gfp.internal_flags.ATH (gfc.ATH)\n     */\n//private void adjust_ATH(final LameInternalFlags gfc) {\n    function adjust_ATH(gfc) {\n        var gr2_max, max_pow;\n\n        if (gfc.ATH.useAdjust == 0) {\n            gfc.ATH.adjust = 1.0;\n            /* no adjustment */\n            return;\n        }\n\n        /* jd - 2001 mar 12, 27, jun 30 */\n        /* loudness based on equal loudness curve; */\n        /* use granule with maximum combined loudness */\n        max_pow = gfc.loudness_sq[0][0];\n        gr2_max = gfc.loudness_sq[1][0];\n        if (gfc.channels_out == 2) {\n            max_pow += gfc.loudness_sq[0][1];\n            gr2_max += gfc.loudness_sq[1][1];\n        } else {\n            max_pow += max_pow;\n            gr2_max += gr2_max;\n        }\n        if (gfc.mode_gr == 2) {\n            max_pow = Math.max(max_pow, gr2_max);\n        }\n        max_pow *= 0.5;\n        /* max_pow approaches 1.0 for full band noise */\n\n        /* jd - 2001 mar 31, jun 30 */\n        /* user tuning of ATH adjustment region */\n        max_pow *= gfc.ATH.aaSensitivityP;\n\n        /*\n         * adjust ATH depending on range of maximum value\n         */\n\n        /* jd - 2001 feb27, mar12,20, jun30, jul22 */\n        /* continuous curves based on approximation */\n        /* to GB's original values. */\n        /* For an increase in approximate loudness, */\n        /* set ATH adjust to adjust_limit immediately */\n        /* after a delay of one frame. */\n        /* For a loudness decrease, reduce ATH adjust */\n        /* towards adjust_limit gradually. */\n        /* max_pow is a loudness squared or a power. */\n        if (max_pow > 0.03125) { /* ((1 - 0.000625)/ 31.98) from curve below */\n            if (gfc.ATH.adjust >= 1.0) {\n                gfc.ATH.adjust = 1.0;\n            } else {\n                /* preceding frame has lower ATH adjust; */\n                /* ascend only to the preceding adjust_limit */\n                /* in case there is leading low volume */\n                if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                    gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                }\n            }\n            gfc.ATH.adjustLimit = 1.0;\n        } else { /* adjustment curve */\n            /* about 32 dB maximum adjust (0.000625) */\n            var adj_lim_new = 31.98 * max_pow + 0.000625;\n            if (gfc.ATH.adjust >= adj_lim_new) { /* descend gradually */\n                gfc.ATH.adjust *= adj_lim_new * 0.075 + 0.925;\n                if (gfc.ATH.adjust < adj_lim_new) { /* stop descent */\n                    gfc.ATH.adjust = adj_lim_new;\n                }\n            } else { /* ascend */\n                if (gfc.ATH.adjustLimit >= adj_lim_new) {\n                    gfc.ATH.adjust = adj_lim_new;\n                } else {\n                    /* preceding frame has lower ATH adjust; */\n                    /* ascend only to the preceding adjust_limit */\n                    if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                        gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                    }\n                }\n            }\n            gfc.ATH.adjustLimit = adj_lim_new;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  some simple statistics\n     *\n     *  bitrate index 0: free bitrate . not allowed in VBR mode\n     *  : bitrates, kbps depending on MPEG version\n     *  bitrate index 15: forbidden\n     *\n     *  mode_ext:\n     *  0:  LR\n     *  1:  LR-i\n     *  2:  MS\n     *  3:  MS-i\n     * </PRE>\n     */\n    function updateStats(gfc) {\n        var gr, ch;\n        assert(0 <= gfc.bitrate_index && gfc.bitrate_index < 16);\n        assert(0 <= gfc.mode_ext && gfc.mode_ext < 4);\n\n        /* count bitrate indices */\n        gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][4]++;\n        gfc.bitrate_stereoMode_Hist[15][4]++;\n\n        /* count 'em for every mode extension in case of 2 channel encoding */\n        if (gfc.channels_out == 2) {\n            gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][gfc.mode_ext]++;\n            gfc.bitrate_stereoMode_Hist[15][gfc.mode_ext]++;\n        }\n        for (gr = 0; gr < gfc.mode_gr; ++gr) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                var bt = gfc.l3_side.tt[gr][ch].block_type | 0;\n                if (gfc.l3_side.tt[gr][ch].mixed_block_flag != 0)\n                    bt = 4;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][bt]++;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][5]++;\n                gfc.bitrate_blockType_Hist[15][bt]++;\n                gfc.bitrate_blockType_Hist[15][5]++;\n            }\n        }\n    }\n\n    function lame_encode_frame_init(gfp, inbuf) {\n        var gfc = gfp.internal_flags;\n\n        var ch, gr;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* prime the MDCT/polyphase filterbank with a short block */\n            var i, j;\n            var primebuff0 = new_float(286 + 1152 + 576);\n            var primebuff1 = new_float(286 + 1152 + 576);\n            gfc.lame_encode_frame_init = 1;\n            for (i = 0, j = 0; i < 286 + 576 * (1 + gfc.mode_gr); ++i) {\n                if (i < 576 * gfc.mode_gr) {\n                    primebuff0[i] = 0;\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = 0;\n                } else {\n                    primebuff0[i] = inbuf[0][j];\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = inbuf[1][j];\n                    ++j;\n                }\n            }\n            /* polyphase filtering / mdct */\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.SHORT_TYPE;\n                }\n            }\n            newMDCT.mdct_sub48(gfc, primebuff0, primebuff1);\n\n            /* check FFT will not use a negative starting offset */\n            assert(576 >= Encoder.FFTOFFSET);\n            /* check if we have enough data for FFT */\n            assert(gfc.mf_size >= (Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET));\n            /* check if we have enough data for polyphase filterbank */\n            assert(gfc.mf_size >= (512 + gfp.framesize - 32));\n        }\n\n    }\n\n    /**\n     * <PRE>\n     * encodeframe()           Layer 3\n     *\n     * encode a single frame\n     *\n     *\n     *    lame_encode_frame()\n     *\n     *\n     *                           gr 0            gr 1\n     *    inbuf:           |--------------|--------------|--------------|\n     *\n     *\n     *    Polyphase (18 windows, each shifted 32)\n     *    gr 0:\n     *    window1          <----512---.\n     *    window18                 <----512---.\n     *\n     *    gr 1:\n     *    window1                         <----512---.\n     *    window18                                <----512---.\n     *\n     *\n     *\n     *    MDCT output:  |--------------|--------------|--------------|\n     *\n     *    FFT's                    <---------1024---------.\n     *                                             <---------1024-------.\n     *\n     *\n     *\n     *        inbuf = buffer of PCM data size=MP3 framesize\n     *        encoder acts on inbuf[ch][0], but output is delayed by MDCTDELAY\n     *        so the MDCT coefficints are from inbuf[ch][-MDCTDELAY]\n     *\n     *        psy-model FFT has a 1 granule delay, so we feed it data for the\n     *        next granule.\n     *        FFT is centered over granule:  224+576+224\n     *        So FFT starts at:   576-224-MDCTDELAY\n     *\n     *        MPEG2:  FFT ends at:  BLKSIZE+576-224-MDCTDELAY      (1328)\n     *        MPEG1:  FFT ends at:  BLKSIZE+2*576-224-MDCTDELAY    (1904)\n     *\n     *        MPEG2:  polyphase first window:  [0..511]\n     *                          18th window:   [544..1055]          (1056)\n     *        MPEG1:            36th window:   [1120..1631]         (1632)\n     *                data needed:  512+framesize-32\n     *\n     *        A close look newmdct.c shows that the polyphase filterbank\n     *        only uses data from [0..510] for each window.  Perhaps because the window\n     *        used by the filterbank is zero for the last point, so Takehiro's\n     *        code doesn't bother to compute with it.\n     *\n     *        FFT starts at 576-224-MDCTDELAY (304)  = 576-FFTOFFSET\n     *\n     * </PRE>\n     */\n\n\n    this.lame_encode_mp3_frame = function (gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var mp3count;\n        var masking_LR = new_array_n([2, 2]);\n        /*\n         * LR masking &\n         * energy\n         */\n        masking_LR[0][0] = new III_psy_ratio();\n        masking_LR[0][1] = new III_psy_ratio();\n        masking_LR[1][0] = new III_psy_ratio();\n        masking_LR[1][1] = new III_psy_ratio();\n        var masking_MS = new_array_n([2, 2]);\n        /* MS masking & energy */\n        masking_MS[0][0] = new III_psy_ratio();\n        masking_MS[0][1] = new III_psy_ratio();\n        masking_MS[1][0] = new III_psy_ratio();\n        masking_MS[1][1] = new III_psy_ratio();\n        //III_psy_ratio masking[][];\n        var masking;\n        /* pointer to selected maskings */\n        var inbuf = [null, null];\n        var gfc = gfp.internal_flags;\n\n        var tot_ener = new_float_n([2, 4]);\n        var ms_ener_ratio = [.5, .5];\n        var pe = [[0., 0.], [0., 0.]];\n        var pe_MS = [[0., 0.], [0., 0.]];\n\n//float[][] pe_use;\n        var pe_use;\n\n        var ch, gr;\n\n        inbuf[0] = inbuf_l;\n        inbuf[1] = inbuf_r;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* first run? */\n            lame_encode_frame_init(gfp, inbuf);\n\n        }\n\n        /********************** padding *****************************/\n        /**\n         * <PRE>\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\"\n         * by Martin Sieler, Ralph Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         * </PRE>\n         */\n        gfc.padding = 0;\n        if ((gfc.slot_lag -= gfc.frac_SpF) < 0) {\n            gfc.slot_lag += gfp.out_samplerate;\n            gfc.padding = 1;\n        }\n\n        /****************************************\n         * Stage 1: psychoacoustic model *\n         ****************************************/\n\n        if (gfc.psymodel != 0) {\n            /*\n             * psychoacoustic model psy model has a 1 granule (576) delay that\n             * we must compensate for (mt 6/99).\n             */\n            var ret;\n            var bufp = [null, null];\n            /* address of beginning of left & right granule */\n            var bufpPos = 0;\n            /* address of beginning of left & right granule */\n            var blocktype = new_int(2);\n\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    bufp[ch] = inbuf[ch];\n                    bufpPos = 576 + gr * 576 - Encoder.FFTOFFSET;\n                }\n                if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n                    ret = psy.L3psycho_anal_vbr(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                } else {\n                    ret = psy.L3psycho_anal_ns(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                }\n                if (ret != 0)\n                    return -4;\n\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    ms_ener_ratio[gr] = tot_ener[gr][2] + tot_ener[gr][3];\n                    if (ms_ener_ratio[gr] > 0)\n                        ms_ener_ratio[gr] = tot_ener[gr][3] / ms_ener_ratio[gr];\n                }\n\n                /* block type flags */\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var cod_info = gfc.l3_side.tt[gr][ch];\n                    cod_info.block_type = blocktype[ch];\n                    cod_info.mixed_block_flag = 0;\n                }\n            }\n        } else {\n            /* no psy model */\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.NORM_TYPE;\n                    gfc.l3_side.tt[gr][ch].mixed_block_flag = 0;\n                    pe_MS[gr][ch] = pe[gr][ch] = 700;\n                }\n        }\n\n        /* auto-adjust of ATH, useful for low volume */\n        adjust_ATH(gfc);\n\n        /****************************************\n         * Stage 2: MDCT *\n         ****************************************/\n\n        /* polyphase filtering / mdct */\n        newMDCT.mdct_sub48(gfc, inbuf[0], inbuf[1]);\n\n        /****************************************\n         * Stage 3: MS/LR decision *\n         ****************************************/\n\n        /* Here will be selected MS or LR coding of the 2 stereo channels */\n        gfc.mode_ext = Encoder.MPG_MD_LR_LR;\n\n        if (gfp.force_ms) {\n            gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        } else if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            /*\n             * ms_ratio = is scaled, for historical reasons, to look like a\n             * ratio of side_channel / total. 0 = signal is 100% mono .5 = L & R\n             * uncorrelated\n             */\n\n            /**\n             * <PRE>\n             * [0] and [1] are the results for the two granules in MPEG-1,\n             * in MPEG-2 it's only a faked averaging of the same value\n             * _prev is the value of the last granule of the previous frame\n             * _next is the value of the first granule of the next frame\n             * </PRE>\n             */\n\n            var sum_pe_MS = 0.;\n            var sum_pe_LR = 0.;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    sum_pe_MS += pe_MS[gr][ch];\n                    sum_pe_LR += pe[gr][ch];\n                }\n            }\n\n            /* based on PE: M/S coding would not use much more bits than L/R */\n            if (sum_pe_MS <= 1.00 * sum_pe_LR) {\n\n                var gi0 = gfc.l3_side.tt[0];\n                var gi1 = gfc.l3_side.tt[gfc.mode_gr - 1];\n\n                if (gi0[0].block_type == gi0[1].block_type\n                    && gi1[0].block_type == gi1[1].block_type) {\n\n                    gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n                }\n            }\n        }\n\n        /* bit and noise allocation */\n        if (gfc.mode_ext == MPG_MD_MS_LR) {\n            masking = masking_MS;\n            /* use MS masking */\n            pe_use = pe_MS;\n        } else {\n            masking = masking_LR;\n            /* use LR masking */\n            pe_use = pe;\n        }\n\n        /* copy data for MP3 frame analyzer */\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.pinfo.ms_ratio[gr] = gfc.ms_ratio[gr];\n                    gfc.pinfo.ms_ener_ratio[gr] = ms_ener_ratio[gr];\n                    gfc.pinfo.blocktype[gr][ch] = gfc.l3_side.tt[gr][ch].block_type;\n                    gfc.pinfo.pe[gr][ch] = pe_use[gr][ch];\n                    System.arraycopy(gfc.l3_side.tt[gr][ch].xr, 0,\n                        gfc.pinfo.xr[gr][ch], 0, 576);\n                    /*\n                     * in psymodel, LR and MS data was stored in pinfo. switch\n                     * to MS data:\n                     */\n                    if (gfc.mode_ext == MPG_MD_MS_LR) {\n                        gfc.pinfo.ers[gr][ch] = gfc.pinfo.ers[gr][ch + 2];\n                        System.arraycopy(gfc.pinfo.energy[gr][ch + 2], 0,\n                            gfc.pinfo.energy[gr][ch], 0,\n                            gfc.pinfo.energy[gr][ch].length);\n                    }\n                }\n            }\n        }\n\n        /****************************************\n         * Stage 4: quantization loop *\n         ****************************************/\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr) {\n\n            var i;\n            var f;\n\n            for (i = 0; i < 18; i++)\n                gfc.nsPsy.pefirbuf[i] = gfc.nsPsy.pefirbuf[i + 1];\n\n            f = 0.0;\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    f += pe_use[gr][ch];\n            gfc.nsPsy.pefirbuf[18] = f;\n\n            f = gfc.nsPsy.pefirbuf[9];\n            for (i = 0; i < 9; i++)\n                f += (gfc.nsPsy.pefirbuf[i] + gfc.nsPsy.pefirbuf[18 - i])\n                    * Encoder.fircoef[i];\n\n            f = (670 * 5 * gfc.mode_gr * gfc.channels_out) / f;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    pe_use[gr][ch] *= f;\n                }\n            }\n        }\n        gfc.iteration_loop.iteration_loop(gfp, pe_use, ms_ener_ratio, masking);\n\n        /****************************************\n         * Stage 5: bitstream formatting *\n         ****************************************/\n\n        /* write the frame to the bitstream */\n        bs.format_bitstream(gfp);\n\n        /* copy mp3 bit buffer into array */\n        mp3count = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 1);\n\n        if (gfp.bWriteVbrTag)\n            vbr.addVbrFrame(gfp);\n\n        if (gfp.analysis && gfc.pinfo != null) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var j;\n                for (j = 0; j < FFTOFFSET; j++)\n                    gfc.pinfo.pcmdata[ch][j] = gfc.pinfo.pcmdata[ch][j\n                    + gfp.framesize];\n                for (j = FFTOFFSET; j < 1600; j++) {\n                    gfc.pinfo.pcmdata[ch][j] = inbuf[ch][j - FFTOFFSET];\n                }\n            }\n            qupvt.set_frame_pinfo(gfp, masking);\n        }\n\n        updateStats(gfc);\n\n        return mp3count;\n    }\n}\n\n\nmodule.exports = Encoder;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\nfunction FFT() {\n\n    var window = new_float(Encoder.BLKSIZE);\n    var window_s = new_float(Encoder.BLKSIZE_s / 2);\n\n    var costab = [\n        9.238795325112867e-01, 3.826834323650898e-01,\n        9.951847266721969e-01, 9.801714032956060e-02,\n        9.996988186962042e-01, 2.454122852291229e-02,\n        9.999811752826011e-01, 6.135884649154475e-03\n    ];\n\n    function fht(fz, fzPos, n) {\n        var tri = 0;\n        var k4;\n        var fi;\n        var gi;\n\n        n <<= 1;\n        /* to get BLKSIZE, because of 3DNow! ASM routine */\n        var fn = fzPos + n;\n        k4 = 4;\n        do {\n            var s1, c1;\n            var i, k1, k2, k3, kx;\n            kx = k4 >> 1;\n            k1 = k4;\n            k2 = k4 << 1;\n            k3 = k2 + k1;\n            k4 = k2 << 1;\n            fi = fzPos;\n            gi = fi + kx;\n            do {\n                var f0, f1, f2, f3;\n                f1 = fz[fi + 0] - fz[fi + k1];\n                f0 = fz[fi + 0] + fz[fi + k1];\n                f3 = fz[fi + k2] - fz[fi + k3];\n                f2 = fz[fi + k2] + fz[fi + k3];\n                fz[fi + k2] = f0 - f2;\n                fz[fi + 0] = f0 + f2;\n                fz[fi + k3] = f1 - f3;\n                fz[fi + k1] = f1 + f3;\n                f1 = fz[gi + 0] - fz[gi + k1];\n                f0 = fz[gi + 0] + fz[gi + k1];\n                f3 = (Util.SQRT2 * fz[gi + k3]);\n                f2 = (Util.SQRT2 * fz[gi + k2]);\n                fz[gi + k2] = f0 - f2;\n                fz[gi + 0] = f0 + f2;\n                fz[gi + k3] = f1 - f3;\n                fz[gi + k1] = f1 + f3;\n                gi += k4;\n                fi += k4;\n            } while (fi < fn);\n            c1 = costab[tri + 0];\n            s1 = costab[tri + 1];\n            for (i = 1; i < kx; i++) {\n                var c2, s2;\n                c2 = 1 - (2 * s1) * s1;\n                s2 = (2 * s1) * c1;\n                fi = fzPos + i;\n                gi = fzPos + k1 - i;\n                do {\n                    var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n                    b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n                    a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n                    f1 = fz[fi + 0] - a;\n                    f0 = fz[fi + 0] + a;\n                    g1 = fz[gi + 0] - b;\n                    g0 = fz[gi + 0] + b;\n                    b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n                    a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n                    f3 = fz[fi + k2] - a;\n                    f2 = fz[fi + k2] + a;\n                    g3 = fz[gi + k2] - b;\n                    g2 = fz[gi + k2] + b;\n                    b = s1 * f2 - c1 * g3;\n                    a = c1 * f2 + s1 * g3;\n                    fz[fi + k2] = f0 - a;\n                    fz[fi + 0] = f0 + a;\n                    fz[gi + k3] = g1 - b;\n                    fz[gi + k1] = g1 + b;\n                    b = c1 * g2 - s1 * f3;\n                    a = s1 * g2 + c1 * f3;\n                    fz[gi + k2] = g0 - a;\n                    fz[gi + 0] = g0 + a;\n                    fz[fi + k3] = f1 - b;\n                    fz[fi + k1] = f1 + b;\n                    gi += k4;\n                    fi += k4;\n                } while (fi < fn);\n                c2 = c1;\n                c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n                s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n            }\n            tri += 2;\n        } while (k4 < n);\n    }\n\n    var rv_tbl = [0x00, 0x80, 0x40,\n        0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10,\n        0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70,\n        0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28,\n        0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58,\n        0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04,\n        0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64,\n        0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34,\n        0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c,\n        0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c,\n        0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c,\n        0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22,\n        0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52,\n        0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a,\n        0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a,\n        0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a,\n        0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46,\n        0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16,\n        0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76,\n        0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e,\n        0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e,\n        0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n\n    this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n        for (var b = 0; b < 3; b++) {\n            var x = Encoder.BLKSIZE_s / 2;\n            var k = 0xffff & ((576 / 3) * (b + 1));\n            var j = Encoder.BLKSIZE_s / 8 - 1;\n            do {\n                var f0, f1, f2, f3, w;\n                var i = rv_tbl[j << 2] & 0xff;\n\n                f0 = window_s[i] * buffer[chn][bufPos + i + k];\n                w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n                w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x -= 4;\n                x_real[b][x + 0] = f0 + f2;\n                x_real[b][x + 2] = f0 - f2;\n                x_real[b][x + 1] = f1 + f3;\n                x_real[b][x + 3] = f1 - f3;\n\n                f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n                w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n                w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n            } while (--j >= 0);\n\n            fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\n            /* BLKSIZE_s/2 because of 3DNow! ASM routine */\n            /* BLKSIZE/2 because of 3DNow! ASM routine */\n        }\n    }\n\n    this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n        var jj = Encoder.BLKSIZE / 8 - 1;\n        var x = Encoder.BLKSIZE / 2;\n\n        do {\n            var f0, f1, f2, f3, w;\n            var i = rv_tbl[jj] & 0xff;\n            f0 = window[i] * buffer[chn][bufPos + i];\n            w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n            w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            x -= 4;\n            y[x + 0] = f0 + f2;\n            y[x + 2] = f0 - f2;\n            y[x + 1] = f1 + f3;\n            y[x + 3] = f1 - f3;\n\n            f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n            w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n            w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n            y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n            y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n            y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n        } while (--jj >= 0);\n\n        fht(y, x, Encoder.BLKSIZE / 2);\n        /* BLKSIZE/2 because of 3DNow! ASM routine */\n    }\n\n    this.init_fft = function (gfc) {\n        /* The type of window used here will make no real difference, but */\n        /*\n         * in the interest of merging nspsytune stuff - switch to blackman\n         * window\n         */\n        for (var i = 0; i < Encoder.BLKSIZE; i++)\n            /* blackman window */\n            window[i] = (0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE));\n\n        for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++)\n            window_s[i] = (0.5 * (1.0 - Math.cos(2.0 * Math.PI\n                * (i + 0.5) / Encoder.BLKSIZE_s)));\n\n    }\n\n}\n\nmodule.exports = FFT;\n","/*\n *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change\n *  Copyright (C) 2001 David Robinson and Glen Sawyer\n *  Improvements and optimizations added by Frank Klemm, and by Marcel Muller \n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n *  concept and filter values by David Robinson (David@Robinson.org)\n *    -- blame him if you think the idea is flawed\n *  original coding by Glen Sawyer (mp3gain@hotmail.com)\n *    -- blame him if you think this runs too slowly, or the coding is otherwise flawed\n *\n *  lots of code improvements by Frank Klemm ( http://www.uni-jena.de/~pfk/mpp/ )\n *    -- credit him for all the _good_ programming ;)\n *\n *\n *  For an explanation of the concepts and the basic algorithms involved, go to:\n *    http://www.replaygain.org/\n */\n\n/*\n *  Here's the deal. Call\n *\n *    InitGainAnalysis ( long samplefreq );\n *\n *  to initialize everything. Call\n *\n *    AnalyzeSamples ( var Float_t*  left_samples,\n *                     var Float_t*  right_samples,\n *                     size_t          num_samples,\n *                     int             num_channels );\n *\n *  as many times as you want, with as many or as few samples as you want.\n *  If mono, pass the sample buffer in through left_samples, leave\n *  right_samples NULL, and make sure num_channels = 1.\n *\n *    GetTitleGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  SINCE THE LAST TIME you called GetTitleGain() OR InitGainAnalysis().\n *\n *    GetAlbumGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  since InitGainAnalysis() was called and finalized with GetTitleGain().\n *\n *  Pseudo-code to process an album:\n *\n *    Float_t       l_samples [4096];\n *    Float_t       r_samples [4096];\n *    size_t        num_samples;\n *    unsigned int  num_songs;\n *    unsigned int  i;\n *\n *    InitGainAnalysis ( 44100 );\n *    for ( i = 1; i <= num_songs; i++ ) {\n *        while ( ( num_samples = getSongSamples ( song[i], left_samples, right_samples ) ) > 0 )\n *            AnalyzeSamples ( left_samples, right_samples, num_samples, 2 );\n *        fprintf (\"Recommended dB change for song %2d: %+6.2 dB\\n\", i, GetTitleGain() );\n *    }\n *    fprintf (\"Recommended dB change for whole album: %+6.2 dB\\n\", GetAlbumGain() );\n */\n\n/*\n *  So here's the main source of potential code confusion:\n *\n *  The filters applied to the incoming samples are IIR filters,\n *  meaning they rely on up to <filter order> number of previous samples\n *  AND up to <filter order> number of previous filtered samples.\n *\n *  I set up the AnalyzeSamples routine to minimize memory usage and interface\n *  complexity. The speed isn't compromised too much (I don't think), but the\n *  internal complexity is higher than it should be for such a relatively\n *  simple routine.\n *\n *  Optimization/clarity suggestions are welcome.\n */\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * Table entries per dB\n */\nGainAnalysis.STEPS_per_dB = 100.;\n/**\n * Table entries for 0...MAX_dB (normal max. values are 70...80 dB)\n */\nGainAnalysis.MAX_dB = 120.;\nGainAnalysis.GAIN_NOT_ENOUGH_SAMPLES = -24601;\nGainAnalysis.GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.GAIN_ANALYSIS_OK = 1;\nGainAnalysis.INIT_GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.INIT_GAIN_ANALYSIS_OK = 1;\n\nGainAnalysis.YULE_ORDER = 10;\nGainAnalysis.MAX_ORDER = GainAnalysis.YULE_ORDER;\n\nGainAnalysis.MAX_SAMP_FREQ = 48000;\nGainAnalysis.RMS_WINDOW_TIME_NUMERATOR = 1;\nGainAnalysis.RMS_WINDOW_TIME_DENOMINATOR = 20;\nGainAnalysis.MAX_SAMPLES_PER_WINDOW = ((GainAnalysis.MAX_SAMP_FREQ * GainAnalysis.RMS_WINDOW_TIME_NUMERATOR) / GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR + 1);\n\nfunction GainAnalysis() {\n    /**\n     * calibration value for 89dB\n     */\n    var PINK_REF = 64.82;\n\n    var YULE_ORDER = GainAnalysis.YULE_ORDER;\n    /**\n     * percentile which is louder than the proposed level\n     */\n    var RMS_PERCENTILE = 0.95;\n    /**\n     * maximum allowed sample frequency [Hz]\n     */\n    var MAX_SAMP_FREQ = GainAnalysis.MAX_SAMP_FREQ;\n    var RMS_WINDOW_TIME_NUMERATOR = GainAnalysis.RMS_WINDOW_TIME_NUMERATOR;\n    /**\n     * numerator / denominator = time slice size [s]\n     */\n    var RMS_WINDOW_TIME_DENOMINATOR = GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR;\n    /**\n     * max. Samples per Time slice\n     */\n    var MAX_SAMPLES_PER_WINDOW = GainAnalysis.MAX_SAMPLES_PER_WINDOW;\n\n\n    var ABYule = [\n        [0.03857599435200, -3.84664617118067, -0.02160367184185,\n            7.81501653005538, -0.00123395316851, -11.34170355132042,\n            -0.00009291677959, 13.05504219327545, -0.01655260341619,\n            -12.28759895145294, 0.02161526843274, 9.48293806319790,\n            -0.02074045215285, -5.87257861775999, 0.00594298065125,\n            2.75465861874613, 0.00306428023191, -0.86984376593551,\n            0.00012025322027, 0.13919314567432, 0.00288463683916],\n        [0.05418656406430, -3.47845948550071, -0.02911007808948,\n            6.36317777566148, -0.00848709379851, -8.54751527471874,\n            -0.00851165645469, 9.47693607801280, -0.00834990904936,\n            -8.81498681370155, 0.02245293253339, 6.85401540936998,\n            -0.02596338512915, -4.39470996079559, 0.01624864962975,\n            2.19611684890774, -0.00240879051584, -0.75104302451432,\n            0.00674613682247, 0.13149317958808, -0.00187763777362],\n        [0.15457299681924, -2.37898834973084, -0.09331049056315,\n            2.84868151156327, -0.06247880153653, -2.64577170229825,\n            0.02163541888798, 2.23697657451713, -0.05588393329856,\n            -1.67148153367602, 0.04781476674921, 1.00595954808547,\n            0.00222312597743, -0.45953458054983, 0.03174092540049,\n            0.16378164858596, -0.01390589421898, -0.05032077717131,\n            0.00651420667831, 0.02347897407020, -0.00881362733839],\n        [0.30296907319327, -1.61273165137247, -0.22613988682123,\n            1.07977492259970, -0.08587323730772, -0.25656257754070,\n            0.03282930172664, -0.16276719120440, -0.00915702933434,\n            -0.22638893773906, -0.02364141202522, 0.39120800788284,\n            -0.00584456039913, -0.22138138954925, 0.06276101321749,\n            0.04500235387352, -0.00000828086748, 0.02005851806501,\n            0.00205861885564, 0.00302439095741, -0.02950134983287],\n        [0.33642304856132, -1.49858979367799, -0.25572241425570,\n            0.87350271418188, -0.11828570177555, 0.12205022308084,\n            0.11921148675203, -0.80774944671438, -0.07834489609479,\n            0.47854794562326, -0.00469977914380, -0.12453458140019,\n            -0.00589500224440, -0.04067510197014, 0.05724228140351,\n            0.08333755284107, 0.00832043980773, -0.04237348025746,\n            -0.01635381384540, 0.02977207319925, -0.01760176568150],\n        [0.44915256608450, -0.62820619233671, -0.14351757464547,\n            0.29661783706366, -0.22784394429749, -0.37256372942400,\n            -0.01419140100551, 0.00213767857124, 0.04078262797139,\n            -0.42029820170918, -0.12398163381748, 0.22199650564824,\n            0.04097565135648, 0.00613424350682, 0.10478503600251,\n            0.06747620744683, -0.01863887810927, 0.05784820375801,\n            -0.03193428438915, 0.03222754072173, 0.00541907748707],\n        [0.56619470757641, -1.04800335126349, -0.75464456939302,\n            0.29156311971249, 0.16242137742230, -0.26806001042947,\n            0.16744243493672, 0.00819999645858, -0.18901604199609,\n            0.45054734505008, 0.30931782841830, -0.33032403314006,\n            -0.27562961986224, 0.06739368333110, 0.00647310677246,\n            -0.04784254229033, 0.08647503780351, 0.01639907836189,\n            -0.03788984554840, 0.01807364323573, -0.00588215443421],\n        [0.58100494960553, -0.51035327095184, -0.53174909058578,\n            -0.31863563325245, -0.14289799034253, -0.20256413484477,\n            0.17520704835522, 0.14728154134330, 0.02377945217615,\n            0.38952639978999, 0.15558449135573, -0.23313271880868,\n            -0.25344790059353, -0.05246019024463, 0.01628462406333,\n            -0.02505961724053, 0.06920467763959, 0.02442357316099,\n            -0.03721611395801, 0.01818801111503, -0.00749618797172],\n        [0.53648789255105, -0.25049871956020, -0.42163034350696,\n            -0.43193942311114, -0.00275953611929, -0.03424681017675,\n            0.04267842219415, -0.04678328784242, -0.10214864179676,\n            0.26408300200955, 0.14590772289388, 0.15113130533216,\n            -0.02459864859345, -0.17556493366449, -0.11202315195388,\n            -0.18823009262115, -0.04060034127000, 0.05477720428674,\n            0.04788665548180, 0.04704409688120, -0.02217936801134]];\n\n    var ABButter = [\n        [0.98621192462708, -1.97223372919527, -1.97242384925416,\n            0.97261396931306, 0.98621192462708],\n        [0.98500175787242, -1.96977855582618, -1.97000351574484,\n            0.97022847566350, 0.98500175787242],\n        [0.97938932735214, -1.95835380975398, -1.95877865470428,\n            0.95920349965459, 0.97938932735214],\n        [0.97531843204928, -1.95002759149878, -1.95063686409857,\n            0.95124613669835, 0.97531843204928],\n        [0.97316523498161, -1.94561023566527, -1.94633046996323,\n            0.94705070426118, 0.97316523498161],\n        [0.96454515552826, -1.92783286977036, -1.92909031105652,\n            0.93034775234268, 0.96454515552826],\n        [0.96009142950541, -1.91858953033784, -1.92018285901082,\n            0.92177618768381, 0.96009142950541],\n        [0.95856916599601, -1.91542108074780, -1.91713833199203,\n            0.91885558323625, 0.95856916599601],\n        [0.94597685600279, -1.88903307939452, -1.89195371200558,\n            0.89487434461664, 0.94597685600279]];\n\n\n    /**\n     * When calling this procedure, make sure that ip[-order] and op[-order]\n     * point to real data\n     */\n    //private void filterYule(final float[] input, int inputPos, float[] output,\n    //int outputPos, int nSamples, final float[] kernel) {\n    function filterYule(input, inputPos, output, outputPos, nSamples, kernel) {\n\n        while ((nSamples--) != 0) {\n            /* 1e-10 is a hack to avoid slowdown because of denormals */\n            output[outputPos] = 1e-10 + input[inputPos + 0] * kernel[0]\n                - output[outputPos - 1] * kernel[1] + input[inputPos - 1]\n                * kernel[2] - output[outputPos - 2] * kernel[3]\n                + input[inputPos - 2] * kernel[4] - output[outputPos - 3]\n                * kernel[5] + input[inputPos - 3] * kernel[6]\n                - output[outputPos - 4] * kernel[7] + input[inputPos - 4]\n                * kernel[8] - output[outputPos - 5] * kernel[9]\n                + input[inputPos - 5] * kernel[10] - output[outputPos - 6]\n                * kernel[11] + input[inputPos - 6] * kernel[12]\n                - output[outputPos - 7] * kernel[13] + input[inputPos - 7]\n                * kernel[14] - output[outputPos - 8] * kernel[15]\n                + input[inputPos - 8] * kernel[16] - output[outputPos - 9]\n                * kernel[17] + input[inputPos - 9] * kernel[18]\n                - output[outputPos - 10] * kernel[19]\n                + input[inputPos - 10] * kernel[20];\n            ++outputPos;\n            ++inputPos;\n        }\n    }\n\n//private void filterButter(final float[] input, int inputPos,\n//    float[] output, int outputPos, int nSamples, final float[] kernel) {\n    function filterButter(input, inputPos, output, outputPos, nSamples, kernel) {\n\n        while ((nSamples--) != 0) {\n            output[outputPos] = input[inputPos + 0] * kernel[0]\n                - output[outputPos - 1] * kernel[1] + input[inputPos - 1]\n                * kernel[2] - output[outputPos - 2] * kernel[3]\n                + input[inputPos - 2] * kernel[4];\n            ++outputPos;\n            ++inputPos;\n        }\n    }\n\n    /**\n     * @return INIT_GAIN_ANALYSIS_OK if successful, INIT_GAIN_ANALYSIS_ERROR if\n     *         not\n     */\n    function ResetSampleFrequency(rgData, samplefreq) {\n        /* zero out initial values */\n        for (var i = 0; i < MAX_ORDER; i++)\n            rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\n\n        switch (0 | (samplefreq)) {\n            case 48000:\n                rgData.reqindex = 0;\n                break;\n            case 44100:\n                rgData.reqindex = 1;\n                break;\n            case 32000:\n                rgData.reqindex = 2;\n                break;\n            case 24000:\n                rgData.reqindex = 3;\n                break;\n            case 22050:\n                rgData.reqindex = 4;\n                break;\n            case 16000:\n                rgData.reqindex = 5;\n                break;\n            case 12000:\n                rgData.reqindex = 6;\n                break;\n            case 11025:\n                rgData.reqindex = 7;\n                break;\n            case 8000:\n                rgData.reqindex = 8;\n                break;\n            default:\n                return INIT_GAIN_ANALYSIS_ERROR;\n        }\n\n        rgData.sampleWindow = 0 | ((samplefreq * RMS_WINDOW_TIME_NUMERATOR\n            + RMS_WINDOW_TIME_DENOMINATOR - 1) / RMS_WINDOW_TIME_DENOMINATOR);\n\n        rgData.lsum = 0.;\n        rgData.rsum = 0.;\n        rgData.totsamp = 0;\n\n        Arrays.ill(rgData.A, 0);\n\n        return INIT_GAIN_ANALYSIS_OK;\n    }\n\n    this.InitGainAnalysis = function (rgData, samplefreq) {\n        if (ResetSampleFrequency(rgData, samplefreq) != INIT_GAIN_ANALYSIS_OK) {\n            return INIT_GAIN_ANALYSIS_ERROR;\n        }\n\n        rgData.linpre = MAX_ORDER;\n        rgData.rinpre = MAX_ORDER;\n        rgData.lstep = MAX_ORDER;\n        rgData.rstep = MAX_ORDER;\n        rgData.lout = MAX_ORDER;\n        rgData.rout = MAX_ORDER;\n\n        Arrays.fill(rgData.B, 0);\n\n        return INIT_GAIN_ANALYSIS_OK;\n    };\n\n    /**\n     * square\n     */\n    function fsqr(d) {\n        return d * d;\n    }\n\n    this.AnalyzeSamples = function (rgData, left_samples, left_samplesPos, right_samples, right_samplesPos, num_samples,\n                                    num_channels) {\n        var curleft;\n        var curleftBase;\n        var curright;\n        var currightBase;\n        var batchsamples;\n        var cursamples;\n        var cursamplepos;\n\n        if (num_samples == 0)\n            return GAIN_ANALYSIS_OK;\n\n        cursamplepos = 0;\n        batchsamples = num_samples;\n\n        switch (num_channels) {\n            case 1:\n                right_samples = left_samples;\n                right_samplesPos = left_samplesPos;\n                break;\n            case 2:\n                break;\n            default:\n                return GAIN_ANALYSIS_ERROR;\n        }\n\n        if (num_samples < MAX_ORDER) {\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER, num_samples);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER, num_samples);\n        } else {\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER, MAX_ORDER);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER, MAX_ORDER);\n        }\n\n        while (batchsamples > 0) {\n            cursamples = batchsamples > rgData.sampleWindow - rgData.totsamp ? rgData.sampleWindow\n            - rgData.totsamp\n                : batchsamples;\n            if (cursamplepos < MAX_ORDER) {\n                curleft = rgData.linpre + cursamplepos;\n                curleftBase = rgData.linprebuf;\n                curright = rgData.rinpre + cursamplepos;\n                currightBase = rgData.rinprebuf;\n                if (cursamples > MAX_ORDER - cursamplepos)\n                    cursamples = MAX_ORDER - cursamplepos;\n            } else {\n                curleft = left_samplesPos + cursamplepos;\n                curleftBase = left_samples;\n                curright = right_samplesPos + cursamplepos;\n                currightBase = right_samples;\n            }\n\n            filterYule(curleftBase, curleft, rgData.lstepbuf, rgData.lstep\n                + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\n            filterYule(currightBase, curright, rgData.rstepbuf, rgData.rstep\n                + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\n\n            filterButter(rgData.lstepbuf, rgData.lstep + rgData.totsamp,\n                rgData.loutbuf, rgData.lout + rgData.totsamp, cursamples,\n                ABButter[rgData.reqindex]);\n            filterButter(rgData.rstepbuf, rgData.rstep + rgData.totsamp,\n                rgData.routbuf, rgData.rout + rgData.totsamp, cursamples,\n                ABButter[rgData.reqindex]);\n\n            curleft = rgData.lout + rgData.totsamp;\n            /* Get the squared values */\n            curleftBase = rgData.loutbuf;\n            curright = rgData.rout + rgData.totsamp;\n            currightBase = rgData.routbuf;\n\n            var i = cursamples % 8;\n            while ((i--) != 0) {\n                rgData.lsum += fsqr(curleftBase[curleft++]);\n                rgData.rsum += fsqr(currightBase[curright++]);\n            }\n            i = cursamples / 8;\n            while ((i--) != 0) {\n                rgData.lsum += fsqr(curleftBase[curleft + 0])\n                    + fsqr(curleftBase[curleft + 1])\n                    + fsqr(curleftBase[curleft + 2])\n                    + fsqr(curleftBase[curleft + 3])\n                    + fsqr(curleftBase[curleft + 4])\n                    + fsqr(curleftBase[curleft + 5])\n                    + fsqr(curleftBase[curleft + 6])\n                    + fsqr(curleftBase[curleft + 7]);\n                curleft += 8;\n                rgData.rsum += fsqr(currightBase[curright + 0])\n                    + fsqr(currightBase[curright + 1])\n                    + fsqr(currightBase[curright + 2])\n                    + fsqr(currightBase[curright + 3])\n                    + fsqr(currightBase[curright + 4])\n                    + fsqr(currightBase[curright + 5])\n                    + fsqr(currightBase[curright + 6])\n                    + fsqr(currightBase[curright + 7]);\n                curright += 8;\n            }\n\n            batchsamples -= cursamples;\n            cursamplepos += cursamples;\n            rgData.totsamp += cursamples;\n            if (rgData.totsamp == rgData.sampleWindow) {\n                /* Get the Root Mean Square (RMS) for this set of samples */\n                var val = GainAnalysis.STEPS_per_dB\n                    * 10.\n                    * Math.log10((rgData.lsum + rgData.rsum)\n                        / rgData.totsamp * 0.5 + 1.e-37);\n                var ival = (val <= 0) ? 0 : 0 | val;\n                if (ival >= rgData.A.length)\n                    ival = rgData.A.length - 1;\n                rgData.A[ival]++;\n                rgData.lsum = rgData.rsum = 0.;\n\n                System.arraycopy(rgData.loutbuf, rgData.totsamp,\n                    rgData.loutbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.routbuf, rgData.totsamp,\n                    rgData.routbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.lstepbuf, rgData.totsamp,\n                    rgData.lstepbuf, 0, MAX_ORDER);\n                System.arraycopy(rgData.rstepbuf, rgData.totsamp,\n                    rgData.rstepbuf, 0, MAX_ORDER);\n                rgData.totsamp = 0;\n            }\n            if (rgData.totsamp > rgData.sampleWindow) {\n                /*\n                 * somehow I really screwed up: Error in programming! Contact\n                 * author about totsamp > sampleWindow\n                 */\n                return GAIN_ANALYSIS_ERROR;\n            }\n        }\n        if (num_samples < MAX_ORDER) {\n            System.arraycopy(rgData.linprebuf, num_samples, rgData.linprebuf,\n                0, MAX_ORDER - num_samples);\n            System.arraycopy(rgData.rinprebuf, num_samples, rgData.rinprebuf,\n                0, MAX_ORDER - num_samples);\n            System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\n                MAX_ORDER - num_samples, num_samples);\n            System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\n                MAX_ORDER - num_samples, num_samples);\n        } else {\n            System.arraycopy(left_samples, left_samplesPos + num_samples\n                - MAX_ORDER, rgData.linprebuf, 0, MAX_ORDER);\n            System.arraycopy(right_samples, right_samplesPos + num_samples\n                - MAX_ORDER, rgData.rinprebuf, 0, MAX_ORDER);\n        }\n\n        return GAIN_ANALYSIS_OK;\n    };\n\n    function analyzeResult(Array, len) {\n        var i;\n\n        var elems = 0;\n        for (i = 0; i < len; i++)\n            elems += Array[i];\n        if (elems == 0)\n            return GAIN_NOT_ENOUGH_SAMPLES;\n\n        var upper = 0 | Math.ceil(elems * (1. - RMS_PERCENTILE));\n        for (i = len; i-- > 0;) {\n            if ((upper -= Array[i]) <= 0)\n                break;\n        }\n\n        //return (float) ((float) PINK_REF - (float) i / (float) STEPS_per_dB);\n        return (PINK_REF - i / GainAnalysis.STEPS_per_dB);\n    }\n\n    this.GetTitleGain = function (rgData) {\n        var retval = analyzeResult(rgData.A, rgData.A.length);\n\n        for (var i = 0; i < rgData.A.length; i++) {\n            rgData.B[i] += rgData.A[i];\n            rgData.A[i] = 0;\n        }\n\n        for (var i = 0; i < MAX_ORDER; i++)\n            rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\n\n        rgData.totsamp = 0;\n        rgData.lsum = rgData.rsum = 0.;\n        return retval;\n    }\n\n}\n\nmodule.exports = GainAnalysis;\n","//package mp3;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar L3Side = require('./L3Side.js');\n\nfunction GrInfo() {\n    //float xr[] = new float[576];\n    this.xr = new_float(576);\n    //int l3_enc[] = new int[576];\n    this.l3_enc = new_int(576);\n    //int scalefac[] = new int[L3Side.SFBMAX];\n    this.scalefac = new_int(L3Side.SFBMAX);\n    this.xrpow_max = 0.;\n\n    this.part2_3_length = 0;\n    this.big_values = 0;\n    this.count1 = 0;\n    this.global_gain = 0;\n    this.scalefac_compress = 0;\n    this.block_type = 0;\n    this.mixed_block_flag = 0;\n    this.table_select = new_int(3);\n    this.subblock_gain = new_int(3 + 1);\n    this.region0_count = 0;\n    this.region1_count = 0;\n    this.preflag = 0;\n    this.scalefac_scale = 0;\n    this.count1table_select = 0;\n\n    this.part2_length = 0;\n    this.sfb_lmax = 0;\n    this.sfb_smin = 0;\n    this.psy_lmax = 0;\n    this.sfbmax = 0;\n    this.psymax = 0;\n    this.sfbdivide = 0;\n    this.width = new_int(L3Side.SFBMAX);\n    this.window = new_int(L3Side.SFBMAX);\n    this.count1bits = 0;\n    /**\n     * added for LSF\n     */\n    this.sfb_partition_table = null;\n    this.slen = new_int(4);\n\n    this.max_nonzero_coeff = 0;\n\n    var self = this;\n    function clone_int(array) {\n        return new Int32Array(array);\n    }\n    function clone_float(array) {\n        return new Float32Array(array);\n    }\n    this.assign = function (other) {\n        self.xr = clone_float(other.xr); //.slice(0); //clone();\n        self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n        self.scalefac = clone_int(other.scalefac);//.slice(0); //clone();\n        self.xrpow_max = other.xrpow_max;\n\n        self.part2_3_length = other.part2_3_length;\n        self.big_values = other.big_values;\n        self.count1 = other.count1;\n        self.global_gain = other.global_gain;\n        self.scalefac_compress = other.scalefac_compress;\n        self.block_type = other.block_type;\n        self.mixed_block_flag = other.mixed_block_flag;\n        self.table_select = clone_int(other.table_select);//.slice(0); //clone();\n        self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n        self.region0_count = other.region0_count;\n        self.region1_count = other.region1_count;\n        self.preflag = other.preflag;\n        self.scalefac_scale = other.scalefac_scale;\n        self.count1table_select = other.count1table_select;\n\n        self.part2_length = other.part2_length;\n        self.sfb_lmax = other.sfb_lmax;\n        self.sfb_smin = other.sfb_smin;\n        self.psy_lmax = other.psy_lmax;\n        self.sfbmax = other.sfbmax;\n        self.psymax = other.psymax;\n        self.sfbdivide = other.sfbdivide;\n        self.width = clone_int(other.width); //.slice(0); //.clone();\n        self.window = clone_int(other.window); //.slice(0); //.clone();\n        self.count1bits = other.count1bits;\n\n        self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n        self.slen = clone_int(other.slen); //.slice(0); //.clone();\n        self.max_nonzero_coeff = other.max_nonzero_coeff;\n    }\n}\n\nmodule.exports = GrInfo;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar GrInfo = require('./GrInfo.js');\n\nfunction IIISideInfo() {\n    this.tt = [[null, null], [null, null]];\n    this.main_data_begin = 0;\n    this.private_bits = 0;\n    this.resvDrain_pre = 0;\n    this.resvDrain_post = 0;\n    this.scfsi = [new_int(4), new_int(4)];\n\n    for (var gr = 0; gr < 2; gr++) {\n        for (var ch = 0; ch < 2; ch++) {\n            this.tt[gr][ch] = new GrInfo();\n        }\n    }\n}\n\nmodule.exports = IIISideInfo;\n","//package mp3;\n\nvar III_psy_xmin = require('./III_psy_xmin.js');\n\nfunction III_psy_ratio() {\n\tthis.thm = new III_psy_xmin();\n\tthis.en = new III_psy_xmin();\n}\n\nmodule.exports = III_psy_ratio;\n","var Encoder = require('./Encoder.js');\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nfunction III_psy_xmin() {\n    this.l = new_float(Encoder.SBMAX_l);\n    this.s = new_float_n([Encoder.SBMAX_s, 3]);\n\n    var self = this;\n    this.assign = function (iii_psy_xmin) {\n        System.arraycopy(iii_psy_xmin.l, 0, self.l, 0, Encoder.SBMAX_l);\n        for (var i = 0; i < Encoder.SBMAX_s; i++) {\n            for (var j = 0; j < 3; j++) {\n                self.s[i][j] = iii_psy_xmin.s[i][j];\n            }\n        }\n    }\n}\n\nmodule.exports = III_psy_xmin;\n","var Encoder = require('./Encoder.js');\n\nvar L3Side = {};\n\n\n\t/**\n\t * max scalefactor band, max(SBMAX_l, SBMAX_s*3, (SBMAX_s-3)*3+8)\n\t */\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n\nmodule.exports = L3Side;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar new_short_n = common.new_short_n;\nvar assert = common.assert;\n\nvar PsyModel = require('./PsyModel.js');\nvar LameGlobalFlags = require('./LameGlobalFlags.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\nvar ATH = require('./ATH.js');\nvar ReplayGain = require('./ReplayGain.js');\nvar CBRNewIterationLoop = require('./CBRNewIterationLoop.js');\nvar BitStream = require('./BitStream.js');\nvar Tables = require('./Tables.js');\nvar Encoder = require('./Encoder.js');\n\nfunction Lame() {\n    var MPEGMode = require('./MPEGMode.js');\n    var self = this;\n    var LAME_MAXALBUMART = (128 * 1024);\n\n    Lame.V9 = 410;\n    Lame.V8 = 420;\n    Lame.V7 = 430;\n    Lame.V6 = 440;\n    Lame.V5 = 450;\n    Lame.V4 = 460;\n    Lame.V3 = 470;\n    Lame.V2 = 480;\n    Lame.V1 = 490;\n    Lame.V0 = 500;\n\n    /* still there for compatibility */\n\n    Lame.R3MIX = 1000;\n    Lame.STANDARD = 1001;\n    Lame.EXTREME = 1002;\n    Lame.INSANE = 1003;\n    Lame.STANDARD_FAST = 1004;\n    Lame.EXTREME_FAST = 1005;\n    Lame.MEDIUM = 1006;\n    Lame.MEDIUM_FAST = 1007;\n\n    /**\n     * maximum size of mp3buffer needed if you encode at most 1152 samples for\n     * each call to lame_encode_buffer. see lame_encode_buffer() below\n     * (LAME_MAXMP3BUFFER is now obsolete)\n     */\n    var LAME_MAXMP3BUFFER = (16384 + LAME_MAXALBUMART);\n    Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n\n    var ga;\n    var bs;\n    var p;\n    var qupvt;\n    var qu;\n    var psy = new PsyModel();\n    var vbr;\n    var ver;\n    var id3;\n    var mpglib;\n    this.enc = new Encoder();\n\n    this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n        ga = _ga;\n        bs = _bs;\n        p = _p;\n        qupvt = _qupvt;\n        qu = _qu;\n        vbr = _vbr;\n        ver = _ver;\n        id3 = _id3;\n        mpglib = _mpglib;\n        this.enc.setModules(bs, psy, qupvt, vbr);\n    }\n\n    /**\n     * PSY Model related stuff\n     */\n    function PSY() {\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust = 0.;\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust_short = 0.;\n        /* at transition from one scalefactor band to next */\n        /**\n         * Band weight long scalefactor bands.\n         */\n        this.bo_l_weight = new_float(Encoder.SBMAX_l);\n        /**\n         * Band weight short scalefactor bands.\n         */\n        this.bo_s_weight = new_float(Encoder.SBMAX_s);\n    }\n\n    function LowPassHighPass() {\n        this.lowerlimit = 0.;\n    }\n\n    function BandPass(bitrate, lPass) {\n        this.lowpass = lPass;\n    }\n\n    var LAME_ID = 0xFFF88E3B;\n\n    function lame_init_old(gfp) {\n        var gfc;\n\n        gfp.class_id = LAME_ID;\n\n        gfc = gfp.internal_flags = new LameInternalFlags();\n\n        /* Global flags. set defaults here for non-zero values */\n        /* see lame.h for description */\n        /*\n         * set integer values to -1 to mean that LAME will compute the best\n         * value, UNLESS the calling program as set it (and the value is no\n         * longer -1)\n         */\n\n        gfp.mode = MPEGMode.NOT_SET;\n        gfp.original = 1;\n        gfp.in_samplerate = 44100;\n        gfp.num_channels = 2;\n        gfp.num_samples = -1;\n\n        gfp.bWriteVbrTag = true;\n        gfp.quality = -1;\n        gfp.short_blocks = null;\n        gfc.subblock_gain = -1;\n\n        gfp.lowpassfreq = 0;\n        gfp.highpassfreq = 0;\n        gfp.lowpasswidth = -1;\n        gfp.highpasswidth = -1;\n\n        gfp.VBR = VbrMode.vbr_off;\n        gfp.VBR_q = 4;\n        gfp.ATHcurve = -1;\n        gfp.VBR_mean_bitrate_kbps = 128;\n        gfp.VBR_min_bitrate_kbps = 0;\n        gfp.VBR_max_bitrate_kbps = 0;\n        gfp.VBR_hard_min = 0;\n        gfc.VBR_min_bitrate = 1;\n        /* not 0 ????? */\n        gfc.VBR_max_bitrate = 13;\n        /* not 14 ????? */\n\n        gfp.quant_comp = -1;\n        gfp.quant_comp_short = -1;\n\n        gfp.msfix = -1;\n\n        gfc.resample_ratio = 1;\n\n        gfc.OldValue[0] = 180;\n        gfc.OldValue[1] = 180;\n        gfc.CurrentStep[0] = 4;\n        gfc.CurrentStep[1] = 4;\n        gfc.masking_lower = 1;\n        gfc.nsPsy.attackthre = -1;\n        gfc.nsPsy.attackthre_s = -1;\n\n        gfp.scale = -1;\n\n        gfp.athaa_type = -1;\n        gfp.ATHtype = -1;\n        /* default = -1 = set in lame_init_params */\n        gfp.athaa_loudapprox = -1;\n        /* 1 = flat loudness approx. (total energy) */\n        /* 2 = equal loudness curve */\n        gfp.athaa_sensitivity = 0.0;\n        /* no offset */\n        gfp.useTemporal = null;\n        gfp.interChRatio = -1;\n\n        /*\n         * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\n         * ENCDELAY = internal encoder delay. And then we have to add\n         * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\n         * decodes to 1152 samples. To synthesize the 576 samples centered under\n         * this granule we need the previous granule for the first 288 samples\n         * (no problem), and the next granule for the next 288 samples (not\n         * possible if this is last granule). So we need to pad with 288 samples\n         * to make sure we can encode the 576 samples we are interested in.\n         */\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n        gfp.encoder_padding = 0;\n        gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\n        /*\n         * we pad input with this many 0's\n         */\n\n        gfp.findReplayGain = false;\n        gfp.decode_on_the_fly = false;\n\n        gfc.decode_on_the_fly = false;\n        gfc.findReplayGain = false;\n        gfc.findPeakSample = false;\n\n        gfc.RadioGain = 0;\n        gfc.AudiophileGain = 0;\n        gfc.noclipGainChange = 0;\n        gfc.noclipScale = -1.0;\n\n        gfp.preset = 0;\n\n        gfp.write_id3tag_automatic = true;\n        return 0;\n    }\n\n    this.lame_init = function () {\n        var gfp = new LameGlobalFlags();\n\n        var ret = lame_init_old(gfp);\n        if (ret != 0) {\n            return null;\n        }\n\n        gfp.lame_allocated_gfp = 1;\n        return gfp;\n    }\n\n    function filter_coef(x) {\n        if (x > 1.0)\n            return 0.0;\n        if (x <= 0.0)\n            return 1.0;\n\n        return Math.cos(Math.PI / 2 * x);\n    }\n\n    this.nearestBitrateFullIndex = function (bitrate) {\n        /* borrowed from DM abr presets */\n\n        var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80,\n            96, 112, 128, 160, 192, 224, 256, 320];\n\n        var lower_range = 0, lower_range_kbps = 0, upper_range = 0, upper_range_kbps = 0;\n\n        /* We assume specified bitrate will be 320kbps */\n        upper_range_kbps = full_bitrate_table[16];\n        upper_range = 16;\n        lower_range_kbps = full_bitrate_table[16];\n        lower_range = 16;\n\n        /*\n         * Determine which significant bitrates the value specified falls\n         * between, if loop ends without breaking then we were correct above\n         * that the value was 320\n         */\n        for (var b = 0; b < 16; b++) {\n            if ((Math.max(bitrate, full_bitrate_table[b + 1])) != bitrate) {\n                upper_range_kbps = full_bitrate_table[b + 1];\n                upper_range = b + 1;\n                lower_range_kbps = full_bitrate_table[b];\n                lower_range = (b);\n                break;\n                /* We found upper range */\n            }\n        }\n\n        /* Determine which range the value specified is closer to */\n        if ((upper_range_kbps - bitrate) > (bitrate - lower_range_kbps)) {\n            return lower_range;\n        }\n        return upper_range;\n    }\n\n    function optimum_samplefreq(lowpassfreq, input_samplefreq) {\n        /*\n         * Rules:\n         *\n         * - if possible, sfb21 should NOT be used\n         */\n        var suggested_samplefreq = 44100;\n\n        if (input_samplefreq >= 48000)\n            suggested_samplefreq = 48000;\n        else if (input_samplefreq >= 44100)\n            suggested_samplefreq = 44100;\n        else if (input_samplefreq >= 32000)\n            suggested_samplefreq = 32000;\n        else if (input_samplefreq >= 24000)\n            suggested_samplefreq = 24000;\n        else if (input_samplefreq >= 22050)\n            suggested_samplefreq = 22050;\n        else if (input_samplefreq >= 16000)\n            suggested_samplefreq = 16000;\n        else if (input_samplefreq >= 12000)\n            suggested_samplefreq = 12000;\n        else if (input_samplefreq >= 11025)\n            suggested_samplefreq = 11025;\n        else if (input_samplefreq >= 8000)\n            suggested_samplefreq = 8000;\n\n        if (lowpassfreq == -1)\n            return suggested_samplefreq;\n\n        if (lowpassfreq <= 15960)\n            suggested_samplefreq = 44100;\n        if (lowpassfreq <= 15250)\n            suggested_samplefreq = 32000;\n        if (lowpassfreq <= 11220)\n            suggested_samplefreq = 24000;\n        if (lowpassfreq <= 9970)\n            suggested_samplefreq = 22050;\n        if (lowpassfreq <= 7230)\n            suggested_samplefreq = 16000;\n        if (lowpassfreq <= 5420)\n            suggested_samplefreq = 12000;\n        if (lowpassfreq <= 4510)\n            suggested_samplefreq = 11025;\n        if (lowpassfreq <= 3970)\n            suggested_samplefreq = 8000;\n\n        if (input_samplefreq < suggested_samplefreq) {\n            /*\n             * choose a valid MPEG sample frequency above the input sample\n             * frequency to avoid SFB21/12 bitrate bloat rh 061115\n             */\n            if (input_samplefreq > 44100) {\n                return 48000;\n            }\n            if (input_samplefreq > 32000) {\n                return 44100;\n            }\n            if (input_samplefreq > 24000) {\n                return 32000;\n            }\n            if (input_samplefreq > 22050) {\n                return 24000;\n            }\n            if (input_samplefreq > 16000) {\n                return 22050;\n            }\n            if (input_samplefreq > 12000) {\n                return 16000;\n            }\n            if (input_samplefreq > 11025) {\n                return 12000;\n            }\n            if (input_samplefreq > 8000) {\n                return 11025;\n            }\n            return 8000;\n        }\n        return suggested_samplefreq;\n    }\n\n    /**\n     * convert samp freq in Hz to index\n     */\n    function SmpFrqIndex(sample_freq, gpf) {\n        switch (sample_freq) {\n            case 44100:\n                gpf.version = 1;\n                return 0;\n            case 48000:\n                gpf.version = 1;\n                return 1;\n            case 32000:\n                gpf.version = 1;\n                return 2;\n            case 22050:\n                gpf.version = 0;\n                return 0;\n            case 24000:\n                gpf.version = 0;\n                return 1;\n            case 16000:\n                gpf.version = 0;\n                return 2;\n            case 11025:\n                gpf.version = 0;\n                return 0;\n            case 12000:\n                gpf.version = 0;\n                return 1;\n            case 8000:\n                gpf.version = 0;\n                return 2;\n            default:\n                gpf.version = 0;\n                return -1;\n        }\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 8 to 320\n     */\n    function FindNearestBitrate(bRate, version, samplerate) {\n        /* MPEG-1 or MPEG-2 LSF */\n        if (samplerate < 16000)\n            version = 2;\n\n        var bitrate = Tables.bitrate_table[version][1];\n\n        for (var i = 2; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math\n                        .abs(bitrate - bRate))\n                    bitrate = Tables.bitrate_table[version][i];\n            }\n        }\n        return bitrate;\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 32 to 448 kbps\n     * @param version\n     *            MPEG-1 or MPEG-2/2.5 LSF\n     */\n    function BitrateIndex(bRate, version, samplerate) {\n        /* convert bitrate in kbps to index */\n        if (samplerate < 16000)\n            version = 2;\n        for (var i = 0; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Tables.bitrate_table[version][i] == bRate) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function optimum_bandwidth(lh, bitrate) {\n        /**\n         * <PRE>\n         *  Input:\n         *      bitrate     total bitrate in kbps\n         *\n         *   Output:\n         *      lowerlimit: best lowpass frequency limit for input filter in Hz\n         *      upperlimit: best highpass frequency limit for input filter in Hz\n         * </PRE>\n         */\n        var freq_map = [new BandPass(8, 2000),\n            new BandPass(16, 3700), new BandPass(24, 3900),\n            new BandPass(32, 5500), new BandPass(40, 7000),\n            new BandPass(48, 7500), new BandPass(56, 10000),\n            new BandPass(64, 11000), new BandPass(80, 13500),\n            new BandPass(96, 15100), new BandPass(112, 15600),\n            new BandPass(128, 17000), new BandPass(160, 17500),\n            new BandPass(192, 18600), new BandPass(224, 19400),\n            new BandPass(256, 19700), new BandPass(320, 20500)];\n\n        var table_index = self.nearestBitrateFullIndex(bitrate);\n        lh.lowerlimit = freq_map[table_index].lowpass;\n    }\n\n    function lame_init_params_ppflt(gfp) {\n        var gfc = gfp.internal_flags;\n        /***************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /***************************************************************/\n\n        var lowpass_band = 32;\n        var highpass_band = -1;\n\n        if (gfc.lowpass1 > 0) {\n            var minband = 999;\n            for (var band = 0; band <= 31; band++) {\n                var freq = (band / 31.0);\n                /* this band and above will be zeroed: */\n                if (freq >= gfc.lowpass2) {\n                    lowpass_band = Math.min(lowpass_band, band);\n                }\n                if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n                    minband = Math.min(minband, band);\n                }\n            }\n\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            if (minband == 999) {\n                gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n            } else {\n                gfc.lowpass1 = (minband - .75) / 31.0;\n            }\n            gfc.lowpass2 = lowpass_band / 31.0;\n        }\n\n        /*\n         * make sure highpass filter is within 90% of what the effective\n         * highpass frequency will be\n         */\n        if (gfc.highpass2 > 0) {\n            if (gfc.highpass2 < .9 * (.75 / 31.0)) {\n                gfc.highpass1 = 0;\n                gfc.highpass2 = 0;\n                System.err.println(\"Warning: highpass filter disabled.  \"\n                    + \"highpass frequency too small\\n\");\n            }\n        }\n\n        if (gfc.highpass2 > 0) {\n            var maxband = -1;\n            for (var band = 0; band <= 31; band++) {\n                var freq = band / 31.0;\n                /* this band and below will be zereod */\n                if (freq <= gfc.highpass1) {\n                    highpass_band = Math.max(highpass_band, band);\n                }\n                if (gfc.highpass1 < freq && freq < gfc.highpass2) {\n                    maxband = Math.max(maxband, band);\n                }\n            }\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            gfc.highpass1 = highpass_band / 31.0;\n            if (maxband == -1) {\n                gfc.highpass2 = (highpass_band + .75) / 31.0;\n            } else {\n                gfc.highpass2 = (maxband + .75) / 31.0;\n            }\n        }\n\n        for (var band = 0; band < 32; band++) {\n            var fc1, fc2;\n            var freq = band / 31.0;\n            if (gfc.highpass2 > gfc.highpass1) {\n                fc1 = filter_coef((gfc.highpass2 - freq)\n                    / (gfc.highpass2 - gfc.highpass1 + 1e-20));\n            } else {\n                fc1 = 1.0;\n            }\n            if (gfc.lowpass2 > gfc.lowpass1) {\n                fc2 = filter_coef((freq - gfc.lowpass1)\n                    / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n            } else {\n                fc2 = 1.0;\n            }\n            gfc.amp_filter[band] = (fc1 * fc2);\n        }\n    }\n\n    function lame_init_qval(gfp) {\n        var gfc = gfp.internal_flags;\n\n        switch (gfp.quality) {\n            default:\n            case 9: /* no psymodel, no noise shaping */\n                gfc.psymodel = 0;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 8:\n                gfp.quality = 7;\n            //$FALL-THROUGH$\n            case 7:\n                /*\n                 * use psymodel (for short block and m/s switching), but no noise\n                 * shapping\n                 */\n                gfc.psymodel = 1;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 6:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 5:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 4:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 3:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 2:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /* inner loop */\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 1:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 0:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /*\n                 * type 2 disabled because of it slowness, in favor of full outer\n                 * loop search\n                 */\n                gfc.full_outer_loop = 0;\n                /*\n                 * full outer loop search disabled because of audible distortions it\n                 * may generate rh 060629\n                 */\n                break;\n        }\n\n    }\n\n    function lame_init_bitstream(gfp) {\n        var gfc = gfp.internal_flags;\n        gfp.frameNum = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            id3.id3tag_write_v2(gfp);\n        }\n        /* initialize histogram data optionally used by frontend */\n\n        gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n        gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n        gfc.PeakSample = 0.0;\n\n        /* Write initial VBR Header to bitstream and init VBR data */\n        if (gfp.bWriteVbrTag)\n            vbr.InitVbrTag(gfp);\n    }\n\n    /********************************************************************\n     * initialize internal params based on data in gf (globalflags struct filled\n     * in by calling program)\n     *\n     * OUTLINE:\n     *\n     * We first have some complex code to determine bitrate, output samplerate\n     * and mode. It is complicated by the fact that we allow the user to set\n     * some or all of these parameters, and need to determine best possible\n     * values for the rest of them:\n     *\n     * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\n     * or stereo.stereo 3. compute bitrate and output samplerate: user may have\n     * set compression ratio user may have set a bitrate user may have set a\n     * output samplerate 4. set some options which depend on output samplerate\n     * 5. compute the actual compression ratio 6. set mode based on compression\n     * ratio\n     *\n     * The remaining code is much simpler - it just sets options based on the\n     * mode & compression ratio:\n     *\n     * set allow_diff_short based on mode select lowpass filter based on\n     * compression ratio & mode set the bitrate index, and min/max bitrates for\n     * VBR modes disable VBR tag if it is not appropriate initialize the\n     * bitstream initialize scalefac_band data set sideinfo_len (based on\n     * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\n     * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\n     * frames (based on a lot of data)\n     *\n     * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\n     * code\n     *\n     * Finally, we set the algorithm flags based on the gfp.quality value\n     * lame_init_qval(gfp);\n     *\n     ********************************************************************/\n    this.lame_init_params = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        gfc.Class_ID = 0;\n        if (gfc.ATH == null)\n            gfc.ATH = new ATH();\n        if (gfc.PSY == null)\n            gfc.PSY = new PSY();\n        if (gfc.rgdata == null)\n            gfc.rgdata = new ReplayGain();\n\n        gfc.channels_in = gfp.num_channels;\n        if (gfc.channels_in == 1)\n            gfp.mode = MPEGMode.MONO;\n        gfc.channels_out = (gfp.mode == MPEGMode.MONO) ? 1 : 2;\n        gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        if (gfp.mode == MPEGMode.MONO)\n            gfp.force_ms = false;\n        /*\n         * don't allow forced mid/side stereo for mono output\n         */\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128\n            && gfp.brate == 0)\n            gfp.brate = gfp.VBR_mean_bitrate_kbps;\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            /* these modes can handle free format condition */\n        } else {\n            gfp.free_format = false;\n            /* mode can't be mixed with free format */\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n            /* no bitrate or compression ratio specified, use 11.025 */\n            if (BitStream.EQ(gfp.compression_ratio, 0))\n                gfp.compression_ratio = 11.025;\n            /*\n             * rate to compress a CD down to exactly 128000 bps\n             */\n        }\n\n        /* find bitrate if user specify a compression ratio */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n\n            if (gfp.out_samplerate == 0)\n                gfp.out_samplerate = map2MP3Frequency((int)(0.97 * gfp.in_samplerate));\n            /*\n             * round up with a margin of 3 %\n             */\n\n            /*\n             * choose a bitrate for the output samplerate which achieves\n             * specified compression ratio\n             */\n            gfp.brate = 0 | (gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio));\n\n            /* we need the version for the bitrate table look up */\n            gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n\n            if (!gfp.free_format) /*\n             * for non Free Format find the nearest allowed\n             * bitrate\n             */\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n        }\n\n        if (gfp.out_samplerate != 0) {\n            if (gfp.out_samplerate < 16000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    64);\n            } else if (gfp.out_samplerate < 32000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    160);\n            } else {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    32);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    320);\n            }\n        }\n\n        /****************************************************************/\n        /* if a filter has not been enabled, see if we should add one: */\n        /****************************************************************/\n        if (gfp.lowpassfreq == 0) {\n            var lowpass = 16000.;\n\n            switch (gfp.VBR) {\n                case VbrMode.vbr_off:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.brate);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_abr:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_rh:\n                {\n                    var x = [19500, 19000, 18600, 18000, 17500, 16000,\n                        15600, 14900, 12500, 10000, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                    break;\n                }\n                default:\n                {\n                    var x = [19500, 19000, 18500, 18000, 17500, 16500,\n                        15500, 14500, 12500, 9500, 3950];\n                    if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\n                        var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\n                        lowpass = linear_int(a, b, m);\n                    } else {\n                        lowpass = 19500;\n                    }\n                }\n            }\n            if (gfp.mode == MPEGMode.MONO\n                && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr))\n                lowpass *= 1.5;\n\n            gfp.lowpassfreq = lowpass | 0;\n        }\n\n        if (gfp.out_samplerate == 0) {\n            if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\n                gfp.lowpassfreq = gfp.in_samplerate / 2;\n            }\n            gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0,\n                gfp.in_samplerate);\n        }\n\n        gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n        gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.brate);\n        }\n        if (gfp.VBR == VbrMode.vbr_abr) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /*\n         * do not compute ReplayGain values and do not find the peak sample if\n         * we can't store them\n         */\n        if (!gfp.bWriteVbrTag) {\n            gfp.findReplayGain = false;\n            gfp.decode_on_the_fly = false;\n            gfc.findPeakSample = false;\n        }\n        gfc.findReplayGain = gfp.findReplayGain;\n        gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n\n        if (gfc.decode_on_the_fly)\n            gfc.findPeakSample = true;\n\n        if (gfc.findReplayGain) {\n            if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\n                gfp.internal_flags = null;\n                return -6;\n            }\n        }\n\n        if (gfc.decode_on_the_fly && !gfp.decode_only) {\n            if (gfc.hip != null) {\n                mpglib.hip_decode_exit(gfc.hip);\n            }\n            gfc.hip = mpglib.hip_decode_init();\n        }\n\n        gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\n        /*\n         * Number of granules per frame\n         */\n        gfp.framesize = 576 * gfc.mode_gr;\n        gfp.encoder_delay = Encoder.ENCDELAY;\n\n        gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\n\n        /**\n         * <PRE>\n         *  sample freq       bitrate     compression ratio\n         *     [kHz]      [kbps/channel]   for 16 bit input\n         *     44.1            56               12.6\n         *     44.1            64               11.025\n         *     44.1            80                8.82\n         *     22.05           24               14.7\n         *     22.05           32               11.025\n         *     22.05           40                8.82\n         *     16              16               16.0\n         *     16              24               10.667\n         * </PRE>\n         */\n        /**\n         * <PRE>\n         *  For VBR, take a guess at the compression_ratio.\n         *  For example:\n         *\n         *    VBR_q    compression     like\n         *     -        4.4         320 kbps/44 kHz\n         *   0...1      5.5         256 kbps/44 kHz\n         *     2        7.3         192 kbps/44 kHz\n         *     4        8.8         160 kbps/44 kHz\n         *     6       11           128 kbps/44 kHz\n         *     9       14.7          96 kbps\n         *\n         *  for lower bitrates, downsample with --resample\n         * </PRE>\n         */\n        switch (gfp.VBR) {\n            case VbrMode.vbr_mt:\n            case VbrMode.vbr_rh:\n            case VbrMode.vbr_mtrh:\n            {\n                /* numbers are a bit strange, but they determine the lowpass value */\n                var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14,\n                    15, 16.5];\n                gfp.compression_ratio = cmp[gfp.VBR_q];\n            }\n                break;\n            case VbrMode.vbr_abr:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n                break;\n            default:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.brate);\n                break;\n        }\n\n        /*\n         * mode = -1 (not set by user) or mode = MONO (because of only 1 input\n         * channel). If mode has not been set, then select J-STEREO\n         */\n        if (gfp.mode == MPEGMode.NOT_SET) {\n            gfp.mode = MPEGMode.JOINT_STEREO;\n        }\n\n        /* apply user driven high pass filter */\n        if (gfp.highpassfreq > 0) {\n            gfc.highpass1 = 2. * gfp.highpassfreq;\n\n            if (gfp.highpasswidth >= 0)\n                gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);\n            else\n            /* 0% above on default */\n                gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\n\n            gfc.highpass1 /= gfp.out_samplerate;\n            gfc.highpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.highpass1 = 0;\n            gfc.highpass2 = 0;\n        }\n        /* apply user driven low pass filter */\n        if (gfp.lowpassfreq > 0) {\n            gfc.lowpass2 = 2. * gfp.lowpassfreq;\n            if (gfp.lowpasswidth >= 0) {\n                gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\n                if (gfc.lowpass1 < 0) /* has to be >= 0 */\n                    gfc.lowpass1 = 0;\n            } else { /* 0% below on default */\n                gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n            }\n            gfc.lowpass1 /= gfp.out_samplerate;\n            gfc.lowpass2 /= gfp.out_samplerate;\n        } else {\n            gfc.lowpass1 = 0;\n            gfc.lowpass2 = 0;\n        }\n\n        /**********************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /**********************************************************************/\n        lame_init_params_ppflt(gfp);\n        /*******************************************************\n         * samplerate and bitrate index\n         *******************************************************/\n        gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n        if (gfc.samplerate_index < 0) {\n            gfp.internal_flags = null;\n            return -1;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            if (gfp.free_format) {\n                gfc.bitrate_index = 0;\n            } else {\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                if (gfc.bitrate_index <= 0) {\n                    gfp.internal_flags = null;\n                    return -1;\n                }\n            }\n        } else {\n            gfc.bitrate_index = 1;\n        }\n\n        /* for CBR, we will write an \"info\" tag. */\n\n        if (gfp.analysis)\n            gfp.bWriteVbrTag = false;\n\n        /* some file options not allowed if output is: not specified or stdout */\n        if (gfc.pinfo != null)\n            gfp.bWriteVbrTag = false;\n        /* disable Xing VBR tag */\n\n        bs.init_bit_stream_w(gfc);\n\n        var j = gfc.samplerate_index + (3 * gfp.version) + 6\n            * (gfp.out_samplerate < 16000 ? 1 : 0);\n        for (var i = 0; i < Encoder.SBMAX_l + 1; i++)\n            gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n\n        for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n            var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21])\n                / Encoder.PSFB21;\n            var start = gfc.scalefac_band.l[21] + i * size;\n            gfc.scalefac_band.psfb21[i] = start;\n        }\n        gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n\n        for (var i = 0; i < Encoder.SBMAX_s + 1; i++)\n            gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n\n        for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n            var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                / Encoder.PSFB12;\n            var start = gfc.scalefac_band.s[12] + i * size;\n            gfc.scalefac_band.psfb12[i] = start;\n        }\n        gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\n        /* determine the mean bitrate for main data */\n        if (gfp.version == 1) /* MPEG 1 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 17 : 4 + 32;\n        else\n        /* MPEG 2 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 9 : 4 + 17;\n\n        if (gfp.error_protection)\n            gfc.sideinfo_len += 2;\n\n        lame_init_bitstream(gfp);\n\n        gfc.Class_ID = LAME_ID;\n\n        {\n            var k;\n\n            for (k = 0; k < 19; k++)\n                gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n\n            if (gfp.ATHtype == -1)\n                gfp.ATHtype = 4;\n        }\n        assert(gfp.VBR_q <= 9);\n        assert(gfp.VBR_q >= 0);\n\n        switch (gfp.VBR) {\n\n            case VbrMode.vbr_mt:\n                gfp.VBR = VbrMode.vbr_mtrh;\n            //$FALL-THROUGH$\n            case VbrMode.vbr_mtrh:\n            {\n                if (gfp.useTemporal == null) {\n                    gfp.useTemporal = false;\n                    /* off by default for this VBR mode */\n                }\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n                /**\n                 * <PRE>\n                 *   The newer VBR code supports only a limited\n                 *     subset of quality levels:\n                 *     9-5=5 are the same, uses x^3/4 quantization\n                 *   4-0=0 are the same  5 plus best huffman divide code\n                 * </PRE>\n                 */\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n                if (gfp.quality < 5)\n                    gfp.quality = 0;\n                if (gfp.quality > 5)\n                    gfp.quality = 5;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                gfc.iteration_loop = new VBRNewIterationLoop(qu);\n                break;\n\n            }\n            case VbrMode.vbr_rh:\n            {\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                /*\n                 * VBR needs at least the output of GPSYCHO, so we have to garantee\n                 * that by setting a minimum quality level, actually level 6 does\n                 * it. down to level 6\n                 */\n                if (gfp.quality > 6)\n                    gfp.quality = 6;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                gfc.iteration_loop = new VBROldIterationLoop(qu);\n                break;\n            }\n\n            default: /* cbr/abr */\n            {\n                var vbrmode;\n\n                /*\n                 * no sfb21 extra with CBR code\n                 */\n                gfc.sfb21_extra = false;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                vbrmode = gfp.VBR;\n                if (vbrmode == VbrMode.vbr_off)\n                    gfp.VBR_mean_bitrate_kbps = gfp.brate;\n                /* second, set parameters depending on bitrate */\n                p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n                gfp.VBR = vbrmode;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                if (vbrmode == VbrMode.vbr_off) {\n                    gfc.iteration_loop = new CBRNewIterationLoop(qu);\n                } else {\n                    gfc.iteration_loop = new ABRIterationLoop(qu);\n                }\n                break;\n            }\n        }\n        assert(gfp.scale >= 0);\n        /* initialize default values common for all modes */\n\n        if (gfp.VBR != VbrMode.vbr_off) { /* choose a min/max bitrate for VBR */\n            /* if the user didn't specify VBR_max_bitrate: */\n            gfc.VBR_min_bitrate = 1;\n            /*\n             * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\n             */\n            gfc.VBR_max_bitrate = 14;\n            /*\n             * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\n             */\n            if (gfp.out_samplerate < 16000)\n                gfc.VBR_max_bitrate = 8;\n            /* default: allow 64 kbps (MPEG-2.5) */\n            if (gfp.VBR_min_bitrate_kbps != 0) {\n                gfp.VBR_min_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_min_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_min_bitrate < 0)\n                    return -1;\n            }\n            if (gfp.VBR_max_bitrate_kbps != 0) {\n                gfp.VBR_max_bitrate_kbps = FindNearestBitrate(\n                    gfp.VBR_max_bitrate_kbps, gfp.version,\n                    gfp.out_samplerate);\n                gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps,\n                    gfp.version, gfp.out_samplerate);\n                if (gfc.VBR_max_bitrate < 0)\n                    return -1;\n            }\n            gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\n            gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\n            gfp.VBR_mean_bitrate_kbps = Math.min(\n                Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n            gfp.VBR_mean_bitrate_kbps = Math.max(\n                Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate],\n                gfp.VBR_mean_bitrate_kbps);\n        }\n\n        /* just another daily changing developer switch */\n        if (gfp.tune) {\n            gfc.PSY.mask_adjust += gfp.tune_value_a;\n            gfc.PSY.mask_adjust_short += gfp.tune_value_a;\n        }\n\n        /* initialize internal qval settings */\n        lame_init_qval(gfp);\n        assert(gfp.scale >= 0);\n        /*\n         * automatic ATH adjustment on\n         */\n        if (gfp.athaa_type < 0)\n            gfc.ATH.useAdjust = 3;\n        else\n            gfc.ATH.useAdjust = gfp.athaa_type;\n\n        /* initialize internal adaptive ATH settings -jd */\n        gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity\n            / -10.0);\n\n        if (gfp.short_blocks == null) {\n            gfp.short_blocks = ShortBlock.short_block_allowed;\n        }\n\n        /*\n         * Note Jan/2003: Many hardware decoders cannot handle short blocks in\n         * regular stereo mode unless they are coupled (same type in both\n         * channels) it is a rare event (1 frame per min. or so) that LAME would\n         * use uncoupled short blocks, so lets turn them off until we decide how\n         * to handle this. No other encoders allow uncoupled short blocks, even\n         * though it is in the standard.\n         */\n        /*\n         * rh 20040217: coupling makes no sense for mono and dual-mono streams\n         */\n        if (gfp.short_blocks == ShortBlock.short_block_allowed\n            && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n            gfp.short_blocks = ShortBlock.short_block_coupled;\n        }\n\n        if (gfp.quant_comp < 0)\n            gfp.quant_comp = 1;\n        if (gfp.quant_comp_short < 0)\n            gfp.quant_comp_short = 0;\n\n        if (gfp.msfix < 0)\n            gfp.msfix = 0;\n\n        /* select psychoacoustic model */\n        gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n\n        if (gfp.internal_flags.nsPsy.attackthre < 0)\n            gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n        if (gfp.internal_flags.nsPsy.attackthre_s < 0)\n            gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n\n        assert(gfp.scale >= 0);\n\n        if (gfp.scale < 0)\n            gfp.scale = 1;\n\n        if (gfp.ATHtype < 0)\n            gfp.ATHtype = 4;\n\n        if (gfp.ATHcurve < 0)\n            gfp.ATHcurve = 4;\n\n        if (gfp.athaa_loudapprox < 0)\n            gfp.athaa_loudapprox = 2;\n\n        if (gfp.interChRatio < 0)\n            gfp.interChRatio = 0;\n\n        if (gfp.useTemporal == null)\n            gfp.useTemporal = true;\n        /* on by default */\n\n        /*\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\n         * Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         */\n        gfc.slot_lag = gfc.frac_SpF = 0;\n        if (gfp.VBR == VbrMode.vbr_off)\n            gfc.slot_lag = gfc.frac_SpF = (((gfp.version + 1) * 72000 * gfp.brate) % gfp.out_samplerate) | 0;\n\n        qupvt.iteration_init(gfp);\n        psy.psymodel_init(gfp);\n        assert(gfp.scale >= 0);\n        return 0;\n    }\n\n    function update_inbuffer_size(gfc, nsamples) {\n        if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n            gfc.in_buffer_0 = new_float(nsamples);\n            gfc.in_buffer_1 = new_float(nsamples);\n            gfc.in_buffer_nsamples = nsamples;\n        }\n    }\n\n    this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n        var gfc = gfp.internal_flags;\n        var buffer = new_short_n([2, 1152]);\n        var imp3 = 0, mp3count, mp3buffer_size_remaining;\n\n        /*\n         * we always add POSTDELAY=288 padding to make sure granule with real\n         * data can be complety decoded (because of 50% overlap with next\n         * granule\n         */\n        var end_padding;\n        var frames_left;\n        var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n        var mf_needed = calcNeeded(gfp);\n\n        /* Was flush already called? */\n        if (gfc.mf_samples_to_encode < 1) {\n            return 0;\n        }\n        mp3count = 0;\n\n        if (gfp.in_samplerate != gfp.out_samplerate) {\n            /*\n             * delay due to resampling; needs to be fixed, if resampling code\n             * gets changed\n             */\n            samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\n        }\n        end_padding = gfp.framesize - (samples_to_encode % gfp.framesize);\n        if (end_padding < 576)\n            end_padding += gfp.framesize;\n        gfp.encoder_padding = end_padding;\n\n        frames_left = (samples_to_encode + end_padding) / gfp.framesize;\n\n        /*\n         * send in a frame of 0 padding until all internal sample buffers are\n         * flushed\n         */\n        while (frames_left > 0 && imp3 >= 0) {\n            var bunch = mf_needed - gfc.mf_size;\n            var frame_num = gfp.frameNum;\n\n            bunch *= gfp.in_samplerate;\n            bunch /= gfp.out_samplerate;\n            if (bunch > 1152)\n                bunch = 1152;\n            if (bunch < 1)\n                bunch = 1;\n\n            mp3buffer_size_remaining = mp3buffer_size - mp3count;\n\n            /* if user specifed buffer size = 0, dont check size */\n            if (mp3buffer_size == 0)\n                mp3buffer_size_remaining = 0;\n\n            imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch,\n                mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n\n            mp3bufferPos += imp3;\n            mp3count += imp3;\n            frames_left -= (frame_num != gfp.frameNum) ? 1 : 0;\n        }\n        /*\n         * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\n         * calling it more than once in a row.\n         */\n        gfc.mf_samples_to_encode = 0;\n\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        /* mp3 related stuff. bit buffer might still contain some mp3 data */\n        bs.flush_bitstream(gfp);\n        imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n            mp3buffer_size_remaining, 1);\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n        mp3bufferPos += imp3;\n        mp3count += imp3;\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            /* write a id3 tag to the bitstream */\n            id3.id3tag_write_v1(gfp);\n\n            imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n                mp3buffer_size_remaining, 0);\n\n            if (imp3 < 0) {\n                return imp3;\n            }\n            mp3count += imp3;\n        }\n        return mp3count;\n    };\n\n    this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        update_inbuffer_size(gfc, nsamples);\n\n        in_buffer[0] = gfc.in_buffer_0;\n        in_buffer[1] = gfc.in_buffer_1;\n\n        /* make a copy of input buffer, changing type to sample_t */\n        for (var i = 0; i < nsamples; i++) {\n            in_buffer[0][i] = buffer_l[i];\n            if (gfc.channels_in > 1)\n                in_buffer[1][i] = buffer_r[i];\n        }\n\n        return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1],\n            nsamples, mp3buf, mp3bufPos, mp3buf_size);\n    }\n\n    function calcNeeded(gfp) {\n        var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\n        /*\n         * amount needed for FFT\n         */\n        mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n        assert(LameInternalFlags.MFSIZE >= mf_needed);\n\n        return mf_needed;\n    }\n\n    function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var mp3size = 0, ret, i, ch, mf_needed;\n        var mp3out;\n        var mfbuf = [null, null];\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        /* copy out any tags that may have been written into bitstream */\n        mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n        if (mp3out < 0)\n            return mp3out;\n        /* not enough buffer space */\n        mp3bufPos += mp3out;\n        mp3size += mp3out;\n\n        in_buffer[0] = buffer_l;\n        in_buffer[1] = buffer_r;\n\n        /* Apply user defined re-scaling */\n\n        /* user selected scaling of the samples */\n        if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale;\n                if (gfc.channels_out == 2)\n                    in_buffer[1][i] *= gfp.scale;\n            }\n        }\n\n        /* user selected scaling of the channel 0 (left) samples */\n        if (BitStream.NEQ(gfp.scale_left, 0)\n            && BitStream.NEQ(gfp.scale_left, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale_left;\n            }\n        }\n\n        /* user selected scaling of the channel 1 (right) samples */\n        if (BitStream.NEQ(gfp.scale_right, 0)\n            && BitStream.NEQ(gfp.scale_right, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[1][i] *= gfp.scale_right;\n            }\n        }\n\n        /* Downsample to Mono if 2 channels in and 1 channel out */\n        if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] = 0.5 * ( in_buffer[0][i] + in_buffer[1][i]);\n                in_buffer[1][i] = 0.0;\n            }\n        }\n\n        mf_needed = calcNeeded(gfp);\n\n        mfbuf[0] = gfc.mfbuf[0];\n        mfbuf[1] = gfc.mfbuf[1];\n\n        var in_bufferPos = 0;\n        while (nsamples > 0) {\n            var in_buffer_ptr = [null, null];\n            var n_in = 0;\n            /* number of input samples processed with fill_buffer */\n            var n_out = 0;\n            /* number of samples output with fill_buffer */\n            /* n_in <> n_out if we are resampling */\n\n            in_buffer_ptr[0] = in_buffer[0];\n            in_buffer_ptr[1] = in_buffer[1];\n            /* copy in new samples into mfbuf, with resampling */\n            var inOut = new InOut();\n            fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples,\n                inOut);\n            n_in = inOut.n_in;\n            n_out = inOut.n_out;\n\n            /* compute ReplayGain of resampled input if requested */\n            if (gfc.findReplayGain && !gfc.decode_on_the_fly)\n                if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size,\n                        mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                    return -6;\n\n            /* update in_buffer counters */\n            nsamples -= n_in;\n            in_bufferPos += n_in;\n            if (gfc.channels_out == 2)\n                ;// in_bufferPos += n_in;\n\n            /* update mfbuf[] counters */\n            gfc.mf_size += n_out;\n            assert(gfc.mf_size <= LameInternalFlags.MFSIZE);\n\n            /*\n             * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\n             * have to reinitialize it here when that happened.\n             */\n            if (gfc.mf_samples_to_encode < 1) {\n                gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n            }\n            gfc.mf_samples_to_encode += n_out;\n\n            if (gfc.mf_size >= mf_needed) {\n                /* encode the frame. */\n                /* mp3buf = pointer to current location in buffer */\n                /* mp3buf_size = size of original mp3 output buffer */\n                /* = 0 if we should not worry about the */\n                /* buffer size because calling program is */\n                /* to lazy to compute it */\n                /* mp3size = size of data written to buffer so far */\n                /* mp3buf_size-mp3size = amount of space avalable */\n\n                var buf_size = mp3buf_size - mp3size;\n                if (mp3buf_size == 0)\n                    buf_size = 0;\n\n                ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf,\n                    mp3bufPos, buf_size);\n\n                if (ret < 0)\n                    return ret;\n                mp3bufPos += ret;\n                mp3size += ret;\n\n                /* shift out old samples */\n                gfc.mf_size -= gfp.framesize;\n                gfc.mf_samples_to_encode -= gfp.framesize;\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    for (i = 0; i < gfc.mf_size; i++)\n                        mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n            }\n        }\n        assert(nsamples == 0);\n\n        return mp3size;\n    }\n\n    function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf,\n            mp3bufPos, mp3buf_size);\n        gfp.frameNum++;\n        return ret;\n    }\n\n    function InOut() {\n        this.n_in = 0;\n        this.n_out = 0;\n    }\n\n\n    function NumUsed() {\n        this.num_used = 0;\n    }\n\n    /**\n     * Greatest common divisor.\n     * <p>\n     * Joint work of Euclid and M. Hendry\n     */\n    function gcd(i, j) {\n        return j != 0 ? gcd(j, i % j) : i;\n    }\n\n    /**\n     * Resampling via FIR filter, blackman window.\n     */\n    function blackman(x, fcn, l) {\n        /*\n         * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\n         * S.D. Stearns and R.A. David, Prentice-Hall, 1992\n         */\n        var wcn = (Math.PI * fcn);\n\n        x /= l;\n        if (x < 0)\n            x = 0;\n        if (x > 1)\n            x = 1;\n        var x2 = x - .5;\n\n        var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\n        if (Math.abs(x2) < 1e-9)\n            return (wcn / Math.PI);\n        else\n            return (bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2));\n    }\n\n    function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\n        var gfc = gfp.internal_flags;\n        var i, j = 0, k;\n        /* number of convolution functions to pre-compute */\n        var bpc = gfp.out_samplerate\n            / gcd(gfp.out_samplerate, gfp.in_samplerate);\n        if (bpc > LameInternalFlags.BPC)\n            bpc = LameInternalFlags.BPC;\n\n        var intratio = (Math.abs(gfc.resample_ratio\n            - Math.floor(.5 + gfc.resample_ratio)) < .0001) ? 1 : 0;\n        var fcn = 1.00 / gfc.resample_ratio;\n        if (fcn > 1.00)\n            fcn = 1.00;\n        var filter_l = 31;\n        if (0 == filter_l % 2)\n            --filter_l;\n        /* must be odd */\n        filter_l += intratio;\n        /* unless resample_ratio=int, it must be even */\n\n        var BLACKSIZE = filter_l + 1;\n        /* size of data needed for FIR */\n\n        if (gfc.fill_buffer_resample_init == 0) {\n            gfc.inbuf_old[0] = new_float(BLACKSIZE);\n            gfc.inbuf_old[1] = new_float(BLACKSIZE);\n            for (i = 0; i <= 2 * bpc; ++i)\n                gfc.blackfilt[i] = new_float(BLACKSIZE);\n\n            gfc.itime[0] = 0;\n            gfc.itime[1] = 0;\n\n            /* precompute blackman filter coefficients */\n            for (j = 0; j <= 2 * bpc; j++) {\n                var sum = 0.;\n                var offset = (j - bpc) / (2. * bpc);\n                for (i = 0; i <= filter_l; i++)\n                    sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn,\n                        filter_l);\n                for (i = 0; i <= filter_l; i++)\n                    gfc.blackfilt[j][i] /= sum;\n            }\n            gfc.fill_buffer_resample_init = 1;\n        }\n\n        var inbuf_old = gfc.inbuf_old[ch];\n\n        /* time of j'th element in inbuf = itime + j/ifreq; */\n        /* time of k'th element in outbuf = j/ofreq */\n        for (k = 0; k < desired_len; k++) {\n            var time0;\n            var joff;\n\n            time0 = k * gfc.resample_ratio;\n            /* time of k'th output sample */\n            j = 0 | Math.floor(time0 - gfc.itime[ch]);\n\n            /* check if we need more input data */\n            if ((filter_l + j - filter_l / 2) >= len)\n                break;\n\n            /* blackman filter. by default, window centered at j+.5(filter_l%2) */\n            /* but we want a window centered at time0. */\n            var offset = (time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2)));\n            assert(Math.abs(offset) <= .501);\n\n            /* find the closest precomputed window for this offset: */\n            joff = 0 | Math.floor((offset * 2 * bpc) + bpc + .5);\n            var xvalue = 0.;\n            for (i = 0; i <= filter_l; ++i) {\n\t\t/* force integer index */\n                var j2 = 0 | (i + j - filter_l / 2); \n                var y;\n                assert(j2 < len);\n                assert(j2 + BLACKSIZE >= 0);\n                y = (j2 < 0) ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos\n                + j2];\n                xvalue += y * gfc.blackfilt[joff][i];\n            }\n            outbuf[outbufPos + k] = xvalue;\n        }\n\n        /* k = number of samples added to outbuf */\n        /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */\n\n        /* how many samples of input data were used: */\n        num_used.num_used = Math.min(len, filter_l + j - filter_l / 2);\n\n        /*\n         * adjust our input time counter. Incriment by the number of samples\n         * used, then normalize so that next output sample is at time 0, next\n         * input buffer is at time itime[ch]\n         */\n        gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio;\n\n        /* save the last BLACKSIZE samples into the inbuf_old buffer */\n        if (num_used.num_used >= BLACKSIZE) {\n            for (i = 0; i < BLACKSIZE; i++)\n                inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i\n                - BLACKSIZE];\n        } else {\n            /* shift in num_used.num_used samples into inbuf_old */\n            var n_shift = BLACKSIZE - num_used.num_used;\n            /*\n             * number of samples to\n             * shift\n             */\n\n            /*\n             * shift n_shift samples by num_used.num_used, to make room for the\n             * num_used new samples\n             */\n            for (i = 0; i < n_shift; ++i)\n                inbuf_old[i] = inbuf_old[i + num_used.num_used];\n\n            /* shift in the num_used.num_used samples */\n            for (j = 0; i < BLACKSIZE; ++i, ++j)\n                inbuf_old[i] = inbuf[in_bufferPos + j];\n\n            assert(j == num_used.num_used);\n        }\n        return k;\n        /* return the number samples created at the new samplerate */\n    }\n\n    function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n        var gfc = gfp.internal_flags;\n\n        /* copy in new samples into mfbuf, with resampling if necessary */\n        if ((gfc.resample_ratio < .9999) || (gfc.resample_ratio > 1.0001)) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var numUsed = new NumUsed();\n                io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size,\n                    gfp.framesize, in_buffer[ch], in_bufferPos, nsamples,\n                    numUsed, ch);\n                io.n_in = numUsed.num_used;\n            }\n        } else {\n            io.n_out = Math.min(gfp.framesize, nsamples);\n            io.n_in = io.n_out;\n            for (var i = 0; i < io.n_out; ++i) {\n                mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n                if (gfc.channels_out == 2)\n                    mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n            }\n        }\n    }\n\n}\n\nmodule.exports = Lame;\n","var MPEGMode = require('./MPEGMode.js');\n\nfunction LameGlobalFlags() {\n\n    this.class_id = 0;\n\n    /* input description */\n\n    /**\n     * number of samples. default=-1\n     */\n    this.num_samples = 0;\n    /**\n     * input number of channels. default=2\n     */\n    this.num_channels = 0;\n    /**\n     * input_samp_rate in Hz. default=44.1 kHz\n     */\n    this.in_samplerate = 0;\n    /**\n     * output_samp_rate. default: LAME picks best value at least not used for\n     * MP3 decoding: Remember 44.1 kHz MP3s and AC97\n     */\n    this.out_samplerate = 0;\n    /**\n     * scale input by this amount before encoding at least not used for MP3\n     * decoding\n     */\n    this.scale = 0.;\n    /**\n     * scale input of channel 0 (left) by this amount before encoding\n     */\n    this.scale_left = 0.;\n    /**\n     * scale input of channel 1 (right) by this amount before encoding\n     */\n    this.scale_right = 0.;\n\n    /* general control params */\n    /**\n     * collect data for a MP3 frame analyzer?\n     */\n    this.analysis = false;\n    /**\n     * add Xing VBR tag?\n     */\n    this.bWriteVbrTag = false;\n\n    /**\n     * use lame/mpglib to convert mp3 to wav\n     */\n    this.decode_only = false;\n    /**\n     * quality setting 0=best, 9=worst default=5\n     */\n    this.quality = 0;\n    /**\n     * see enum default = LAME picks best value\n     */\n    this.mode = MPEGMode.STEREO;\n    /**\n     * force M/S mode. requires mode=1\n     */\n    this.force_ms = false;\n    /**\n     * use free format? default=0\n     */\n    this.free_format = false;\n    /**\n     * find the RG value? default=0\n     */\n    this.findReplayGain = false;\n    /**\n     * decode on the fly? default=0\n     */\n    this.decode_on_the_fly = false;\n    /**\n     * 1 (default) writes ID3 tags, 0 not\n     */\n    this.write_id3tag_automatic = false;\n\n    /*\n     * set either brate>0 or compression_ratio>0, LAME will compute the value of\n     * the variable not set. Default is compression_ratio = 11.025\n     */\n    /**\n     * bitrate\n     */\n    this.brate = 0;\n    /**\n     * sizeof(wav file)/sizeof(mp3 file)\n     */\n    this.compression_ratio = 0.;\n\n    /* frame params */\n    /**\n     * mark as copyright. default=0\n     */\n    this.copyright = 0;\n    /**\n     * mark as original. default=1\n     */\n    this.original = 0;\n    /**\n     * the MP3 'private extension' bit. Meaningless\n     */\n    this.extension = 0;\n    /**\n     * Input PCM is emphased PCM (for instance from one of the rarely emphased\n     * CDs), it is STRONGLY not recommended to use this, because psycho does not\n     * take it into account, and last but not least many decoders don't care\n     * about these bits\n     */\n    this.emphasis = 0;\n    /**\n     * use 2 bytes per frame for a CRC checksum. default=0\n     */\n    this.error_protection = 0;\n    /**\n     * enforce ISO spec as much as possible\n     */\n    this.strict_ISO = false;\n\n    /**\n     * use bit reservoir?\n     */\n    this.disable_reservoir = false;\n\n    /* quantization/noise shaping */\n    this.quant_comp = 0;\n    this.quant_comp_short = 0;\n    this.experimentalY = false;\n    this.experimentalZ = 0;\n    this.exp_nspsytune = 0;\n\n    this.preset = 0;\n\n    /* VBR control */\n    this.VBR = null;\n    /**\n     * Range [0,...,1[\n     */\n    this.VBR_q_frac = 0.;\n    /**\n     * Range [0,...,9]\n     */\n    this.VBR_q = 0;\n    this.VBR_mean_bitrate_kbps = 0;\n    this.VBR_min_bitrate_kbps = 0;\n    this.VBR_max_bitrate_kbps = 0;\n    /**\n     * strictly enforce VBR_min_bitrate normaly, it will be violated for analog\n     * silence\n     */\n    this.VBR_hard_min = 0;\n\n    /* resampling and filtering */\n\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.lowpassfreq = 0;\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.highpassfreq = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.lowpasswidth = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.highpasswidth = 0;\n\n    /*\n     * psycho acoustics and other arguments which you should not change unless\n     * you know what you are doing\n     */\n\n    this.maskingadjust = 0.;\n    this.maskingadjust_short = 0.;\n    /**\n     * only use ATH\n     */\n    this.ATHonly = false;\n    /**\n     * only use ATH for short blocks\n     */\n    this.ATHshort = false;\n    /**\n     * disable ATH\n     */\n    this.noATH = false;\n    /**\n     * select ATH formula\n     */\n    this.ATHtype = 0;\n    /**\n     * change ATH formula 4 shape\n     */\n    this.ATHcurve = 0.;\n    /**\n     * lower ATH by this many db\n     */\n    this.ATHlower = 0.;\n    /**\n     * select ATH auto-adjust scheme\n     */\n    this.athaa_type = 0;\n    /**\n     * select ATH auto-adjust loudness calc\n     */\n    this.athaa_loudapprox = 0;\n    /**\n     * dB, tune active region of auto-level\n     */\n    this.athaa_sensitivity = 0.;\n    this.short_blocks = null;\n    /**\n     * use temporal masking effect\n     */\n    this.useTemporal = false;\n    this.interChRatio = 0.;\n    /**\n     * Naoki's adjustment of Mid/Side maskings\n     */\n    this.msfix = 0.;\n\n    /**\n     * 0 off, 1 on\n     */\n    this.tune = false;\n    /**\n     * used to pass values for debugging and stuff\n     */\n    this.tune_value_a = 0.;\n\n    /************************************************************************/\n    /* internal variables, do not set... */\n    /* provided because they may be of use to calling application */\n    /************************************************************************/\n\n    /**\n     * 0=MPEG-2/2.5 1=MPEG-1\n     */\n    this.version = 0;\n    this.encoder_delay = 0;\n    /**\n     * number of samples of padding appended to input\n     */\n    this.encoder_padding = 0;\n    this.framesize = 0;\n    /**\n     * number of frames encoded\n     */\n    this.frameNum = 0;\n    /**\n     * is this struct owned by calling program or lame?\n     */\n    this.lame_allocated_gfp = 0;\n    /**************************************************************************/\n    /* more internal variables are stored in this structure: */\n    /**************************************************************************/\n    this.internal_flags = null;\n}\n\nmodule.exports = LameGlobalFlags;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar IIISideInfo = require('./IIISideInfo.js');\nvar ScaleFac = require('./ScaleFac.js');\nvar NsPsy = require('./NsPsy.js');\nvar VBRSeekInfo = require('./VBRSeekInfo.js');\nvar III_psy_xmin = require('./III_psy_xmin.js');\nvar Encoder = require('./Encoder.js');\nvar L3Side = require('./L3Side.js');\n\n\nLameInternalFlags.MFSIZE = (3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY);\nLameInternalFlags.MAX_HEADER_BUF = 256;\nLameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\nLameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\nLameInternalFlags.BPC = 320;\n\nfunction LameInternalFlags() {\n    var MAX_HEADER_LEN = 40;\n\n\n    /********************************************************************\n     * internal variables NOT set by calling program, and should not be *\n     * modified by the calling program *\n     ********************************************************************/\n\n    /**\n     * Some remarks to the Class_ID field: The Class ID is an Identifier for a\n     * pointer to this struct. It is very unlikely that a pointer to\n     * lame_global_flags has the same 32 bits in it's structure (large and other\n     * special properties, for instance prime).\n     *\n     * To test that the structure is right and initialized, use: if ( gfc .\n     * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\n     * data and 1 for init data, the right test should be \"if (flag == 1)\" and\n     * NOT \"if (flag)\". Unintended modification of this element will be\n     * otherwise misinterpreted as an init.\n     */\n    this.Class_ID = 0;\n\n    this.lame_encode_frame_init = 0;\n    this.iteration_init_init = 0;\n    this.fill_buffer_resample_init = 0;\n\n    //public float mfbuf[][] = new float[2][MFSIZE];\n    this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\n\n    /**\n     * granules per frame\n     */\n    this.mode_gr = 0;\n    /**\n     * number of channels in the input data stream (PCM or decoded PCM)\n     */\n    this.channels_in = 0;\n    /**\n     * number of channels in the output data stream (not used for decoding)\n     */\n    this.channels_out = 0;\n    /**\n     * input_samp_rate/output_samp_rate\n     */\n        //public double resample_ratio;\n    this.resample_ratio = 0.;\n\n    this.mf_samples_to_encode = 0;\n    this.mf_size = 0;\n    /**\n     * min bitrate index\n     */\n    this.VBR_min_bitrate = 0;\n    /**\n     * max bitrate index\n     */\n    this.VBR_max_bitrate = 0;\n    this.bitrate_index = 0;\n    this.samplerate_index = 0;\n    this.mode_ext = 0;\n\n    /* lowpass and highpass filter control */\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.lowpass1 = 0.;\n    this.lowpass2 = 0.;\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.highpass1 = 0.;\n    this.highpass2 = 0.;\n\n    /**\n     * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\n     */\n    this.noise_shaping = 0;\n\n    /**\n     * 0 = ISO model: amplify all distorted bands<BR>\n     * 1 = amplify within 50% of max (on db scale)<BR>\n     * 2 = amplify only most distorted band<BR>\n     * 3 = method 1 and refine with method 2<BR>\n     */\n    this.noise_shaping_amp = 0;\n    /**\n     * 0 = no substep<BR>\n     * 1 = use substep shaping at last step(VBR only)<BR>\n     * (not implemented yet)<BR>\n     * 2 = use substep inside loop<BR>\n     * 3 = use substep inside loop and last step<BR>\n     */\n    this.substep_shaping = 0;\n\n    /**\n     * 1 = gpsycho. 0 = none\n     */\n    this.psymodel = 0;\n    /**\n     * 0 = stop at over=0, all scalefacs amplified or<BR>\n     * a scalefac has reached max value<BR>\n     * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\n     * 2 = stop when all scalefacs amplified\n     */\n    this.noise_shaping_stop = 0;\n\n    /**\n     * 0 = no, 1 = yes\n     */\n    this.subblock_gain = 0;\n    /**\n     * 0 = no. 1=outside loop 2=inside loop(slow)\n     */\n    this.use_best_huffman = 0;\n\n    /**\n     * 0 = stop early after 0 distortion found. 1 = full search\n     */\n    this.full_outer_loop = 0;\n\n    //public IIISideInfo l3_side = new IIISideInfo();\n    this.l3_side = new IIISideInfo();\n    this.ms_ratio = new_float(2);\n\n    /* used for padding */\n    /**\n     * padding for the current frame?\n     */\n    this.padding = 0;\n    this.frac_SpF = 0;\n    this.slot_lag = 0;\n\n    /**\n     * optional ID3 tags\n     */\n        //public ID3TagSpec tag_spec;\n    this.tag_spec = null;\n    this.nMusicCRC = 0;\n\n    /* variables used by Quantize */\n    //public int OldValue[] = new int[2];\n    this.OldValue = new_int(2);\n    //public int CurrentStep[] = new int[2];\n    this.CurrentStep = new_int(2);\n\n    this.masking_lower = 0.;\n    //public int bv_scf[] = new int[576];\n    this.bv_scf = new_int(576);\n    //public int pseudohalf[] = new int[L3Side.SFBMAX];\n    this.pseudohalf = new_int(L3Side.SFBMAX);\n\n    /**\n     * will be set in lame_init_params\n     */\n    this.sfb21_extra = false;\n\n    /* BPC = maximum number of filter convolution windows to precompute */\n    //public float[][] inbuf_old = new float[2][];\n    this.inbuf_old = new Array(2);\n    //public float[][] blackfilt = new float[2 * BPC + 1][];\n    this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\n    //public double itime[] = new double[2];\n    this.itime = new_double(2);\n    this.sideinfo_len = 0;\n\n    /* variables for newmdct.c */\n    //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n    this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n    this.amp_filter = new_float(32);\n\n    /* variables for BitStream */\n\n    /**\n     * <PRE>\n     * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\n     * max number of frames in reservoir:  8\n     * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\n     * with VBR, if you are encoding all silence, it is possible to\n     * have 8kbs/24khz frames with 1byte of data each, which means we need\n     * to buffer up to 255 headers!\n     * </PRE>\n     */\n    /**\n     * also, max_header_buf has to be a power of two\n     */\n    /**\n     * max size of header is 38\n     */\n\n    function Header() {\n        this.write_timing = 0;\n        this.ptr = 0;\n        //public byte buf[] = new byte[MAX_HEADER_LEN];\n        this.buf = new_byte(MAX_HEADER_LEN);\n    }\n\n    this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n\n    this.h_ptr = 0;\n    this.w_ptr = 0;\n    this.ancillary_flag = 0;\n\n    /* variables for Reservoir */\n    /**\n     * in bits\n     */\n    this.ResvSize = 0;\n    /**\n     * in bits\n     */\n    this.ResvMax = 0;\n\n    //public ScaleFac scalefac_band = new ScaleFac();\n    this.scalefac_band = new ScaleFac();\n\n    /* daa from PsyModel */\n    /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\n    /* to be remembered for the unpredictability measure. For \"r\" and */\n    /* \"phi_sav\", the first index from the left is the channel select and */\n    /* the second index is the \"age\" of the data. */\n    this.minval_l = new_float(Encoder.CBANDS);\n    this.minval_s = new_float(Encoder.CBANDS);\n    this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n    this.s3_ss = null;\n    this.s3_ll = null;\n    this.decay = 0.;\n\n    //public III_psy_xmin[] thm = new III_psy_xmin[4];\n    //public III_psy_xmin[] en = new III_psy_xmin[4];\n    this.thm = new Array(4);\n    this.en = new Array(4);\n\n    /**\n     * fft and energy calculation\n     */\n    this.tot_ener = new_float(4);\n\n    /* loudness calculation (for adaptive threshold of hearing) */\n    /**\n     * loudness^2 approx. per granule and channel\n     */\n    this.loudness_sq = new_float_n([2, 2]);\n    /**\n     * account for granule delay of L3psycho_anal\n     */\n    this.loudness_sq_save = new_float(2);\n\n    /**\n     * Scale Factor Bands\n     */\n    this.mld_l = new_float(Encoder.SBMAX_l);\n    this.mld_s = new_float(Encoder.SBMAX_s);\n    this.bm_l = new_int(Encoder.SBMAX_l);\n    this.bo_l = new_int(Encoder.SBMAX_l);\n    this.bm_s = new_int(Encoder.SBMAX_s);\n    this.bo_s = new_int(Encoder.SBMAX_s);\n    this.npart_l = 0;\n    this.npart_s = 0;\n\n    this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n    this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n\n    this.numlines_s = new_int(Encoder.CBANDS);\n    this.numlines_l = new_int(Encoder.CBANDS);\n    this.rnumlines_l = new_float(Encoder.CBANDS);\n    this.mld_cb_l = new_float(Encoder.CBANDS);\n    this.mld_cb_s = new_float(Encoder.CBANDS);\n    this.numlines_s_num1 = 0;\n    this.numlines_l_num1 = 0;\n\n    /* ratios */\n    this.pe = new_float(4);\n    this.ms_ratio_s_old = 0.;\n    this.ms_ratio_l_old = 0.;\n    this.ms_ener_ratio_old = 0.;\n\n    /**\n     * block type\n     */\n    this.blocktype_old = new_int(2);\n\n    /**\n     * variables used for --nspsytune\n     */\n    this.nsPsy = new NsPsy();\n\n    /**\n     * used for Xing VBR header\n     */\n    this.VBR_seek_table = new VBRSeekInfo();\n\n    /**\n     * all ATH related stuff\n     */\n        //public ATH ATH;\n    this.ATH = null;\n\n    this.PSY = null;\n\n    this.nogap_total = 0;\n    this.nogap_current = 0;\n\n    /* ReplayGain */\n    this.decode_on_the_fly = true;\n    this.findReplayGain = true;\n    this.findPeakSample = true;\n    this.PeakSample = 0.;\n    this.RadioGain = 0;\n    this.AudiophileGain = 0;\n    //public ReplayGain rgdata;\n    this.rgdata = null;\n\n    /**\n     * gain change required for preventing clipping\n     */\n    this.noclipGainChange = 0;\n    /**\n     * user-specified scale factor required for preventing clipping\n     */\n    this.noclipScale = 0.;\n\n    /* simple statistics */\n    this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n    /**\n     * norm/start/short/stop/mixed(short)/sum\n     */\n    this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n    //public PlottingData pinfo;\n    //public MPGLib.mpstr_tag hip;\n    this.pinfo = null;\n    this.hip = null;\n\n    this.in_buffer_nsamples = 0;\n    //public float[] in_buffer_0;\n    //public float[] in_buffer_1;\n    this.in_buffer_0 = null;\n    this.in_buffer_1 = null;\n\n    //public IIterationLoop iteration_loop;\n    this.iteration_loop = null;\n\n    for (var i = 0; i < this.en.length; i++) {\n        this.en[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.thm.length; i++) {\n        this.thm[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.header.length; i++) {\n        this.header[i] = new Header();\n    }\n\n}\n\nmodule.exports = LameInternalFlags;\n","//package mp3;\n\n/* MPEG modes */\nfunction MPEGMode(ordinal) {\n    var _ordinal = ordinal;\n    this.ordinal = function () {\n        return _ordinal;\n    }\n}\n\nMPEGMode.STEREO = new MPEGMode(0);\nMPEGMode.JOINT_STEREO = new MPEGMode(1);\nMPEGMode.DUAL_CHANNEL = new MPEGMode(2);\nMPEGMode.MONO = new MPEGMode(3);\nMPEGMode.NOT_SET = new MPEGMode(4);\n\nmodule.exports = MPEGMode;\n","function MeanBits(meanBits) {\n    this.bits = meanBits;\n}\n\nmodule.exports = MeanBits;\n","/*\n *      MP3 window subband -> subband filtering -> mdct routine\n *\n *      Copyright (c) 1999-2000 Takehiro Tominaga\n *\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n/*\n *         Special Thanks to Patrick De Smet for your advices.\n */\n\n/* $Id: NewMDCT.java,v 1.11 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n\nfunction NewMDCT() {\n\n\tvar enwindow = [\n\t\t\t-4.77e-07 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.03951e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.53674e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.841473e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.5758972e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.401756e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.83715e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.740951125354959 / 2.384e-06, /* 15 */\n\t\t\t1.2398e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.91212e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.283096e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.6994476e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.8756866e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.630711e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.47478e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.4782e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.063471690191471e-01, 1.960342806591213e-01,\n\n\t\t\t-4.77e-07 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.05858e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.30786e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.521515e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.5694122e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.643036e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.91821e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.6321e-05 * 0.773010453362737 / 2.384e-06, /* 14 */\n\t\t\t1.1444e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.65462e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.110004e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.6112804e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.9634247e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.803326e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.77042e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.6689e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t8.206787908286602e-01, 3.901806440322567e-01,\n\n\t\t\t-4.77e-07 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.07288e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.02653e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t2.174854e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.5586357e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.858566e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.95159e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.3460e-05 * 0.803207531480645 / 2.384e-06, /* 13 */\n\t\t\t1.0014e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.40190e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.937389e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.5233517e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.0506859e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.974033e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t-3.07560e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t-1.8120e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t7.416505462720353e-01, 5.805693545089249e-01,\n\n\t\t\t-4.77e-07 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t8.68797e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.800537e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t3.5435200e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t4.049301e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.94205e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.0599e-05 * 0.831469612302545 / 2.384e-06, /* 12 */\n\t\t\t9.060e-06 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.16348e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.766682e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.4358521e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-2.1372318e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.14188e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.39031e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t-1.9550e-05 * 0.831469612302545 / 2.384e-06,\n\t\t\t6.681786379192989e-01, 7.653668647301797e-01,\n\n\t\t\t-4.77e-07 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.29220e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.399517e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t3.5242081e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t4.215240e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.89437e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.7261e-05 * 0.857728610000272 / 2.384e-06, /* 11 */\n\t\t\t8.106e-06 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.3937e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.597881e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.3489246e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.2228718e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.306866e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.71456e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.1458e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t5.993769336819237e-01, 9.427934736519954e-01,\n\n\t\t\t-4.77e-07 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.8392e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.71317e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t3.5007000e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t4.357815e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.80854e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t8.3923e-05 * 0.881921264348355 / 2.384e-06, /* 10 */\n\t\t\t7.629e-06 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.2956e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.432419e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.2627602e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3074150e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-3.467083e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t-4.04358e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3365e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t5.345111359507916e-01, 1.111140466039205e+00,\n\n\t\t\t-9.54e-07 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t7.31945e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.15938e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t3.4730434e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.477024e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t9.68933e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t8.0585e-05 * 0.903989293123443 / 2.384e-06, /* 9 */\n\t\t\t6.676e-06 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.269817e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.1775017e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.3907185e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-3.622532e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t-4.38213e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.5272e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.729647758913199e-01, 1.268786568327291e+00,\n\n\t\t\t-9.54e-07 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.06812e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.74248e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.3379e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4412861e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.573822e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t9.54151e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t7.6771e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.199e-06 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4332e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.111031e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.0933399e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.4725437e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-3.771782e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-4.72546e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.7657e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.1421356237309504879e-01, /* tan(PI/8) */\n\t\t\t1.414213562373095e+00,\n\n\t\t\t-9.54e-07 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.05381e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t6.10352e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-4.75883e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.4055710e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t4.649162e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.35555e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t7.3433e-05 * 0.941544065183021 / 2.384e-06, /* 7 */\n\t\t\t5.245e-06 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.7166e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.56535e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.0103703e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-2.5527000e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.914356e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t-5.07355e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.0041e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.578057213145241e-01, 1.546020906725474e+00,\n\n\t\t\t-9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t1.02520e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t5.39303e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-1.011848e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.3659935e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t4.703045e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.15051e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t7.0095e-05 * 0.956940335732209 / 2.384e-06, /* 6 */\n\t\t\t4.768e-06 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t8.06808e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.287834e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-2.6310921e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t-4.048824e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-5.42164e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-3.2425e-05 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.033466836073424e-01, 1.662939224605090e+00,\n\n\t\t\t-1.431e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.62532e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.573563e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t3.3225536e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.737377e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.91685e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.6280e-05 * 0.970031253194544 / 2.384e-06, /* 5 */\n\t\t\t4.292e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.3828e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.61850e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.487225e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-2.7073860e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t-4.174709e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-5.76973e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-3.4809e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t2.504869601913055e-01, 1.763842528696710e+00,\n\n\t\t\t-1.431e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t9.5367e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.78609e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.161503e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.2754898e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t4.752159e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t8.66413e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t6.2943e-05 * 0.98078528040323 / 2.384e-06, /* 4 */\n\t\t\t3.815e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.718e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t5.22137e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t7.703304e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.7815342e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t-4.290581e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-6.11782e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-3.7670e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t1.989123673796580e-01, 1.847759065022573e+00,\n\n\t\t\t-1.907e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t9.0122e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t2.88486e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.774239e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.2248020e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t4.748821e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t8.38757e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t5.9605e-05 * 0.989176509964781 / 2.384e-06, /* 3 */\n\t\t\t3.338e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t-3.9577e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.88145e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t6.937027e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.8532982e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.395962e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-6.46591e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.0531e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t1.483359875383474e-01, 1.913880671464418e+00,\n\n\t\t\t-1.907e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.4400e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t1.91689e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-3.411293e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.1706810e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t4.728317e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.09669e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t5.579e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.338e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t-5.0545e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t2.59876e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t6.189346e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-2.9224873e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.489899e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-6.80923e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.3392e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t9.849140335716425e-02, 1.961570560806461e+00,\n\n\t\t\t-2.384e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.7724e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t8.8215e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.072189e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t3.1132698e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.691124e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.79152e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t2.861e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t-6.0558e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t1.37329e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.462170e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-2.9890060e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.570484e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-7.14302e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.6253e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.912684976946725e-02, 1.990369453344394e+00,\n\n\t\t\t3.5780907e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.7876148e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t3.134727e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.457142e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t9.71317e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.18868e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.01566e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.3828e-05 * Util.SQRT2 * 0.5 / 2.384e-06,\n\n\t\t\t3.0526638e-02 / 2.384e-06, 4.638195e-03 / 2.384e-06,\n\t\t\t7.47204e-04 / 2.384e-06, 4.9591e-05 / 2.384e-06,\n\t\t\t4.756451e-03 / 2.384e-06, 2.1458e-05 / 2.384e-06,\n\t\t\t-6.9618e-05 / 2.384e-06, /* 2.384e-06/2.384e-06 */\n\t];\n\n\tvar NS = 12;\n\tvar NL = 36;\n\n\tvar win = [\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049690e-13,\n\t     6.423305872147839e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943412e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758252e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558783e-12,\n\t     8.371015190102974e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.456116108943412e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758252e-12,\n\t     -2.858043359288076e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558783e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347923e-13,\n\t     -6.423305872147843e-13,\n\t     -9.400849094049696e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049694e-13,\n\t     -6.423305872147840e-13,\n\t     -2.382191739347918e-13,\n\t     ],\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049688e-13,\n\t     6.423305872147841e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943413e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758253e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558782e-12,\n\t     8.371015190102975e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.461314069809755e-12,\n\t     -4.921085770524055e-12,\n\t     -4.343405037091838e-12,\n\t     -3.732668368707687e-12,\n\t     -3.093523840190885e-12,\n\t     -2.430835727329465e-12,\n\t     -1.734679010007751e-12,\n\t     -9.748253656609281e-13,\n\t     -2.797435120168326e-13,\n\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     -2.283748241799531e-13,\n\t     -4.037858874020686e-13,\n\t     -2.146547464825323e-13,\n\t     ],\n\t    [\n\t     1.316524975873958e-01, /* win[SHORT_TYPE] */\n\t     4.142135623730950e-01,\n\t     7.673269879789602e-01,\n\n\t     1.091308501069271e+00, /* tantab_l */\n\t     1.303225372841206e+00,\n\t     1.569685577117490e+00,\n\t     1.920982126971166e+00,\n\t     2.414213562373094e+00,\n\t     3.171594802363212e+00,\n\t     4.510708503662055e+00,\n\t     7.595754112725146e+00,\n\t     2.290376554843115e+01,\n\n\t     0.98480775301220802032, /* cx */\n\t     0.64278760968653936292,\n\t     0.34202014332566882393,\n\t     0.93969262078590842791,\n\t     -0.17364817766693030343,\n\t     -0.76604444311897790243,\n\t     0.86602540378443870761,\n\t     0.500000000000000e+00,\n\n\t     -5.144957554275265e-01, /* ca */\n\t     -4.717319685649723e-01,\n\t     -3.133774542039019e-01,\n\t     -1.819131996109812e-01,\n\t     -9.457419252642064e-02,\n\t     -4.096558288530405e-02,\n\t     -1.419856857247115e-02,\n\t     -3.699974673760037e-03,\n\n\t     8.574929257125442e-01, /* cs */\n\t     8.817419973177052e-01,\n\t     9.496286491027329e-01,\n\t     9.833145924917901e-01,\n\t     9.955178160675857e-01,\n\t     9.991605581781475e-01,\n\t     9.998991952444470e-01,\n\t     9.999931550702802e-01,\n\t     ],\n\t    [\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     2.283748241799531e-13,\n\t     4.037858874020686e-13,\n\t     2.146547464825323e-13,\n\n\t     5.461314069809755e-12,\n\t     4.921085770524055e-12,\n\t     4.343405037091838e-12,\n\t     3.732668368707687e-12,\n\t     3.093523840190885e-12,\n\t     2.430835727329466e-12,\n\t     1.734679010007751e-12,\n\t     9.748253656609281e-13,\n\t     2.797435120168326e-13,\n\n\t     -5.456116108943413e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758253e-12,\n\t     -2.858043359288075e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558782e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347913e-13,\n\t     -6.423305872147834e-13,\n\t     -9.400849094049688e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049688e-13,\n\t     -6.423305872147841e-13,\n\t     -2.382191739347918e-13,\n\t     ]\n\t];\n\n\tvar tantab_l = win[Encoder.SHORT_TYPE];\n\tvar cx = win[Encoder.SHORT_TYPE];\n\tvar ca = win[Encoder.SHORT_TYPE];\n\tvar cs = win[Encoder.SHORT_TYPE];\n\n\t/**\n\t * new IDCT routine written by Takehiro TOMINAGA\n\t *\n\t * PURPOSE: Overlapping window on PCM samples<BR>\n\t *\n\t * SEMANTICS:<BR>\n\t * 32 16-bit pcm samples are scaled to fractional 2's complement and\n\t * concatenated to the end of the window buffer #x#. The updated window\n\t * buffer #x# is then windowed by the analysis window #c# to produce the\n\t * windowed sample #z#\n\t */\n\tvar order = [\n\t    0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29,\n\t    2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31\n\t];\n\n\t/**\n\t * returns sum_j=0^31 a[j]*cos(PI*j*(k+1/2)/32), 0<=k<32\n\t */\n\tfunction window_subband(x1, x1Pos, a) {\n\t\tvar wp = 10;\n\n\t\tvar x2 = x1Pos + 238 - 14 - 286;\n\n\t\tfor (var i = -15; i < 0; i++) {\n\t\t\tvar w, s, t;\n\n\t\t\tw = enwindow[wp + -10];\n\t\t\ts = x1[x2 + -224] * w;\n\t\t\tt = x1[x1Pos + 224] * w;\n\t\t\tw = enwindow[wp + -9];\n\t\t\ts += x1[x2 + -160] * w;\n\t\t\tt += x1[x1Pos + 160] * w;\n\t\t\tw = enwindow[wp + -8];\n\t\t\ts += x1[x2 + -96] * w;\n\t\t\tt += x1[x1Pos + 96] * w;\n\t\t\tw = enwindow[wp + -7];\n\t\t\ts += x1[x2 + -32] * w;\n\t\t\tt += x1[x1Pos + 32] * w;\n\t\t\tw = enwindow[wp + -6];\n\t\t\ts += x1[x2 + 32] * w;\n\t\t\tt += x1[x1Pos + -32] * w;\n\t\t\tw = enwindow[wp + -5];\n\t\t\ts += x1[x2 + 96] * w;\n\t\t\tt += x1[x1Pos + -96] * w;\n\t\t\tw = enwindow[wp + -4];\n\t\t\ts += x1[x2 + 160] * w;\n\t\t\tt += x1[x1Pos + -160] * w;\n\t\t\tw = enwindow[wp + -3];\n\t\t\ts += x1[x2 + 224] * w;\n\t\t\tt += x1[x1Pos + -224] * w;\n\n\t\t\tw = enwindow[wp + -2];\n\t\t\ts += x1[x1Pos + -256] * w;\n\t\t\tt -= x1[x2 + 256] * w;\n\t\t\tw = enwindow[wp + -1];\n\t\t\ts += x1[x1Pos + -192] * w;\n\t\t\tt -= x1[x2 + 192] * w;\n\t\t\tw = enwindow[wp + 0];\n\t\t\ts += x1[x1Pos + -128] * w;\n\t\t\tt -= x1[x2 + 128] * w;\n\t\t\tw = enwindow[wp + 1];\n\t\t\ts += x1[x1Pos + -64] * w;\n\t\t\tt -= x1[x2 + 64] * w;\n\t\t\tw = enwindow[wp + 2];\n\t\t\ts += x1[x1Pos + 0] * w;\n\t\t\tt -= x1[x2 + 0] * w;\n\t\t\tw = enwindow[wp + 3];\n\t\t\ts += x1[x1Pos + 64] * w;\n\t\t\tt -= x1[x2 + -64] * w;\n\t\t\tw = enwindow[wp + 4];\n\t\t\ts += x1[x1Pos + 128] * w;\n\t\t\tt -= x1[x2 + -128] * w;\n\t\t\tw = enwindow[wp + 5];\n\t\t\ts += x1[x1Pos + 192] * w;\n\t\t\tt -= x1[x2 + -192] * w;\n\n\t\t\t/*\n\t\t\t * this multiplyer could be removed, but it needs more 256 FLOAT\n\t\t\t * data. thinking about the data cache performance, I think we\n\t\t\t * should not use such a huge table. tt 2000/Oct/25\n\t\t\t */\n\t\t\ts *= enwindow[wp + 6];\n\t\t\tw = t - s;\n\t\t\ta[30 + i * 2] = t + s;\n\t\t\ta[31 + i * 2] = enwindow[wp + 7] * w;\n\t\t\twp += 18;\n\t\t\tx1Pos--;\n\t\t\tx2++;\n\t\t}\n\t\t{\n\t\t\tvar s, t, u, v;\n\t\t\tt = x1[x1Pos + -16] * enwindow[wp + -10];\n\t\t\ts = x1[x1Pos + -32] * enwindow[wp + -2];\n\t\t\tt += (x1[x1Pos + -48] - x1[x1Pos + 16]) * enwindow[wp + -9];\n\t\t\ts += x1[x1Pos + -96] * enwindow[wp + -1];\n\t\t\tt += (x1[x1Pos + -80] + x1[x1Pos + 48]) * enwindow[wp + -8];\n\t\t\ts += x1[x1Pos + -160] * enwindow[wp + 0];\n\t\t\tt += (x1[x1Pos + -112] - x1[x1Pos + 80]) * enwindow[wp + -7];\n\t\t\ts += x1[x1Pos + -224] * enwindow[wp + 1];\n\t\t\tt += (x1[x1Pos + -144] + x1[x1Pos + 112]) * enwindow[wp + -6];\n\t\t\ts -= x1[x1Pos + 32] * enwindow[wp + 2];\n\t\t\tt += (x1[x1Pos + -176] - x1[x1Pos + 144]) * enwindow[wp + -5];\n\t\t\ts -= x1[x1Pos + 96] * enwindow[wp + 3];\n\t\t\tt += (x1[x1Pos + -208] + x1[x1Pos + 176]) * enwindow[wp + -4];\n\t\t\ts -= x1[x1Pos + 160] * enwindow[wp + 4];\n\t\t\tt += (x1[x1Pos + -240] - x1[x1Pos + 208]) * enwindow[wp + -3];\n\t\t\ts -= x1[x1Pos + 224];\n\n\t\t\tu = s - t;\n\t\t\tv = s + t;\n\n\t\t\tt = a[14];\n\t\t\ts = a[15] - t;\n\n\t\t\ta[31] = v + t; /* A0 */\n\t\t\ta[30] = u + s; /* A1 */\n\t\t\ta[15] = u - s; /* A2 */\n\t\t\ta[14] = v - t; /* A3 */\n\t\t}\n\t\t{\n\t\t\tvar xr;\n\t\t\txr = a[28] - a[0];\n\t\t\ta[0] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -2 * 18 + 7];\n\t\t\txr = a[29] - a[1];\n\t\t\ta[1] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -2 * 18 + 7];\n\n\t\t\txr = a[26] - a[2];\n\t\t\ta[2] += a[26];\n\t\t\ta[26] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[27] - a[3];\n\t\t\ta[3] += a[27];\n\t\t\ta[27] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = a[24] - a[4];\n\t\t\ta[4] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -6 * 18 + 7];\n\t\t\txr = a[25] - a[5];\n\t\t\ta[5] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -6 * 18 + 7];\n\n\t\t\txr = a[22] - a[6];\n\t\t\ta[6] += a[22];\n\t\t\ta[22] = xr * Util.SQRT2;\n\t\t\txr = a[23] - a[7];\n\t\t\ta[7] += a[23];\n\t\t\ta[23] = xr * Util.SQRT2 - a[7];\n\t\t\ta[7] -= a[6];\n\t\t\ta[22] -= a[7];\n\t\t\ta[23] -= a[22];\n\n\t\t\txr = a[6];\n\t\t\ta[6] = a[31] - xr;\n\t\t\ta[31] = a[31] + xr;\n\t\t\txr = a[7];\n\t\t\ta[7] = a[30] - xr;\n\t\t\ta[30] = a[30] + xr;\n\t\t\txr = a[22];\n\t\t\ta[22] = a[15] - xr;\n\t\t\ta[15] = a[15] + xr;\n\t\t\txr = a[23];\n\t\t\ta[23] = a[14] - xr;\n\t\t\ta[14] = a[14] + xr;\n\n\t\t\txr = a[20] - a[8];\n\t\t\ta[8] += a[20];\n\t\t\ta[20] = xr * enwindow[wp + -10 * 18 + 7];\n\t\t\txr = a[21] - a[9];\n\t\t\ta[9] += a[21];\n\t\t\ta[21] = xr * enwindow[wp + -10 * 18 + 7];\n\n\t\t\txr = a[18] - a[10];\n\t\t\ta[10] += a[18];\n\t\t\ta[18] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[19] - a[11];\n\t\t\ta[11] += a[19];\n\t\t\ta[19] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[16] - a[12];\n\t\t\ta[12] += a[16];\n\t\t\ta[16] = xr * enwindow[wp + -14 * 18 + 7];\n\t\t\txr = a[17] - a[13];\n\t\t\ta[13] += a[17];\n\t\t\ta[17] = xr * enwindow[wp + -14 * 18 + 7];\n\n\t\t\txr = -a[20] + a[24];\n\t\t\ta[20] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = -a[21] + a[25];\n\t\t\ta[21] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[4] - a[8];\n\t\t\ta[4] += a[8];\n\t\t\ta[8] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[5] - a[9];\n\t\t\ta[5] += a[9];\n\t\t\ta[9] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[0] - a[12];\n\t\t\ta[0] += a[12];\n\t\t\ta[12] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[1] - a[13];\n\t\t\ta[1] += a[13];\n\t\t\ta[13] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[16] - a[28];\n\t\t\ta[16] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = -a[17] + a[29];\n\t\t\ta[17] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = Util.SQRT2 * (a[2] - a[10]);\n\t\t\ta[2] += a[10];\n\t\t\ta[10] = xr;\n\t\t\txr = Util.SQRT2 * (a[3] - a[11]);\n\t\t\ta[3] += a[11];\n\t\t\ta[11] = xr;\n\t\t\txr = Util.SQRT2 * (-a[18] + a[26]);\n\t\t\ta[18] += a[26];\n\t\t\ta[26] = xr - a[18];\n\t\t\txr = Util.SQRT2 * (-a[19] + a[27]);\n\t\t\ta[19] += a[27];\n\t\t\ta[27] = xr - a[19];\n\n\t\t\txr = a[2];\n\t\t\ta[19] -= a[3];\n\t\t\ta[3] -= xr;\n\t\t\ta[2] = a[31] - xr;\n\t\t\ta[31] += xr;\n\t\t\txr = a[3];\n\t\t\ta[11] -= a[19];\n\t\t\ta[18] -= xr;\n\t\t\ta[3] = a[30] - xr;\n\t\t\ta[30] += xr;\n\t\t\txr = a[18];\n\t\t\ta[27] -= a[11];\n\t\t\ta[19] -= xr;\n\t\t\ta[18] = a[15] - xr;\n\t\t\ta[15] += xr;\n\n\t\t\txr = a[19];\n\t\t\ta[10] -= xr;\n\t\t\ta[19] = a[14] - xr;\n\t\t\ta[14] += xr;\n\t\t\txr = a[10];\n\t\t\ta[11] -= xr;\n\t\t\ta[10] = a[23] - xr;\n\t\t\ta[23] += xr;\n\t\t\txr = a[11];\n\t\t\ta[26] -= xr;\n\t\t\ta[11] = a[22] - xr;\n\t\t\ta[22] += xr;\n\t\t\txr = a[26];\n\t\t\ta[27] -= xr;\n\t\t\ta[26] = a[7] - xr;\n\t\t\ta[7] += xr;\n\n\t\t\txr = a[27];\n\t\t\ta[27] = a[6] - xr;\n\t\t\ta[6] += xr;\n\n\t\t\txr = Util.SQRT2 * (a[0] - a[4]);\n\t\t\ta[0] += a[4];\n\t\t\ta[4] = xr;\n\t\t\txr = Util.SQRT2 * (a[1] - a[5]);\n\t\t\ta[1] += a[5];\n\t\t\ta[5] = xr;\n\t\t\txr = Util.SQRT2 * (a[16] - a[20]);\n\t\t\ta[16] += a[20];\n\t\t\ta[20] = xr;\n\t\t\txr = Util.SQRT2 * (a[17] - a[21]);\n\t\t\ta[17] += a[21];\n\t\t\ta[21] = xr;\n\n\t\t\txr = -Util.SQRT2 * (a[8] - a[12]);\n\t\t\ta[8] += a[12];\n\t\t\ta[12] = xr - a[8];\n\t\t\txr = -Util.SQRT2 * (a[9] - a[13]);\n\t\t\ta[9] += a[13];\n\t\t\ta[13] = xr - a[9];\n\t\t\txr = -Util.SQRT2 * (a[25] - a[29]);\n\t\t\ta[25] += a[29];\n\t\t\ta[29] = xr - a[25];\n\t\t\txr = -Util.SQRT2 * (a[24] + a[28]);\n\t\t\ta[24] -= a[28];\n\t\t\ta[28] = xr - a[24];\n\n\t\t\txr = a[24] - a[16];\n\t\t\ta[24] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\n\t\t\txr = a[25] - a[17];\n\t\t\ta[25] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[17] - a[1];\n\t\t\ta[17] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[1] - a[0];\n\t\t\ta[1] = xr;\n\t\t\txr = a[16] - xr;\n\t\t\ta[16] = xr;\n\t\t\txr = a[17] - xr;\n\t\t\ta[17] = xr;\n\t\t\txr = a[8] - xr;\n\t\t\ta[8] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[24] - xr;\n\t\t\ta[24] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[4] - xr;\n\t\t\ta[4] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[12] - xr;\n\t\t\ta[12] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[0];\n\t\t\ta[0] += a[31];\n\t\t\ta[31] -= xr;\n\t\t\txr = a[1];\n\t\t\ta[1] += a[30];\n\t\t\ta[30] -= xr;\n\t\t\txr = a[16];\n\t\t\ta[16] += a[15];\n\t\t\ta[15] -= xr;\n\t\t\txr = a[17];\n\t\t\ta[17] += a[14];\n\t\t\ta[14] -= xr;\n\t\t\txr = a[8];\n\t\t\ta[8] += a[23];\n\t\t\ta[23] -= xr;\n\t\t\txr = a[9];\n\t\t\ta[9] += a[22];\n\t\t\ta[22] -= xr;\n\t\t\txr = a[24];\n\t\t\ta[24] += a[7];\n\t\t\ta[7] -= xr;\n\t\t\txr = a[25];\n\t\t\ta[25] += a[6];\n\t\t\ta[6] -= xr;\n\t\t\txr = a[4];\n\t\t\ta[4] += a[27];\n\t\t\ta[27] -= xr;\n\t\t\txr = a[5];\n\t\t\ta[5] += a[26];\n\t\t\ta[26] -= xr;\n\t\t\txr = a[20];\n\t\t\ta[20] += a[11];\n\t\t\ta[11] -= xr;\n\t\t\txr = a[21];\n\t\t\ta[21] += a[10];\n\t\t\ta[10] -= xr;\n\t\t\txr = a[12];\n\t\t\ta[12] += a[19];\n\t\t\ta[19] -= xr;\n\t\t\txr = a[13];\n\t\t\ta[13] += a[18];\n\t\t\ta[18] -= xr;\n\t\t\txr = a[28];\n\t\t\ta[28] += a[3];\n\t\t\ta[3] -= xr;\n\t\t\txr = a[29];\n\t\t\ta[29] += a[2];\n\t\t\ta[2] -= xr;\n\t\t}\n\t}\n\n\t/**\n\t * Function: Calculation of the MDCT In the case of long blocks (type 0,1,3)\n\t * there are 36 coefficents in the time domain and 18 in the frequency\n\t * domain.<BR>\n\t * In the case of short blocks (type 2) there are 3 transformations with\n\t * short length. This leads to 12 coefficents in the time and 6 in the\n\t * frequency domain. In this case the results are stored side by side in the\n\t * vector out[].\n\t *\n\t * New layer3\n\t */\n\tfunction mdct_short(inout, inoutPos) {\n\t\tfor (var l = 0; l < 3; l++) {\n\t\t\tvar tc0, tc1, tc2, ts0, ts1, ts2;\n\n\t\t\tts0 = inout[inoutPos + 2 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t- inout[inoutPos + 5 * 3];\n\t\t\ttc0 = inout[inoutPos + 0 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t- inout[inoutPos + 3 * 3];\n\t\t\ttc1 = ts0 + tc0;\n\t\t\ttc2 = ts0 - tc0;\n\n\t\t\tts0 = inout[inoutPos + 5 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t+ inout[inoutPos + 2 * 3];\n\t\t\ttc0 = inout[inoutPos + 3 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t+ inout[inoutPos + 0 * 3];\n\t\t\tts1 = ts0 + tc0;\n\t\t\tts2 = -ts0 + tc0;\n\n\t\t\ttc0 = (inout[inoutPos + 1 * 3] * win[Encoder.SHORT_TYPE][1] - inout[inoutPos + 4 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tts0 = (inout[inoutPos + 4 * 3] * win[Encoder.SHORT_TYPE][1] + inout[inoutPos + 1 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 0] = tc1 * 1.907525191737280e-11 + tc0;\n\t\t\t/*\n\t\t\t * tritab_s[ 2 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 5] = -ts1 * 1.907525191737280e-11 + ts0;\n\t\t\t/*\n\t\t\t * tritab_s[0 ]\n\t\t\t */\n\t\t\ttc2 = tc2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 2]\n\t\t\t */\n\t\t\tts1 = ts1 * 0.5 * 1.907525191737281e-11 + ts0;\n\t\t\tinout[inoutPos + 3 * 1] = tc2 - ts1;\n\t\t\tinout[inoutPos + 3 * 2] = tc2 + ts1;\n\n\t\t\ttc1 = tc1 * 0.5 * 1.907525191737281e-11 - tc0;\n\t\t\tts2 = ts2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 0]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 3] = tc1 + ts2;\n\t\t\tinout[inoutPos + 3 * 4] = tc1 - ts2;\n\n\t\t\tinoutPos++;\n\t\t}\n\t}\n\n\tfunction mdct_long(out, outPos, _in) {\n\t\tvar ct, st;\n\t\t{\n\t\t\tvar tc1, tc2, tc3, tc4, ts5, ts6, ts7, ts8;\n\t\t\t/* 1,2, 5,6, 9,10, 13,14, 17 */\n\t\t\ttc1 = _in[17] - _in[9];\n\t\t\ttc3 = _in[15] - _in[11];\n\t\t\ttc4 = _in[14] - _in[12];\n\t\t\tts5 = _in[0] + _in[8];\n\t\t\tts6 = _in[1] + _in[7];\n\t\t\tts7 = _in[2] + _in[6];\n\t\t\tts8 = _in[3] + _in[5];\n\n\t\t\tout[outPos + 17] = (ts5 + ts7 - ts8) - (ts6 - _in[4]);\n\t\t\tst = (ts5 + ts7 - ts8) * cx[12 + 7] + (ts6 - _in[4]);\n\t\t\tct = (tc1 - tc3 - tc4) * cx[12 + 6];\n\t\t\tout[outPos + 5] = ct + st;\n\t\t\tout[outPos + 6] = ct - st;\n\n\t\t\ttc2 = (_in[16] - _in[10]) * cx[12 + 6];\n\t\t\tts6 = ts6 * cx[12 + 7] + _in[4];\n\t\t\tct = tc1 * cx[12 + 0] + tc2 + tc3 * cx[12 + 1] + tc4 * cx[12 + 2];\n\t\t\tst = -ts5 * cx[12 + 4] + ts6 - ts7 * cx[12 + 5] + ts8 * cx[12 + 3];\n\t\t\tout[outPos + 1] = ct + st;\n\t\t\tout[outPos + 2] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 1] - tc2 - tc3 * cx[12 + 2] + tc4 * cx[12 + 0];\n\t\t\tst = -ts5 * cx[12 + 5] + ts6 - ts7 * cx[12 + 3] + ts8 * cx[12 + 4];\n\t\t\tout[outPos + 9] = ct + st;\n\t\t\tout[outPos + 10] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 2] - tc2 + tc3 * cx[12 + 0] - tc4 * cx[12 + 1];\n\t\t\tst = ts5 * cx[12 + 3] - ts6 + ts7 * cx[12 + 4] - ts8 * cx[12 + 5];\n\t\t\tout[outPos + 13] = ct + st;\n\t\t\tout[outPos + 14] = ct - st;\n\t\t}\n\t\t{\n\t\t\tvar ts1, ts2, ts3, ts4, tc5, tc6, tc7, tc8;\n\n\t\t\tts1 = _in[8] - _in[0];\n\t\t\tts3 = _in[6] - _in[2];\n\t\t\tts4 = _in[5] - _in[3];\n\t\t\ttc5 = _in[17] + _in[9];\n\t\t\ttc6 = _in[16] + _in[10];\n\t\t\ttc7 = _in[15] + _in[11];\n\t\t\ttc8 = _in[14] + _in[12];\n\n\t\t\tout[outPos + 0] = (tc5 + tc7 + tc8) + (tc6 + _in[13]);\n\t\t\tct = (tc5 + tc7 + tc8) * cx[12 + 7] - (tc6 + _in[13]);\n\t\t\tst = (ts1 - ts3 + ts4) * cx[12 + 6];\n\t\t\tout[outPos + 11] = ct + st;\n\t\t\tout[outPos + 12] = ct - st;\n\n\t\t\tts2 = (_in[7] - _in[1]) * cx[12 + 6];\n\t\t\ttc6 = _in[13] - tc6 * cx[12 + 7];\n\t\t\tct = tc5 * cx[12 + 3] - tc6 + tc7 * cx[12 + 4] + tc8 * cx[12 + 5];\n\t\t\tst = ts1 * cx[12 + 2] + ts2 + ts3 * cx[12 + 0] + ts4 * cx[12 + 1];\n\t\t\tout[outPos + 3] = ct + st;\n\t\t\tout[outPos + 4] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 5] + tc6 - tc7 * cx[12 + 3] - tc8 * cx[12 + 4];\n\t\t\tst = ts1 * cx[12 + 1] + ts2 - ts3 * cx[12 + 2] - ts4 * cx[12 + 0];\n\t\t\tout[outPos + 7] = ct + st;\n\t\t\tout[outPos + 8] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 4] + tc6 - tc7 * cx[12 + 5] - tc8 * cx[12 + 3];\n\t\t\tst = ts1 * cx[12 + 0] - ts2 + ts3 * cx[12 + 1] - ts4 * cx[12 + 2];\n\t\t\tout[outPos + 15] = ct + st;\n\t\t\tout[outPos + 16] = ct - st;\n\t\t}\n\t}\n\n\tthis.mdct_sub48 = function(gfc, w0, w1) {\n\t\tvar wk = w0;\n\t\tvar wkPos = 286;\n\t\t/* thinking cache performance, ch->gr loop is better than gr->ch loop */\n\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\t\t\t\tvar band;\n\t\t\t\tvar gi = (gfc.l3_side.tt[gr][ch]);\n\t\t\t\tvar mdct_enc = gi.xr;\n\t\t\t\tvar mdct_encPos = 0;\n\t\t\t\tvar samp = gfc.sb_sample[ch][1 - gr];\n\t\t\t\tvar sampPos = 0;\n\n\t\t\t\tfor (var k = 0; k < 18 / 2; k++) {\n\t\t\t\t\twindow_subband(wk, wkPos, samp[sampPos]);\n\t\t\t\t\twindow_subband(wk, wkPos + 32, samp[sampPos + 1]);\n\t\t\t\t\tsampPos += 2;\n\t\t\t\t\twkPos += 64;\n\t\t\t\t\t/*\n\t\t\t\t\t * Compensate for inversion in the analysis filter\n\t\t\t\t\t */\n\t\t\t\t\tfor (band = 1; band < 32; band += 2) {\n\t\t\t\t\t\tsamp[sampPos - 1][band] *= -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Perform imdct of 18 previous subband samples + 18 current\n\t\t\t\t * subband samples\n\t\t\t\t */\n\t\t\t\tfor (band = 0; band < 32; band++, mdct_encPos += 18) {\n\t\t\t\t\tvar type = gi.block_type;\n\t\t\t\t\tvar band0 = gfc.sb_sample[ch][gr];\n\t\t\t\t\tvar band1 = gfc.sb_sample[ch][1 - gr];\n\t\t\t\t\tif (gi.mixed_block_flag != 0 && band < 2)\n\t\t\t\t\t\ttype = 0;\n\t\t\t\t\tif (gfc.amp_filter[band] < 1e-12) {\n\t\t\t\t\t\tArrays.fill(mdct_enc, mdct_encPos + 0,\n\t\t\t\t\t\t\t\tmdct_encPos + 18, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (gfc.amp_filter[band] < 1.0) {\n\t\t\t\t\t\t\tfor (var k = 0; k < 18; k++)\n\t\t\t\t\t\t\t\tband1[k][order[band]] *= gfc.amp_filter[band];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type == Encoder.SHORT_TYPE) {\n\t\t\t\t\t\t\tfor (var k = -NS / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar w = win[Encoder.SHORT_TYPE][k + 3];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 9] = band0[9 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 18] = band0[14 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band0[15 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 10] = band0[15 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[14 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 19] = band1[2 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[3 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 11] = band1[3 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band1[2 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 20] = band1[8 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[9 + k][order[band]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmdct_short(mdct_enc, mdct_encPos);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar work = new_float(18);\n\t\t\t\t\t\t\tfor (var k = -NL / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar a, b;\n\t\t\t\t\t\t\t\ta = win[type][k + 27]\n\t\t\t\t\t\t\t\t\t\t* band1[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t+ win[type][k + 36]\n\t\t\t\t\t\t\t\t\t\t* band1[8 - k][order[band]];\n\t\t\t\t\t\t\t\tb = win[type][k + 9]\n\t\t\t\t\t\t\t\t\t\t* band0[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t- win[type][k + 18]\n\t\t\t\t\t\t\t\t\t\t* band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\twork[k + 9] = a - b * tantab_l[3 + k + 9];\n\t\t\t\t\t\t\t\twork[k + 18] = a * tantab_l[3 + k + 9] + b;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmdct_long(mdct_enc, mdct_encPos, work);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*\n\t\t\t\t\t * Perform aliasing reduction butterfly\n\t\t\t\t\t */\n\t\t\t\t\tif (type != Encoder.SHORT_TYPE && band != 0) {\n\t\t\t\t\t\tfor (var k = 7; k >= 0; --k) {\n\t\t\t\t\t\t\tvar bu, bd;\n\t\t\t\t\t\t\tbu = mdct_enc[mdct_encPos + k] * ca[20 + k]\n\t\t\t\t\t\t\t\t\t+ mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* cs[28 + k];\n\t\t\t\t\t\t\tbd = mdct_enc[mdct_encPos + k] * cs[28 + k]\n\t\t\t\t\t\t\t\t\t- mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* ca[20 + k];\n\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + -1 - k] = bu;\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k] = bd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twk = w1;\n\t\t\twkPos = 286;\n\t\t\tif (gfc.mode_gr == 1) {\n\t\t\t\tfor (var i = 0; i < 18; i++) {\n\t\t\t\t\tSystem.arraycopy(gfc.sb_sample[ch][1][i], 0,\n\t\t\t\t\t\t\tgfc.sb_sample[ch][0][i], 0, 32);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = NewMDCT;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\n//package mp3;\n\n/**\n * Variables used for --nspsytune\n *\n * @author Ken\n *\n */\nfunction NsPsy() {\n    this.last_en_subshort = new_float_n([4, 9]);\n    this.lastAttacks = new_int(4);\n    this.pefirbuf = new_float(19);\n    this.longfact = new_float(Encoder.SBMAX_l);\n    this.shortfact = new_float(Encoder.SBMAX_s);\n\n    /**\n     * short block tuning\n     */\n    this.attackthre = 0.;\n    this.attackthre_s = 0.;\n}\n\nmodule.exports = NsPsy;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nfunction Presets() {\n    var Lame = require('./Lame.js');\n    function VBRPresets(qual, comp, compS,\n                        y, shThreshold, shThresholdS,\n                        adj, adjShort, lower,\n                        curve, sens, inter,\n                        joint, mod, fix) {\n        this.vbr_q = qual;\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.expY = y;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.masking_adj = adj;\n        this.masking_adj_short = adjShort;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.ath_sensitivity = sens;\n        this.interch = inter;\n        this.safejoint = joint;\n        this.sfb21mod = mod;\n        this.msfix = fix;\n    }\n\n    function ABRPresets(kbps, comp, compS,\n                        joint, fix, shThreshold,\n                        shThresholdS, bass, sc,\n                        mask, lower, curve,\n                        interCh, sfScale) {\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.safejoint = joint;\n        this.nsmsfix = fix;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.nsbass = bass;\n        this.scale = sc;\n        this.masking_adj = mask;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.interch = interCh;\n        this.sfscale = sfScale;\n    }\n\n    var lame;\n\n    this.setModules = function (_lame) {\n        lame = _lame;\n    };\n\n    /**\n     * <PRE>\n     * Switch mappings for VBR mode VBR_RH\n     *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_old_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97),\n        new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49),\n        new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64),\n        new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30),\n        new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70),\n        new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0),\n        new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0),\n        new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)\n    ];\n\n    /**\n     * <PRE>\n     *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\n     * </PRE>\n     */\n    var vbr_psy_switch_map = [\n        new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97),\n        new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\n        new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49),\n        new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64),\n        new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79),\n        new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95),\n        new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2),\n        new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2),\n        new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2),\n        new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2),\n        new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)\n    ];\n\n    function apply_vbr_preset(gfp, a, enforce) {\n        var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map\n            : vbr_psy_switch_map;\n\n        var x = gfp.VBR_q_frac;\n        var p = vbr_preset[a];\n        var q = vbr_preset[a + 1];\n        var set = p;\n\n        // NOOP(vbr_q);\n        // NOOP(quant_comp);\n        // NOOP(quant_comp_s);\n        // NOOP(expY);\n        p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm);\n        // LERP(st_lrm);\n        p.st_s = p.st_s + x * (q.st_s - p.st_s);\n        // LERP(st_s);\n        p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj);\n        // LERP(masking_adj);\n        p.masking_adj_short = p.masking_adj_short + x\n            * (q.masking_adj_short - p.masking_adj_short);\n        // LERP(masking_adj_short);\n        p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower);\n        // LERP(ath_lower);\n        p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve);\n        // LERP(ath_curve);\n        p.ath_sensitivity = p.ath_sensitivity + x\n            * (q.ath_sensitivity - p.ath_sensitivity);\n        // LERP(ath_sensitivity);\n        p.interch = p.interch + x * (q.interch - p.interch);\n        // LERP(interch);\n        // NOOP(safejoint);\n        // NOOP(sfb21mod);\n        p.msfix = p.msfix + x * (q.msfix - p.msfix);\n        // LERP(msfix);\n\n        lame_set_VBR_q(gfp, set.vbr_q);\n\n        if (enforce != 0)\n            gfp.quant_comp = set.quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = set.quant_comp;\n        // SET_OPTION(quant_comp, set.quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = set.quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = set.quant_comp_s;\n        // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\n        if (set.expY != 0) {\n            gfp.experimentalY = set.expY != 0;\n        }\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\n        // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\n        // SET_OPTION(short_threshold_s, set.st_s, -1);\n        if (enforce != 0)\n            gfp.maskingadjust = set.masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = set.masking_adj;\n        // SET_OPTION(maskingadjust, set.masking_adj, 0);\n        if (enforce != 0)\n            gfp.maskingadjust_short = set.masking_adj_short;\n        else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n            gfp.maskingadjust_short = set.masking_adj_short;\n        // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\n        if (enforce != 0)\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        else if (!(Math.abs((-gfp.ATHlower * 10.0) - 0) > 0))\n            gfp.ATHlower = -set.ath_lower / 10.0;\n        // SET_OPTION(ATHlower, set.ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = set.ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = set.ath_curve;\n        // SET_OPTION(ATHcurve, set.ath_curve, -1);\n        if (enforce != 0)\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0))\n            gfp.athaa_sensitivity = set.ath_sensitivity;\n        // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\n        if (set.interch > 0) {\n            if (enforce != 0)\n                gfp.interChRatio = set.interch;\n            else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n                gfp.interChRatio = set.interch;\n            // SET_OPTION(interChRatio, set.interch, -1);\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (set.safejoint > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\n        }\n        if (set.sfb21mod > 0) {\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (set.sfb21mod << 20);\n        }\n        if (enforce != 0)\n            gfp.msfix = set.msfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = set.msfix;\n        // SET_OPTION(msfix, set.msfix, -1);\n\n        if (enforce == 0) {\n            gfp.VBR_q = a;\n            gfp.VBR_q_frac = x;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  Switch mappings for ABR mode\n     *\n     *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\n     * </PRE>\n     */\n    var abr_switch_map = [\n        new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\n        new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\n        new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\n        new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\n        new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\n        new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\n        new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\n        new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\n        new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\n        new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\n        new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\n        new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\n        new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\n        new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\n        new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\n        new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\n        new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0)  /* 320 */\n    ];\n\n    function apply_abr_preset(gfp, preset, enforce) {\n        /* Variables for the ABR stuff */\n        var actual_bitrate = preset;\n\n        var r = lame.nearestBitrateFullIndex(preset);\n\n        gfp.VBR = VbrMode.vbr_abr;\n        gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR_mean_bitrate_kbps > 320) {\n            gfp.disable_reservoir = true;\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (abr_switch_map[r].safejoint > 0)\n            gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\n        /* safejoint */\n\n        if (abr_switch_map[r].sfscale > 0) {\n            gfp.internal_flags.noise_shaping = 2;\n        }\n        /* ns-bass tweaks */\n        if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n            var k = (int)(abr_switch_map[r].nsbass * 4);\n            if (k < 0)\n                k += 64;\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (k << 2);\n        }\n\n        if (enforce != 0)\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n\n        if (enforce != 0)\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n\n        /*\n         * ABR seems to have big problems with clipping, especially at low\n         * bitrates\n         */\n        /*\n         * so we compensate for that here by using a scale value depending on\n         * bitrate\n         */\n        if (enforce != 0)\n            gfp.scale = abr_switch_map[r].scale;\n        else if (!(Math.abs(gfp.scale - -1) > 0))\n            gfp.scale = abr_switch_map[r].scale;\n        // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n\n        if (enforce != 0)\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n        if (abr_switch_map[r].masking_adj > 0) {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // .9, 0);\n        } else {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // 1.1, 0);\n        }\n\n        if (enforce != 0)\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        else if (!(Math.abs((-gfp.ATHlower * 10.) - 0) > 0))\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n\n        if (enforce != 0)\n            gfp.interChRatio = abr_switch_map[r].interch;\n        else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n            gfp.interChRatio = abr_switch_map[r].interch;\n        // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n\n        return preset;\n    }\n\n    this.apply_preset = function(gfp, preset, enforce) {\n        /* translate legacy presets */\n        switch (preset) {\n            case Lame.R3MIX:\n            {\n                preset = Lame.V3;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.MEDIUM:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.MEDIUM_FAST:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.STANDARD:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.STANDARD_FAST:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.EXTREME:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.EXTREME_FAST:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.INSANE:\n            {\n                preset = 320;\n                gfp.preset = preset;\n                apply_abr_preset(gfp, preset, enforce);\n                gfp.VBR = VbrMode.vbr_off;\n                return preset;\n            }\n        }\n\n        gfp.preset = preset;\n        {\n            switch (preset) {\n                case Lame.V9:\n                    apply_vbr_preset(gfp, 9, enforce);\n                    return preset;\n                case Lame.V8:\n                    apply_vbr_preset(gfp, 8, enforce);\n                    return preset;\n                case Lame.V7:\n                    apply_vbr_preset(gfp, 7, enforce);\n                    return preset;\n                case Lame.V6:\n                    apply_vbr_preset(gfp, 6, enforce);\n                    return preset;\n                case Lame.V5:\n                    apply_vbr_preset(gfp, 5, enforce);\n                    return preset;\n                case Lame.V4:\n                    apply_vbr_preset(gfp, 4, enforce);\n                    return preset;\n                case Lame.V3:\n                    apply_vbr_preset(gfp, 3, enforce);\n                    return preset;\n                case Lame.V2:\n                    apply_vbr_preset(gfp, 2, enforce);\n                    return preset;\n                case Lame.V1:\n                    apply_vbr_preset(gfp, 1, enforce);\n                    return preset;\n                case Lame.V0:\n                    apply_vbr_preset(gfp, 0, enforce);\n                    return preset;\n                default:\n                    break;\n            }\n        }\n        if (8 <= preset && preset <= 320) {\n            return apply_abr_preset(gfp, preset, enforce);\n        }\n\n        /* no corresponding preset found */\n        gfp.preset = 0;\n        return preset;\n    }\n\n    // Rest from getset.c:\n\n    /**\n     * VBR quality level.<BR>\n     * 0 = highest<BR>\n     * 9 = lowest\n     */\n    function lame_set_VBR_q(gfp, VBR_q) {\n        var ret = 0;\n\n        if (0 > VBR_q) {\n            /* Unknown VBR quality level! */\n            ret = -1;\n            VBR_q = 0;\n        }\n        if (9 < VBR_q) {\n            ret = -1;\n            VBR_q = 9;\n        }\n\n        gfp.VBR_q = VBR_q;\n        gfp.VBR_q_frac = 0;\n        return ret;\n    }\n\n}\n\nmodule.exports = Presets;\n","/*\n *      psymodel.c\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 2001-2002 Naoki Shibata\n *      Copyright (c) 2000-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2008 Robert Hegemann\n *      Copyright (c) 2000-2005 Gabriel Bouvigne\n *      Copyright (c) 2000-2005 Alexander Leidinger\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: PsyModel.java,v 1.27 2011/05/24 20:48:06 kenchis Exp $ */\n\n\n/*\n PSYCHO ACOUSTICS\n\n\n This routine computes the psycho acoustics, delayed by one granule.\n\n Input: buffer of PCM data (1024 samples).\n\n This window should be centered over the 576 sample granule window.\n The routine will compute the psycho acoustics for\n this granule, but return the psycho acoustics computed\n for the *previous* granule.  This is because the block\n type of the previous granule can only be determined\n after we have computed the psycho acoustics for the following\n granule.\n\n Output:  maskings and energies for each scalefactor band.\n block type, PE, and some correlation measures.\n The PE is used by CBR modes to determine if extra bits\n from the bit reservoir should be used.  The correlation\n measures are used to determine mid/side or regular stereo.\n */\n/*\n Notation:\n\n barks:  a non-linear frequency scale.  Mapping from frequency to\n barks is given by freq2bark()\n\n scalefactor bands: The spectrum (frequencies) are broken into\n SBMAX \"scalefactor bands\".  Thes bands\n are determined by the MPEG ISO spec.  In\n the noise shaping/quantization code, we allocate\n bits among the partition bands to achieve the\n best possible quality\n\n partition bands:   The spectrum is also broken into about\n 64 \"partition bands\".  Each partition\n band is about .34 barks wide.  There are about 2-5\n partition bands for each scalefactor band.\n\n LAME computes all psycho acoustic information for each partition\n band.  Then at the end of the computations, this information\n is mapped to scalefactor bands.  The energy in each scalefactor\n band is taken as the sum of the energy in all partition bands\n which overlap the scalefactor band.  The maskings can be computed\n in the same way (and thus represent the average masking in that band)\n or by taking the minmum value multiplied by the number of\n partition bands used (which represents a minimum masking in that band).\n */\n/*\n The general outline is as follows:\n\n 1. compute the energy in each partition band\n 2. compute the tonality in each partition band\n 3. compute the strength of each partion band \"masker\"\n 4. compute the masking (via the spreading function applied to each masker)\n 5. Modifications for mid/side masking.\n\n Each partition band is considiered a \"masker\".  The strength\n of the i'th masker in band j is given by:\n\n s3(bark(i)-bark(j))*strength(i)\n\n The strength of the masker is a function of the energy and tonality.\n The more tonal, the less masking.  LAME uses a simple linear formula\n (controlled by NMT and TMN) which says the strength is given by the\n energy divided by a linear function of the tonality.\n */\n/*\n s3() is the \"spreading function\".  It is given by a formula\n determined via listening tests.\n\n The total masking in the j'th partition band is the sum over\n all maskings i.  It is thus given by the convolution of\n the strength with s3(), the \"spreading function.\"\n\n masking(j) = sum_over_i  s3(i-j)*strength(i)  = s3 o strength\n\n where \"o\" = convolution operator.  s3 is given by a formula determined\n via listening tests.  It is normalized so that s3 o 1 = 1.\n\n Note: instead of a simple convolution, LAME also has the\n option of using \"additive masking\"\n\n The most critical part is step 2, computing the tonality of each\n partition band.  LAME has two tonality estimators.  The first\n is based on the ISO spec, and measures how predictiable the\n signal is over time.  The more predictable, the more tonal.\n The second measure is based on looking at the spectrum of\n a single granule.  The more peaky the spectrum, the more\n tonal.  By most indications, the latter approach is better.\n\n Finally, in step 5, the maskings for the mid and side\n channel are possibly increased.  Under certain circumstances,\n noise in the mid & side channels is assumed to also\n be masked by strong maskers in the L or R channels.\n\n\n Other data computed by the psy-model:\n\n ms_ratio        side-channel / mid-channel masking ratio (for previous granule)\n ms_ratio_next   side-channel / mid-channel masking ratio for this granule\n\n percep_entropy[2]     L and R values (prev granule) of PE - A measure of how\n much pre-echo is in the previous granule\n percep_entropy_MS[2]  mid and side channel values (prev granule) of percep_entropy\n energy[4]             L,R,M,S energy in each channel, prev granule\n blocktype_d[2]        block type to use for previous granule\n */\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar FFT = require(\"./FFT.js\");\nvar Encoder = require(\"./Encoder.js\");\n\nfunction PsyModel() {\n    var MPEGMode = require('./MPEGMode.js');\n    var fft = new FFT();\n\n    var LOG10 = 2.30258509299404568402;\n\n    var rpelev = 2;\n    var rpelev2 = 16;\n    var rpelev_s = 2;\n    var rpelev2_s = 16;\n\n    /* size of each partition band, in barks: */\n    var DELBARK = .34;\n\n    /* tuned for output level (sensitive to energy scale) */\n    var VO_SCALE = (1. / (14752 * 14752) / (Encoder.BLKSIZE / 2));\n\n    var temporalmask_sustain_sec = 0.01;\n\n    var NS_PREECHO_ATT0 = 0.8;\n    var NS_PREECHO_ATT1 = 0.6;\n    var NS_PREECHO_ATT2 = 0.3;\n\n    var NS_MSFIX = 3.5;\n\n    var NSATTACKTHRE = 4.4;\n    var NSATTACKTHRE_S = 25;\n\n    var NSFIRLEN = 21;\n\n    /* size of each partition band, in barks: */\n    var LN_TO_LOG10 = 0.2302585093;\n\n    function NON_LINEAR_SCALE_ENERGY(x) {\n        return x;\n    }\n\n    /**\n     * <PRE>\n     *       L3psycho_anal.  Compute psycho acoustics.\n     *\n     *       Data returned to the calling program must be delayed by one\n     *       granule.\n     *\n     *       This is done in two places.\n     *       If we do not need to know the blocktype, the copying\n     *       can be done here at the top of the program: we copy the data for\n     *       the last granule (computed during the last call) before it is\n     *       overwritten with the new data.  It looks like this:\n     *\n     *       0. static psymodel_data\n     *       1. calling_program_data = psymodel_data\n     *       2. compute psymodel_data\n     *\n     *       For data which needs to know the blocktype, the copying must be\n     *       done at the end of this loop, and the old values must be saved:\n     *\n     *       0. static psymodel_data_old\n     *       1. compute psymodel_data\n     *       2. compute possible block type of this granule\n     *       3. compute final block type of previous granule based on #2.\n     *       4. calling_program_data = psymodel_data_old\n     *       5. psymodel_data_old = psymodel_data\n     *     psycho_loudness_approx\n     *       jd - 2001 mar 12\n     *    in:  energy   - BLKSIZE/2 elements of frequency magnitudes ^ 2\n     *         gfp      - uses out_samplerate, ATHtype (also needed for ATHformula)\n     *    returns: loudness^2 approximation, a positive value roughly tuned for a value\n     *             of 1.0 for signals near clipping.\n     *    notes:   When calibrated, feeding this function binary white noise at sample\n     *             values +32767 or -32768 should return values that approach 3.\n     *             ATHformula is used to approximate an equal loudness curve.\n     *    future:  Data indicates that the shape of the equal loudness curve varies\n     *             with intensity.  This function might be improved by using an equal\n     *             loudness curve shaped for typical playback levels (instead of the\n     *             ATH, that is shaped for the threshold).  A flexible realization might\n     *             simply bend the existing ATH curve to achieve the desired shape.\n     *             However, the potential gain may not be enough to justify an effort.\n     * </PRE>\n     */\n    function psycho_loudness_approx(energy, gfc) {\n        var loudness_power = 0.0;\n        /* apply weights to power in freq. bands */\n        for (var i = 0; i < Encoder.BLKSIZE / 2; ++i)\n            loudness_power += energy[i] * gfc.ATH.eql_w[i];\n        loudness_power *= VO_SCALE;\n\n        return loudness_power;\n    }\n\n    function compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, wsamp_lPos, wsamp_s, wsamp_sPos, gr_out, chn, buffer, bufPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        /* FFT data for mid and side channel is derived from L & R */\n        else if (chn == 2) {\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n            for (var b = 2; b >= 0; --b) {\n                for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                    var l = wsamp_s[wsamp_sPos + 0][b][j];\n                    var r = wsamp_s[wsamp_sPos + 1][b][j];\n                    wsamp_s[wsamp_sPos + 0][b][j] = (l + r) * Util.SQRT2 * 0.5;\n                    wsamp_s[wsamp_sPos + 1][b][j] = (l - r) * Util.SQRT2 * 0.5;\n                }\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 - j];\n            var im = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        for (var b = 2; b >= 0; --b) {\n            fftenergy_s[b][0] = (wsamp_s[wsamp_sPos + 0])[b][0];\n            fftenergy_s[b][0] *= fftenergy_s[b][0];\n            for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n                var re = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 - j];\n                var im = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 + j];\n                fftenergy_s[b][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                    * re + im * im) * 0.5);\n            }\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n\n        /*********************************************************************\n         * compute loudness approximation (used for ATH auto-level adjustment)\n         *********************************************************************/\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    /* mask_add optimization */\n    /* init the limit values used to avoid computing log in mask_add when it is not necessary */\n\n    /**\n     * <PRE>\n     *  For example, with i = 10*log10(m2/m1)/10*16         (= log10(m2/m1)*16)\n     *\n     * abs(i)>8 is equivalent (as i is an integer) to\n     * abs(i)>=9\n     * i>=9 || i<=-9\n     * equivalent to (as i is the biggest integer smaller than log10(m2/m1)*16\n     * or the smallest integer bigger than log10(m2/m1)*16 depending on the sign of log10(m2/m1)*16)\n     * log10(m2/m1)>=9/16 || log10(m2/m1)<=-9/16\n     * exp10 is strictly increasing thus this is equivalent to\n     * m2/m1 >= 10^(9/16) || m2/m1<=10^(-9/16) which are comparisons to constants\n     * </PRE>\n     */\n\n    /**\n     * as in if(i>8)\n     */\n    var I1LIMIT = 8;\n    /**\n     * as in if(i>24) . changed 23\n     */\n    var I2LIMIT = 23;\n    /**\n     * as in if(m<15)\n     */\n    var MLIMIT = 15;\n\n    var ma_max_i1;\n    var ma_max_i2;\n    var ma_max_m;\n\n    /**\n     * This is the masking table:<BR>\n     * According to tonality, values are going from 0dB (TMN) to 9.3dB (NMT).<BR>\n     * After additive masking computation, 8dB are added, so final values are\n     * going from 8dB to 17.3dB\n     *\n     * pow(10, -0.0..-0.6)\n     */\n    var tab = [1.0, 0.79433, 0.63096, 0.63096,\n        0.63096, 0.63096, 0.63096, 0.25119, 0.11749];\n\n    function init_mask_add_max_values() {\n        ma_max_i1 = Math.pow(10, (I1LIMIT + 1) / 16.0);\n        ma_max_i2 = Math.pow(10, (I2LIMIT + 1) / 16.0);\n        ma_max_m = Math.pow(10, (MLIMIT) / 10.0);\n    }\n\n    var table1 = [3.3246 * 3.3246,\n        3.23837 * 3.23837, 3.15437 * 3.15437, 3.00412 * 3.00412,\n        2.86103 * 2.86103, 2.65407 * 2.65407, 2.46209 * 2.46209,\n        2.284 * 2.284, 2.11879 * 2.11879, 1.96552 * 1.96552,\n        1.82335 * 1.82335, 1.69146 * 1.69146, 1.56911 * 1.56911,\n        1.46658 * 1.46658, 1.37074 * 1.37074, 1.31036 * 1.31036,\n        1.25264 * 1.25264, 1.20648 * 1.20648, 1.16203 * 1.16203,\n        1.12765 * 1.12765, 1.09428 * 1.09428, 1.0659 * 1.0659,\n        1.03826 * 1.03826, 1.01895 * 1.01895, 1];\n\n    var table2 = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    var table3 = [2.35364 * 2.35364,\n        2.29259 * 2.29259, 2.23313 * 2.23313, 2.12675 * 2.12675,\n        2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303,\n        1.61695 * 1.61695, 1.49999 * 1.49999, 1.39148 * 1.39148,\n        1.29083 * 1.29083, 1.19746 * 1.19746, 1.11084 * 1.11084,\n        1.03826 * 1.03826];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function mask_add(m1, m2, kk, b, gfc, shortblock) {\n        var ratio;\n\n        if (m2 > m1) {\n            if (m2 < (m1 * ma_max_i2))\n                ratio = m2 / m1;\n            else\n                return (m1 + m2);\n        } else {\n            if (m1 >= (m2 * ma_max_i2))\n                return (m1 + m2);\n            ratio = m1 / m2;\n        }\n\n        /* Should always be true, just checking */\n        assert(m1 >= 0);\n        assert(m2 >= 0);\n\n        m1 += m2;\n        //if (((long)(b + 3) & 0xffffffff) <= 3 + 3) {\n        if ((b + 3) <= 3 + 3) {\n            /* approximately, 1 bark = 3 partitions */\n            /* 65% of the cases */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                /* 43% of the total */\n                return m1;\n            }\n\n            /* 22% of the total */\n            var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n            return m1 * table2[i];\n        }\n\n        /**\n         * <PRE>\n         * m<15 equ log10((m1+m2)/gfc.ATH.cb[k])<1.5\n         * equ (m1+m2)/gfc.ATH.cb[k]<10^1.5\n         * equ (m1+m2)<10^1.5 * gfc.ATH.cb[k]\n         * </PRE>\n         */\n        var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n        if (shortblock != 0) {\n            m2 = gfc.ATH.cb_s[kk] * gfc.ATH.adjust;\n        } else {\n            m2 = gfc.ATH.cb_l[kk] * gfc.ATH.adjust;\n        }\n        assert(m2 >= 0);\n        if (m1 < ma_max_m * m2) {\n            /* 3% of the total */\n            /* Originally if (m > 0) { */\n            if (m1 > m2) {\n                var f, r;\n\n                f = 1.0;\n                if (i <= 13)\n                    f = table3[i];\n\n                r = Util.FAST_LOG10_X(m1 / m2, 10.0 / 15.0);\n                return m1 * ((table1[i] - f) * r + f);\n            }\n\n            if (i > 13)\n                return m1;\n\n            return m1 * table3[i];\n        }\n\n        /* 10% of total */\n        return m1 * table1[i];\n    }\n\n    var table2_ = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function vbrpsy_mask_add(m1, m2, b) {\n        var ratio;\n\n        if (m1 < 0) {\n            m1 = 0;\n        }\n        if (m2 < 0) {\n            m2 = 0;\n        }\n        if (m1 <= 0) {\n            return m2;\n        }\n        if (m2 <= 0) {\n            return m1;\n        }\n        if (m2 > m1) {\n            ratio = m2 / m1;\n        } else {\n            ratio = m1 / m2;\n        }\n        if (-2 <= b && b <= 2) {\n            /* approximately, 1 bark = 3 partitions */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                return m1 + m2;\n            } else {\n                var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n                return (m1 + m2) * table2_[i];\n            }\n        }\n        if (ratio < ma_max_i2) {\n            return m1 + m2;\n        }\n        if (m1 < m2) {\n            m1 = m2;\n        }\n        return m1;\n    }\n\n    /**\n     * compute interchannel masking effects\n     */\n    function calc_interchannel_masking(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n        if (gfc.channels_out > 1) {\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                var l = gfc.thm[0].l[sb];\n                var r = gfc.thm[1].l[sb];\n                gfc.thm[0].l[sb] += r * ratio;\n                gfc.thm[1].l[sb] += l * ratio;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                for (var sblock = 0; sblock < 3; sblock++) {\n                    var l = gfc.thm[0].s[sb][sblock];\n                    var r = gfc.thm[1].s[sb][sblock];\n                    gfc.thm[0].s[sb][sblock] += r * ratio;\n                    gfc.thm[1].s[sb][sblock] += l * ratio;\n                }\n            }\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function msfix1(gfc) {\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            /* use this fix if L & R masking differs by 2db or less */\n            /* if db = 10*log10(x2/x1) < 2 */\n            /* if (x2 < 1.58*x1) { */\n            if (gfc.thm[0].l[sb] > 1.58 * gfc.thm[1].l[sb]\n                || gfc.thm[1].l[sb] > 1.58 * gfc.thm[0].l[sb])\n                continue;\n            var mld = gfc.mld_l[sb] * gfc.en[3].l[sb];\n            var rmid = Math.max(gfc.thm[2].l[sb],\n                Math.min(gfc.thm[3].l[sb], mld));\n\n            mld = gfc.mld_l[sb] * gfc.en[2].l[sb];\n            var rside = Math.max(gfc.thm[3].l[sb],\n                Math.min(gfc.thm[2].l[sb], mld));\n            gfc.thm[2].l[sb] = rmid;\n            gfc.thm[3].l[sb] = rside;\n        }\n\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                if (gfc.thm[0].s[sb][sblock] > 1.58 * gfc.thm[1].s[sb][sblock]\n                    || gfc.thm[1].s[sb][sblock] > 1.58 * gfc.thm[0].s[sb][sblock])\n                    continue;\n                var mld = gfc.mld_s[sb] * gfc.en[3].s[sb][sblock];\n                var rmid = Math.max(gfc.thm[2].s[sb][sblock],\n                    Math.min(gfc.thm[3].s[sb][sblock], mld));\n\n                mld = gfc.mld_s[sb] * gfc.en[2].s[sb][sblock];\n                var rside = Math.max(gfc.thm[3].s[sb][sblock],\n                    Math.min(gfc.thm[2].s[sb][sblock], mld));\n\n                gfc.thm[2].s[sb][sblock] = rmid;\n                gfc.thm[3].s[sb][sblock] = rside;\n            }\n        }\n    }\n\n    /**\n     * Adjust M/S maskings if user set \"msfix\"\n     *\n     * Naoki Shibata 2000\n     */\n    function ns_msfix(gfc, msfix, athadjust) {\n        var msfix2 = msfix;\n        var athlower = Math.pow(10, athadjust);\n\n        msfix *= 2.0;\n        msfix2 *= 2.0;\n        for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n            var thmLR, thmM, thmS, ath;\n            ath = (gfc.ATH.cb_l[gfc.bm_l[sb]]) * athlower;\n            thmLR = Math.min(Math.max(gfc.thm[0].l[sb], ath),\n                Math.max(gfc.thm[1].l[sb], ath));\n            thmM = Math.max(gfc.thm[2].l[sb], ath);\n            thmS = Math.max(gfc.thm[3].l[sb], ath);\n            if (thmLR * msfix < thmM + thmS) {\n                var f = thmLR * msfix2 / (thmM + thmS);\n                thmM *= f;\n                thmS *= f;\n                assert(thmM + thmS > 0);\n            }\n            gfc.thm[2].l[sb] = Math.min(thmM, gfc.thm[2].l[sb]);\n            gfc.thm[3].l[sb] = Math.min(thmS, gfc.thm[3].l[sb]);\n        }\n\n        athlower *= ( Encoder.BLKSIZE_s / Encoder.BLKSIZE);\n        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thmLR, thmM, thmS, ath;\n                ath = (gfc.ATH.cb_s[gfc.bm_s[sb]]) * athlower;\n                thmLR = Math.min(Math.max(gfc.thm[0].s[sb][sblock], ath),\n                    Math.max(gfc.thm[1].s[sb][sblock], ath));\n                thmM = Math.max(gfc.thm[2].s[sb][sblock], ath);\n                thmS = Math.max(gfc.thm[3].s[sb][sblock], ath);\n\n                if (thmLR * msfix < thmM + thmS) {\n                    var f = thmLR * msfix / (thmM + thmS);\n                    thmM *= f;\n                    thmS *= f;\n                    assert(thmM + thmS > 0);\n                }\n                gfc.thm[2].s[sb][sblock] = Math.min(gfc.thm[2].s[sb][sblock],\n                    thmM);\n                gfc.thm[3].s[sb][sblock] = Math.min(gfc.thm[3].s[sb][sblock],\n                    thmS);\n            }\n        }\n    }\n\n    /**\n     * short block threshold calculation (part 2)\n     *\n     * partition band bo_s[sfb] is at the transition from scalefactor band sfb\n     * to the next one sfb+1; enn and thmm have to be split between them\n     */\n    function convert_partition2scalefac_s(gfc, eb, thr, chn, sblock) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_s; ++b, ++sb) {\n            var bo_s_sb = gfc.bo_s[sb];\n            var npart_s = gfc.npart_s;\n            var b_lim = bo_s_sb < npart_s ? bo_s_sb : npart_s;\n            while (b < b_lim) {\n                assert(eb[b] >= 0);\n                // iff failed, it may indicate some index error elsewhere\n                assert(thr[b] >= 0);\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].s[sb][sblock] = enn;\n            gfc.thm[chn].s[sb][sblock] = thmm;\n\n            if (b >= npart_s) {\n                ++sb;\n                break;\n            }\n            assert(eb[b] >= 0);\n            // iff failed, it may indicate some index error elsewhere\n            assert(thr[b] >= 0);\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_s_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].s[sb][sblock] += enn;\n                gfc.thm[chn].s[sb][sblock] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_s; ++sb) {\n            gfc.en[chn].s[sb][sblock] = 0;\n            gfc.thm[chn].s[sb][sblock] = 0;\n        }\n    }\n\n    /**\n     * longblock threshold calculation (part 2)\n     */\n    function convert_partition2scalefac_l(gfc, eb, thr, chn) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_l; ++b, ++sb) {\n            var bo_l_sb = gfc.bo_l[sb];\n            var npart_l = gfc.npart_l;\n            var b_lim = bo_l_sb < npart_l ? bo_l_sb : npart_l;\n            while (b < b_lim) {\n                assert(eb[b] >= 0);\n                // iff failed, it may indicate some index error elsewhere\n                assert(thr[b] >= 0);\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].l[sb] = enn;\n            gfc.thm[chn].l[sb] = thmm;\n\n            if (b >= npart_l) {\n                ++sb;\n                break;\n            }\n            assert(eb[b] >= 0);\n            assert(thr[b] >= 0);\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_l_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].l[sb] += enn;\n                gfc.thm[chn].l[sb] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_l; ++sb) {\n            gfc.en[chn].l[sb] = 0;\n            gfc.thm[chn].l[sb] = 0;\n        }\n    }\n\n    function compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var j, b;\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (var i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n        }\n        assert(b == gfc.npart_s);\n        assert(j == 129);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var ecb = gfc.s3_ss[j++] * eb[kk];\n            ++kk;\n            while (kk <= gfc.s3ind_s[b][1]) {\n                ecb += gfc.s3_ss[j] * eb[kk];\n                ++j;\n                ++kk;\n            }\n\n            { /* limit calculated threshold by previous granule */\n                var x = rpelev_s * gfc.nb_s1[chn][b];\n                thr[b] = Math.min(ecb, x);\n            }\n            if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) {\n                /* limit calculated threshold by even older granule */\n                var x = rpelev2_s * gfc.nb_s2[chn][b];\n                var y = thr[b];\n                thr[b] = Math.min(x, y);\n            }\n\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n            assert(thr[b] >= 0);\n        }\n        for (; b <= Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function block_type_set(gfp, uselongblock, blocktype_d, blocktype) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            blocktype[chn] = Encoder.NORM_TYPE;\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed)\n                uselongblock[chn] = 1;\n            if (gfp.short_blocks == ShortBlock.short_block_forced)\n                uselongblock[chn] = 0;\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                assert(gfc.blocktype_old[chn] != Encoder.START_TYPE);\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype[chn] = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype[chn] = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype[chn];\n            // save for next call to l3psy_anal\n        }\n    }\n\n    function NS_INTERP(x, y, r) {\n        /* was pow((x),(r))*pow((y),1-(r)) */\n        if (r >= 1.0) {\n            /* 99.7% of the time */\n            return x;\n        }\n        if (r <= 0.0)\n            return y;\n        if (y > 0.0) {\n            /* rest of the time */\n            return (Math.pow(x / y, r) * y);\n        }\n        /* never happens */\n        return 0.0;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_s = [11.8, 13.6, 17.2, 32, 46.5,\n        51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130,\n        /* 255.8 */\n    ];\n\n    function pecalc_s(mr, masking_lower) {\n        var pe_s = 1236.28 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_s - 1; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thm = mr.thm.s[sb][sblock];\n                assert(sb < regcoef_s.length);\n                if (thm > 0.0) {\n                    var x = thm * masking_lower;\n                    var en = mr.en.s[sb][sblock];\n                    if (en > x) {\n                        if (en > x * 1e10) {\n                            pe_s += regcoef_s[sb] * (10.0 * LOG10);\n                        } else {\n                            assert(x > 0);\n                            pe_s += regcoef_s[sb] * Util.FAST_LOG10(en / x);\n                        }\n                    }\n                }\n            }\n        }\n\n        return pe_s;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_l = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9,\n        12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5,\n        60.7, 73.9, 85.7, 93.4, 126.1,\n        /* 241.3 */\n    ];\n\n    function pecalc_l(mr, masking_lower) {\n        var pe_l = 1124.23 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_l - 1; sb++) {\n            var thm = mr.thm.l[sb];\n            assert(sb < regcoef_l.length);\n            if (thm > 0.0) {\n                var x = thm * masking_lower;\n                var en = mr.en.l[sb];\n                if (en > x) {\n                    if (en > x * 1e10) {\n                        pe_l += regcoef_l[sb] * (10.0 * LOG10);\n                    } else {\n                        assert(x > 0);\n                        pe_l += regcoef_l[sb] * Util.FAST_LOG10(en / x);\n                    }\n                }\n            }\n        }\n        return pe_l;\n    }\n\n    function calc_energy(gfc, fftenergy, eb, max, avg) {\n        var b, j;\n\n        for (b = j = 0; b < gfc.npart_l; ++b) {\n            var ebb = 0, m = 0;\n            var i;\n            for (i = 0; i < gfc.numlines_l[b]; ++i, ++j) {\n                var el = fftenergy[j];\n                assert(el >= 0);\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            max[b] = m;\n            avg[b] = ebb * gfc.rnumlines_l[b];\n            assert(gfc.rnumlines_l[b] >= 0);\n            assert(ebb >= 0);\n            assert(eb[b] >= 0);\n            assert(max[b] >= 0);\n            assert(avg[b] >= 0);\n        }\n    }\n\n    function calc_mask_index_l(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            assert((gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_l - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            assert(a >= 0);\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                assert((gfc.numlines_l[b - 1] + gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1) > 0);\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b]\n                    + gfc.numlines_l[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n        assert(b > 0);\n        assert(b == gfc.npart_l - 1);\n\n        a = avg[b - 1] + avg[b];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            assert((gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n        assert(b == (gfc.npart_l - 1));\n    }\n\n    var fircoef = [\n        -8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2,\n        -5.52212e-17 * 2, -0.313819 * 2\n    ];\n\n    this.L3psycho_anal_ns = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        /*\n         * to get a good cache performance, one has to think about the sequence,\n         * in which the variables are used.\n         */\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n\n        /* convolution */\n        var eb_l = new_float(Encoder.CBANDS + 1);\n        var eb_s = new_float(Encoder.CBANDS + 1);\n        var thr = new_float(Encoder.CBANDS + 2);\n\n        /* block type */\n        var blocktype = new_int(2), uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n        var numchn, chn;\n        var b, i, j, k;\n        var sb, sblock;\n\n        /* variables used for --nspsytune */\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var pcfact;\n        var mask_idx_l = new_int(Encoder.CBANDS + 2), mask_idx_s = new_int(Encoder.CBANDS + 2);\n\n        Arrays.fill(mask_idx_s, 0);\n\n        numchn = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        if (gfp.mode == MPEGMode.JOINT_STEREO)\n            numchn = 4;\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            pcfact = gfc.ResvMax == 0 ? 0 : ( gfc.ResvSize)\n            / gfc.ResvMax * 0.5;\n        else if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            pcfact = 0.6;\n        } else\n            pcfact = 1.0;\n\n        /**********************************************************************\n         * Apply HPF of fs/4 to the input signal. This is used for attack\n         * detection / handling.\n         **********************************************************************/\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (chn = 0; chn < gfc.channels_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            var firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            assert(fircoef.length == ((NSFIRLEN - 1) / 2));\n            for (i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (numchn > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n\n        for (chn = 0; chn < numchn; chn++) {\n            var wsamp_l;\n            var wsamp_s;\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var attack_intensity = new_float(12);\n            var ns_uselongblock = 1;\n            var attackThreshold;\n            var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n            var ns_attacks = [0, 0, 0, 0];\n            var fftenergy = new_float(Encoder.HBLKSIZE);\n            var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n\n            /*\n             * rh 20040301: the following loops do access one off the limits so\n             * I increase the array dimensions by one and initialize the\n             * accessed values to zero\n             */\n            assert(gfc.npart_s <= Encoder.CBANDS);\n            assert(gfc.npart_l <= Encoder.CBANDS);\n\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                assert(gfc.nsPsy.last_en_subshort[chn][i + 4] > 0);\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            if (chn == 2) {\n                for (i = 0; i < 576; i++) {\n                    var l, r;\n                    l = ns_hpfsmpl[0][i];\n                    r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            {\n                var pf = ns_hpfsmpl[chn & 1];\n                var pfPos = 0;\n                for (i = 0; i < 9; i++) {\n                    var pfe = pfPos + 576 / 9;\n                    var p = 1.;\n                    for (; pfPos < pfe; pfPos++)\n                        if (p < Math.abs(pf[pfPos]))\n                            p = Math.abs(pf[pfPos]);\n\n                    gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                    en_short[1 + i / 3] += p;\n                    if (p > en_subshort[i + 3 - 2]) {\n                        assert(en_subshort[i + 3 - 2] > 0);\n                        p = p / en_subshort[i + 3 - 2];\n                    } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                        assert(p > 0);\n                        p = en_subshort[i + 3 - 2] / (p * 10.0);\n                    } else\n                        p = 0.0;\n                    attack_intensity[i + 3] = p;\n                }\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (i = 1; i < 12; i++)\n                    if (x < attack_intensity[i])\n                        x = attack_intensity[i];\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            for (i = 0; i < 12; i++)\n                if (0 == ns_attacks[i / 3]\n                    && attack_intensity[i] > attackThreshold)\n                    ns_attacks[i / 3] = (i % 3) + 1;\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            for (i = 1; i < 4; i++) {\n                var ratio;\n                if (en_short[i - 1] > en_short[i]) {\n                    assert(en_short[i] > 0);\n                    ratio = en_short[i - 1] / en_short[i];\n                } else {\n                    assert(en_short[i - 1] > 0);\n                    ratio = en_short[i] / en_short[i - 1];\n                }\n                if (ratio < 1.7) {\n                    ns_attacks[i] = 0;\n                    if (i == 1)\n                        ns_attacks[0] = 0;\n                }\n            }\n\n            if (ns_attacks[0] != 0 && gfc.nsPsy.lastAttacks[chn] != 0)\n                ns_attacks[0] = 0;\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[0] + ns_attacks[1] + ns_attacks[2] + ns_attacks[3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[1] != 0 && ns_attacks[0] != 0)\n                    ns_attacks[1] = 0;\n                if (ns_attacks[2] != 0 && ns_attacks[1] != 0)\n                    ns_attacks[2] = 0;\n                if (ns_attacks[3] != 0 && ns_attacks[2] != 0)\n                    ns_attacks[3] = 0;\n            }\n\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n\n            /*********************************************************************\n             * compute FFTs\n             *********************************************************************/\n            wsamp_s = wsamp_S;\n            wsamp_l = wsamp_L;\n            compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, (chn & 1),\n                wsamp_s, (chn & 1), gr_out, chn, buffer, bufPos);\n\n            /*********************************************************************\n             * Calculate the energy and the tonality of each partition.\n             *********************************************************************/\n            calc_energy(gfc, fftenergy, eb_l, max, avg);\n            calc_mask_index_l(gfc, max, avg, mask_idx_l);\n            /* compute masking thresholds for short blocks */\n            for (sblock = 0; sblock < 3; sblock++) {\n                var enn, thmm;\n                compute_masking_s(gfp, fftenergy_s, eb_s, thr, chn, sblock);\n                convert_partition2scalefac_s(gfc, eb_s, thr, chn, sblock);\n                /**** short block pre-echo control ****/\n                for (sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    thmm = gfc.thm[chn].s[sb][sblock];\n\n                    thmm *= NS_PREECHO_ATT0;\n                    if (ns_attacks[sblock] >= 2 || ns_attacks[sblock + 1] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT1 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    if (ns_attacks[sblock] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    } else if ((sblock != 0 && ns_attacks[sblock - 1] == 3)\n                        || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                        var idx = (sblock != 2) ? sblock + 1 : 0;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    /* pulse like signal detection for fatboy.wav and so on */\n                    enn = en_subshort[sblock * 3 + 3]\n                        + en_subshort[sblock * 3 + 4]\n                        + en_subshort[sblock * 3 + 5];\n                    if (en_subshort[sblock * 3 + 5] * 6 < enn) {\n                        thmm *= 0.5;\n                        if (en_subshort[sblock * 3 + 4] * 6 < enn)\n                            thmm *= 0.5;\n                    }\n\n                    gfc.thm[chn].s[sb][sblock] = thmm;\n                }\n            }\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[2];\n\n            /*********************************************************************\n             * convolve the partitioned energy and unpredictability with the\n             * spreading function, s3_l[b][k]\n             ********************************************************************/\n            k = 0;\n            {\n                for (b = 0; b < gfc.npart_l; b++) {\n                    /*\n                     * convolve the partitioned energy with the spreading\n                     * function\n                     */\n                    var kk = gfc.s3ind[b][0];\n                    var eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                    var ecb = gfc.s3_ll[k++] * eb2;\n                    while (++kk <= gfc.s3ind[b][1]) {\n                        eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                        ecb = mask_add(ecb, gfc.s3_ll[k++] * eb2, kk, kk - b,\n                            gfc, 0);\n                    }\n                    ecb *= 0.158489319246111;\n                    /* pow(10,-0.8) */\n\n                    /**** long block pre-echo control ****/\n                    /**\n                     * <PRE>\n                     * dont use long block pre-echo control if previous granule was\n                     * a short block.  This is to avoid the situation:\n                     * frame0:  quiet (very low masking)\n                     * frame1:  surge  (triggers short blocks)\n                     * frame2:  regular frame.  looks like pre-echo when compared to\n                     *          frame0, but all pre-echo was in frame1.\n                     * </PRE>\n                     */\n                    /*\n                     * chn=0,1 L and R channels\n                     *\n                     * chn=2,3 S and M channels.\n                     */\n\n                    if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE)\n                        thr[b] = ecb;\n                    else\n                        thr[b] = NS_INTERP(\n                            Math.min(ecb, Math.min(rpelev\n                                * gfc.nb_1[chn][b], rpelev2\n                                * gfc.nb_2[chn][b])), ecb, pcfact);\n\n                    gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n                    gfc.nb_1[chn][b] = ecb;\n                }\n            }\n            for (; b <= Encoder.CBANDS; ++b) {\n                eb_l[b] = 0;\n                thr[b] = 0;\n            }\n            /* compute masking thresholds for long blocks */\n            convert_partition2scalefac_l(gfc, eb_l, thr, chn);\n        }\n        /* end loop over chn */\n\n        if (gfp.mode == MPEGMode.STEREO || gfp.mode == MPEGMode.JOINT_STEREO) {\n            if (gfp.interChRatio > 0.0) {\n                calc_interchannel_masking(gfp, gfp.interChRatio);\n            }\n        }\n\n        if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            var msfix;\n            msfix1(gfc);\n            msfix = gfp.msfix;\n            if (Math.abs(msfix) > 0.0)\n                ns_msfix(gfc, msfix, gfp.ATHlower * gfc.ATH.adjust);\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        block_type_set(gfp, uselongblock, blocktype_d, blocktype);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (chn = 0; chn < numchn; chn++) {\n            var ppe;\n            var ppePos = 0;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE)\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            else\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n\n            if (gfp.analysis)\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n\n        }\n        return 0;\n    }\n\n    function vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out, fftenergy, wsamp_l, wsamp_lPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n        } else if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\n                var l = wsamp_l[wsamp_lPos + 0][j];\n                var r = wsamp_l[wsamp_lPos + 1][j];\n                wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 - j];\n            var im = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            for (var j = 0; j < Encoder.HBLKSIZE; j++) {\n                gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\n                gfc.pinfo.energy_save[chn][j] = fftenergy[j];\n            }\n            gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\n        }\n    }\n\n    function vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock, fftenergy_s, wsamp_s, wsamp_sPos) {\n        var gfc = gfp.internal_flags;\n\n        if (sblock == 0 && chn < 2) {\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        if (chn == 2) {\n            /* FFT data for mid and side channel is derived from L & R */\n            for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\n                var l = wsamp_s[wsamp_sPos + 0][sblock][j];\n                var r = wsamp_s[wsamp_sPos + 1][sblock][j];\n                wsamp_s[wsamp_sPos + 0][sblock][j] = (l + r) * Util.SQRT2 * 0.5;\n                wsamp_s[wsamp_sPos + 1][sblock][j] = (l - r) * Util.SQRT2 * 0.5;\n            }\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy_s[sblock][0] = wsamp_s[wsamp_sPos + 0][sblock][0];\n        fftenergy_s[sblock][0] *= fftenergy_s[sblock][0];\n        for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n            var re = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 - j];\n            var im = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 + j];\n            fftenergy_s[sblock][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\n                * re + im * im) * 0.5);\n        }\n    }\n\n    /**\n     * compute loudness approximation (used for ATH auto-level adjustment)\n     */\n    function vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn, fftenergy) {\n        var gfc = gfp.internal_flags;\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    var fircoef_ = [-8.65163e-18 * 2,\n        -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2,\n        0.0931738 * 2, -5.52212e-17 * 2, -0.313819 * 2];\n\n    /**\n     * Apply HPF of fs/4 to the input signal. This is used for attack detection\n     * / handling.\n     */\n    function vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, energy, sub_short_factor, ns_attacks, uselongblock) {\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var gfc = gfp.internal_flags;\n        var n_chn_out = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4 : n_chn_out;\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (var chn = 0; chn < n_chn_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            assert(fircoef_.length == ((NSFIRLEN - 1) / 2));\n            for (var i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (var j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef_[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef_[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (n_chn_psy > 2) {\n                /* MS maskings */\n                /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\n                masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\n                masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var attack_intensity = new_float(12);\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var pf = ns_hpfsmpl[chn & 1];\n            var pfPos = 0;\n            var attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            var ns_uselongblock = 1;\n\n            if (chn == 2) {\n                for (var i = 0, j = 576; j > 0; ++i, --j) {\n                    var l = ns_hpfsmpl[0][i];\n                    var r = ns_hpfsmpl[1][i];\n                    ns_hpfsmpl[0][i] = l + r;\n                    ns_hpfsmpl[1][i] = l - r;\n                }\n            }\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (var i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                assert(gfc.nsPsy.last_en_subshort[chn][i + 4] > 0);\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            for (var i = 0; i < 9; i++) {\n                var pfe = pfPos + 576 / 9;\n                var p = 1.;\n                for (; pfPos < pfe; pfPos++)\n                    if (p < Math.abs(pf[pfPos]))\n                        p = Math.abs(pf[pfPos]);\n\n                gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                en_short[1 + i / 3] += p;\n                if (p > en_subshort[i + 3 - 2]) {\n                    assert(en_subshort[i + 3 - 2] > 0);\n                    p = p / en_subshort[i + 3 - 2];\n                } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                    assert(p > 0);\n                    p = en_subshort[i + 3 - 2] / (p * 10.0);\n                } else {\n                    p = 0.0;\n                }\n                attack_intensity[i + 3] = p;\n            }\n            /* pulse like signal detection for fatboy.wav and so on */\n            for (var i = 0; i < 3; ++i) {\n                var enn = en_subshort[i * 3 + 3]\n                    + en_subshort[i * 3 + 4] + en_subshort[i * 3 + 5];\n                var factor = 1.;\n                if (en_subshort[i * 3 + 5] * 6 < enn) {\n                    factor *= 0.5;\n                    if (en_subshort[i * 3 + 4] * 6 < enn) {\n                        factor *= 0.5;\n                    }\n                }\n                sub_short_factor[chn][i] = factor;\n            }\n\n            if (gfp.analysis) {\n                var x = attack_intensity[0];\n                for (var i = 1; i < 12; i++) {\n                    if (x < attack_intensity[i]) {\n                        x = attack_intensity[i];\n                    }\n                }\n                gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\n                gfc.pinfo.ers_save[chn] = x;\n            }\n\n            /* compare energies between sub-shortblocks */\n            for (var i = 0; i < 12; i++) {\n                if (0 == ns_attacks[chn][i / 3]\n                    && attack_intensity[i] > attackThreshold) {\n                    ns_attacks[chn][i / 3] = (i % 3) + 1;\n                }\n            }\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            /* Good samples to show the effect are Trumpet test songs */\n            /*\n             * GB: tuned (1) to avoid too many short blocks for test sample\n             * TRUMPET\n             */\n            /*\n             * RH: tuned (2) to let enough short blocks through for test sample\n             * FSOL and SNAPS\n             */\n            for (var i = 1; i < 4; i++) {\n                var u = en_short[i - 1];\n                var v = en_short[i];\n                var m = Math.max(u, v);\n                if (m < 40000) { /* (2) */\n                    if (u < 1.7 * v && v < 1.7 * u) { /* (1) */\n                        if (i == 1 && ns_attacks[chn][0] <= ns_attacks[chn][i]) {\n                            ns_attacks[chn][0] = 0;\n                        }\n                        ns_attacks[chn][i] = 0;\n                    }\n                }\n            }\n\n            if (ns_attacks[chn][0] <= gfc.nsPsy.lastAttacks[chn]) {\n                ns_attacks[chn][0] = 0;\n            }\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[chn][0] + ns_attacks[chn][1]\n                + ns_attacks[chn][2] + ns_attacks[chn][3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[chn][1] != 0 && ns_attacks[chn][0] != 0) {\n                    ns_attacks[chn][1] = 0;\n                }\n                if (ns_attacks[chn][2] != 0 && ns_attacks[chn][1] != 0) {\n                    ns_attacks[chn][2] = 0;\n                }\n                if (ns_attacks[chn][3] != 0 && ns_attacks[chn][2] != 0) {\n                    ns_attacks[chn][3] = 0;\n                }\n            }\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                if (ns_uselongblock == 0) {\n                    uselongblock[0] = uselongblock[1] = 0;\n                }\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n        }\n    }\n\n    function vbrpsy_skip_masking_s(gfc, chn, sblock) {\n        if (sblock == 0) {\n            for (var b = 0; b < gfc.npart_s; b++) {\n                gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n                gfc.nb_s1[chn][b] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_skip_masking_l(gfc, chn) {\n        for (var b = 0; b < gfc.npart_l; b++) {\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = 0;\n        }\n    }\n\n    function psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            assert((gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_s - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            assert(b + 1 < gfc.npart_s);\n            assert(a >= 0);\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                assert((gfc.numlines_s[b - 1] + gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1) > 0);\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b]\n                    + gfc.numlines_s[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n        assert(b > 0);\n        assert(b == gfc.npart_s - 1);\n\n        a = avg[b - 1] + avg[b];\n        assert(a >= 0);\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            assert((gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1) > 0);\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n        assert(b == (gfc.npart_s - 1));\n    }\n\n    function vbrpsy_compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var max = new float[Encoder.CBANDS], avg = new_float(Encoder.CBANDS);\n        var i, j, b;\n        var mask_idx_s = new int[Encoder.CBANDS];\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            assert(ebb >= 0);\n            max[b] = m;\n            assert(n > 0);\n            avg[b] = ebb / n;\n            assert(avg[b] >= 0);\n        }\n        assert(b == gfc.npart_s);\n        assert(j == 129);\n        for (; b < Encoder.CBANDS; ++b) {\n            max[b] = 0;\n            avg[b] = 0;\n        }\n        psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx_s);\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var last = gfc.s3ind_s[b][1];\n            var dd, dd_n;\n            var x, ecb, avg_mask;\n            dd = mask_idx_s[kk];\n            dd_n = 1;\n            ecb = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n            ++j;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_s[kk];\n                dd_n += 1;\n                x = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\n                ecb = vbrpsy_mask_add(ecb, x, kk - b);\n                ++j;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n            thr[b] = ecb;\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_s[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb[b]) {\n                thr[b] = eb[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n\n            assert(thr[b] >= 0);\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_masking_l(gfc, fftenergy, eb_l, thr, chn) {\n        var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n        var mask_idx_l = new_int(Encoder.CBANDS + 2);\n        var b;\n\n        /*********************************************************************\n         * Calculate the energy and the tonality of each partition.\n         *********************************************************************/\n        calc_energy(gfc, fftenergy, eb_l, max, avg);\n        calc_mask_index_l(gfc, max, avg, mask_idx_l);\n\n        /*********************************************************************\n         * convolve the partitioned energy and unpredictability with the\n         * spreading function, s3_l[b][k]\n         ********************************************************************/\n        var k = 0;\n        for (b = 0; b < gfc.npart_l; b++) {\n            var x, ecb, avg_mask, t;\n            /* convolve the partitioned energy with the spreading function */\n            var kk = gfc.s3ind[b][0];\n            var last = gfc.s3ind[b][1];\n            var dd = 0, dd_n = 0;\n            dd = mask_idx_l[kk];\n            dd_n += 1;\n            ecb = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n            ++k;\n            ++kk;\n            while (kk <= last) {\n                dd += mask_idx_l[kk];\n                dd_n += 1;\n                x = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\n                t = vbrpsy_mask_add(ecb, x, kk - b);\n                ecb = t;\n                ++k;\n                ++kk;\n            }\n            dd = (1 + 2 * dd) / (2 * dd_n);\n            avg_mask = tab[dd] * 0.5;\n            ecb *= avg_mask;\n\n            /**** long block pre-echo control ****/\n            /**\n             * <PRE>\n             * dont use long block pre-echo control if previous granule was\n             * a short block.  This is to avoid the situation:\n             * frame0:  quiet (very low masking)\n             * frame1:  surge  (triggers short blocks)\n             * frame2:  regular frame.  looks like pre-echo when compared to\n             *          frame0, but all pre-echo was in frame1.\n             * </PRE>\n             */\n            /*\n             * chn=0,1 L and R channels chn=2,3 S and M channels.\n             */\n            if (gfc.blocktype_old[chn & 0x01] == Encoder.SHORT_TYPE) {\n                var ecb_limit = rpelev * gfc.nb_1[chn][b];\n                if (ecb_limit > 0) {\n                    thr[b] = Math.min(ecb, ecb_limit);\n                } else {\n                    /**\n                     * <PRE>\n                     * Robert 071209:\n                     * Because we don't calculate long block psy when we know a granule\n                     * should be of short blocks, we don't have any clue how the granule\n                     * before would have looked like as a long block. So we have to guess\n                     * a little bit for this END_TYPE block.\n                     * Most of the time we get away with this sloppyness. (fingers crossed :)\n                     * The speed increase is worth it.\n                     * </PRE>\n                     */\n                    thr[b] = Math.min(ecb, eb_l[b] * NS_PREECHO_ATT2);\n                }\n            } else {\n                var ecb_limit_2 = rpelev2 * gfc.nb_2[chn][b];\n                var ecb_limit_1 = rpelev * gfc.nb_1[chn][b];\n                var ecb_limit;\n                if (ecb_limit_2 <= 0) {\n                    ecb_limit_2 = ecb;\n                }\n                if (ecb_limit_1 <= 0) {\n                    ecb_limit_1 = ecb;\n                }\n                if (gfc.blocktype_old[chn & 0x01] == Encoder.NORM_TYPE) {\n                    ecb_limit = Math.min(ecb_limit_1, ecb_limit_2);\n                } else {\n                    ecb_limit = ecb_limit_1;\n                }\n                thr[b] = Math.min(ecb, ecb_limit);\n            }\n            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n            gfc.nb_1[chn][b] = ecb;\n            {\n                /*\n                 * if THR exceeds EB, the quantization routines will take the\n                 * difference from other bands. in case of strong tonal samples\n                 * (tonaltest.wav) this leads to heavy distortions. that's why\n                 * we limit THR here.\n                 */\n                x = max[b];\n                x *= gfc.minval_l[b];\n                x *= avg_mask;\n                if (thr[b] > x) {\n                    thr[b] = x;\n                }\n            }\n            if (gfc.masking_lower > 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            if (thr[b] > eb_l[b]) {\n                thr[b] = eb_l[b];\n            }\n            if (gfc.masking_lower < 1) {\n                thr[b] *= gfc.masking_lower;\n            }\n            assert(thr[b] >= 0);\n        }\n        for (; b < Encoder.CBANDS; ++b) {\n            eb_l[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function vbrpsy_compute_block_type(gfp, uselongblock) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed) {\n                uselongblock[chn] = 1;\n            }\n            if (gfp.short_blocks == ShortBlock.short_block_forced) {\n                uselongblock[chn] = 0;\n            }\n        }\n    }\n\n    function vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            var blocktype = Encoder.NORM_TYPE;\n            /* disable short blocks */\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                assert(gfc.blocktype_old[chn] != Encoder.START_TYPE);\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype;\n            // save for next call to l3psy_anal\n        }\n    }\n\n    /**\n     * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\n     */\n    function vbrpsy_compute_MS_thresholds(eb, thr, cb_mld, ath_cb, athadjust, msfix, n) {\n        var msfix2 = msfix * 2;\n        var athlower = msfix > 0 ? Math.pow(10, athadjust) : 1;\n        var rside, rmid;\n        for (var b = 0; b < n; ++b) {\n            var ebM = eb[2][b];\n            var ebS = eb[3][b];\n            var thmL = thr[0][b];\n            var thmR = thr[1][b];\n            var thmM = thr[2][b];\n            var thmS = thr[3][b];\n\n            /* use this fix if L & R masking differs by 2db or less */\n            if (thmL <= 1.58 * thmR && thmR <= 1.58 * thmL) {\n                var mld_m = cb_mld[b] * ebS;\n                var mld_s = cb_mld[b] * ebM;\n                rmid = Math.max(thmM, Math.min(thmS, mld_m));\n                rside = Math.max(thmS, Math.min(thmM, mld_s));\n            } else {\n                rmid = thmM;\n                rside = thmS;\n            }\n            if (msfix > 0) {\n                /***************************************************************/\n                /* Adjust M/S maskings if user set \"msfix\" */\n                /***************************************************************/\n                /* Naoki Shibata 2000 */\n                var thmLR, thmMS;\n                var ath = ath_cb[b] * athlower;\n                thmLR = Math.min(Math.max(thmL, ath), Math.max(thmR, ath));\n                thmM = Math.max(rmid, ath);\n                thmS = Math.max(rside, ath);\n                thmMS = thmM + thmS;\n                if (thmMS > 0 && (thmLR * msfix2) < thmMS) {\n                    var f = thmLR * msfix2 / thmMS;\n                    thmM *= f;\n                    thmS *= f;\n                    assert(thmMS > 0);\n                }\n                rmid = Math.min(thmM, rmid);\n                rside = Math.min(thmS, rside);\n            }\n            if (rmid > ebM) {\n                rmid = ebM;\n            }\n            if (rside > ebS) {\n                rside = ebS;\n            }\n            thr[2][b] = rmid;\n            thr[3][b] = rside;\n        }\n    }\n\n    this.L3psycho_anal_vbr = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_l;\n        var wsamp_s;\n        var fftenergy = new_float(Encoder.HBLKSIZE);\n        var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n        var eb = new_float_n([4, Encoder.CBANDS]), thr = new_float_n([4, Encoder.CBANDS]);\n        var sub_short_factor = new_float_n([4, 3]);\n        var pcfact = 0.6;\n\n        /* block type */\n        var ns_attacks = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],\n            [0, 0, 0, 0]];\n        var uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n\n        /* chn=2 and 3 = Mid and Side channels */\n        var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4\n            : gfc.channels_out;\n\n        vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio,\n            masking_MS_ratio, energy, sub_short_factor, ns_attacks,\n            uselongblock);\n\n        vbrpsy_compute_block_type(gfp, uselongblock);\n\n        /* LONG BLOCK CASE */\n        {\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                wsamp_l = wsamp_L;\n                vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out,\n                    fftenergy, wsamp_l, ch01);\n\n                vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn,\n                    fftenergy);\n\n                if (uselongblock[ch01] != 0) {\n                    vbrpsy_compute_masking_l(gfc, fftenergy, eb[chn], thr[chn],\n                        chn);\n                } else {\n                    vbrpsy_skip_masking_l(gfc, chn);\n                }\n            }\n            if ((uselongblock[0] + uselongblock[1]) == 2) {\n                /* M/S channel */\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_l,\n                        gfc.ATH.cb_l, gfp.ATHlower * gfc.ATH.adjust,\n                        gfp.msfix, gfc.npart_l);\n                }\n            }\n            /* TODO: apply adaptive ATH masking here ?? */\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n                if (uselongblock[ch01] != 0) {\n                    convert_partition2scalefac_l(gfc, eb[chn], thr[chn], chn);\n                }\n            }\n        }\n\n        /* SHORT BLOCKS CASE */\n        {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n\n                    if (uselongblock[ch01] != 0) {\n                        vbrpsy_skip_masking_s(gfc, chn, sblock);\n                    } else {\n                        /* compute masking thresholds for short blocks */\n                        wsamp_s = wsamp_S;\n                        vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock,\n                            fftenergy_s, wsamp_s, ch01);\n                        vbrpsy_compute_masking_s(gfp, fftenergy_s, eb[chn],\n                            thr[chn], chn, sblock);\n                    }\n                }\n                if ((uselongblock[0] + uselongblock[1]) == 0) {\n                    /* M/S channel */\n                    if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                        vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_s,\n                            gfc.ATH.cb_s, gfp.ATHlower * gfc.ATH.adjust,\n                            gfp.msfix, gfc.npart_s);\n                    }\n                    /* L/R channel */\n                }\n                /* TODO: apply adaptive ATH masking here ?? */\n                for (var chn = 0; chn < n_chn_psy; ++chn) {\n                    var ch01 = chn & 0x01;\n                    if (0 == uselongblock[ch01]) {\n                        convert_partition2scalefac_s(gfc, eb[chn], thr[chn],\n                            chn, sblock);\n                    }\n                }\n            }\n\n            /**** short block pre-echo control ****/\n            for (var chn = 0; chn < n_chn_psy; chn++) {\n                var ch01 = chn & 0x01;\n\n                if (uselongblock[ch01] != 0) {\n                    continue;\n                }\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    var new_thmm = new_float(3);\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        var thmm = gfc.thm[chn].s[sb][sblock];\n                        thmm *= NS_PREECHO_ATT0;\n\n                        if (ns_attacks[chn][sblock] >= 2\n                            || ns_attacks[chn][sblock + 1] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT1 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if (ns_attacks[chn][sblock] == 1) {\n                            var idx = (sblock != 0) ? sblock - 1 : 2;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        } else if ((sblock != 0 && ns_attacks[chn][sblock - 1] == 3)\n                            || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                            var idx = (sblock != 2) ? sblock + 1 : 0;\n                            var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                                NS_PREECHO_ATT2 * pcfact);\n                            thmm = Math.min(thmm, p);\n                        }\n\n                        /* pulse like signal detection for fatboy.wav and so on */\n                        thmm *= sub_short_factor[chn][sblock];\n\n                        new_thmm[sblock] = thmm;\n                    }\n                    for (var sblock = 0; sblock < 3; sblock++) {\n                        gfc.thm[chn].s[sb][sblock] = new_thmm[sblock];\n                    }\n                }\n            }\n        }\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[chn][2];\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (var chn = 0; chn < n_chn_psy; chn++) {\n            var ppe;\n            var ppePos;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                ppe = percep_MS_entropy;\n                ppePos = -2;\n                type = Encoder.NORM_TYPE;\n                if (blocktype_d[0] == Encoder.SHORT_TYPE\n                    || blocktype_d[1] == Encoder.SHORT_TYPE)\n                    type = Encoder.SHORT_TYPE;\n                mr = masking_MS_ratio[gr_out][chn - 2];\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE) {\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            } else {\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n            }\n\n            if (gfp.analysis) {\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n            }\n        }\n        return 0;\n    }\n\n    function s3_func_x(bark, hf_slope) {\n        var tempx = bark, tempy;\n\n        if (tempx >= 0) {\n            tempy = -tempx * 27;\n        } else {\n            tempy = tempx * hf_slope;\n        }\n        if (tempy <= -72.0) {\n            return 0;\n        }\n        return Math.exp(tempy * LN_TO_LOG10);\n    }\n\n    function norm_s3_func_x(hf_slope) {\n        var lim_a = 0, lim_b = 0;\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x -= 1)\n                ;\n            l = x;\n            h = 0;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    h = x;\n                } else {\n                    l = x;\n                }\n            }\n            lim_a = l;\n        }\n        {\n            var x = 0, l, h;\n            for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x += 1)\n                ;\n            l = 0;\n            h = x;\n            while (Math.abs(h - l) > 1e-12) {\n                x = (h + l) / 2;\n                if (s3_func_x(x, hf_slope) > 0) {\n                    l = x;\n                } else {\n                    h = x;\n                }\n            }\n            lim_b = h;\n        }\n        {\n            var sum = 0;\n            var m = 1000;\n            var i;\n            for (i = 0; i <= m; ++i) {\n                var x = lim_a + i * (lim_b - lim_a) / m;\n                var y = s3_func_x(x, hf_slope);\n                sum += y;\n            }\n            {\n                var norm = (m + 1) / (sum * (lim_b - lim_a));\n                /* printf( \"norm = %lf\\n\",norm); */\n                return norm;\n            }\n        }\n    }\n\n    /**\n     *   The spreading function.  Values returned in units of energy\n     */\n    function s3_func(bark) {\n        var tempx, x, tempy, temp;\n        tempx = bark;\n        if (tempx >= 0)\n            tempx *= 3;\n        else\n            tempx *= 1.5;\n\n        if (tempx >= 0.5 && tempx <= 2.5) {\n            temp = tempx - 0.5;\n            x = 8.0 * (temp * temp - 2.0 * temp);\n        } else\n            x = 0.0;\n        tempx += 0.474;\n        tempy = 15.811389 + 7.5 * tempx - 17.5\n            * Math.sqrt(1.0 + tempx * tempx);\n\n        if (tempy <= -60.0)\n            return 0.0;\n\n        tempx = Math.exp((x + tempy) * LN_TO_LOG10);\n\n        /**\n         * <PRE>\n         * Normalization.  The spreading function should be normalized so that:\n         * +inf\n         * /\n         * |  s3 [ bark ]  d(bark)   =  1\n         * /\n         * -inf\n         * </PRE>\n         */\n        tempx /= .6609193;\n        return tempx;\n    }\n\n    /**\n     * see for example \"Zwicker: Psychoakustik, 1982; ISBN 3-540-11401-7\n     */\n    function freq2bark(freq) {\n        /* input: freq in hz output: barks */\n        if (freq < 0)\n            freq = 0;\n        freq = freq * 0.001;\n        return 13.0 * Math.atan(.76 * freq) + 3.5\n            * Math.atan(freq * freq / (7.5 * 7.5));\n    }\n\n    function init_numline(numlines, bo, bm, bval, bval_width, mld, bo_w, sfreq, blksize, scalepos, deltafreq, sbmax) {\n        var b_frq = new_float(Encoder.CBANDS + 1);\n        var sample_freq_frac = sfreq / (sbmax > 15 ? 2 * 576 : 2 * 192);\n        var partition = new_int(Encoder.HBLKSIZE);\n        var i;\n        sfreq /= blksize;\n        var j = 0;\n        var ni = 0;\n        /* compute numlines, the number of spectral lines in each partition band */\n        /* each partition band should be about DELBARK wide. */\n        for (i = 0; i < Encoder.CBANDS; i++) {\n            var bark1;\n            var j2;\n            bark1 = freq2bark(sfreq * j);\n\n            b_frq[i] = sfreq * j;\n\n            for (j2 = j; freq2bark(sfreq * j2) - bark1 < DELBARK\n            && j2 <= blksize / 2; j2++)\n                ;\n\n            numlines[i] = j2 - j;\n            ni = i + 1;\n\n            while (j < j2) {\n                assert(j < Encoder.HBLKSIZE);\n                partition[j++] = i;\n            }\n            if (j > blksize / 2) {\n                j = blksize / 2;\n                ++i;\n                break;\n            }\n        }\n        assert(i < Encoder.CBANDS);\n        b_frq[i] = sfreq * j;\n\n        for (var sfb = 0; sfb < sbmax; sfb++) {\n            var i1, i2, start, end;\n            var arg;\n            start = scalepos[sfb];\n            end = scalepos[sfb + 1];\n\n            i1 = 0 | Math.floor(.5 + deltafreq * (start - .5));\n            if (i1 < 0)\n                i1 = 0;\n            i2 = 0 | Math.floor(.5 + deltafreq * (end - .5));\n\n            if (i2 > blksize / 2)\n                i2 = blksize / 2;\n\n            bm[sfb] = (partition[i1] + partition[i2]) / 2;\n            bo[sfb] = partition[i2];\n            var f_tmp = sample_freq_frac * end;\n            /*\n             * calculate how much of this band belongs to current scalefactor\n             * band\n             */\n            bo_w[sfb] = (f_tmp - b_frq[bo[sfb]])\n                / (b_frq[bo[sfb] + 1] - b_frq[bo[sfb]]);\n            if (bo_w[sfb] < 0) {\n                bo_w[sfb] = 0;\n            } else {\n                if (bo_w[sfb] > 1) {\n                    bo_w[sfb] = 1;\n                }\n            }\n            /* setup stereo demasking thresholds */\n            /* formula reverse enginerred from plot in paper */\n            arg = freq2bark(sfreq * scalepos[sfb] * deltafreq);\n            arg = ( Math.min(arg, 15.5) / 15.5);\n\n            mld[sfb] = Math.pow(10.0,\n                1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n        }\n\n        /* compute bark values of each critical band */\n        j = 0;\n        for (var k = 0; k < ni; k++) {\n            var w = numlines[k];\n            var bark1, bark2;\n\n            bark1 = freq2bark(sfreq * (j));\n            bark2 = freq2bark(sfreq * (j + w - 1));\n            bval[k] = .5 * (bark1 + bark2);\n\n            bark1 = freq2bark(sfreq * (j - .5));\n            bark2 = freq2bark(sfreq * (j + w - .5));\n            bval_width[k] = bark2 - bark1;\n            j += w;\n        }\n\n        return ni;\n    }\n\n    function init_s3_values(s3ind, npart, bval, bval_width, norm, use_old_s3) {\n        var s3 = new_float_n([Encoder.CBANDS, Encoder.CBANDS]);\n        /*\n         * The s3 array is not linear in the bark scale.\n         *\n         * bval[x] should be used to get the bark value.\n         */\n        var j;\n        var numberOfNoneZero = 0;\n\n        /**\n         * <PRE>\n         * s[i][j], the value of the spreading function,\n         * centered at band j (masker), for band i (maskee)\n         *\n         * i.e.: sum over j to spread into signal barkval=i\n         * NOTE: i and j are used opposite as in the ISO docs\n         * </PRE>\n         */\n        if (use_old_s3) {\n            for (var i = 0; i < npart; i++) {\n                for (j = 0; j < npart; j++) {\n                    var v = s3_func(bval[i] - bval[j]) * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        } else {\n            for (j = 0; j < npart; j++) {\n                var hf_slope = 15 + Math.min(21 / bval[j], 12);\n                var s3_x_norm = norm_s3_func_x(hf_slope);\n                for (var i = 0; i < npart; i++) {\n                    var v = s3_x_norm\n                        * s3_func_x(bval[i] - bval[j], hf_slope)\n                        * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        }\n        for (var i = 0; i < npart; i++) {\n            for (j = 0; j < npart; j++) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][0] = j;\n\n            for (j = npart - 1; j > 0; j--) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][1] = j;\n            numberOfNoneZero += (s3ind[i][1] - s3ind[i][0] + 1);\n        }\n\n        var p = new_float(numberOfNoneZero);\n        var k = 0;\n        for (var i = 0; i < npart; i++)\n            for (j = s3ind[i][0]; j <= s3ind[i][1]; j++)\n                p[k++] = s3[i][j];\n\n        return p;\n    }\n\n    function stereo_demask(f) {\n        /* setup stereo demasking thresholds */\n        /* formula reverse enginerred from plot in paper */\n        var arg = freq2bark(f);\n        arg = (Math.min(arg, 15.5) / 15.5);\n\n        return Math.pow(10.0,\n            1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n    }\n\n    /**\n     * NOTE: the bitrate reduction from the inter-channel masking effect is low\n     * compared to the chance of getting annyoing artefacts. L3psycho_anal_vbr\n     * does not use this feature. (Robert 071216)\n     */\n    this.psymodel_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var i;\n        var useOldS3 = true;\n        var bvl_a = 13, bvl_b = 24;\n        var snr_l_a = 0, snr_l_b = 0;\n        var snr_s_a = -8.25, snr_s_b = -4.5;\n        var bval = new_float(Encoder.CBANDS);\n        var bval_width = new_float(Encoder.CBANDS);\n        var norm = new_float(Encoder.CBANDS);\n        var sfreq = gfp.out_samplerate;\n\n        switch (gfp.experimentalZ) {\n            default:\n            case 0:\n                useOldS3 = true;\n                break;\n            case 1:\n                useOldS3 = (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) ? false\n                    : true;\n                break;\n            case 2:\n                useOldS3 = false;\n                break;\n            case 3:\n                bvl_a = 8;\n                snr_l_a = -1.75;\n                snr_l_b = -0.0125;\n                snr_s_a = -8.25;\n                snr_s_b = -2.25;\n                break;\n        }\n        gfc.ms_ener_ratio_old = .25;\n        gfc.blocktype_old[0] = gfc.blocktype_old[1] = Encoder.NORM_TYPE;\n        // the vbr header is long blocks\n\n        for (i = 0; i < 4; ++i) {\n            for (var j = 0; j < Encoder.CBANDS; ++j) {\n                gfc.nb_1[i][j] = 1e20;\n                gfc.nb_2[i][j] = 1e20;\n                gfc.nb_s1[i][j] = gfc.nb_s2[i][j] = 1.0;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                gfc.en[i].l[sb] = 1e20;\n                gfc.thm[i].l[sb] = 1e20;\n            }\n            for (var j = 0; j < 3; ++j) {\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    gfc.en[i].s[sb][j] = 1e20;\n                    gfc.thm[i].s[sb][j] = 1e20;\n                }\n                gfc.nsPsy.lastAttacks[i] = 0;\n            }\n            for (var j = 0; j < 9; j++)\n                gfc.nsPsy.last_en_subshort[i][j] = 10.;\n        }\n\n        /* init. for loudness approx. -jd 2001 mar 27 */\n        gfc.loudness_sq_save[0] = gfc.loudness_sq_save[1] = 0.0;\n\n        /*************************************************************************\n         * now compute the psychoacoustic model specific constants\n         ************************************************************************/\n        /* compute numlines, bo, bm, bval, bval_width, mld */\n\n        gfc.npart_l = init_numline(gfc.numlines_l, gfc.bo_l, gfc.bm_l, bval,\n            bval_width, gfc.mld_l, gfc.PSY.bo_l_weight, sfreq,\n            Encoder.BLKSIZE, gfc.scalefac_band.l, Encoder.BLKSIZE\n            / (2.0 * 576), Encoder.SBMAX_l);\n        assert(gfc.npart_l < Encoder.CBANDS);\n        /* compute the spreading function */\n        for (i = 0; i < gfc.npart_l; i++) {\n            var snr = snr_l_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_l_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_l_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n            if (gfc.numlines_l[i] > 0) {\n                gfc.rnumlines_l[i] = 1.0 / gfc.numlines_l[i];\n            } else {\n                gfc.rnumlines_l[i] = 0;\n            }\n        }\n        gfc.s3_ll = init_s3_values(gfc.s3ind, gfc.npart_l, bval, bval_width,\n            norm, useOldS3);\n\n        /* compute long block specific values, ATH and MINVAL */\n        var j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var x;\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_l[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE);\n                var level;\n                /*\n                 * ATH below 100 Hz constant, not further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_l[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_l[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            /*\n             * FIXME: it does work to reduce low-freq problems in S53-Wind-Sax\n             * and lead-voice samples, but introduces some 3 kbps bit bloat too.\n             * TODO: Further refinement of the shape of this hack.\n             */\n            x = -20 + bval[i] * 20 / 10;\n            if (x > 6) {\n                x = 100;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8.;\n            gfc.minval_l[i] = (Math.pow(10.0, x / 10.) * gfc.numlines_l[i]);\n        }\n\n        /************************************************************************\n         * do the same things for short blocks\n         ************************************************************************/\n        gfc.npart_s = init_numline(gfc.numlines_s, gfc.bo_s, gfc.bm_s, bval,\n            bval_width, gfc.mld_s, gfc.PSY.bo_s_weight, sfreq,\n            Encoder.BLKSIZE_s, gfc.scalefac_band.s, Encoder.BLKSIZE_s\n            / (2.0 * 192), Encoder.SBMAX_s);\n        assert(gfc.npart_s < Encoder.CBANDS);\n\n        /* SNR formula. short block is normalized by SNR. is it still right ? */\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var x;\n            var snr = snr_s_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_s_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_s_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_s[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE_s);\n                var level;\n                /* freq = Min(.1,freq); */\n                /*\n                 * ATH below 100 Hz constant, not\n                 * further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_s[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_s[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            x = (-7.0 + bval[i] * 7.0 / 12.0);\n            if (bval[i] > 12) {\n                x *= 1 + Math.log(1 + x) * 3.1;\n            }\n            if (bval[i] < 12) {\n                x *= 1 + Math.log(1 - x) * 2.3;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8;\n            gfc.minval_s[i] = Math.pow(10.0, x / 10)\n                * gfc.numlines_s[i];\n        }\n\n        gfc.s3_ss = init_s3_values(gfc.s3ind_s, gfc.npart_s, bval, bval_width,\n            norm, useOldS3);\n\n        init_mask_add_max_values();\n        fft.init_fft(gfc);\n\n        /* setup temporal masking */\n        gfc.decay = Math.exp(-1.0 * LOG10\n            / (temporalmask_sustain_sec * sfreq / 192.0));\n\n        {\n            var msfix;\n            msfix = NS_MSFIX;\n            if ((gfp.exp_nspsytune & 2) != 0)\n                msfix = 1.0;\n            if (Math.abs(gfp.msfix) > 0.0)\n                msfix = gfp.msfix;\n            gfp.msfix = msfix;\n\n            /*\n             * spread only from npart_l bands. Normally, we use the spreading\n             * function to convolve from npart_l down to npart_l bands\n             */\n            for (var b = 0; b < gfc.npart_l; b++)\n                if (gfc.s3ind[b][1] > gfc.npart_l - 1)\n                    gfc.s3ind[b][1] = gfc.npart_l - 1;\n        }\n\n        /*\n         * prepare for ATH auto adjustment: we want to decrease the ATH by 12 dB\n         * per second\n         */\n        var frame_duration = (576. * gfc.mode_gr / sfreq);\n        gfc.ATH.decay = Math.pow(10., -12. / 10. * frame_duration);\n        gfc.ATH.adjust = 0.01;\n        /* minimum, for leading low loudness */\n        gfc.ATH.adjustLimit = 1.0;\n        /* on lead, allow adjust up to maximum */\n\n        assert(gfc.bo_l[Encoder.SBMAX_l - 1] <= gfc.npart_l);\n        assert(gfc.bo_s[Encoder.SBMAX_s - 1] <= gfc.npart_s);\n\n        if (gfp.ATHtype != -1) {\n            /* compute equal loudness weights (eql_w) */\n            var freq;\n            var freq_inc = gfp.out_samplerate\n                / (Encoder.BLKSIZE);\n            var eql_balance = 0.0;\n            freq = 0.0;\n            for (i = 0; i < Encoder.BLKSIZE / 2; ++i) {\n                /* convert ATH dB to relative power (not dB) */\n                /* to determine eql_w */\n                freq += freq_inc;\n                gfc.ATH.eql_w[i] = 1. / Math.pow(10, this.ATHformula(freq, gfp) / 10);\n                eql_balance += gfc.ATH.eql_w[i];\n            }\n            eql_balance = 1.0 / eql_balance;\n            for (i = Encoder.BLKSIZE / 2; --i >= 0;) { /* scale weights */\n                gfc.ATH.eql_w[i] *= eql_balance;\n            }\n        }\n        {\n            for (var b = j = 0; b < gfc.npart_s; ++b) {\n                for (i = 0; i < gfc.numlines_s[b]; ++i) {\n                    ++j;\n                }\n            }\n            assert(j == 129);\n            for (var b = j = 0; b < gfc.npart_l; ++b) {\n                for (i = 0; i < gfc.numlines_l[b]; ++i) {\n                    ++j;\n                }\n            }\n            assert(j == 513);\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var freq = sfreq * (j + gfc.numlines_l[i] / 2) / (1.0 * Encoder.BLKSIZE);\n            gfc.mld_cb_l[i] = stereo_demask(freq);\n            j += gfc.numlines_l[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_l[i] = 1;\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var freq = sfreq * (j + gfc.numlines_s[i] / 2) / (1.0 * Encoder.BLKSIZE_s);\n            gfc.mld_cb_s[i] = stereo_demask(freq);\n            j += gfc.numlines_s[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_s[i] = 1;\n        }\n        return 0;\n    }\n\n    /**\n     * Those ATH formulas are returning their minimum value for input = -1\n     */\n    function ATHformula_GB(f, value) {\n        /**\n         * <PRE>\n         *  from Painter & Spanias\n         *           modified by Gabriel Bouvigne to better fit the reality\n         *           ath =    3.640 * pow(f,-0.8)\n         *           - 6.800 * exp(-0.6*pow(f-3.4,2.0))\n         *           + 6.000 * exp(-0.15*pow(f-8.7,2.0))\n         *           + 0.6* 0.001 * pow(f,4.0);\n         *\n         *\n         *           In the past LAME was using the Painter &Spanias formula.\n         *           But we had some recurrent problems with HF content.\n         *           We measured real ATH values, and found the older formula\n         *           to be inaccurate in the higher part. So we made this new\n         *           formula and this solved most of HF problematic test cases.\n         *           The tradeoff is that in VBR mode it increases a lot the\n         *           bitrate.\n         * </PRE>\n         */\n\n        /*\n         * This curve can be adjusted according to the VBR scale: it adjusts\n         * from something close to Painter & Spanias on V9 up to Bouvigne's\n         * formula for V0. This way the VBR bitrate is more balanced according\n         * to the -V value.\n         */\n\n        // the following Hack allows to ask for the lowest value\n        if (f < -.3)\n            f = 3410;\n\n        // convert to khz\n        f /= 1000;\n        f = Math.max(0.1, f);\n        var ath = 3.640 * Math.pow(f, -0.8) - 6.800\n            * Math.exp(-0.6 * Math.pow(f - 3.4, 2.0)) + 6.000\n            * Math.exp(-0.15 * Math.pow(f - 8.7, 2.0))\n            + (0.6 + 0.04 * value) * 0.001 * Math.pow(f, 4.0);\n        return ath;\n    }\n\n    this.ATHformula = function (f, gfp) {\n        var ath;\n        switch (gfp.ATHtype) {\n            case 0:\n                ath = ATHformula_GB(f, 9);\n                break;\n            case 1:\n                // over sensitive, should probably be removed\n                ath = ATHformula_GB(f, -1);\n                break;\n            case 2:\n                ath = ATHformula_GB(f, 0);\n                break;\n            case 3:\n                // modification of GB formula by Roel\n                ath = ATHformula_GB(f, 1) + 6;\n                break;\n            case 4:\n                ath = ATHformula_GB(f, gfp.ATHcurve);\n                break;\n            default:\n                ath = ATHformula_GB(f, 0);\n                break;\n        }\n        return ath;\n    }\n\n}\n\nmodule.exports = PsyModel;\n","/*\n * MP3 quantization\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 1999-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2007 Robert Hegemann\n *      Copyright (c) 2001-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.     See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Quantize.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar VBRQuantize = require('./VBRQuantize.js');\nvar CalcNoiseResult = require('./CalcNoiseResult.js');\nvar CalcNoiseData = require('./CalcNoiseData.js');\nvar Encoder = require('./Encoder.js');\nvar GrInfo = require('./GrInfo.js');\nvar L3Side = require('./L3Side.js');\n\nfunction Quantize() {\n    var bs;\n    this.rv = null;\n    var rv;\n    this.qupvt = null;\n    var qupvt;\n\n    var vbr = new VBRQuantize();\n    var tk;\n\n    this.setModules = function (_bs, _rv, _qupvt, _tk) {\n        bs = _bs;\n        rv = _rv;\n        this.rv = _rv;\n        qupvt = _qupvt;\n        this.qupvt = _qupvt;\n        tk = _tk;\n        vbr.setModules(qupvt, tk);\n    }\n\n    /**\n     * convert from L/R <. Mid/Side\n     */\n    this.ms_convert = function (l3_side, gr) {\n        for (var i = 0; i < 576; ++i) {\n            var l = l3_side.tt[gr][0].xr[i];\n            var r = l3_side.tt[gr][1].xr[i];\n            l3_side.tt[gr][0].xr[i] = (l + r) * (Util.SQRT2 * 0.5);\n            l3_side.tt[gr][1].xr[i] = (l - r) * (Util.SQRT2 * 0.5);\n        }\n    };\n\n    /**\n     * mt 6/99\n     *\n     * initializes cod_info, scalefac and xrpow\n     *\n     * returns 0 if all energies in xr are zero, else 1\n     */\n    function init_xrpow_core(cod_info, xrpow, upper, sum) {\n        sum = 0;\n        for (var i = 0; i <= upper; ++i) {\n            var tmp = Math.abs(cod_info.xr[i]);\n            sum += tmp;\n            xrpow[i] = Math.sqrt(tmp * Math.sqrt(tmp));\n\n            if (xrpow[i] > cod_info.xrpow_max)\n                cod_info.xrpow_max = xrpow[i];\n        }\n        return sum;\n    }\n\n    this.init_xrpow = function (gfc, cod_info, xrpow) {\n        var sum = 0;\n        var upper = 0 | cod_info.max_nonzero_coeff;\n\n        assert(xrpow != null);\n        cod_info.xrpow_max = 0;\n\n        /*\n         * check if there is some energy we have to quantize and calculate xrpow\n         * matching our fresh scalefactors\n         */\n        assert(0 <= upper && upper <= 575);\n\n        Arrays.fill(xrpow, upper, 576, 0);\n\n        sum = init_xrpow_core(cod_info, xrpow, upper, sum);\n\n        /*\n         * return 1 if we have something to quantize, else 0\n         */\n        if (sum > 1E-20) {\n            var j = 0;\n            if ((gfc.substep_shaping & 2) != 0)\n                j = 1;\n\n            for (var i = 0; i < cod_info.psymax; i++)\n                gfc.pseudohalf[i] = j;\n\n            return true;\n        }\n\n        Arrays.fill(cod_info.l3_enc, 0, 576, 0);\n        return false;\n    }\n\n    /**\n     * Gabriel Bouvigne feb/apr 2003<BR>\n     * Analog silence detection in partitionned sfb21 or sfb12 for short blocks\n     *\n     * From top to bottom of sfb, changes to 0 coeffs which are below ath. It\n     * stops on the first coeff higher than ath.\n     */\n    function psfb21_analogsilence(gfc, cod_info) {\n        var ath = gfc.ATH;\n        var xr = cod_info.xr;\n\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            /* NORM, START or STOP type, but not SHORT blocks */\n            var stop = false;\n            for (var gsfb = Encoder.PSFB21 - 1; gsfb >= 0 && !stop; gsfb--) {\n                var start = gfc.scalefac_band.psfb21[gsfb];\n                var end = gfc.scalefac_band.psfb21[gsfb + 1];\n                var ath21 = qupvt.athAdjust(ath.adjust, ath.psfb21[gsfb],\n                    ath.floor);\n\n                if (gfc.nsPsy.longfact[21] > 1e-12)\n                    ath21 *= gfc.nsPsy.longfact[21];\n\n                for (var j = end - 1; j >= start; j--) {\n                    if (Math.abs(xr[j]) < ath21)\n                        xr[j] = 0;\n                    else {\n                        stop = true;\n                        break;\n                    }\n                }\n            }\n        } else {\n            /* note: short blocks coeffs are reordered */\n            for (var block = 0; block < 3; block++) {\n                var stop = false;\n                for (var gsfb = Encoder.PSFB12 - 1; gsfb >= 0 && !stop; gsfb--) {\n                    var start = gfc.scalefac_band.s[12]\n                        * 3\n                        + (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                        * block\n                        + (gfc.scalefac_band.psfb12[gsfb] - gfc.scalefac_band.psfb12[0]);\n                    var end = start\n                        + (gfc.scalefac_band.psfb12[gsfb + 1] - gfc.scalefac_band.psfb12[gsfb]);\n                    var ath12 = qupvt.athAdjust(ath.adjust, ath.psfb12[gsfb],\n                        ath.floor);\n\n                    if (gfc.nsPsy.shortfact[12] > 1e-12)\n                        ath12 *= gfc.nsPsy.shortfact[12];\n\n                    for (var j = end - 1; j >= start; j--) {\n                        if (Math.abs(xr[j]) < ath12)\n                            xr[j] = 0;\n                        else {\n                            stop = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    this.init_outer_loop = function (gfc, cod_info) {\n        /*\n         * initialize fresh cod_info\n         */\n        cod_info.part2_3_length = 0;\n        cod_info.big_values = 0;\n        cod_info.count1 = 0;\n        cod_info.global_gain = 210;\n        cod_info.scalefac_compress = 0;\n        /* mixed_block_flag, block_type was set in psymodel.c */\n        cod_info.table_select[0] = 0;\n        cod_info.table_select[1] = 0;\n        cod_info.table_select[2] = 0;\n        cod_info.subblock_gain[0] = 0;\n        cod_info.subblock_gain[1] = 0;\n        cod_info.subblock_gain[2] = 0;\n        cod_info.subblock_gain[3] = 0;\n        /* this one is always 0 */\n        cod_info.region0_count = 0;\n        cod_info.region1_count = 0;\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 0;\n        cod_info.count1table_select = 0;\n        cod_info.part2_length = 0;\n        cod_info.sfb_lmax = Encoder.SBPSY_l;\n        cod_info.sfb_smin = Encoder.SBPSY_s;\n        cod_info.psy_lmax = gfc.sfb21_extra ? Encoder.SBMAX_l : Encoder.SBPSY_l;\n        cod_info.psymax = cod_info.psy_lmax;\n        cod_info.sfbmax = cod_info.sfb_lmax;\n        cod_info.sfbdivide = 11;\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            cod_info.width[sfb] = gfc.scalefac_band.l[sfb + 1]\n                - gfc.scalefac_band.l[sfb];\n            /* which is always 0. */\n            cod_info.window[sfb] = 3;\n        }\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            var ixwork = new_float(576);\n\n            cod_info.sfb_smin = 0;\n            cod_info.sfb_lmax = 0;\n            if (cod_info.mixed_block_flag != 0) {\n                /*\n                 * MPEG-1: sfbs 0-7 long block, 3-12 short blocks MPEG-2(.5):\n                 * sfbs 0-5 long block, 3-12 short blocks\n                 */\n                cod_info.sfb_smin = 3;\n                cod_info.sfb_lmax = gfc.mode_gr * 2 + 4;\n            }\n            cod_info.psymax = cod_info.sfb_lmax\n                + 3\n                * ((gfc.sfb21_extra ? Encoder.SBMAX_s : Encoder.SBPSY_s) - cod_info.sfb_smin);\n            cod_info.sfbmax = cod_info.sfb_lmax + 3\n                * (Encoder.SBPSY_s - cod_info.sfb_smin);\n            cod_info.sfbdivide = cod_info.sfbmax - 18;\n            cod_info.psy_lmax = cod_info.sfb_lmax;\n            /* re-order the short blocks, for more efficient encoding below */\n            /* By Takehiro TOMINAGA */\n            /*\n             * Within each scalefactor band, data is given for successive time\n             * windows, beginning with window 0 and ending with window 2. Within\n             * each window, the quantized values are then arranged in order of\n             * increasing frequency...\n             */\n            var ix = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            System.arraycopy(cod_info.xr, 0, ixwork, 0, 576);\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                for (var window = 0; window < 3; window++) {\n                    for (var l = start; l < end; l++) {\n                        cod_info.xr[ix++] = ixwork[3 * l + window];\n                    }\n                }\n            }\n\n            var j = cod_info.sfb_lmax;\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                cod_info.width[j] = cod_info.width[j + 1] = cod_info.width[j + 2] = gfc.scalefac_band.s[sfb + 1]\n                    - gfc.scalefac_band.s[sfb];\n                cod_info.window[j] = 0;\n                cod_info.window[j + 1] = 1;\n                cod_info.window[j + 2] = 2;\n                j += 3;\n            }\n        }\n\n        cod_info.count1bits = 0;\n        cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[0][0];\n        cod_info.slen[0] = 0;\n        cod_info.slen[1] = 0;\n        cod_info.slen[2] = 0;\n        cod_info.slen[3] = 0;\n\n        cod_info.max_nonzero_coeff = 575;\n\n        /*\n         * fresh scalefactors are all zero\n         */\n        Arrays.fill(cod_info.scalefac, 0);\n\n        psfb21_analogsilence(gfc, cod_info);\n    };\n\n    function BinSearchDirection(ordinal) {\n        this.ordinal = ordinal;\n    }\n\n    BinSearchDirection.BINSEARCH_NONE = new BinSearchDirection(0);\n    BinSearchDirection.BINSEARCH_UP = new BinSearchDirection(1);\n    BinSearchDirection.BINSEARCH_DOWN = new BinSearchDirection(2);\n\n    /**\n     * author/date??\n     *\n     * binary step size search used by outer_loop to get a quantizer step size\n     * to start with\n     */\n    function bin_search_StepSize(gfc, cod_info, desired_rate, ch, xrpow) {\n        var nBits;\n        var CurrentStep = gfc.CurrentStep[ch];\n        var flagGoneOver = false;\n        var start = gfc.OldValue[ch];\n        var Direction = BinSearchDirection.BINSEARCH_NONE;\n        cod_info.global_gain = start;\n        desired_rate -= cod_info.part2_length;\n\n        assert(CurrentStep != 0);\n        for (; ;) {\n            var step;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n\n            if (CurrentStep == 1 || nBits == desired_rate)\n                break;\n            /* nothing to adjust anymore */\n\n            if (nBits > desired_rate) {\n                /* increase Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_DOWN)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_UP;\n                step = CurrentStep;\n            } else {\n                /* decrease Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_UP)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_DOWN;\n                step = -CurrentStep;\n            }\n            cod_info.global_gain += step;\n            if (cod_info.global_gain < 0) {\n                cod_info.global_gain = 0;\n                flagGoneOver = true;\n            }\n            if (cod_info.global_gain > 255) {\n                cod_info.global_gain = 255;\n                flagGoneOver = true;\n            }\n        }\n\n        assert(cod_info.global_gain >= 0);\n        assert(cod_info.global_gain < 256);\n\n        while (nBits > desired_rate && cod_info.global_gain < 255) {\n            cod_info.global_gain++;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n        }\n        gfc.CurrentStep[ch] = (start - cod_info.global_gain >= 4) ? 4 : 2;\n        gfc.OldValue[ch] = cod_info.global_gain;\n        cod_info.part2_3_length = nBits;\n        return nBits;\n    }\n\n    this.trancate_smallspectrums = function (gfc, gi, l3_xmin, work) {\n        var distort = new_float(L3Side.SFBMAX);\n\n        if ((0 == (gfc.substep_shaping & 4) && gi.block_type == Encoder.SHORT_TYPE)\n            || (gfc.substep_shaping & 0x80) != 0)\n            return;\n        qupvt.calc_noise(gi, l3_xmin, distort, new CalcNoiseResult(), null);\n        for (var j = 0; j < 576; j++) {\n            var xr = 0.0;\n            if (gi.l3_enc[j] != 0)\n                xr = Math.abs(gi.xr[j]);\n            work[j] = xr;\n        }\n\n        var j = 0;\n        var sfb = 8;\n        if (gi.block_type == Encoder.SHORT_TYPE)\n            sfb = 6;\n        do {\n            var allowedNoise, trancateThreshold;\n            var nsame, start;\n\n            var width = gi.width[sfb];\n            j += width;\n            if (distort[sfb] >= 1.0)\n                continue;\n\n            Arrays.sort(work, j - width, width);\n            if (BitStream.EQ(work[j - 1], 0.0))\n                continue;\n            /* all zero sfb */\n\n            allowedNoise = (1.0 - distort[sfb]) * l3_xmin[sfb];\n            trancateThreshold = 0.0;\n            start = 0;\n            do {\n                var noise;\n                for (nsame = 1; start + nsame < width; nsame++)\n                    if (BitStream.NEQ(work[start + j - width], work[start + j\n                        + nsame - width]))\n                        break;\n\n                noise = work[start + j - width] * work[start + j - width]\n                    * nsame;\n                if (allowedNoise < noise) {\n                    if (start != 0)\n                        trancateThreshold = work[start + j - width - 1];\n                    break;\n                }\n                allowedNoise -= noise;\n                start += nsame;\n            } while (start < width);\n            if (BitStream.EQ(trancateThreshold, 0.0))\n                continue;\n\n            do {\n                if (Math.abs(gi.xr[j - width]) <= trancateThreshold)\n                    gi.l3_enc[j - width] = 0;\n            } while (--width > 0);\n        } while (++sfb < gi.psymax);\n\n        gi.part2_3_length = tk.noquant_count_bits(gfc, gi, null);\n    };\n\n    /**\n     * author/date??\n     *\n     * Function: Returns zero if there is a scalefac which has not been\n     * amplified. Otherwise it returns one.\n     */\n    function loop_break(cod_info) {\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++)\n            if (cod_info.scalefac[sfb]\n                + cod_info.subblock_gain[cod_info.window[sfb]] == 0)\n                return false;\n\n        return true;\n    }\n\n    /* mt 5/99: Function: Improved calc_noise for a single channel */\n\n    function penalties(noise) {\n        return Util.FAST_LOG10((0.368 + 0.632 * noise * noise * noise));\n    }\n\n    /**\n     * author/date??\n     *\n     * several different codes to decide which quantization is better\n     */\n    function get_klemm_noise(distort, gi) {\n        var klemm_noise = 1E-37;\n        for (var sfb = 0; sfb < gi.psymax; sfb++)\n            klemm_noise += penalties(distort[sfb]);\n\n        return Math.max(1e-20, klemm_noise);\n    }\n\n    function quant_compare(quant_comp, best, calc, gi, distort) {\n        /**\n         * noise is given in decibels (dB) relative to masking thesholds.<BR>\n         *\n         * over_noise: ??? (the previous comment is fully wrong)<BR>\n         * tot_noise: ??? (the previous comment is fully wrong)<BR>\n         * max_noise: max quantization noise\n         */\n        var better;\n\n        switch (quant_comp) {\n            default:\n            case 9:\n            {\n                if (best.over_count > 0) {\n                    /* there are distorted sfb */\n                    better = calc.over_SSD <= best.over_SSD;\n                    if (calc.over_SSD == best.over_SSD)\n                        better = calc.bits < best.bits;\n                } else {\n                    /* no distorted sfb */\n                    better = ((calc.max_noise < 0) && ((calc.max_noise * 10 + calc.bits) <= (best.max_noise * 10 + best.bits)));\n                }\n                break;\n            }\n\n            case 0:\n                better = calc.over_count < best.over_count\n                    || (calc.over_count == best.over_count && calc.over_noise < best.over_noise)\n                    || (calc.over_count == best.over_count\n                    && BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n\n            case 8:\n                calc.max_noise = get_klemm_noise(distort, gi);\n            //$FALL-THROUGH$\n            case 1:\n                better = calc.max_noise < best.max_noise;\n                break;\n            case 2:\n                better = calc.tot_noise < best.tot_noise;\n                break;\n            case 3:\n                better = (calc.tot_noise < best.tot_noise)\n                    && (calc.max_noise < best.max_noise);\n                break;\n            case 4:\n                better = (calc.max_noise <= 0.0 && best.max_noise > 0.2)\n                    || (calc.max_noise <= 0.0 && best.max_noise < 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise)\n                    || (calc.max_noise <= 0.0 && best.max_noise > 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.05\n                    && best.max_noise > calc.max_noise - 0.1 && calc.tot_noise\n                    + calc.over_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.1\n                    && best.max_noise > calc.max_noise - 0.15 && calc.tot_noise\n                    + calc.over_noise + calc.over_noise < best.tot_noise\n                    + best.over_noise + best.over_noise);\n                break;\n            case 5:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n            case 6:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && (calc.max_noise < best.max_noise || (BitStream\n                        .EQ(calc.max_noise, best.max_noise) && calc.tot_noise <= best.tot_noise)));\n                break;\n            case 7:\n                better = calc.over_count < best.over_count\n                    || calc.over_noise < best.over_noise;\n                break;\n        }\n\n        if (best.over_count == 0) {\n            /*\n             * If no distorted bands, only use this quantization if it is\n             * better, and if it uses less bits. Unfortunately, part2_3_length\n             * is sometimes a poor estimator of the final size at low bitrates.\n             */\n            better = better && calc.bits < best.bits;\n        }\n\n        return better;\n    }\n\n    /**\n     * author/date??\n     *\n     * <PRE>\n     *  Amplify the scalefactor bands that violate the masking threshold.\n     *  See ISO 11172-3 Section C.1.5.4.3.5\n     *\n     *  distort[] = noise/masking\n     *  distort[] > 1   ==> noise is not masked\n     *  distort[] < 1   ==> noise is masked\n     *  max_dist = maximum value of distort[]\n     *\n     *  Three algorithms:\n     *  noise_shaping_amp\n     *        0             Amplify all bands with distort[]>1.\n     *\n     *        1             Amplify all bands with distort[] >= max_dist^(.5);\n     *                     ( 50% in the db scale)\n     *\n     *        2             Amplify first band with distort[] >= max_dist;\n     *\n     *\n     *  For algorithms 0 and 1, if max_dist < 1, then amplify all bands\n     *  with distort[] >= .95*max_dist.  This is to make sure we always\n     *  amplify at least one band.\n     * </PRE>\n     */\n    function amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n        var ifqstep34;\n\n        if (cod_info.scalefac_scale == 0) {\n            ifqstep34 = 1.29683955465100964055;\n            /* 2**(.75*.5) */\n        } else {\n            ifqstep34 = 1.68179283050742922612;\n            /* 2**(.75*1) */\n        }\n\n        /* compute maximum value of distort[] */\n        var trigger = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            if (trigger < distort[sfb])\n                trigger = distort[sfb];\n        }\n\n        var noise_shaping_amp = gfc.noise_shaping_amp;\n        if (noise_shaping_amp == 3) {\n            if (bRefine)\n                noise_shaping_amp = 2;\n            else\n                noise_shaping_amp = 1;\n        }\n        switch (noise_shaping_amp) {\n            case 2:\n                /* amplify exactly 1 band */\n                break;\n\n            case 1:\n                /* amplify bands within 50% of max (on db scale) */\n                if (trigger > 1.0)\n                    trigger = Math.pow(trigger, .5);\n                else\n                    trigger *= .95;\n                break;\n\n            case 0:\n            default:\n                /* ISO algorithm. amplify all bands with distort>1 */\n                if (trigger > 1.0)\n                    trigger = 1.0;\n                else\n                    trigger *= .95;\n                break;\n        }\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var l;\n            j += width;\n            if (distort[sfb] < trigger)\n                continue;\n\n            if ((gfc.substep_shaping & 2) != 0) {\n                gfc.pseudohalf[sfb] = (0 == gfc.pseudohalf[sfb]) ? 1 : 0;\n                if (0 == gfc.pseudohalf[sfb] && gfc.noise_shaping_amp == 2)\n                    return;\n            }\n            cod_info.scalefac[sfb]++;\n            for (l = -width; l < 0; l++) {\n                xrpow[j + l] *= ifqstep34;\n                if (xrpow[j + l] > cod_info.xrpow_max)\n                    cod_info.xrpow_max = xrpow[j + l];\n            }\n\n            if (gfc.noise_shaping_amp == 2)\n                return;\n        }\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * turns on scalefac scale and adjusts scalefactors\n     */\n    function inc_scalefac_scale(cod_info, xrpow) {\n        var ifqstep34 = 1.29683955465100964055;\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var s = cod_info.scalefac[sfb];\n            if (cod_info.preflag != 0)\n                s += qupvt.pretab[sfb];\n            j += width;\n            if ((s & 1) != 0) {\n                s++;\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= ifqstep34;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n            cod_info.scalefac[sfb] = s >> 1;\n        }\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 1;\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * increases the subblock gain and adjusts scalefactors\n     */\n    function inc_subblock_gain(gfc, cod_info, xrpow) {\n        var sfb;\n        var scalefac = cod_info.scalefac;\n\n        /* subbloc_gain can't do anything in the long block region */\n        for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n            if (scalefac[sfb] >= 16)\n                return true;\n        }\n\n        for (var window = 0; window < 3; window++) {\n            var s1 = 0;\n            var s2 = 0;\n\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbdivide; sfb += 3) {\n                if (s1 < scalefac[sfb])\n                    s1 = scalefac[sfb];\n            }\n            for (; sfb < cod_info.sfbmax; sfb += 3) {\n                if (s2 < scalefac[sfb])\n                    s2 = scalefac[sfb];\n            }\n\n            if (s1 < 16 && s2 < 8)\n                continue;\n\n            if (cod_info.subblock_gain[window] >= 7)\n                return true;\n\n            /*\n             * even though there is no scalefactor for sfb12 subblock gain\n             * affects upper frequencies too, that's why we have to go up to\n             * SBMAX_s\n             */\n            cod_info.subblock_gain[window]++;\n            var j = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbmax; sfb += 3) {\n                var amp;\n                var width = cod_info.width[sfb];\n                var s = scalefac[sfb];\n                assert(s >= 0);\n                s = s - (4 >> cod_info.scalefac_scale);\n                if (s >= 0) {\n                    scalefac[sfb] = s;\n                    j += width * 3;\n                    continue;\n                }\n\n                scalefac[sfb] = 0;\n                {\n                    var gain = 210 + (s << (cod_info.scalefac_scale + 1));\n                    amp = qupvt.IPOW20(gain);\n                }\n                j += width * (window + 1);\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n                j += width * (3 - window - 1);\n            }\n\n            {\n                var amp = qupvt.IPOW20(202);\n                j += cod_info.width[sfb] * (window + 1);\n                for (var l = -cod_info.width[sfb]; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * <PRE>\n     *  Takehiro Tominaga /date??\n     *  Robert Hegemann 2000-09-06: made a function of it\n     *\n     *  amplifies scalefactor bands,\n     *   - if all are already amplified returns 0\n     *   - if some bands are amplified too much:\n     *      * try to increase scalefac_scale\n     *      * if already scalefac_scale was set\n     *          try on short blocks to increase subblock gain\n     * </PRE>\n     */\n    function balance_noise(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n\n        amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine);\n\n        /*\n         * check to make sure we have not amplified too much loop_break returns\n         * 0 if there is an unamplified scalefac scale_bitcount returns 0 if no\n         * scalefactors are too large\n         */\n\n        var status = loop_break(cod_info);\n\n        if (status)\n            return false;\n        /* all bands amplified */\n\n        /*\n         * not all scalefactors have been amplified. so these scalefacs are\n         * possibly valid. encode them:\n         */\n        if (gfc.mode_gr == 2)\n            status = tk.scale_bitcount(cod_info);\n        else\n            status = tk.scale_bitcount_lsf(gfc, cod_info);\n\n        if (!status)\n            return true;\n        /* amplified some bands not exceeding limits */\n\n        /*\n         * some scalefactors are too large. lets try setting scalefac_scale=1\n         */\n        if (gfc.noise_shaping > 1) {\n            Arrays.fill(gfc.pseudohalf, 0);\n            if (0 == cod_info.scalefac_scale) {\n                inc_scalefac_scale(cod_info, xrpow);\n                status = false;\n            } else {\n                if (cod_info.block_type == Encoder.SHORT_TYPE\n                    && gfc.subblock_gain > 0) {\n                    status = (inc_subblock_gain(gfc, cod_info, xrpow) || loop_break(cod_info));\n                }\n            }\n        }\n\n        if (!status) {\n            if (gfc.mode_gr == 2)\n                status = tk.scale_bitcount(cod_info);\n            else\n                status = tk.scale_bitcount_lsf(gfc, cod_info);\n        }\n        return !status;\n    }\n\n    /**\n     * <PRE>\n     *  Function: The outer iteration loop controls the masking conditions\n     *  of all scalefactorbands. It computes the best scalefac and\n     *  global gain. This module calls the inner iteration loop\n     *\n     *  mt 5/99 completely rewritten to allow for bit reservoir control,\n     *  mid/side channels with L/R or mid/side masking thresholds,\n     *  and chooses best quantization instead of last quantization when\n     *  no distortion free quantization can be found.\n     *\n     *  added VBR support mt 5/99\n     *\n     *  some code shuffle rh 9/00\n     * </PRE>\n     *\n     * @param l3_xmin\n     *            allowed distortion\n     * @param xrpow\n     *            coloured magnitudes of spectral\n     * @param targ_bits\n     *            maximum allowed bits\n     */\n    this.outer_loop = function (gfp, cod_info, l3_xmin, xrpow, ch, targ_bits) {\n        var gfc = gfp.internal_flags;\n        var cod_info_w = new GrInfo();\n        var save_xrpow = new_float(576);\n        var distort = new_float(L3Side.SFBMAX);\n        var best_noise_info = new CalcNoiseResult();\n        var better;\n        var prev_noise = new CalcNoiseData();\n        var best_part2_3_length = 9999999;\n        var bEndOfSearch = false;\n        var bRefine = false;\n        var best_ggain_pass1 = 0;\n\n        bin_search_StepSize(gfc, cod_info, targ_bits, ch, xrpow);\n\n        if (0 == gfc.noise_shaping)\n        /* fast mode, no noise shaping, we are ready */\n            return 100;\n        /* default noise_info.over_count */\n\n        /* compute the distortion in this quantization */\n        /* coefficients and thresholds both l/r (or both mid/side) */\n        qupvt.calc_noise(cod_info, l3_xmin, distort, best_noise_info,\n            prev_noise);\n        best_noise_info.bits = cod_info.part2_3_length;\n\n        cod_info_w.assign(cod_info);\n        var age = 0;\n        System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n\n        while (!bEndOfSearch) {\n            /* BEGIN MAIN LOOP */\n            do {\n                var noise_info = new CalcNoiseResult();\n                var search_limit;\n                var maxggain = 255;\n\n                /*\n                 * When quantization with no distorted bands is found, allow up\n                 * to X new unsuccesful tries in serial. This gives us more\n                 * possibilities for different quant_compare modes. Much more\n                 * than 3 makes not a big difference, it is only slower.\n                 */\n\n                if ((gfc.substep_shaping & 2) != 0) {\n                    search_limit = 20;\n                } else {\n                    search_limit = 3;\n                }\n\n                /*\n                 * Check if the last scalefactor band is distorted. in VBR mode\n                 * we can't get rid of the distortion, so quit now and VBR mode\n                 * will try again with more bits. (makes a 10% speed increase,\n                 * the files I tested were binary identical, 2000/05/20 Robert\n                 * Hegemann) distort[] > 1 means noise > allowed noise\n                 */\n                if (gfc.sfb21_extra) {\n                    if (distort[cod_info_w.sfbmax] > 1.0)\n                        break;\n                    if (cod_info_w.block_type == Encoder.SHORT_TYPE\n                        && (distort[cod_info_w.sfbmax + 1] > 1.0 || distort[cod_info_w.sfbmax + 2] > 1.0))\n                        break;\n                }\n\n                /* try a new scalefactor conbination on cod_info_w */\n                if (!balance_noise(gfp, cod_info_w, distort, xrpow, bRefine))\n                    break;\n                if (cod_info_w.scalefac_scale != 0)\n                    maxggain = 254;\n\n                /*\n                 * inner_loop starts with the initial quantization step computed\n                 * above and slowly increases until the bits < huff_bits. Thus\n                 * it is important not to start with too large of an inital\n                 * quantization step. Too small is ok, but inner_loop will take\n                 * longer\n                 */\n                var huff_bits = targ_bits - cod_info_w.part2_length;\n                if (huff_bits <= 0)\n                    break;\n\n                /*\n                 * increase quantizer stepsize until needed bits are below\n                 * maximum\n                 */\n                while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow,\n                    cod_info_w, prev_noise)) > huff_bits\n                && cod_info_w.global_gain <= maxggain)\n                    cod_info_w.global_gain++;\n\n                if (cod_info_w.global_gain > maxggain)\n                    break;\n\n                if (best_noise_info.over_count == 0) {\n\n                    while ((cod_info_w.part2_3_length = tk.count_bits(gfc,\n                        xrpow, cod_info_w, prev_noise)) > best_part2_3_length\n                    && cod_info_w.global_gain <= maxggain)\n                        cod_info_w.global_gain++;\n\n                    if (cod_info_w.global_gain > maxggain)\n                        break;\n                }\n\n                /* compute the distortion in this quantization */\n                qupvt.calc_noise(cod_info_w, l3_xmin, distort, noise_info,\n                    prev_noise);\n                noise_info.bits = cod_info_w.part2_3_length;\n\n                /*\n                 * check if this quantization is better than our saved\n                 * quantization\n                 */\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    better = gfp.quant_comp;\n                } else\n                    better = gfp.quant_comp_short;\n\n                better = quant_compare(better, best_noise_info, noise_info,\n                    cod_info_w, distort) ? 1 : 0;\n\n                /* save data so we can restore this quantization later */\n                if (better != 0) {\n                    best_part2_3_length = cod_info.part2_3_length;\n                    best_noise_info = noise_info;\n                    cod_info.assign(cod_info_w);\n                    age = 0;\n                    /* save data so we can restore this quantization later */\n                    /* store for later reuse */\n                    System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n                } else {\n                    /* early stop? */\n                    if (gfc.full_outer_loop == 0) {\n                        if (++age > search_limit\n                            && best_noise_info.over_count == 0)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3) && bRefine && age > 30)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3)\n                            && bRefine\n                            && (cod_info_w.global_gain - best_ggain_pass1) > 15)\n                            break;\n                    }\n                }\n            } while ((cod_info_w.global_gain + cod_info_w.scalefac_scale) < 255);\n\n            if (gfc.noise_shaping_amp == 3) {\n                if (!bRefine) {\n                    /* refine search */\n                    cod_info_w.assign(cod_info);\n                    System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n                    age = 0;\n                    best_ggain_pass1 = cod_info_w.global_gain;\n\n                    bRefine = true;\n                } else {\n                    /* search already refined, stop */\n                    bEndOfSearch = true;\n                }\n\n            } else {\n                bEndOfSearch = true;\n            }\n        }\n\n        assert((cod_info.global_gain + cod_info.scalefac_scale) <= 255);\n        /*\n         * finish up\n         */\n        if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n        /* restore for reuse on next try */\n            System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n        /*\n         * do the 'substep shaping'\n         */\n        else if ((gfc.substep_shaping & 1) != 0)\n            trancate_smallspectrums(gfc, cod_info, l3_xmin, xrpow);\n\n        return best_noise_info.over_count;\n    }\n\n    /**\n     * Robert Hegemann 2000-09-06\n     *\n     * update reservoir status after FINAL quantization/bitrate\n     */\n    this.iteration_finish_one = function (gfc, gr, ch) {\n        var l3_side = gfc.l3_side;\n        var cod_info = l3_side.tt[gr][ch];\n\n        /*\n         * try some better scalefac storage\n         */\n        tk.best_scalefac_store(gfc, gr, ch, l3_side);\n\n        /*\n         * best huffman_divide may save some bits too\n         */\n        if (gfc.use_best_huffman == 1)\n            tk.best_huffman_divide(gfc, cod_info);\n\n        /*\n         * update reservoir status after FINAL quantization/bitrate\n         */\n        rv.ResvAdjust(gfc, cod_info);\n    };\n\n    /**\n     *\n     * 2000-09-04 Robert Hegemann\n     *\n     * @param l3_xmin\n     *            allowed distortion of the scalefactor\n     * @param xrpow\n     *            coloured magnitudes of spectral values\n     */\n    this.VBR_encode_granule = function (gfp, cod_info, l3_xmin, xrpow, ch, min_bits, max_bits) {\n        var gfc = gfp.internal_flags;\n        var bst_cod_info = new GrInfo();\n        var bst_xrpow = new_float(576);\n        var Max_bits = max_bits;\n        var real_bits = max_bits + 1;\n        var this_bits = (max_bits + min_bits) / 2;\n        var dbits, over, found = 0;\n        var sfb21_extra = gfc.sfb21_extra;\n\n        assert(Max_bits <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        Arrays.fill(bst_cod_info.l3_enc, 0);\n\n        /*\n         * search within round about 40 bits of optimal\n         */\n        do {\n            assert(this_bits >= min_bits);\n            assert(this_bits <= max_bits);\n            assert(min_bits <= max_bits);\n\n            if (this_bits > Max_bits - 42)\n                gfc.sfb21_extra = false;\n            else\n                gfc.sfb21_extra = sfb21_extra;\n\n            over = outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, this_bits);\n\n            /*\n             * is quantization as good as we are looking for ? in this case: is\n             * no scalefactor band distorted?\n             */\n            if (over <= 0) {\n                found = 1;\n                /*\n                 * now we know it can be done with \"real_bits\" and maybe we can\n                 * skip some iterations\n                 */\n                real_bits = cod_info.part2_3_length;\n\n                /*\n                 * store best quantization so far\n                 */\n                bst_cod_info.assign(cod_info);\n                System.arraycopy(xrpow, 0, bst_xrpow, 0, 576);\n\n                /*\n                 * try with fewer bits\n                 */\n                max_bits = real_bits - 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n            } else {\n                /*\n                 * try with more bits\n                 */\n                min_bits = this_bits + 32;\n                dbits = max_bits - min_bits;\n                this_bits = (max_bits + min_bits) / 2;\n\n                if (found != 0) {\n                    found = 2;\n                    /*\n                     * start again with best quantization so far\n                     */\n                    cod_info.assign(bst_cod_info);\n                    System.arraycopy(bst_xrpow, 0, xrpow, 0, 576);\n                }\n            }\n        } while (dbits > 12);\n\n        gfc.sfb21_extra = sfb21_extra;\n\n        /*\n         * found=0 => nothing found, use last one found=1 => we just found the\n         * best and left the loop found=2 => we restored a good one and have now\n         * l3_enc to restore too\n         */\n        if (found == 2) {\n            System.arraycopy(bst_cod_info.l3_enc, 0, cod_info.l3_enc, 0, 576);\n        }\n        assert(cod_info.part2_3_length <= Max_bits);\n    }\n\n    /**\n     * Robert Hegemann 2000-09-05\n     *\n     * calculates * how many bits are available for analog silent granules * how\n     * many bits to use for the lowest allowed bitrate * how many bits each\n     * bitrate would provide\n     */\n    this.get_framebits = function (gfp, frameBits) {\n        var gfc = gfp.internal_flags;\n\n        /*\n         * always use at least this many bits per granule per channel unless we\n         * detect analog silence, see below\n         */\n        gfc.bitrate_index = gfc.VBR_min_bitrate;\n        var bitsPerFrame = bs.getframebits(gfp);\n\n        /*\n         * bits for analog silence\n         */\n        gfc.bitrate_index = 1;\n        bitsPerFrame = bs.getframebits(gfp);\n\n        for (var i = 1; i <= gfc.VBR_max_bitrate; i++) {\n            gfc.bitrate_index = i;\n            var mb = new MeanBits(bitsPerFrame);\n            frameBits[i] = rv.ResvFrameBegin(gfp, mb);\n            bitsPerFrame = mb.bits;\n        }\n    };\n\n    /* RH: this one needs to be overhauled sometime */\n\n    /**\n     * <PRE>\n     *  2000-09-04 Robert Hegemann\n     *\n     *  * converts LR to MS coding when necessary\n     *  * calculates allowed/adjusted quantization noise amounts\n     *  * detects analog silent frames\n     *\n     *  some remarks:\n     *  - lower masking depending on Quality setting\n     *  - quality control together with adjusted ATH MDCT scaling\n     *    on lower quality setting allocate more noise from\n     *    ATH masking, and on higher quality setting allocate\n     *    less noise from ATH masking.\n     *  - experiments show that going more than 2dB over GPSYCHO's\n     *    limits ends up in very annoying artefacts\n     * </PRE>\n     */\n    this.VBR_old_prepare = function (gfp, pe, ms_ener_ratio, ratio, l3_xmin, frameBits, min_bits,\n                                     max_bits, bands) {\n        var gfc = gfp.internal_flags;\n\n        var masking_lower_db, adjust = 0.0;\n        var analog_silence = 1;\n        var bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var avg = rv.ResvFrameBegin(gfp, new MeanBits(0)) / gfc.mode_gr;\n\n        get_framebits(gfp, frameBits);\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            var mxb = qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n                qupvt.reduce_side(max_bits[gr], ms_ener_ratio[gr], avg, mxb);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    adjust = 1.28 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.05;\n                    masking_lower_db = gfc.PSY.mask_adjust - adjust;\n                } else {\n                    adjust = 2.56 / (1 + Math\n                            .exp(3.5 - pe[gr][ch] / 300.)) - 0.14;\n                    masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n                }\n                gfc.masking_lower = Math.pow(10.0,\n                    masking_lower_db * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                bands[gr][ch] = qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                    l3_xmin[gr][ch]);\n                if (bands[gr][ch] != 0)\n                    analog_silence = 0;\n\n                min_bits[gr][ch] = 126;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > frameBits[gfc.VBR_max_bitrate]) {\n                    max_bits[gr][ch] *= frameBits[gfc.VBR_max_bitrate];\n                    max_bits[gr][ch] /= bits;\n                }\n                if (min_bits[gr][ch] > max_bits[gr][ch])\n                    min_bits[gr][ch] = max_bits[gr][ch];\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    this.bitpressure_strategy = function (gfc, l3_xmin, min_bits, max_bits) {\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = gfc.l3_side.tt[gr][ch];\n                var pxmin = l3_xmin[gr][ch];\n                var pxminPos = 0;\n                for (var sfb = 0; sfb < gi.psy_lmax; sfb++)\n                    pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                        / Encoder.SBMAX_l / Encoder.SBMAX_l;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (var sfb = gi.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                        pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\n                            / Encoder.SBMAX_s / Encoder.SBMAX_s;\n                    }\n                }\n                max_bits[gr][ch] = 0 | Math.max(min_bits[gr][ch],\n                        0.9 * max_bits[gr][ch]);\n            }\n        }\n    };\n\n    this.VBR_new_prepare = function (gfp, pe, ratio, l3_xmin, frameBits, max_bits) {\n        var gfc = gfp.internal_flags;\n\n        var analog_silence = 1;\n        var avg = 0, bits = 0;\n        var maximum_framebits;\n\n        if (!gfp.free_format) {\n            gfc.bitrate_index = gfc.VBR_max_bitrate;\n\n            var mb = new MeanBits(avg);\n            rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n\n            get_framebits(gfp, frameBits);\n            maximum_framebits = frameBits[gfc.VBR_max_bitrate];\n        } else {\n            gfc.bitrate_index = 0;\n            var mb = new MeanBits(avg);\n            maximum_framebits = rv.ResvFrameBegin(gfp, mb);\n            avg = mb.bits;\n            frameBits[0] = maximum_framebits;\n        }\n\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\n            if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n                ms_convert(gfc.l3_side, gr);\n            }\n            for (var ch = 0; ch < gfc.channels_out; ++ch) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n\n                gfc.masking_lower = Math.pow(10.0,\n                    gfc.PSY.mask_adjust * 0.1);\n\n                init_outer_loop(gfc, cod_info);\n                if (0 != qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n                        l3_xmin[gr][ch]))\n                    analog_silence = 0;\n\n                bits += max_bits[gr][ch];\n            }\n        }\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                if (bits > maximum_framebits) {\n                    max_bits[gr][ch] *= maximum_framebits;\n                    max_bits[gr][ch] /= bits;\n                }\n\n            }\n            /* for ch */\n        }\n        /* for gr */\n\n        return analog_silence;\n    };\n\n    /**\n     * calculates target bits for ABR encoding\n     *\n     * mt 2000/05/31\n     */\n    this.calc_target_bits = function (gfp, pe, ms_ener_ratio, targ_bits, analog_silence_bits, max_frame_bits) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var res_factor;\n        var gr, ch, totbits, mean_bits = 0;\n\n        gfc.bitrate_index = gfc.VBR_max_bitrate;\n        var mb = new MeanBits(mean_bits);\n        max_frame_bits[0] = rv.ResvFrameBegin(gfp, mb);\n        mean_bits = mb.bits;\n\n        gfc.bitrate_index = 1;\n        mean_bits = bs.getframebits(gfp) - gfc.sideinfo_len * 8;\n        analog_silence_bits[0] = mean_bits / (gfc.mode_gr * gfc.channels_out);\n\n        mean_bits = gfp.VBR_mean_bitrate_kbps * gfp.framesize * 1000;\n        if ((gfc.substep_shaping & 1) != 0)\n            mean_bits *= 1.09;\n        mean_bits /= gfp.out_samplerate;\n        mean_bits -= gfc.sideinfo_len * 8;\n        mean_bits /= (gfc.mode_gr * gfc.channels_out);\n\n        /**\n         * <PRE>\n         *           res_factor is the percentage of the target bitrate that should\n         *           be used on average.  the remaining bits are added to the\n         *           bitreservoir and used for difficult to encode frames.\n         *\n         *           Since we are tracking the average bitrate, we should adjust\n         *           res_factor \"on the fly\", increasing it if the average bitrate\n         *           is greater than the requested bitrate, and decreasing it\n         *           otherwise.  Reasonable ranges are from .9 to 1.0\n         *\n         *           Until we get the above suggestion working, we use the following\n         *           tuning:\n         *           compression ratio    res_factor\n         *           5.5  (256kbps)         1.0      no need for bitreservoir\n         *           11   (128kbps)         .93      7% held for reservoir\n         *\n         *           with linear interpolation for other values.\n         * </PRE>\n         */\n        res_factor = .93 + .07 * (11.0 - gfp.compression_ratio)\n            / (11.0 - 5.5);\n        if (res_factor < .90)\n            res_factor = .90;\n        if (res_factor > 1.00)\n            res_factor = 1.00;\n\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                if (pe[gr][ch] > 700) {\n                    var add_bits = (int)((pe[gr][ch] - 700) / 1.4);\n\n                    var cod_info = l3_side.tt[gr][ch];\n                    targ_bits[gr][ch] = (int)(res_factor * mean_bits);\n\n                    /* short blocks use a little extra, no matter what the pe */\n                    if (cod_info.block_type == Encoder.SHORT_TYPE) {\n                        if (add_bits < mean_bits / 2)\n                            add_bits = mean_bits / 2;\n                    }\n                    /* at most increase bits by 1.5*average */\n                    if (add_bits > mean_bits * 3 / 2)\n                        add_bits = mean_bits * 3 / 2;\n                    else if (add_bits < 0)\n                        add_bits = 0;\n\n                    targ_bits[gr][ch] += add_bits;\n                }\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) {\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                }\n                sum += targ_bits[gr][ch];\n            }\n            /* for ch */\n            if (sum > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n                for (ch = 0; ch < gfc.channels_out; ++ch) {\n                    targ_bits[gr][ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                    targ_bits[gr][ch] /= sum;\n                }\n            }\n        }\n        /* for gr */\n\n        if (gfc.mode_ext == Encoder.MPG_MD_MS_LR)\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                qupvt.reduce_side(targ_bits[gr], ms_ener_ratio[gr], mean_bits\n                    * gfc.channels_out,\n                    LameInternalFlags.MAX_BITS_PER_GRANULE);\n            }\n\n        /*\n         * sum target bits\n         */\n        totbits = 0;\n        for (gr = 0; gr < gfc.mode_gr; gr++) {\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                    targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\n                totbits += targ_bits[gr][ch];\n            }\n        }\n\n        /*\n         * repartion target bits if needed\n         */\n        if (totbits > max_frame_bits[0]) {\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    targ_bits[gr][ch] *= max_frame_bits[0];\n                    targ_bits[gr][ch] /= totbits;\n                }\n            }\n        }\n    }\n\n}\n\nmodule.exports = Quantize;\n","/*\n *      quantize_pvt source file\n *\n *      Copyright (c) 1999-2002 Takehiro Tominaga\n *      Copyright (c) 2000-2002 Robert Hegemann\n *      Copyright (c) 2001 Naoki Shibata\n *      Copyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: QuantizePVT.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\nvar ScaleFac = require('./ScaleFac.js');\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\nvar MeanBits = require('./MeanBits.js');\nvar LameInternalFlags = require('./LameInternalFlags.js');\n\nQuantizePVT.Q_MAX = (256 + 1);\nQuantizePVT.Q_MAX2 = 116;\nQuantizePVT.LARGE_BITS = 100000;\nQuantizePVT.IXMAX_VAL = 8206;\n\nfunction QuantizePVT() {\n    var BitStream = require('./BitStream.js');\n    var tak = null;\n    var rv = null;\n    var psy = null;\n\n    this.setModules = function (_tk, _rv, _psy) {\n        tak = _tk;\n        rv = _rv;\n        psy = _psy;\n    };\n\n    function POW20(x) {\n        assert(0 <= (x + QuantizePVT.Q_MAX2) && x < QuantizePVT.Q_MAX);\n        return pow20[x + QuantizePVT.Q_MAX2];\n    }\n\n    this.IPOW20 = function (x) {\n        assert(0 <= x && x < QuantizePVT.Q_MAX);\n        return ipow20[x];\n    }\n\n    /**\n     * smallest such that 1.0+DBL_EPSILON != 1.0\n     */\n    var DBL_EPSILON = 2.2204460492503131e-016;\n\n    /**\n     * ix always <= 8191+15. see count_bits()\n     */\n    var IXMAX_VAL = QuantizePVT.IXMAX_VAL;\n\n    var PRECALC_SIZE = (IXMAX_VAL + 2);\n\n    var Q_MAX = QuantizePVT.Q_MAX;\n\n\n    /**\n     * <CODE>\n     * minimum possible number of\n     * -cod_info.global_gain + ((scalefac[] + (cod_info.preflag ? pretab[sfb] : 0))\n     * << (cod_info.scalefac_scale + 1)) + cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n     *\n     * for long block, 0+((15+3)<<2) = 18*4 = 72\n     * for short block, 0+(15<<2)+7*8 = 15*4+56 = 116\n     * </CODE>\n     */\n    var Q_MAX2 = QuantizePVT.Q_MAX2;\n\n    var LARGE_BITS = QuantizePVT.LARGE_BITS;\n\n\n    /**\n     * Assuming dynamic range=96dB, this value should be 92\n     */\n    var NSATHSCALE = 100;\n\n    /**\n     * The following table is used to implement the scalefactor partitioning for\n     * MPEG2 as described in section 2.4.3.2 of the IS. The indexing corresponds\n     * to the way the tables are presented in the IS:\n     *\n     * [table_number][row_in_table][column of nr_of_sfb]\n     */\n    this.nr_of_sfb_block = [\n        [[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]],\n        [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]],\n        [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]],\n        [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]],\n        [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]],\n        [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]];\n\n    /**\n     * Table B.6: layer3 preemphasis\n     */\n    var pretab = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n        2, 2, 3, 3, 3, 2, 0];\n    this.pretab = pretab;\n\n    /**\n     * Here are MPEG1 Table B.8 and MPEG2 Table B.1 -- Layer III scalefactor\n     * bands. <BR>\n     * Index into this using a method such as:<BR>\n     * idx = fr_ps.header.sampling_frequency + (fr_ps.header.version * 3)\n     */\n    this.sfBandIndex = [\n        // Table B.2.b: 22.05 kHz\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb21 pseudo sub bands\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb12 pseudo sub bands\n        ),\n        /* Table B.2.c: 24 kHz */ /* docs: 332. mpg123(broken): 330 */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464,\n                540, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.2.a: 16 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.b: 44.1 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.c: 48 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384,\n                576],\n            [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.a: 32 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 11.025 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 12 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 8 kHz */\n        new ScaleFac([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570,\n                572, 574, 576],\n            [0 / 3, 24 / 3, 48 / 3, 72 / 3, 108 / 3, 156 / 3, 216 / 3, 288 / 3, 372 / 3, 480 / 3, 486 / 3,\n                492 / 3, 498 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        )\n    ];\n\n    var pow20 = new_float(Q_MAX + Q_MAX2 + 1);\n    var ipow20 = new_float(Q_MAX);\n    var pow43 = new_float(PRECALC_SIZE);\n\n    var adj43 = new_float(PRECALC_SIZE);\n    this.adj43 = adj43;\n\n    /**\n     * <PRE>\n     * compute the ATH for each scalefactor band cd range: 0..96db\n     *\n     * Input: 3.3kHz signal 32767 amplitude (3.3kHz is where ATH is smallest =\n     * -5db) longblocks: sfb=12 en0/bw=-11db max_en0 = 1.3db shortblocks: sfb=5\n     * -9db 0db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) longblocks: amp=1\n     * sfb=12 en0/bw=-103 db max_en0 = -92db amp=32767 sfb=12 -12 db -1.4db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) shortblocks: amp=1\n     * sfb=5 en0/bw= -99 -86 amp=32767 sfb=5 -9 db 4db\n     *\n     *\n     * MAX energy of largest wave at 3.3kHz = 1db AVE energy of largest wave at\n     * 3.3kHz = -11db Let's take AVE: -11db = maximum signal in sfb=12. Dynamic\n     * range of CD: 96db. Therefor energy of smallest audible wave in sfb=12 =\n     * -11 - 96 = -107db = ATH at 3.3kHz.\n     *\n     * ATH formula for this wave: -5db. To adjust to LAME scaling, we need ATH =\n     * ATH_formula - 103 (db) ATH = ATH * 2.5e-10 (ener)\n     * </PRE>\n     */\n    function ATHmdct(gfp, f) {\n        var ath = psy.ATHformula(f, gfp);\n\n        ath -= NSATHSCALE;\n\n        /* modify the MDCT scaling for the ATH and convert to energy */\n        ath = Math.pow(10.0, ath / 10.0 + gfp.ATHlower);\n        return ath;\n    }\n\n    function compute_ath(gfp) {\n        var ATH_l = gfp.internal_flags.ATH.l;\n        var ATH_psfb21 = gfp.internal_flags.ATH.psfb21;\n        var ATH_s = gfp.internal_flags.ATH.s;\n        var ATH_psfb12 = gfp.internal_flags.ATH.psfb12;\n        var gfc = gfp.internal_flags;\n        var samp_freq = gfp.out_samplerate;\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            ATH_l[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_l[sfb] = Math.min(ATH_l[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n            var start = gfc.scalefac_band.psfb21[sfb];\n            var end = gfc.scalefac_band.psfb21[sfb + 1];\n            ATH_psfb21[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb21[sfb] = Math.min(ATH_psfb21[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n            var start = gfc.scalefac_band.s[sfb];\n            var end = gfc.scalefac_band.s[sfb + 1];\n            ATH_s[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_s[sfb] = Math.min(ATH_s[sfb], ATH_f);\n            }\n            ATH_s[sfb] *= (gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb]);\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n            var start = gfc.scalefac_band.psfb12[sfb];\n            var end = gfc.scalefac_band.psfb12[sfb + 1];\n            ATH_psfb12[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb12[sfb] = Math.min(ATH_psfb12[sfb], ATH_f);\n            }\n            /* not sure about the following */\n            ATH_psfb12[sfb] *= (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]);\n        }\n\n        /*\n         * no-ATH mode: reduce ATH to -200 dB\n         */\n        if (gfp.noATH) {\n            for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n                ATH_l[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n                ATH_psfb21[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n                ATH_s[sfb] = 1E-20;\n            }\n            for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n                ATH_psfb12[sfb] = 1E-20;\n            }\n        }\n\n        /*\n         * work in progress, don't rely on it too much\n         */\n        gfc.ATH.floor = 10. * Math.log10(ATHmdct(gfp, -1.));\n    }\n\n    /**\n     * initialization for iteration_loop\n     */\n    this.iteration_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var i;\n\n        if (gfc.iteration_init_init == 0) {\n            gfc.iteration_init_init = 1;\n\n            l3_side.main_data_begin = 0;\n            compute_ath(gfp);\n\n            pow43[0] = 0.0;\n            for (i = 1; i < PRECALC_SIZE; i++)\n                pow43[i] = Math.pow(i, 4.0 / 3.0);\n\n            for (i = 0; i < PRECALC_SIZE - 1; i++)\n                adj43[i] = ((i + 1) - Math.pow(\n                    0.5 * (pow43[i] + pow43[i + 1]), 0.75));\n            adj43[i] = 0.5;\n\n            for (i = 0; i < Q_MAX; i++)\n                ipow20[i] = Math.pow(2.0, (i - 210) * -0.1875);\n            for (i = 0; i <= Q_MAX + Q_MAX2; i++)\n                pow20[i] = Math.pow(2.0, (i - 210 - Q_MAX2) * 0.25);\n\n            tak.huffman_init(gfc);\n\n            {\n                var bass, alto, treble, sfb21;\n\n                i = (gfp.exp_nspsytune >> 2) & 63;\n                if (i >= 32)\n                    i -= 64;\n                bass = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 8) & 63;\n                if (i >= 32)\n                    i -= 64;\n                alto = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 14) & 63;\n                if (i >= 32)\n                    i -= 64;\n                treble = Math.pow(10, i / 4.0 / 10.0);\n\n                /*\n                 * to be compatible with Naoki's original code, the next 6 bits\n                 * define only the amount of changing treble for sfb21\n                 */\n                i = (gfp.exp_nspsytune >> 20) & 63;\n                if (i >= 32)\n                    i -= 64;\n                sfb21 = treble * Math.pow(10, i / 4.0 / 10.0);\n                for (i = 0; i < Encoder.SBMAX_l; i++) {\n                    var f;\n                    if (i <= 6)\n                        f = bass;\n                    else if (i <= 13)\n                        f = alto;\n                    else if (i <= 20)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.longfact[i] = f;\n                }\n                for (i = 0; i < Encoder.SBMAX_s; i++) {\n                    var f;\n                    if (i <= 5)\n                        f = bass;\n                    else if (i <= 10)\n                        f = alto;\n                    else if (i <= 11)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.shortfact[i] = f;\n                }\n            }\n        }\n    }\n\n    /**\n     * allocate bits among 2 channels based on PE<BR>\n     * mt 6/99<BR>\n     * bugfixes rh 8/01: often allocated more than the allowed 4095 bits\n     */\n    this.on_pe = function (gfp, pe,\n                           targ_bits, mean_bits, gr, cbr) {\n        var gfc = gfp.internal_flags;\n        var tbits = 0, bits;\n        var add_bits = new_int(2);\n        var ch;\n\n        /* allocate targ_bits for granule */\n        var mb = new MeanBits(tbits);\n        var extra_bits = rv.ResvMaxBits(gfp, mean_bits, mb, cbr);\n        tbits = mb.bits;\n        /* maximum allowed bits for this granule */\n        var max_bits = tbits + extra_bits;\n        if (max_bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            // hard limit per granule\n            max_bits = LameInternalFlags.MAX_BITS_PER_GRANULE;\n        }\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            /******************************************************************\n             * allocate bits for each channel\n             ******************************************************************/\n            targ_bits[ch] = Math.min(LameInternalFlags.MAX_BITS_PER_CHANNEL,\n                tbits / gfc.channels_out);\n\n            add_bits[ch] = 0 | (targ_bits[ch] * pe[gr][ch] / 700.0 - targ_bits[ch]);\n\n            /* at most increase bits by 1.5*average */\n            if (add_bits[ch] > mean_bits * 3 / 4)\n                add_bits[ch] = mean_bits * 3 / 4;\n            if (add_bits[ch] < 0)\n                add_bits[ch] = 0;\n\n            if (add_bits[ch] + targ_bits[ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                add_bits[ch] = Math.max(0,\n                    LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[ch]);\n\n            bits += add_bits[ch];\n        }\n        if (bits > extra_bits) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                add_bits[ch] = extra_bits * add_bits[ch] / bits;\n            }\n        }\n\n        for (ch = 0; ch < gfc.channels_out; ++ch) {\n            targ_bits[ch] += add_bits[ch];\n            extra_bits -= add_bits[ch];\n        }\n\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            bits += targ_bits[ch];\n        }\n        if (bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            var sum = 0;\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                targ_bits[ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\n                targ_bits[ch] /= bits;\n                sum += targ_bits[ch];\n            }\n            assert(sum <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n        }\n\n        return max_bits;\n    }\n\n    this.reduce_side = function (targ_bits, ms_ener_ratio, mean_bits, max_bits) {\n        assert(max_bits <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n        assert(targ_bits[0] + targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n\n        /*\n         * ms_ener_ratio = 0: allocate 66/33 mid/side fac=.33 ms_ener_ratio =.5:\n         * allocate 50/50 mid/side fac= 0\n         */\n        /* 75/25 split is fac=.5 */\n        var fac = .33 * (.5 - ms_ener_ratio) / .5;\n        if (fac < 0)\n            fac = 0;\n        if (fac > .5)\n            fac = .5;\n\n        /* number of bits to move from side channel to mid channel */\n        /* move_bits = fac*targ_bits[1]; */\n        var move_bits = 0 | (fac * .5 * (targ_bits[0] + targ_bits[1]));\n\n        if (move_bits > LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0]) {\n            move_bits = LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0];\n        }\n        if (move_bits < 0)\n            move_bits = 0;\n\n        if (targ_bits[1] >= 125) {\n            /* dont reduce side channel below 125 bits */\n            if (targ_bits[1] - move_bits > 125) {\n\n                /* if mid channel already has 2x more than average, dont bother */\n                /* mean_bits = bits per granule (for both channels) */\n                if (targ_bits[0] < mean_bits)\n                    targ_bits[0] += move_bits;\n                targ_bits[1] -= move_bits;\n            } else {\n                targ_bits[0] += targ_bits[1] - 125;\n                targ_bits[1] = 125;\n            }\n        }\n\n        move_bits = targ_bits[0] + targ_bits[1];\n        if (move_bits > max_bits) {\n            targ_bits[0] = (max_bits * targ_bits[0]) / move_bits;\n            targ_bits[1] = (max_bits * targ_bits[1]) / move_bits;\n        }\n        assert(targ_bits[0] <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        assert(targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_CHANNEL);\n        assert(targ_bits[0] + targ_bits[1] <= LameInternalFlags.MAX_BITS_PER_GRANULE);\n    };\n\n    /**\n     *  Robert Hegemann 2001-04-27:\n     *  this adjusts the ATH, keeping the original noise floor\n     *  affects the higher frequencies more than the lower ones\n     */\n    this.athAdjust = function (a, x, athFloor) {\n        /*\n         * work in progress\n         */\n        var o = 90.30873362;\n        var p = 94.82444863;\n        var u = Util.FAST_LOG10_X(x, 10.0);\n        var v = a * a;\n        var w = 0.0;\n        u -= athFloor;\n        /* undo scaling */\n        if (v > 1E-20)\n            w = 1. + Util.FAST_LOG10_X(v, 10.0 / o);\n        if (w < 0)\n            w = 0.;\n        u *= w;\n        u += athFloor + o - p;\n        /* redo scaling */\n\n        return Math.pow(10., 0.1 * u);\n    };\n\n    /**\n     * Calculate the allowed distortion for each scalefactor band, as determined\n     * by the psychoacoustic model. xmin(sb) = ratio(sb) * en(sb) / bw(sb)\n     *\n     * returns number of sfb's with energy > ATH\n     */\n    this.calc_xmin = function (gfp, ratio, cod_info, pxmin) {\n        var pxminPos = 0;\n        var gfc = gfp.internal_flags;\n        var gsfb, j = 0, ath_over = 0;\n        var ATH = gfc.ATH;\n        var xr = cod_info.xr;\n        var enable_athaa_fix = (gfp.VBR == VbrMode.vbr_mtrh) ? 1 : 0;\n        var masking_lower = gfc.masking_lower;\n\n        if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n            /* was already done in PSY-Model */\n            masking_lower = 1.0;\n        }\n\n        for (gsfb = 0; gsfb < cod_info.psy_lmax; gsfb++) {\n            var en0, xmin;\n            var rh1, rh2;\n            var width, l;\n\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                xmin = athAdjust(ATH.adjust, ATH.l[gsfb], ATH.floor);\n            else\n                xmin = ATH.adjust * ATH.l[gsfb];\n\n            width = cod_info.width[gsfb];\n            rh1 = xmin / width;\n            rh2 = DBL_EPSILON;\n            l = width >> 1;\n            en0 = 0.0;\n            do {\n                var xa, xb;\n                xa = xr[j] * xr[j];\n                en0 += xa;\n                rh2 += (xa < rh1) ? xa : rh1;\n                j++;\n                xb = xr[j] * xr[j];\n                en0 += xb;\n                rh2 += (xb < rh1) ? xb : rh1;\n                j++;\n            } while (--l > 0);\n            if (en0 > xmin)\n                ath_over++;\n\n            if (gsfb == Encoder.SBPSY_l) {\n                var x = xmin * gfc.nsPsy.longfact[gsfb];\n                if (rh2 < x) {\n                    rh2 = x;\n                }\n            }\n            if (enable_athaa_fix != 0) {\n                xmin = rh2;\n            }\n            if (!gfp.ATHonly) {\n                var e = ratio.en.l[gsfb];\n                if (e > 0.0) {\n                    var x;\n                    x = en0 * ratio.thm.l[gsfb] * masking_lower / e;\n                    if (enable_athaa_fix != 0)\n                        x *= gfc.nsPsy.longfact[gsfb];\n                    if (xmin < x)\n                        xmin = x;\n                }\n            }\n            if (enable_athaa_fix != 0)\n                pxmin[pxminPos++] = xmin;\n            else\n                pxmin[pxminPos++] = xmin * gfc.nsPsy.longfact[gsfb];\n        }\n        /* end of long block loop */\n\n        /* use this function to determine the highest non-zero coeff */\n        var max_nonzero = 575;\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            // NORM, START or STOP type, but not SHORT\n            var k = 576;\n            while (k-- != 0 && BitStream.EQ(xr[k], 0)) {\n                max_nonzero = k;\n            }\n        }\n        cod_info.max_nonzero_coeff = max_nonzero;\n\n        for (var sfb = cod_info.sfb_smin; gsfb < cod_info.psymax; sfb++, gsfb += 3) {\n            var width, b;\n            var tmpATH;\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                tmpATH = athAdjust(ATH.adjust, ATH.s[sfb], ATH.floor);\n            else\n                tmpATH = ATH.adjust * ATH.s[sfb];\n\n            width = cod_info.width[gsfb];\n            for (b = 0; b < 3; b++) {\n                var en0 = 0.0, xmin;\n                var rh1, rh2;\n                var l = width >> 1;\n\n                rh1 = tmpATH / width;\n                rh2 = DBL_EPSILON;\n                do {\n                    var xa, xb;\n                    xa = xr[j] * xr[j];\n                    en0 += xa;\n                    rh2 += (xa < rh1) ? xa : rh1;\n                    j++;\n                    xb = xr[j] * xr[j];\n                    en0 += xb;\n                    rh2 += (xb < rh1) ? xb : rh1;\n                    j++;\n                } while (--l > 0);\n                if (en0 > tmpATH)\n                    ath_over++;\n                if (sfb == Encoder.SBPSY_s) {\n                    var x = tmpATH * gfc.nsPsy.shortfact[sfb];\n                    if (rh2 < x) {\n                        rh2 = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    xmin = rh2;\n                else\n                    xmin = tmpATH;\n\n                if (!gfp.ATHonly && !gfp.ATHshort) {\n                    var e = ratio.en.s[sfb][b];\n                    if (e > 0.0) {\n                        var x;\n                        x = en0 * ratio.thm.s[sfb][b] * masking_lower / e;\n                        if (enable_athaa_fix != 0)\n                            x *= gfc.nsPsy.shortfact[sfb];\n                        if (xmin < x)\n                            xmin = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    pxmin[pxminPos++] = xmin;\n                else\n                    pxmin[pxminPos++] = xmin * gfc.nsPsy.shortfact[sfb];\n            }\n            /* b */\n            if (gfp.useTemporal) {\n                if (pxmin[pxminPos - 3] > pxmin[pxminPos - 3 + 1])\n                    pxmin[pxminPos - 3 + 1] += (pxmin[pxminPos - 3] - pxmin[pxminPos - 3 + 1])\n                        * gfc.decay;\n                if (pxmin[pxminPos - 3 + 1] > pxmin[pxminPos - 3 + 2])\n                    pxmin[pxminPos - 3 + 2] += (pxmin[pxminPos - 3 + 1] - pxmin[pxminPos - 3 + 2])\n                        * gfc.decay;\n            }\n        }\n        /* end of short block sfb loop */\n\n        return ath_over;\n    };\n\n    function StartLine(j) {\n        this.s = j;\n    }\n\n    this.calc_noise_core = function (cod_info, startline, l, step) {\n        var noise = 0;\n        var j = startline.s;\n        var ix = cod_info.l3_enc;\n\n        if (j > cod_info.count1) {\n            while ((l--) != 0) {\n                var temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n            }\n        } else if (j > cod_info.big_values) {\n            var ix01 = new_float(2);\n            ix01[0] = 0;\n            ix01[1] = step;\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n            }\n        } else {\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n            }\n        }\n\n        startline.s = j;\n        return noise;\n    }\n\n    /**\n     * <PRE>\n     * -oo dB  =>  -1.00\n     * - 6 dB  =>  -0.97\n     * - 3 dB  =>  -0.80\n     * - 2 dB  =>  -0.64\n     * - 1 dB  =>  -0.38\n     *   0 dB  =>   0.00\n     * + 1 dB  =>  +0.49\n     * + 2 dB  =>  +1.06\n     * + 3 dB  =>  +1.68\n     * + 6 dB  =>  +3.69\n     * +10 dB  =>  +6.45\n     * </PRE>\n     */\n    this.calc_noise = function (cod_info, l3_xmin, distort, res, prev_noise) {\n        var distortPos = 0;\n        var l3_xminPos = 0;\n        var sfb, l, over = 0;\n        var over_noise_db = 0;\n        /* 0 dB relative to masking */\n        var tot_noise_db = 0;\n        /* -200 dB relative to masking */\n        var max_noise = -20.0;\n        var j = 0;\n        var scalefac = cod_info.scalefac;\n        var scalefacPos = 0;\n\n        res.over_SSD = 0;\n\n        for (sfb = 0; sfb < cod_info.psymax; sfb++) {\n            var s = cod_info.global_gain\n                - (((scalefac[scalefacPos++]) + (cod_info.preflag != 0 ? pretab[sfb]\n                    : 0)) << (cod_info.scalefac_scale + 1))\n                - cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n            var noise = 0.0;\n\n            if (prev_noise != null && (prev_noise.step[sfb] == s)) {\n\n                /* use previously computed values */\n                noise = prev_noise.noise[sfb];\n                j += cod_info.width[sfb];\n                distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                noise = prev_noise.noise_log[sfb];\n\n            } else {\n                var step = POW20(s);\n                l = cod_info.width[sfb] >> 1;\n\n                if ((j + cod_info.width[sfb]) > cod_info.max_nonzero_coeff) {\n                    var usefullsize;\n                    usefullsize = cod_info.max_nonzero_coeff - j + 1;\n\n                    if (usefullsize > 0)\n                        l = usefullsize >> 1;\n                    else\n                        l = 0;\n                }\n\n                var sl = new StartLine(j);\n                noise = this.calc_noise_core(cod_info, sl, l, step);\n                j = sl.s;\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.step[sfb] = s;\n                    prev_noise.noise[sfb] = noise;\n                }\n\n                noise = distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                /* multiplying here is adding in dB, but can overflow */\n                noise = Util.FAST_LOG10(Math.max(noise, 1E-20));\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.noise_log[sfb] = noise;\n                }\n            }\n\n            if (prev_noise != null) {\n                /* save noise values */\n                prev_noise.global_gain = cod_info.global_gain;\n            }\n\n            tot_noise_db += noise;\n\n            if (noise > 0.0) {\n                var tmp;\n\n                tmp = Math.max(0 | (noise * 10 + .5), 1);\n                res.over_SSD += tmp * tmp;\n\n                over++;\n                /* multiplying here is adding in dB -but can overflow */\n                /* over_noise *= noise; */\n                over_noise_db += noise;\n            }\n            max_noise = Math.max(max_noise, noise);\n\n        }\n\n        res.over_count = over;\n        res.tot_noise = tot_noise_db;\n        res.over_noise = over_noise_db;\n        res.max_noise = max_noise;\n\n        return over;\n    }\n\n    /**\n     * updates plotting data\n     *\n     * Mark Taylor 2000-??-??\n     *\n     * Robert Hegemann: moved noise/distortion calc into it\n     */\n    this.set_pinfo = function (gfp, cod_info, ratio, gr, ch) {\n        var gfc = gfp.internal_flags;\n        var sfb, sfb2;\n        var l;\n        var en0, en1;\n        var ifqstep = (cod_info.scalefac_scale == 0) ? .5 : 1.0;\n        var scalefac = cod_info.scalefac;\n\n        var l3_xmin = new_float(L3Side.SFBMAX);\n        var xfsf = new_float(L3Side.SFBMAX);\n        var noise = new CalcNoiseResult();\n\n        calc_xmin(gfp, ratio, cod_info, l3_xmin);\n        calc_noise(cod_info, l3_xmin, xfsf, noise, null);\n\n        var j = 0;\n        sfb2 = cod_info.sfb_lmax;\n        if (cod_info.block_type != Encoder.SHORT_TYPE\n            && 0 == cod_info.mixed_block_flag)\n            sfb2 = 22;\n        for (sfb = 0; sfb < sfb2; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            var bw = end - start;\n            for (en0 = 0.0; j < end; j++)\n                en0 += cod_info.xr[j] * cod_info.xr[j];\n            en0 /= bw;\n            /* convert to MDCT units */\n            /* scaling so it shows up on FFT plot */\n            en1 = 1e15;\n            gfc.pinfo.en[gr][ch][sfb] = en1 * en0;\n            gfc.pinfo.xfsf[gr][ch][sfb] = en1 * l3_xmin[sfb] * xfsf[sfb] / bw;\n\n            if (ratio.en.l[sfb] > 0 && !gfp.ATHonly)\n                en0 = en0 / ratio.en.l[sfb];\n            else\n                en0 = 0.0;\n\n            gfc.pinfo.thr[gr][ch][sfb] = en1\n                * Math.max(en0 * ratio.thm.l[sfb], gfc.ATH.l[sfb]);\n\n            /* there is no scalefactor bands >= SBPSY_l */\n            gfc.pinfo.LAMEsfb[gr][ch][sfb] = 0;\n            if (cod_info.preflag != 0 && sfb >= 11)\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] = -ifqstep * pretab[sfb];\n\n            if (sfb < Encoder.SBPSY_l) {\n                /* scfsi should be decoded by caller side */\n                assert(scalefac[sfb] >= 0);\n                gfc.pinfo.LAMEsfb[gr][ch][sfb] -= ifqstep * scalefac[sfb];\n            }\n        }\n        /* for sfb */\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            sfb2 = sfb;\n            for (sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                var bw = end - start;\n                for (var i = 0; i < 3; i++) {\n                    for (en0 = 0.0, l = start; l < end; l++) {\n                        en0 += cod_info.xr[j] * cod_info.xr[j];\n                        j++;\n                    }\n                    en0 = Math.max(en0 / bw, 1e-20);\n                    /* convert to MDCT units */\n                    /* scaling so it shows up on FFT plot */\n                    en1 = 1e15;\n\n                    gfc.pinfo.en_s[gr][ch][3 * sfb + i] = en1 * en0;\n                    gfc.pinfo.xfsf_s[gr][ch][3 * sfb + i] = en1 * l3_xmin[sfb2]\n                        * xfsf[sfb2] / bw;\n                    if (ratio.en.s[sfb][i] > 0)\n                        en0 = en0 / ratio.en.s[sfb][i];\n                    else\n                        en0 = 0.0;\n                    if (gfp.ATHonly || gfp.ATHshort)\n                        en0 = 0;\n\n                    gfc.pinfo.thr_s[gr][ch][3 * sfb + i] = en1\n                        * Math.max(en0 * ratio.thm.s[sfb][i],\n                            gfc.ATH.s[sfb]);\n\n                    /* there is no scalefactor bands >= SBPSY_s */\n                    gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] = -2.0\n                        * cod_info.subblock_gain[i];\n                    if (sfb < Encoder.SBPSY_s) {\n                        gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] -= ifqstep\n                            * scalefac[sfb2];\n                    }\n                    sfb2++;\n                }\n            }\n        }\n        /* block type short */\n        gfc.pinfo.LAMEqss[gr][ch] = cod_info.global_gain;\n        gfc.pinfo.LAMEmainbits[gr][ch] = cod_info.part2_3_length\n            + cod_info.part2_length;\n        gfc.pinfo.LAMEsfbits[gr][ch] = cod_info.part2_length;\n\n        gfc.pinfo.over[gr][ch] = noise.over_count;\n        gfc.pinfo.max_noise[gr][ch] = noise.max_noise * 10.0;\n        gfc.pinfo.over_noise[gr][ch] = noise.over_noise * 10.0;\n        gfc.pinfo.tot_noise[gr][ch] = noise.tot_noise * 10.0;\n        gfc.pinfo.over_SSD[gr][ch] = noise.over_SSD;\n    }\n\n    /**\n     * updates plotting data for a whole frame\n     *\n     * Robert Hegemann 2000-10-21\n     */\n    function set_frame_pinfo(gfp, ratio) {\n        var gfc = gfp.internal_flags;\n\n        gfc.masking_lower = 1.0;\n\n        /*\n         * for every granule and channel patch l3_enc and set info\n         */\n        for (var gr = 0; gr < gfc.mode_gr; gr++) {\n            for (var ch = 0; ch < gfc.channels_out; ch++) {\n                var cod_info = gfc.l3_side.tt[gr][ch];\n                var scalefac_sav = new_int(L3Side.SFBMAX);\n                System.arraycopy(cod_info.scalefac, 0, scalefac_sav, 0,\n                    scalefac_sav.length);\n\n                /*\n                 * reconstruct the scalefactors in case SCFSI was used\n                 */\n                if (gr == 1) {\n                    var sfb;\n                    for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n                        if (cod_info.scalefac[sfb] < 0) /* scfsi */\n                            cod_info.scalefac[sfb] = gfc.l3_side.tt[0][ch].scalefac[sfb];\n                    }\n                }\n\n                set_pinfo(gfp, cod_info, ratio[gr][ch], gr, ch);\n                System.arraycopy(scalefac_sav, 0, cod_info.scalefac, 0,\n                    scalefac_sav.length);\n            }\n            /* for ch */\n        }\n        /* for gr */\n    }\n\n}\n\nmodule.exports = QuantizePVT;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar GainAnalysis = require('./GainAnalysis.js');\n\nfunction ReplayGain() {\n    this.linprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n    /**\n     * left input samples, with pre-buffer\n     */\n    this.linpre = 0;\n    this.lstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    /**\n     * left \"first step\" (i.e. post first filter) samples\n     */\n    this.lstep = 0;\n    this.loutbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    /**\n     * left \"out\" (i.e. post second filter) samples\n     */\n    this.lout = 0;\n    this.rinprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n    /**\n     * right input samples ...\n     */\n    this.rinpre = 0;\n    this.rstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    this.rstep = 0;\n    this.routbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n    this.rout = 0;\n    /**\n     * number of samples required to reach number of milliseconds required\n     * for RMS window\n     */\n    this.sampleWindow = 0;\n    this.totsamp = 0;\n    this.lsum = 0.;\n    this.rsum = 0.;\n    this.freqindex = 0;\n    this.first = 0;\n    this.A = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\n    this.B = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\n\n}\n\nmodule.exports = ReplayGain;\n","/*\n *      bit reservoir source file\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Reservoir.java,v 1.9 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n/**\n * ResvFrameBegin:<BR>\n * Called (repeatedly) at the beginning of a frame. Updates the maximum size of\n * the reservoir, and checks to make sure main_data_begin was set properly by\n * the formatter<BR>\n * Background information:\n * \n * This is the original text from the ISO standard. Because of sooo many bugs\n * and irritations correcting comments are added in brackets []. A '^W' means\n * you should remove the last word.\n * \n * <PRE>\n *  1. The following rule can be used to calculate the maximum\n *     number of bits used for one granule [^W frame]:<BR>\n *     At the highest possible bitrate of Layer III (320 kbps\n *     per stereo signal [^W^W^W], 48 kHz) the frames must be of\n *     [^W^W^W are designed to have] constant length, i.e.\n *     one buffer [^W^W the frame] length is:<BR>\n * \n *         320 kbps * 1152/48 kHz = 7680 bit = 960 byte\n * \n *     This value is used as the maximum buffer per channel [^W^W] at\n *     lower bitrates [than 320 kbps]. At 64 kbps mono or 128 kbps\n *     stereo the main granule length is 64 kbps * 576/48 kHz = 768 bit\n *     [per granule and channel] at 48 kHz sampling frequency.\n *     This means that there is a maximum deviation (short time buffer\n *     [= reservoir]) of 7680 - 2*2*768 = 4608 bits is allowed at 64 kbps.\n *     The actual deviation is equal to the number of bytes [with the\n *     meaning of octets] denoted by the main_data_end offset pointer.\n *     The actual maximum deviation is (2^9-1)*8 bit = 4088 bits\n *     [for MPEG-1 and (2^8-1)*8 bit for MPEG-2, both are hard limits].\n *     ... The xchange of buffer bits between the left and right channel\n *     is allowed without restrictions [exception: dual channel].\n *     Because of the [constructed] constraint on the buffer size\n *     main_data_end is always set to 0 in the case of bit_rate_index==14,\n *     i.e. data rate 320 kbps per stereo signal [^W^W^W]. In this case\n *     all data are allocated between adjacent header [^W sync] words\n *     [, i.e. there is no buffering at all].\n * </PRE>\n */\n\nvar common = require('./common.js');\nvar assert = common.assert;\n\nfunction Reservoir() {\n\tvar bs;\n\n\tthis.setModules  = function(_bs) {\n\t\tbs = _bs;\n\t}\n\n\tthis.ResvFrameBegin = function(gfp, mean_bits) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar maxmp3buf;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar frameLength = bs.getframebits(gfp);\n\t\tmean_bits.bits = (frameLength - gfc.sideinfo_len * 8) / gfc.mode_gr;\n\n\t\t/**\n\t\t * <PRE>\n\t\t *  Meaning of the variables:\n\t\t *      resvLimit: (0, 8, ..., 8*255 (MPEG-2), 8*511 (MPEG-1))\n\t\t *          Number of bits can be stored in previous frame(s) due to\n\t\t *          counter size constaints\n\t\t *      maxmp3buf: ( ??? ... 8*1951 (MPEG-1 and 2), 8*2047 (MPEG-2.5))\n\t\t *          Number of bits allowed to encode one frame (you can take 8*511 bit\n\t\t *          from the bit reservoir and at most 8*1440 bit from the current\n\t\t *          frame (320 kbps, 32 kHz), so 8*1951 bit is the largest possible\n\t\t *          value for MPEG-1 and -2)\n\t\t * \n\t\t *          maximum allowed granule/channel size times 4 = 8*2047 bits.,\n\t\t *          so this is the absolute maximum supported by the format.\n\t\t * \n\t\t * \n\t\t *      fullFrameBits:  maximum number of bits available for encoding\n\t\t *                      the current frame.\n\t\t * \n\t\t *      mean_bits:      target number of bits per granule.\n\t\t * \n\t\t *      frameLength:\n\t\t * \n\t\t *      gfc.ResvMax:   maximum allowed reservoir\n\t\t * \n\t\t *      gfc.ResvSize:  current reservoir size\n\t\t * \n\t\t *      l3_side.resvDrain_pre:\n\t\t *         ancillary data to be added to previous frame:\n\t\t *         (only usefull in VBR modes if it is possible to have\n\t\t *         maxmp3buf < fullFrameBits)).  Currently disabled,\n\t\t *         see #define NEW_DRAIN\n\t\t *         2010-02-13: RH now enabled, it seems to be needed for CBR too,\n\t\t *                     as there exists one example, where the FhG decoder\n\t\t *                     can't decode a -b320 CBR file anymore.\n\t\t * \n\t\t *      l3_side.resvDrain_post:\n\t\t *         ancillary data to be added to this frame:\n\t\t * \n\t\t * </PRE>\n\t\t */\n\n\t\t/* main_data_begin has 9 bits in MPEG-1, 8 bits MPEG-2 */\n\t\tvar resvLimit = (8 * 256) * gfc.mode_gr - 8;\n\n\t\t/*\n\t\t * maximum allowed frame size. dont use more than this number of bits,\n\t\t * even if the frame has the space for them:\n\t\t */\n\t\tif (gfp.brate > 320) {\n\t\t\t/* in freeformat the buffer is constant */\n\t\t\tmaxmp3buf = 8 * ((int) ((gfp.brate * 1000)\n\t\t\t\t\t/ (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t} else {\n\t\t\t/*\n\t\t\t * all mp3 decoders should have enough buffer to handle this value:\n\t\t\t * size of a 320kbps 32kHz frame\n\t\t\t */\n\t\t\tmaxmp3buf = 8 * 1440;\n\n\t\t\t/*\n\t\t\t * Bouvigne suggests this more lax interpretation of the ISO doc\n\t\t\t * instead of using 8*960.\n\t\t\t */\n\n\t\t\tif (gfp.strict_ISO) {\n\t\t\t\tmaxmp3buf = 8 * ((int) (320000 / (gfp.out_samplerate / 1152) / 8 + .5));\n\t\t\t}\n\t\t}\n\n\t\tgfc.ResvMax = maxmp3buf - frameLength;\n\t\tif (gfc.ResvMax > resvLimit)\n\t\t\tgfc.ResvMax = resvLimit;\n\t\tif (gfc.ResvMax < 0 || gfp.disable_reservoir)\n\t\t\tgfc.ResvMax = 0;\n\n\t\tvar fullFrameBits = mean_bits.bits * gfc.mode_gr\n\t\t\t\t+ Math.min(gfc.ResvSize, gfc.ResvMax);\n\n\t\tif (fullFrameBits > maxmp3buf)\n\t\t\tfullFrameBits = maxmp3buf;\n\n\t\tassert (0 == gfc.ResvMax % 8);\n\t\tassert (gfc.ResvMax >= 0);\n\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t// frame analyzer code\n\t\tif (gfc.pinfo != null) {\n\t\t\t/*\n\t\t\t * expected bits per channel per granule [is this also right for\n\t\t\t * mono/stereo, MPEG-1/2 ?]\n\t\t\t */\n\t\t\tgfc.pinfo.mean_bits = mean_bits.bits / 2;\n\t\t\tgfc.pinfo.resvsize = gfc.ResvSize;\n\t\t}\n\n\t\treturn fullFrameBits;\n\t}\n\n\t/**\n\t * returns targ_bits: target number of bits to use for 1 granule<BR>\n\t * extra_bits: amount extra available from reservoir<BR>\n\t * Mark Taylor 4/99\n\t */\n\tthis.ResvMaxBits = function(gfp, mean_bits, targ_bits, cbr) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar add_bits;\n        var ResvSize = gfc.ResvSize, ResvMax = gfc.ResvMax;\n\n\t\t/* compensate the saved bits used in the 1st granule */\n\t\tif (cbr != 0)\n\t\t\tResvSize += mean_bits;\n\n\t\tif ((gfc.substep_shaping & 1) != 0)\n\t\t\tResvMax *= 0.9;\n\n\t\ttarg_bits.bits = mean_bits;\n\n\t\t/* extra bits if the reservoir is almost full */\n\t\tif (ResvSize * 10 > ResvMax * 9) {\n\t\t\tadd_bits = ResvSize - (ResvMax * 9) / 10;\n\t\t\ttarg_bits.bits += add_bits;\n\t\t\tgfc.substep_shaping |= 0x80;\n\t\t} else {\n\t\t\tadd_bits = 0;\n\t\t\tgfc.substep_shaping &= 0x7f;\n\t\t\t/*\n\t\t\t * build up reservoir. this builds the reservoir a little slower\n\t\t\t * than FhG. It could simple be mean_bits/15, but this was rigged to\n\t\t\t * always produce 100 (the old value) at 128kbs\n\t\t\t */\n\t\t\tif (!gfp.disable_reservoir && 0 == (gfc.substep_shaping & 1))\n\t\t\t\ttarg_bits.bits -= .1 * mean_bits;\n\t\t}\n\n\t\t/* amount from the reservoir we are allowed to use. ISO says 6/10 */\n\t\tvar extra_bits = (ResvSize < (gfc.ResvMax * 6) / 10 ? ResvSize\n\t\t\t\t: (gfc.ResvMax * 6) / 10);\n\t\textra_bits -= add_bits;\n\n\t\tif (extra_bits < 0)\n\t\t\textra_bits = 0;\n\t\treturn extra_bits;\n\t}\n\n\t/**\n\t * Called after a granule's bit allocation. Readjusts the size of the\n\t * reservoir to reflect the granule's usage.\n\t */\n\tthis.ResvAdjust = function(gfc, gi) {\n\t\tgfc.ResvSize -= gi.part2_3_length + gi.part2_length;\n\t}\n\n\t/**\n\t * Called after all granules in a frame have been allocated. Makes sure that\n\t * the reservoir size is within limits, possibly by adding stuffing bits.\n\t */\n\tthis.ResvFrameEnd = function(gfc, mean_bits) {\n\t\tvar over_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tgfc.ResvSize += mean_bits * gfc.mode_gr;\n\t\tvar stuffingBits = 0;\n\t\tl3_side.resvDrain_post = 0;\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t/* we must be byte aligned */\n\t\tif ((over_bits = gfc.ResvSize % 8) != 0)\n\t\t\tstuffingBits += over_bits;\n\n\t\tover_bits = (gfc.ResvSize - stuffingBits) - gfc.ResvMax;\n\t\tif (over_bits > 0) {\n\t\t\tassert (0 == over_bits % 8);\n\t\t\tassert (over_bits >= 0);\n\t\t\tstuffingBits += over_bits;\n\t\t}\n\n\t\t/*\n\t\t * NOTE: enabling the NEW_DRAIN code fixes some problems with FhG\n\t\t * decoder shipped with MS Windows operating systems. Using this, it is\n\t\t * even possible to use Gabriel's lax buffer consideration again, which\n\t\t * assumes, any decoder should have a buffer large enough for a 320 kbps\n\t\t * frame at 32 kHz sample rate.\n\t\t * \n\t\t * old drain code: lame -b320 BlackBird.wav --. does not play with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * new drain code: lame -b320 BlackBird.wav --. plays fine with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * Robert Hegemann, 2010-02-13.\n\t\t */\n\t\t/*\n\t\t * drain as many bits as possible into previous frame ancillary data In\n\t\t * particular, in VBR mode ResvMax may have changed, and we have to make\n\t\t * sure main_data_begin does not create a reservoir bigger than ResvMax\n\t\t * mt 4/00\n\t\t */\n\t\t{\n\t\t\tvar mdb_bytes = Math.min(l3_side.main_data_begin * 8, stuffingBits) / 8;\n\t\t\tl3_side.resvDrain_pre += 8 * mdb_bytes;\n\t\t\tstuffingBits -= 8 * mdb_bytes;\n\t\t\tgfc.ResvSize -= 8 * mdb_bytes;\n\t\t\tl3_side.main_data_begin -= mdb_bytes;\n\t\t}\n\t\t/* drain the rest into this frames ancillary data */\n\t\tl3_side.resvDrain_post += stuffingBits;\n\t\tgfc.ResvSize -= stuffingBits;\n\t}\n}\n\nmodule.exports = Reservoir;\n","//package mp3;\n\n/**\n * Layer III side information.\n *\n * @author Ken\n *\n */\n\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\nfunction ScaleFac(arrL, arrS, arr21, arr12) {\n\n    this.l = new_int(1 + Encoder.SBMAX_l);\n    this.s = new_int(1 + Encoder.SBMAX_s);\n    this.psfb21 = new_int(1 + Encoder.PSFB21);\n    this.psfb12 = new_int(1 + Encoder.PSFB12);\n    var l = this.l;\n    var s = this.s;\n\n    if (arguments.length == 4) {\n        //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\n        //    final int[] arr12) {\n        this.arrL = arguments[0];\n        this.arrS = arguments[1];\n        this.arr21 = arguments[2];\n        this.arr12 = arguments[3];\n\n        System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\n        System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\n        System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\n        System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\n    }\n}\n\nmodule.exports = ScaleFac;\n","function HuffCodeTab(len, max, tab, hl) {\n    this.xlen = len;\n    this.linmax = max;\n    this.table = tab;\n    this.hlen = hl;\n}\n\nvar Tables = {};\n\n\nTables.t1HB = [\n    1, 1,\n    1, 0\n];\n\nTables.t2HB = [\n    1, 2, 1,\n    3, 1, 1,\n    3, 2, 0\n];\n\nTables.t3HB = [\n    3, 2, 1,\n    1, 1, 1,\n    3, 2, 0\n];\n\nTables.t5HB = [\n    1, 2, 6, 5,\n    3, 1, 4, 4,\n    7, 5, 7, 1,\n    6, 1, 1, 0\n];\n\nTables.t6HB = [\n    7, 3, 5, 1,\n    6, 2, 3, 2,\n    5, 4, 4, 1,\n    3, 3, 2, 0\n];\n\nTables.t7HB = [\n    1, 2, 10, 19, 16, 10,\n    3, 3, 7, 10, 5, 3,\n    11, 4, 13, 17, 8, 4,\n    12, 11, 18, 15, 11, 2,\n    7, 6, 9, 14, 3, 1,\n    6, 4, 5, 3, 2, 0\n];\n\nTables.t8HB = [\n    3, 4, 6, 18, 12, 5,\n    5, 1, 2, 16, 9, 3,\n    7, 3, 5, 14, 7, 3,\n    19, 17, 15, 13, 10, 4,\n    13, 5, 8, 11, 5, 1,\n    12, 4, 4, 1, 1, 0\n];\n\nTables.t9HB = [\n    7, 5, 9, 14, 15, 7,\n    6, 4, 5, 5, 6, 7,\n    7, 6, 8, 8, 8, 5,\n    15, 6, 9, 10, 5, 1,\n    11, 7, 9, 6, 4, 1,\n    14, 4, 6, 2, 6, 0\n];\n\nTables.t10HB = [\n    1, 2, 10, 23, 35, 30, 12, 17,\n    3, 3, 8, 12, 18, 21, 12, 7,\n    11, 9, 15, 21, 32, 40, 19, 6,\n    14, 13, 22, 34, 46, 23, 18, 7,\n    20, 19, 33, 47, 27, 22, 9, 3,\n    31, 22, 41, 26, 21, 20, 5, 3,\n    14, 13, 10, 11, 16, 6, 5, 1,\n    9, 8, 7, 8, 4, 4, 2, 0\n];\n\nTables.t11HB = [\n    3, 4, 10, 24, 34, 33, 21, 15,\n    5, 3, 4, 10, 32, 17, 11, 10,\n    11, 7, 13, 18, 30, 31, 20, 5,\n    25, 11, 19, 59, 27, 18, 12, 5,\n    35, 33, 31, 58, 30, 16, 7, 5,\n    28, 26, 32, 19, 17, 15, 8, 14,\n    14, 12, 9, 13, 14, 9, 4, 1,\n    11, 4, 6, 6, 6, 3, 2, 0\n];\n\nTables.t12HB = [\n    9, 6, 16, 33, 41, 39, 38, 26,\n    7, 5, 6, 9, 23, 16, 26, 11,\n    17, 7, 11, 14, 21, 30, 10, 7,\n    17, 10, 15, 12, 18, 28, 14, 5,\n    32, 13, 22, 19, 18, 16, 9, 5,\n    40, 17, 31, 29, 17, 13, 4, 2,\n    27, 12, 11, 15, 10, 7, 4, 1,\n    27, 12, 8, 12, 6, 3, 1, 0\n];\n\nTables.t13HB = [\n    1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19,\n    3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14,\n    15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16,\n    22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14,\n    35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24,\n    58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17,\n    47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15,\n    72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42,\n    43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16,\n    53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11,\n    35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22,\n    53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7,\n    34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5,\n    45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3,\n    48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2,\n    16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1\n];\n\nTables.t15HB = [\n    7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63,\n    13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36,\n    19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33,\n    29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29,\n    52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27,\n    77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38,\n    125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30,\n    109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25,\n    90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20,\n    71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15,\n    109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9,\n    86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11,\n    118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7,\n    91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3,\n    123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1,\n    71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0\n];\n\nTables.t16HB = [\n    1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17,\n    3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9,\n    15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16,\n    45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26,\n    75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9,\n    66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16,\n    111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10,\n    98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8,\n    85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7,\n    154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11,\n    139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4,\n    243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6,\n    202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4,\n    747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2,\n    377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0,\n    12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3\n];\n\nTables.t24HB = [\n    15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88,\n    14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42,\n    47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18,\n    81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16,\n    147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14,\n    263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12,\n    249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10,\n    435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17,\n    427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16,\n    335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11,\n    668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10,\n    652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6,\n    648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4,\n    620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2,\n    1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0,\n    43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3\n];\n\nTables.t32HB = [\n    1 << 0, 5 << 1, 4 << 1, 5 << 2, 6 << 1, 5 << 2, 4 << 2, 4 << 3,\n    7 << 1, 3 << 2, 6 << 2, 0 << 3, 7 << 2, 2 << 3, 3 << 3, 1 << 4\n];\n\nTables.t33HB = [\n    15 << 0, 14 << 1, 13 << 1, 12 << 2, 11 << 1, 10 << 2, 9 << 2, 8 << 3,\n    7 << 1, 6 << 2, 5 << 2, 4 << 3, 3 << 2, 2 << 3, 1 << 3, 0 << 4\n];\n\nTables.t1l = [\n    1, 4,\n    3, 5\n];\n\nTables.t2l = [\n    1, 4, 7,\n    4, 5, 7,\n    6, 7, 8\n];\n\nTables.t3l = [\n    2, 3, 7,\n    4, 4, 7,\n    6, 7, 8\n];\n\nTables.t5l = [\n    1, 4, 7, 8,\n    4, 5, 8, 9,\n    7, 8, 9, 10,\n    8, 8, 9, 10\n];\n\nTables.t6l = [\n    3, 4, 6, 8,\n    4, 4, 6, 7,\n    5, 6, 7, 8,\n    7, 7, 8, 9\n];\n\nTables.t7l = [\n    1, 4, 7, 9, 9, 10,\n    4, 6, 8, 9, 9, 10,\n    7, 7, 9, 10, 10, 11,\n    8, 9, 10, 11, 11, 11,\n    8, 9, 10, 11, 11, 12,\n    9, 10, 11, 12, 12, 12\n];\n\nTables.t8l = [\n    2, 4, 7, 9, 9, 10,\n    4, 4, 6, 10, 10, 10,\n    7, 6, 8, 10, 10, 11,\n    9, 10, 10, 11, 11, 12,\n    9, 9, 10, 11, 12, 12,\n    10, 10, 11, 11, 13, 13\n];\n\nTables.t9l = [\n    3, 4, 6, 7, 9, 10,\n    4, 5, 6, 7, 8, 10,\n    5, 6, 7, 8, 9, 10,\n    7, 7, 8, 9, 9, 10,\n    8, 8, 9, 9, 10, 11,\n    9, 9, 10, 10, 11, 11\n];\n\nTables.t10l = [\n    1, 4, 7, 9, 10, 10, 10, 11,\n    4, 6, 8, 9, 10, 11, 10, 10,\n    7, 8, 9, 10, 11, 12, 11, 11,\n    8, 9, 10, 11, 12, 12, 11, 12,\n    9, 10, 11, 12, 12, 12, 12, 12,\n    10, 11, 12, 12, 13, 13, 12, 13,\n    9, 10, 11, 12, 12, 12, 13, 13,\n    10, 10, 11, 12, 12, 13, 13, 13\n];\n\nTables.t11l = [\n    2, 4, 6, 8, 9, 10, 9, 10,\n    4, 5, 6, 8, 10, 10, 9, 10,\n    6, 7, 8, 9, 10, 11, 10, 10,\n    8, 8, 9, 11, 10, 12, 10, 11,\n    9, 10, 10, 11, 11, 12, 11, 12,\n    9, 10, 11, 12, 12, 13, 12, 13,\n    9, 9, 9, 10, 11, 12, 12, 12,\n    9, 9, 10, 11, 12, 12, 12, 12\n];\n\nTables.t12l = [\n    4, 4, 6, 8, 9, 10, 10, 10,\n    4, 5, 6, 7, 9, 9, 10, 10,\n    6, 6, 7, 8, 9, 10, 9, 10,\n    7, 7, 8, 8, 9, 10, 10, 10,\n    8, 8, 9, 9, 10, 10, 10, 11,\n    9, 9, 10, 10, 10, 11, 10, 11,\n    9, 9, 9, 10, 10, 11, 11, 12,\n    10, 10, 10, 11, 11, 11, 11, 12\n];\n\nTables.t13l = [\n    1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14,\n    4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14,\n    7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15,\n    8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15,\n    9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16,\n    10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16,\n    10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16,\n    11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18,\n    10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17,\n    11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17,\n    11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19,\n    12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18,\n    12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18,\n    13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18,\n    14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18,\n    13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18\n];\n\nTables.t15l = [\n    3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14,\n    5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13,\n    6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13,\n    7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14,\n    10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14,\n    10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15,\n    12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15,\n    12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n    13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15,\n    13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15\n];\n\nTables.t16_5l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14,\n    11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12\n];\n\nTables.t16l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13,\n    10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10\n];\n\nTables.t24l = [\n    4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10,\n    5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10,\n    7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9,\n    8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9,\n    9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9,\n    10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9,\n    10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9,\n    11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10,\n    12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10,\n    13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10,\n    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6\n];\n\nTables.t32l = [\n    1 + 0, 4 + 1, 4 + 1, 5 + 2, 4 + 1, 6 + 2, 5 + 2, 6 + 3,\n    4 + 1, 5 + 2, 5 + 2, 6 + 3, 5 + 2, 6 + 3, 6 + 3, 6 + 4\n];\n\nTables.t33l = [\n    4 + 0, 4 + 1, 4 + 1, 4 + 2, 4 + 1, 4 + 2, 4 + 2, 4 + 3,\n    4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 2, 4 + 3, 4 + 3, 4 + 4\n];\n\nTables.ht = [\n    /* xlen, linmax, table, hlen */\n    new HuffCodeTab(0, 0, null, null),\n    new HuffCodeTab(2, 0, Tables.t1HB, Tables.t1l),\n    new HuffCodeTab(3, 0, Tables.t2HB, Tables.t2l),\n    new HuffCodeTab(3, 0, Tables.t3HB, Tables.t3l),\n    new HuffCodeTab(0, 0, null, null), /* Apparently not used */\n    new HuffCodeTab(4, 0, Tables.t5HB, Tables.t5l),\n    new HuffCodeTab(4, 0, Tables.t6HB, Tables.t6l),\n    new HuffCodeTab(6, 0, Tables.t7HB, Tables.t7l),\n    new HuffCodeTab(6, 0, Tables.t8HB, Tables.t8l),\n    new HuffCodeTab(6, 0, Tables.t9HB, Tables.t9l),\n    new HuffCodeTab(8, 0, Tables.t10HB, Tables.t10l),\n    new HuffCodeTab(8, 0, Tables.t11HB, Tables.t11l),\n    new HuffCodeTab(8, 0, Tables.t12HB, Tables.t12l),\n    new HuffCodeTab(16, 0, Tables.t13HB, Tables.t13l),\n    new HuffCodeTab(0, 0, null, Tables.t16_5l), /* Apparently not used */\n    new HuffCodeTab(16, 0, Tables.t15HB, Tables.t15l),\n\n    new HuffCodeTab(1, 1, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(2, 3, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(3, 7, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(4, 15, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(6, 63, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(8, 255, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(10, 1023, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(13, 8191, Tables.t16HB, Tables.t16l),\n\n    new HuffCodeTab(4, 15, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(5, 31, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(6, 63, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(7, 127, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(8, 255, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(9, 511, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(11, 2047, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(13, 8191, Tables.t24HB, Tables.t24l),\n\n    new HuffCodeTab(0, 0, Tables.t32HB, Tables.t32l),\n    new HuffCodeTab(0, 0, Tables.t33HB, Tables.t33l),\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 16*16; i++) [\n *      largetbl[i] = ((ht[16].hlen[i]) << 16) + ht[24].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.largetbl = [\n    0x010004, 0x050005, 0x070007, 0x090008, 0x0a0009, 0x0a000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000c, 0x0c000c, 0x0d000c, 0x0d000c, 0x0d000c, 0x0e000d, 0x0a000a,\n    0x040005, 0x060006, 0x080007, 0x090008, 0x0a0009, 0x0b000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000b, 0x0c000c, 0x0d000c, 0x0e000c, 0x0d000c, 0x0e000c, 0x0a000a,\n    0x070007, 0x080007, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0c000b, 0x0d000b, 0x0d000c, 0x0d000c, 0x0e000c, 0x0e000d, 0x0b0009,\n    0x090008, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0c0009,\n    0x0a0009, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000a, 0x0d000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000d, 0x0b0009,\n    0x0a000a, 0x0a0009, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0e000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0c0009,\n    0x0b000a, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0d000b,\n    0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000d, 0x0c0009,\n    0x0b000b, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b,\n    0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000d, 0x11000d, 0x0c000a,\n    0x0b000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b,\n    0x0f000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000d, 0x10000d, 0x0c000a,\n    0x0c000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000c,\n    0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0f000d, 0x10000d, 0x0f000d, 0x0d000a,\n    0x0c000c, 0x0d000b, 0x0c000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c,\n    0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x11000d, 0x11000d, 0x10000d, 0x0c000a,\n    0x0d000c, 0x0d000c, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x10000c,\n    0x10000c, 0x10000c, 0x10000c, 0x10000d, 0x10000d, 0x0f000d, 0x10000d, 0x0d000a,\n    0x0d000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c,\n    0x0f000c, 0x11000c, 0x10000d, 0x10000d, 0x10000d, 0x10000d, 0x12000d, 0x0d000a,\n    0x0f000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000c,\n    0x10000d, 0x12000d, 0x11000d, 0x11000d, 0x11000d, 0x13000d, 0x11000d, 0x0d000a,\n    0x0e000d, 0x0f000c, 0x0d000c, 0x0e000c, 0x10000c, 0x10000c, 0x0f000c, 0x10000d,\n    0x10000d, 0x11000d, 0x12000d, 0x11000d, 0x13000d, 0x11000d, 0x10000d, 0x0d000a,\n    0x0a0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b0009, 0x0c0009, 0x0c0009, 0x0c0009,\n    0x0d0009, 0x0d0009, 0x0d0009, 0x0d000a, 0x0d000a, 0x0d000a, 0x0d000a, 0x0a0006\n];\n/**\n * <CODE>\n *  for (i = 0; i < 3*3; i++) [\n *      table23[i] = ((ht[2].hlen[i]) << 16) + ht[3].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.table23 = [\n    0x010002, 0x040003, 0x070007,\n    0x040004, 0x050004, 0x070007,\n    0x060006, 0x070007, 0x080008\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 4*4; i++) [\n *       table56[i] = ((ht[5].hlen[i]) << 16) + ht[6].hlen[i];\n *   ]\n * </CODE>\n *\n */\nTables.table56 = [\n    0x010003, 0x040004, 0x070006, 0x080008, 0x040004, 0x050004, 0x080006, 0x090007,\n    0x070005, 0x080006, 0x090007, 0x0a0008, 0x080007, 0x080007, 0x090008, 0x0a0009\n];\n\nTables.bitrate_table = [\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], /* MPEG 2 */\n    [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], /* MPEG 1 */\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1], /* MPEG 2.5 */\n];\n\n/**\n * MPEG 2, MPEG 1, MPEG 2.5.\n */\nTables.samplerate_table = [\n    [22050, 24000, 16000, -1],\n    [44100, 48000, 32000, -1],\n    [11025, 12000, 8000, -1],\n];\n\n/**\n * This is the scfsi_band table from 2.4.2.7 of the IS.\n */\nTables.scfsi_band = [0, 6, 11, 16, 21];\n\nmodule.exports = Tables;\n","/*\n *\tMP3 huffman table selecting and bit counting\n *\n *\tCopyright (c) 1999-2005 Takehiro TOMINAGA\n *\tCopyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Takehiro.java,v 1.26 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\nvar common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\nvar Tables = require('./Tables.js');\nvar GrInfo = require('./GrInfo.js');\nvar QuantizePVT = require('./QuantizePVT.js');\n\n\nfunction Takehiro() {\n\n    var qupvt = null;\n    this.qupvt = null;\n\n    this.setModules = function (_qupvt) {\n        this.qupvt = _qupvt;\n        qupvt = _qupvt;\n    }\n\n    function Bits(b) {\n        this.bits = 0 | b;\n    }\n\n    var subdv_table = [[0, 0], /* 0 bands */\n        [0, 0], /* 1 bands */\n        [0, 0], /* 2 bands */\n        [0, 0], /* 3 bands */\n        [0, 0], /* 4 bands */\n        [0, 1], /* 5 bands */\n        [1, 1], /* 6 bands */\n        [1, 1], /* 7 bands */\n        [1, 2], /* 8 bands */\n        [2, 2], /* 9 bands */\n        [2, 3], /* 10 bands */\n        [2, 3], /* 11 bands */\n        [3, 4], /* 12 bands */\n        [3, 4], /* 13 bands */\n        [3, 4], /* 14 bands */\n        [4, 5], /* 15 bands */\n        [4, 5], /* 16 bands */\n        [4, 6], /* 17 bands */\n        [5, 6], /* 18 bands */\n        [5, 6], /* 19 bands */\n        [5, 7], /* 20 bands */\n        [6, 7], /* 21 bands */\n        [6, 7], /* 22 bands */\n    ];\n\n    /**\n     * nonlinear quantization of xr More accurate formula than the ISO formula.\n     * Takes into account the fact that we are quantizing xr . ix, but we want\n     * ix^4/3 to be as close as possible to x^4/3. (taking the nearest int would\n     * mean ix is as close as possible to xr, which is different.)\n     *\n     * From Segher Boessenkool <segher@eastsite.nl> 11/1999\n     *\n     * 09/2000: ASM code removed in favor of IEEE754 hack by Takehiro Tominaga.\n     * If you need the ASM code, check CVS circa Aug 2000.\n     *\n     * 01/2004: Optimizations by Gabriel Bouvigne\n     */\n    function quantize_lines_xrpow_01(l, istep, xr, xrPos, ix, ixPos) {\n        var compareval0 = (1.0 - 0.4054) / istep;\n\n        assert(l > 0);\n        l = l >> 1;\n        while ((l--) != 0) {\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n        }\n    }\n\n    /**\n     * XRPOW_FTOI is a macro to convert floats to ints.<BR>\n     * if XRPOW_FTOI(x) = nearest_int(x), then QUANTFAC(x)=adj43asm[x]<BR>\n     * ROUNDFAC= -0.0946<BR>\n     *\n     * if XRPOW_FTOI(x) = floor(x), then QUANTFAC(x)=asj43[x]<BR>\n     * ROUNDFAC=0.4054<BR>\n     *\n     * Note: using floor() or 0| is extremely slow. On machines where the\n     * TAKEHIRO_IEEE754_HACK code above does not work, it is worthwile to write\n     * some ASM for XRPOW_FTOI().\n     */\n    function quantize_lines_xrpow(l, istep, xr, xrPos, ix, ixPos) {\n        assert(l > 0);\n\n        l = l >> 1;\n        var remaining = l % 2;\n        l = l >> 1;\n        while (l-- != 0) {\n            var x0, x1, x2, x3;\n            var rx0, rx1, rx2, rx3;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            x2 = xr[xrPos++] * istep;\n            rx1 = 0 | x1;\n            x3 = xr[xrPos++] * istep;\n            rx2 = 0 | x2;\n            x0 += qupvt.adj43[rx0];\n            rx3 = 0 | x3;\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            x2 += qupvt.adj43[rx2];\n            ix[ixPos++] = 0 | x1;\n            x3 += qupvt.adj43[rx3];\n            ix[ixPos++] = 0 | x2;\n            ix[ixPos++] = 0 | x3;\n        }\n        if (remaining != 0) {\n            var x0, x1;\n            var rx0, rx1;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            rx1 = 0 | x1;\n            x0 += qupvt.adj43[rx0];\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            ix[ixPos++] = 0 | x1;\n        }\n    }\n\n    /**\n     * Quantization function This function will select which lines to quantize\n     * and call the proper quantization function\n     */\n    function quantize_xrpow(xp, pi, istep, codInfo, prevNoise) {\n        /* quantize on xr^(3/4) instead of xr */\n        var sfb;\n        var sfbmax;\n        var j = 0;\n        var prev_data_use;\n        var accumulate = 0;\n        var accumulate01 = 0;\n        var xpPos = 0;\n        var iData = pi;\n        var iDataPos = 0;\n        var acc_iData = iData;\n        var acc_iDataPos = 0;\n        var acc_xp = xp;\n        var acc_xpPos = 0;\n\n        /*\n         * Reusing previously computed data does not seems to work if global\n         * gain is changed. Finding why it behaves this way would allow to use a\n         * cache of previously computed values (let's 10 cached values per sfb)\n         * that would probably provide a noticeable speedup\n         */\n        prev_data_use = (prevNoise != null && (codInfo.global_gain == prevNoise.global_gain));\n\n        if (codInfo.block_type == Encoder.SHORT_TYPE)\n            sfbmax = 38;\n        else\n            sfbmax = 21;\n\n        for (sfb = 0; sfb <= sfbmax; sfb++) {\n            var step = -1;\n\n            if (prev_data_use || codInfo.block_type == Encoder.NORM_TYPE) {\n                step = codInfo.global_gain\n                    - ((codInfo.scalefac[sfb] + (codInfo.preflag != 0 ? qupvt.pretab[sfb]\n                        : 0)) << (codInfo.scalefac_scale + 1))\n                    - codInfo.subblock_gain[codInfo.window[sfb]] * 8;\n            }\n            assert(codInfo.width[sfb] >= 0);\n            if (prev_data_use && (prevNoise.step[sfb] == step)) {\n                /*\n                 * do not recompute this part, but compute accumulated lines\n                 */\n                if (accumulate != 0) {\n                    quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                        acc_iData, acc_iDataPos);\n                    accumulate = 0;\n                }\n                if (accumulate01 != 0) {\n                    quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                        acc_xpPos, acc_iData, acc_iDataPos);\n                    accumulate01 = 0;\n                }\n            } else { /* should compute this part */\n                var l = codInfo.width[sfb];\n\n                if ((j + codInfo.width[sfb]) > codInfo.max_nonzero_coeff) {\n                    /* do not compute upper zero part */\n                    var usefullsize;\n                    usefullsize = codInfo.max_nonzero_coeff - j + 1;\n                    Arrays.fill(pi, codInfo.max_nonzero_coeff, 576, 0);\n                    l = usefullsize;\n\n                    if (l < 0) {\n                        l = 0;\n                    }\n\n                    /* no need to compute higher sfb values */\n                    sfb = sfbmax + 1;\n                }\n\n                /* accumulate lines to quantize */\n                if (0 == accumulate && 0 == accumulate01) {\n                    acc_iData = iData;\n                    acc_iDataPos = iDataPos;\n                    acc_xp = xp;\n                    acc_xpPos = xpPos;\n                }\n                if (prevNoise != null && prevNoise.sfb_count1 > 0\n                    && sfb >= prevNoise.sfb_count1\n                    && prevNoise.step[sfb] > 0\n                    && step >= prevNoise.step[sfb]) {\n\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate01 += l;\n                } else {\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate += l;\n                }\n\n                if (l <= 0) {\n                    /*\n                     * rh: 20040215 may happen due to \"prev_data_use\"\n                     * optimization\n                     */\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                    }\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                    }\n\n                    break;\n                    /* ends for-loop */\n                }\n            }\n            if (sfb <= sfbmax) {\n                iDataPos += codInfo.width[sfb];\n                xpPos += codInfo.width[sfb];\n                j += codInfo.width[sfb];\n            }\n        }\n        if (accumulate != 0) { /* last data part */\n            quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate = 0;\n        }\n        if (accumulate01 != 0) { /* last data part */\n            quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate01 = 0;\n        }\n\n    }\n\n    /**\n     * ix_max\n     */\n    function ix_max(ix, ixPos, endPos) {\n        var max1 = 0, max2 = 0;\n\n        do {\n            var x1 = ix[ixPos++];\n            var x2 = ix[ixPos++];\n            if (max1 < x1)\n                max1 = x1;\n\n            if (max2 < x2)\n                max2 = x2;\n        } while (ixPos < endPos);\n        if (max1 < max2)\n            max1 = max2;\n        return max1;\n    }\n\n    function count_bit_ESC(ix, ixPos, end, t1, t2, s) {\n        /* ESC-table is used */\n        var linbits = Tables.ht[t1].xlen * 65536 + Tables.ht[t2].xlen;\n        var sum = 0, sum2;\n\n        do {\n            var x = ix[ixPos++];\n            var y = ix[ixPos++];\n\n            if (x != 0) {\n                if (x > 14) {\n                    x = 15;\n                    sum += linbits;\n                }\n                x *= 16;\n            }\n\n            if (y != 0) {\n                if (y > 14) {\n                    y = 15;\n                    sum += linbits;\n                }\n                x += y;\n            }\n\n            sum += Tables.largetbl[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1 = t2;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC(ix, ixPos, end, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var hlen1 = Tables.ht[1].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * 2 + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n        } while (ixPos < end);\n\n        s.bits += sum1;\n        return 1;\n    }\n\n    function count_bit_noESC_from2(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum = 0, sum2;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen;\n        if (t1 == 2)\n            hlen = Tables.table23;\n        else\n            hlen = Tables.table56;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum += hlen[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1++;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC_from3(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var sum2 = 0;\n        var sum3 = 0;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen1 = Tables.ht[t1].hlen;\n        var hlen2 = Tables.ht[t1 + 1].hlen;\n        var hlen3 = Tables.ht[t1 + 2].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n            sum2 += hlen2[x];\n            sum3 += hlen3[x];\n        } while (ixPos < end);\n        var t = t1;\n        if (sum1 > sum2) {\n            sum1 = sum2;\n            t++;\n        }\n        if (sum1 > sum3) {\n            sum1 = sum3;\n            t = t1 + 2;\n        }\n        s.bits += sum1;\n\n        return t;\n    }\n\n    /*************************************************************************/\n    /* choose table */\n    /*************************************************************************/\n\n    var huf_tbl_noESC = [1, 2, 5, 7, 7, 10, 10, 13, 13,\n        13, 13, 13, 13, 13, 13];\n\n    /**\n     * Choose the Huffman table that will encode ix[begin..end] with the fewest\n     * bits.\n     *\n     * Note: This code contains knowledge about the sizes and characteristics of\n     * the Huffman tables as defined in the IS (Table B.7), and will not work\n     * with any arbitrary tables.\n     */\n    function choose_table(ix, ixPos, endPos, s) {\n        var max = ix_max(ix, ixPos, endPos);\n\n        switch (max) {\n            case 0:\n                return max;\n\n            case 1:\n                return count_bit_noESC(ix, ixPos, endPos, s);\n\n            case 2:\n            case 3:\n                return count_bit_noESC_from2(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                return count_bit_noESC_from3(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            default:\n                /* try tables with linbits */\n                if (max > QuantizePVT.IXMAX_VAL) {\n                    s.bits = QuantizePVT.LARGE_BITS;\n                    return -1;\n                }\n                max -= 15;\n                var choice2;\n                for (choice2 = 24; choice2 < 32; choice2++) {\n                    if (Tables.ht[choice2].linmax >= max) {\n                        break;\n                    }\n                }\n                var choice;\n                for (choice = choice2 - 8; choice < 24; choice++) {\n                    if (Tables.ht[choice].linmax >= max) {\n                        break;\n                    }\n                }\n                return count_bit_ESC(ix, ixPos, endPos, choice, choice2, s);\n        }\n    }\n\n    /**\n     * count_bit\n     */\n    this.noquant_count_bits = function (gfc, gi, prev_noise) {\n        var ix = gi.l3_enc;\n        var i = Math.min(576, ((gi.max_nonzero_coeff + 2) >> 1) << 1);\n\n        if (prev_noise != null)\n            prev_noise.sfb_count1 = 0;\n\n        /* Determine count1 region */\n        for (; i > 1; i -= 2)\n            if ((ix[i - 1] | ix[i - 2]) != 0)\n                break;\n        gi.count1 = i;\n\n        /* Determines the number of bits to encode the quadruples. */\n        var a1 = 0;\n        var a2 = 0;\n        for (; i > 3; i -= 4) {\n            var p;\n            /* hack to check if all values <= 1 */\n            //throw \"TODO: HACK         if ((((long) ix[i - 1] | (long) ix[i - 2] | (long) ix[i - 3] | (long) ix[i - 4]) & 0xffffffffL) > 1L        \"\n            //if (true) {\n            if (((ix[i - 1] | ix[i - 2] | ix[i - 3] | ix[i - 4]) & 0x7fffffff) > 1) {\n                break;\n            }\n            p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        var bits = a1;\n        gi.count1table_select = 0;\n        if (a1 > a2) {\n            bits = a2;\n            gi.count1table_select = 1;\n        }\n\n        gi.count1bits = bits;\n        gi.big_values = i;\n        if (i == 0)\n            return bits;\n\n        if (gi.block_type == Encoder.SHORT_TYPE) {\n            a1 = 3 * gfc.scalefac_band.s[3];\n            if (a1 > gi.big_values)\n                a1 = gi.big_values;\n            a2 = gi.big_values;\n\n        } else if (gi.block_type == Encoder.NORM_TYPE) {\n            assert(i <= 576);\n            /* bv_scf has 576 entries (0..575) */\n            a1 = gi.region0_count = gfc.bv_scf[i - 2];\n            a2 = gi.region1_count = gfc.bv_scf[i - 1];\n\n            assert(a1 + a2 + 2 < Encoder.SBPSY_l);\n            a2 = gfc.scalefac_band.l[a1 + a2 + 2];\n            a1 = gfc.scalefac_band.l[a1 + 1];\n            if (a2 < i) {\n                var bi = new Bits(bits);\n                gi.table_select[2] = choose_table(ix, a2, i, bi);\n                bits = bi.bits;\n            }\n        } else {\n            gi.region0_count = 7;\n            /* gi.region1_count = SBPSY_l - 7 - 1; */\n            gi.region1_count = Encoder.SBMAX_l - 1 - 7 - 1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            a2 = i;\n            if (a1 > a2) {\n                a1 = a2;\n            }\n        }\n\n        /* have to allow for the case when bigvalues < region0 < region1 */\n        /* (and region0, region1 are ignored) */\n        a1 = Math.min(a1, i);\n        a2 = Math.min(a2, i);\n\n        assert(a1 >= 0);\n        assert(a2 >= 0);\n\n        /* Count the number of bits necessary to code the bigvalues region. */\n        if (0 < a1) {\n            var bi = new Bits(bits);\n            gi.table_select[0] = choose_table(ix, 0, a1, bi);\n            bits = bi.bits;\n        }\n        if (a1 < a2) {\n            var bi = new Bits(bits);\n            gi.table_select[1] = choose_table(ix, a1, a2, bi);\n            bits = bi.bits;\n        }\n        if (gfc.use_best_huffman == 2) {\n            gi.part2_3_length = bits;\n            best_huffman_divide(gfc, gi);\n            bits = gi.part2_3_length;\n        }\n\n        if (prev_noise != null) {\n            if (gi.block_type == Encoder.NORM_TYPE) {\n                var sfb = 0;\n                while (gfc.scalefac_band.l[sfb] < gi.big_values) {\n                    sfb++;\n                }\n                prev_noise.sfb_count1 = sfb;\n            }\n        }\n\n        return bits;\n    }\n\n    this.count_bits = function (gfc, xr, gi, prev_noise) {\n        var ix = gi.l3_enc;\n\n        /* since quantize_xrpow uses table lookup, we need to check this first: */\n        var w = (QuantizePVT.IXMAX_VAL) / qupvt.IPOW20(gi.global_gain);\n\n        if (gi.xrpow_max > w)\n            return QuantizePVT.LARGE_BITS;\n\n        quantize_xrpow(xr, ix, qupvt.IPOW20(gi.global_gain), gi, prev_noise);\n\n        if ((gfc.substep_shaping & 2) != 0) {\n            var j = 0;\n            /* 0.634521682242439 = 0.5946*2**(.5*0.1875) */\n            var gain = gi.global_gain + gi.scalefac_scale;\n            var roundfac = 0.634521682242439 / qupvt.IPOW20(gain);\n            for (var sfb = 0; sfb < gi.sfbmax; sfb++) {\n                var width = gi.width[sfb];\n                assert(width >= 0);\n                if (0 == gfc.pseudohalf[sfb]) {\n                    j += width;\n                } else {\n                    var k;\n                    for (k = j, j += width; k < j; ++k) {\n                        ix[k] = (xr[k] >= roundfac) ? ix[k] : 0;\n                    }\n                }\n            }\n        }\n        return this.noquant_count_bits(gfc, gi, prev_noise);\n    }\n\n    /**\n     * re-calculate the best scalefac_compress using scfsi the saved bits are\n     * kept in the bit reservoir.\n     */\n    function recalc_divide_init(gfc, cod_info, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info.big_values;\n\n        for (var r0 = 0; r0 <= 7 + 15; r0++) {\n            r01_bits[r0] = QuantizePVT.LARGE_BITS;\n        }\n\n        for (var r0 = 0; r0 < 16; r0++) {\n            var a1 = gfc.scalefac_band.l[r0 + 1];\n            if (a1 >= bigv)\n                break;\n            var r0bits = 0;\n            var bi = new Bits(r0bits);\n            var r0t = choose_table(ix, 0, a1, bi);\n            r0bits = bi.bits;\n\n            for (var r1 = 0; r1 < 8; r1++) {\n                var a2 = gfc.scalefac_band.l[r0 + r1 + 2];\n                if (a2 >= bigv)\n                    break;\n                var bits = r0bits;\n                bi = new Bits(bits);\n                var r1t = choose_table(ix, a1, a2, bi);\n                bits = bi.bits;\n                if (r01_bits[r0 + r1] > bits) {\n                    r01_bits[r0 + r1] = bits;\n                    r01_div[r0 + r1] = r0;\n                    r0_tbl[r0 + r1] = r0t;\n                    r1_tbl[r0 + r1] = r1t;\n                }\n            }\n        }\n    }\n\n    function recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info2.big_values;\n\n        for (var r2 = 2; r2 < Encoder.SBMAX_l + 1; r2++) {\n            var a2 = gfc.scalefac_band.l[r2];\n            if (a2 >= bigv)\n                break;\n            var bits = r01_bits[r2 - 2] + cod_info2.count1bits;\n            if (gi.part2_3_length <= bits)\n                break;\n\n            var bi = new Bits(bits);\n            var r2t = choose_table(ix, a2, bigv, bi);\n            bits = bi.bits;\n            if (gi.part2_3_length <= bits)\n                continue;\n\n            gi.assign(cod_info2);\n            gi.part2_3_length = bits;\n            gi.region0_count = r01_div[r2 - 2];\n            gi.region1_count = r2 - 2 - r01_div[r2 - 2];\n            gi.table_select[0] = r0_tbl[r2 - 2];\n            gi.table_select[1] = r1_tbl[r2 - 2];\n            gi.table_select[2] = r2t;\n        }\n    }\n\n    this.best_huffman_divide = function (gfc, gi) {\n        var cod_info2 = new GrInfo();\n        var ix = gi.l3_enc;\n        var r01_bits = new_int(7 + 15 + 1);\n        var r01_div = new_int(7 + 15 + 1);\n        var r0_tbl = new_int(7 + 15 + 1);\n        var r1_tbl = new_int(7 + 15 + 1);\n\n        /* SHORT BLOCK stuff fails for MPEG2 */\n        if (gi.block_type == Encoder.SHORT_TYPE && gfc.mode_gr == 1)\n            return;\n\n        cod_info2.assign(gi);\n        if (gi.block_type == Encoder.NORM_TYPE) {\n            recalc_divide_init(gfc, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        }\n        var i = cod_info2.big_values;\n        if (i == 0 || (ix[i - 2] | ix[i - 1]) > 1)\n            return;\n\n        i = gi.count1 + 2;\n        if (i > 576)\n            return;\n\n        /* Determines the number of bits to encode the quadruples. */\n        cod_info2.assign(gi);\n        cod_info2.count1 = i;\n        var a1 = 0;\n        var a2 = 0;\n\n        assert(i <= 576);\n\n        for (; i > cod_info2.big_values; i -= 4) {\n            var p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2\n                + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        cod_info2.big_values = i;\n\n        cod_info2.count1table_select = 0;\n        if (a1 > a2) {\n            a1 = a2;\n            cod_info2.count1table_select = 1;\n        }\n\n        cod_info2.count1bits = a1;\n\n        if (cod_info2.block_type == Encoder.NORM_TYPE)\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        else {\n            /* Count the number of bits necessary to code the bigvalues region. */\n            cod_info2.part2_3_length = a1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            if (a1 > i) {\n                a1 = i;\n            }\n            if (a1 > 0) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[0] = choose_table(ix, 0, a1, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (i > a1) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[1] = choose_table(ix, a1, i, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (gi.part2_3_length > cod_info2.part2_3_length)\n                gi.assign(cod_info2);\n        }\n    }\n\n    var slen1_n = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16];\n    var slen2_n = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8];\n    var slen1_tab = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4];\n    var slen2_tab = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\n    Takehiro.slen1_tab = slen1_tab;\n    Takehiro.slen2_tab = slen2_tab;\n\n    function scfsi_calc(ch, l3_side) {\n        var sfb;\n        var gi = l3_side.tt[1][ch];\n        var g0 = l3_side.tt[0][ch];\n\n        for (var i = 0; i < Tables.scfsi_band.length - 1; i++) {\n            for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                if (g0.scalefac[sfb] != gi.scalefac[sfb]\n                    && gi.scalefac[sfb] >= 0)\n                    break;\n            }\n            if (sfb == Tables.scfsi_band[i + 1]) {\n                for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                    gi.scalefac[sfb] = -1;\n                }\n                l3_side.scfsi[ch][i] = 1;\n            }\n        }\n        var s1 = 0;\n        var c1 = 0;\n        for (sfb = 0; sfb < 11; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c1++;\n            if (s1 < gi.scalefac[sfb])\n                s1 = gi.scalefac[sfb];\n        }\n        var s2 = 0;\n        var c2 = 0;\n        for (; sfb < Encoder.SBPSY_l; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c2++;\n            if (s2 < gi.scalefac[sfb])\n                s2 = gi.scalefac[sfb];\n        }\n\n        for (var i = 0; i < 16; i++) {\n            if (s1 < slen1_n[i] && s2 < slen2_n[i]) {\n                var c = slen1_tab[i] * c1 + slen2_tab[i] * c2;\n                if (gi.part2_length > c) {\n                    gi.part2_length = c;\n                    gi.scalefac_compress = i;\n                }\n            }\n        }\n    }\n\n    /**\n     * Find the optimal way to store the scalefactors. Only call this routine\n     * after final scalefactors have been chosen and the channel/granule will\n     * not be re-encoded.\n     */\n    this.best_scalefac_store = function (gfc, gr, ch, l3_side) {\n        /* use scalefac_scale if we can */\n        var gi = l3_side.tt[gr][ch];\n        var sfb, i, j, l;\n        var recalc = 0;\n\n        /*\n         * remove scalefacs from bands with ix=0. This idea comes from the AAC\n         * ISO docs. added mt 3/00\n         */\n        /* check if l3_enc=0 */\n        j = 0;\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            var width = gi.width[sfb];\n            assert(width >= 0);\n            j += width;\n            for (l = -width; l < 0; l++) {\n                if (gi.l3_enc[l + j] != 0)\n                    break;\n            }\n            if (l == 0)\n                gi.scalefac[sfb] = recalc = -2;\n            /* anything goes. */\n            /*\n             * only best_scalefac_store and calc_scfsi know--and only they\n             * should know--about the magic number -2.\n             */\n        }\n\n        if (0 == gi.scalefac_scale && 0 == gi.preflag) {\n            var s = 0;\n            for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                if (gi.scalefac[sfb] > 0)\n                    s |= gi.scalefac[sfb];\n\n            if (0 == (s & 1) && s != 0) {\n                for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] >>= 1;\n\n                gi.scalefac_scale = recalc = 1;\n            }\n        }\n\n        if (0 == gi.preflag && gi.block_type != Encoder.SHORT_TYPE\n            && gfc.mode_gr == 2) {\n            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                if (gi.scalefac[sfb] < qupvt.pretab[sfb]\n                    && gi.scalefac[sfb] != -2)\n                    break;\n            if (sfb == Encoder.SBPSY_l) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] -= qupvt.pretab[sfb];\n\n                gi.preflag = recalc = 1;\n            }\n        }\n\n        for (i = 0; i < 4; i++)\n            l3_side.scfsi[ch][i] = 0;\n\n        if (gfc.mode_gr == 2 && gr == 1\n            && l3_side.tt[0][ch].block_type != Encoder.SHORT_TYPE\n            && l3_side.tt[1][ch].block_type != Encoder.SHORT_TYPE) {\n            scfsi_calc(ch, l3_side);\n            recalc = 0;\n        }\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            if (gi.scalefac[sfb] == -2) {\n                gi.scalefac[sfb] = 0;\n                /* if anything goes, then 0 is a good choice */\n            }\n        }\n        if (recalc != 0) {\n            if (gfc.mode_gr == 2) {\n                this.scale_bitcount(gi);\n            } else {\n                this.scale_bitcount_lsf(gfc, gi);\n            }\n        }\n    }\n\n    function all_scalefactors_not_negative(scalefac, n) {\n        for (var i = 0; i < n; ++i) {\n            if (scalefac[i] < 0)\n                return false;\n        }\n        return true;\n    }\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 18*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_short = [0, 18, 36, 54, 54, 36, 54, 72,\n        54, 72, 90, 72, 90, 108, 108, 126];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 17*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_mixed = [0, 18, 36, 54, 51, 35, 53, 71,\n        52, 70, 88, 69, 87, 105, 104, 122];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 11*slen1_tab[i] + 10*slen2_tab[i]\n     */\n    var scale_long = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42,\n        52, 43, 53, 63, 64, 74];\n\n    /**\n     * Also calculates the number of bits necessary to code the scalefactors.\n     */\n    this.scale_bitcount = function (cod_info) {\n        var k, sfb, max_slen1 = 0, max_slen2 = 0;\n\n        /* maximum values */\n        var tab;\n        var scalefac = cod_info.scalefac;\n\n        assert(all_scalefactors_not_negative(scalefac, cod_info.sfbmax));\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            tab = scale_short;\n            if (cod_info.mixed_block_flag != 0)\n                tab = scale_mixed;\n        } else { /* block_type == 1,2,or 3 */\n            tab = scale_long;\n            if (0 == cod_info.preflag) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (scalefac[sfb] < qupvt.pretab[sfb])\n                        break;\n\n                if (sfb == Encoder.SBPSY_l) {\n                    cod_info.preflag = 1;\n                    for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                        scalefac[sfb] -= qupvt.pretab[sfb];\n                }\n            }\n        }\n\n        for (sfb = 0; sfb < cod_info.sfbdivide; sfb++)\n            if (max_slen1 < scalefac[sfb])\n                max_slen1 = scalefac[sfb];\n\n        for (; sfb < cod_info.sfbmax; sfb++)\n            if (max_slen2 < scalefac[sfb])\n                max_slen2 = scalefac[sfb];\n\n        /*\n         * from Takehiro TOMINAGA <tominaga@isoternet.org> 10/99 loop over *all*\n         * posible values of scalefac_compress to find the one which uses the\n         * smallest number of bits. ISO would stop at first valid index\n         */\n        cod_info.part2_length = QuantizePVT.LARGE_BITS;\n        for (k = 0; k < 16; k++) {\n            if (max_slen1 < slen1_n[k] && max_slen2 < slen2_n[k]\n                && cod_info.part2_length > tab[k]) {\n                cod_info.part2_length = tab[k];\n                cod_info.scalefac_compress = k;\n            }\n        }\n        return cod_info.part2_length == QuantizePVT.LARGE_BITS;\n    }\n\n    /**\n     * table of largest scalefactor values for MPEG2\n     */\n    var max_range_sfac_tab = [[15, 15, 7, 7],\n        [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0],\n        [7, 7, 7, 0], [3, 3, 0, 0]];\n\n    /**\n     * Also counts the number of bits to encode the scalefacs but for MPEG 2\n     * Lower sampling frequencies (24, 22.05 and 16 kHz.)\n     *\n     * This is reverse-engineered from section 2.4.3.2 of the MPEG2 IS,\n     * \"Audio Decoding Layer III\"\n     */\n    this.scale_bitcount_lsf = function (gfc, cod_info) {\n        var table_number, row_in_table, partition, nr_sfb, window;\n        var over;\n        var i, sfb;\n        var max_sfac = new_int(4);\n//var partition_table;\n        var scalefac = cod_info.scalefac;\n\n        /*\n         * Set partition table. Note that should try to use table one, but do\n         * not yet...\n         */\n        if (cod_info.preflag != 0)\n            table_number = 2;\n        else\n            table_number = 0;\n\n        for (i = 0; i < 4; i++)\n            max_sfac[i] = 0;\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            row_in_table = 1;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition] / 3;\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    for (window = 0; window < 3; window++)\n                        if (scalefac[sfb * 3 + window] > max_sfac[partition])\n                            max_sfac[partition] = scalefac[sfb * 3 + window];\n            }\n        } else {\n            row_in_table = 0;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition];\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    if (scalefac[sfb] > max_sfac[partition])\n                        max_sfac[partition] = scalefac[sfb];\n            }\n        }\n\n        for (over = false, partition = 0; partition < 4; partition++) {\n            if (max_sfac[partition] > max_range_sfac_tab[table_number][partition])\n                over = true;\n        }\n        if (!over) {\n            var slen1, slen2, slen3, slen4;\n\n            cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (partition = 0; partition < 4; partition++)\n                cod_info.slen[partition] = log2tab[max_sfac[partition]];\n\n            /* set scalefac_compress */\n            slen1 = cod_info.slen[0];\n            slen2 = cod_info.slen[1];\n            slen3 = cod_info.slen[2];\n            slen4 = cod_info.slen[3];\n\n            switch (table_number) {\n                case 0:\n                    cod_info.scalefac_compress = (((slen1 * 5) + slen2) << 4)\n                        + (slen3 << 2) + slen4;\n                    break;\n\n                case 1:\n                    cod_info.scalefac_compress = 400 + (((slen1 * 5) + slen2) << 2)\n                        + slen3;\n                    break;\n\n                case 2:\n                    cod_info.scalefac_compress = 500 + (slen1 * 3) + slen2;\n                    break;\n\n                default:\n                    System.err.printf(\"intensity stereo not implemented yet\\n\");\n                    break;\n            }\n        }\n        if (!over) {\n            assert(cod_info.sfb_partition_table != null);\n            cod_info.part2_length = 0;\n            for (partition = 0; partition < 4; partition++)\n                cod_info.part2_length += cod_info.slen[partition]\n                    * cod_info.sfb_partition_table[partition];\n        }\n        return over;\n    }\n\n    /*\n     * Since no bands have been over-amplified, we can set scalefac_compress and\n     * slen[] for the formatter\n     */\n    var log2tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\n        4, 4, 4, 4];\n\n    this.huffman_init = function (gfc) {\n        for (var i = 2; i <= 576; i += 2) {\n            var scfb_anz = 0, bv_index;\n            while (gfc.scalefac_band.l[++scfb_anz] < i)\n                ;\n\n            bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            while (gfc.scalefac_band.l[bv_index + 1] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                /*\n                 * this is an indication that everything is going to be encoded\n                 * as region0: bigvalues < region0 < region1 so lets set\n                 * region0, region1 to some value larger than bigvalues\n                 */\n                bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            }\n\n            gfc.bv_scf[i - 2] = bv_index;\n\n            bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            while (gfc.scalefac_band.l[bv_index + gfc.bv_scf[i - 2] + 2] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            }\n\n            gfc.bv_scf[i - 1] = bv_index;\n        }\n    }\n}\n\nmodule.exports = Takehiro;\n","function VBRQuantize() {\n    var qupvt;\n    var tak;\n\n    this.setModules = function (_qupvt, _tk) {\n        qupvt = _qupvt;\n        tak = _tk;\n    }\n    //TODO\n\n}\n\nmodule.exports = VBRQuantize;\n","//package mp3;\n\nfunction VBRSeekInfo() {\n    /**\n     * What we have seen so far.\n     */\n    this.sum = 0;\n    /**\n     * How many frames we have seen in this chunk.\n     */\n    this.seen = 0;\n    /**\n     * How many frames we want to collect into one chunk.\n     */\n    this.want = 0;\n    /**\n     * Actual position in our bag.\n     */\n    this.pos = 0;\n    /**\n     * Size of our bag.\n     */\n    this.size = 0;\n    /**\n     * Pointer to our bag.\n     */\n    this.bag = null;\n    this.nVbrNumFrames = 0;\n    this.nBytesWritten = 0;\n    /* VBR tag data */\n    this.TotalFrameSize = 0;\n}\n\nmodule.exports = VBRSeekInfo;\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\n/**\n * A Vbr header may be present in the ancillary data field of the first frame of\n * an mp3 bitstream<BR>\n * The Vbr header (optionally) contains\n * <UL>\n * <LI>frames total number of audio frames in the bitstream\n * <LI>bytes total number of bytes in the bitstream\n * <LI>toc table of contents\n * </UL>\n *\n * toc (table of contents) gives seek points for random access.<BR>\n * The ith entry determines the seek point for i-percent duration.<BR>\n * seek point in bytes = (toc[i]/256.0) * total_bitstream_bytes<BR>\n * e.g. half duration seek point = (toc[50]/256.0) * total_bitstream_bytes\n */\nVBRTag.NUMTOCENTRIES = 100;\nVBRTag.MAXFRAMESIZE = 2880;\n\nfunction VBRTag() {\n\n    var lame;\n    var bs;\n    var v;\n\n    this.setModules = function (_lame, _bs, _v) {\n        lame = _lame;\n        bs = _bs;\n        v = _v;\n    };\n\n    var FRAMES_FLAG = 0x0001;\n    var BYTES_FLAG = 0x0002;\n    var TOC_FLAG = 0x0004;\n    var VBR_SCALE_FLAG = 0x0008;\n\n    var NUMTOCENTRIES = VBRTag.NUMTOCENTRIES;\n\n    /**\n     * (0xB40) the max freeformat 640 32kHz framesize.\n     */\n    var MAXFRAMESIZE = VBRTag.MAXFRAMESIZE;\n\n    /**\n     * <PRE>\n     *    4 bytes for Header Tag\n     *    4 bytes for Header Flags\n     *  100 bytes for entry (toc)\n     *    4 bytes for frame size\n     *    4 bytes for stream size\n     *    4 bytes for VBR scale. a VBR quality indicator: 0=best 100=worst\n     *   20 bytes for LAME tag.  for example, \"LAME3.12 (beta 6)\"\n     * ___________\n     *  140 bytes\n     * </PRE>\n     */\n    var VBRHEADERSIZE = (NUMTOCENTRIES + 4 + 4 + 4 + 4 + 4);\n\n    var LAMEHEADERSIZE = (VBRHEADERSIZE + 9 + 1 + 1 + 8\n    + 1 + 1 + 3 + 1 + 1 + 2 + 4 + 2 + 2);\n\n    /**\n     * The size of the Xing header MPEG-1, bit rate in kbps.\n     */\n    var XING_BITRATE1 = 128;\n    /**\n     * The size of the Xing header MPEG-2, bit rate in kbps.\n     */\n    var XING_BITRATE2 = 64;\n    /**\n     * The size of the Xing header MPEG-2.5, bit rate in kbps.\n     */\n    var XING_BITRATE25 = 32;\n\n    /**\n     * ISO-8859-1 charset for byte to string operations.\n     */\n    var ISO_8859_1 = null; //Charset.forName(\"ISO-8859-1\");\n\n    /**\n     * VBR header magic string.\n     */\n    var VBRTag0 = \"Xing\";\n    /**\n     * VBR header magic string (VBR == VBRMode.vbr_off).\n     */\n    var VBRTag1 = \"Info\";\n\n    /**\n     * Lookup table for fast CRC-16 computation. Uses the polynomial\n     * x^16+x^15+x^2+1\n     */\n    var crc16Lookup = [0x0000, 0xC0C1, 0xC181, 0x0140,\n        0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741,\n        0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0, 0x0D80, 0xCD41,\n        0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40,\n        0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941,\n        0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40,\n        0xDD01, 0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540,\n        0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341,\n        0x1100, 0xD1C1, 0xD081, 0x1040, 0xF001, 0x30C0, 0x3180, 0xF141,\n        0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740,\n        0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00, 0xFCC1, 0xFD81, 0x3D40,\n        0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41,\n        0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981, 0x2940,\n        0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41,\n        0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541,\n        0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340,\n        0xE101, 0x21C0, 0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141,\n        0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740,\n        0xA501, 0x65C0, 0x6480, 0xA441, 0x6C00, 0xACC1, 0xAD81, 0x6D40,\n        0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41,\n        0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1, 0xB981, 0x7940,\n        0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41,\n        0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541,\n        0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340,\n        0xB101, 0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140,\n        0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741,\n        0x5500, 0x95C1, 0x9481, 0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41,\n        0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40,\n        0x9901, 0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941,\n        0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40,\n        0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540,\n        0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341,\n        0x4100, 0x81C1, 0x8081, 0x4040];\n\n    /***********************************************************************\n     * Robert Hegemann 2001-01-17\n     ***********************************************************************/\n\n    function addVbr(v, bitrate) {\n        v.nVbrNumFrames++;\n        v.sum += bitrate;\n        v.seen++;\n\n        if (v.seen < v.want) {\n            return;\n        }\n\n        if (v.pos < v.size) {\n            v.bag[v.pos] = v.sum;\n            v.pos++;\n            v.seen = 0;\n        }\n        if (v.pos == v.size) {\n            for (var i = 1; i < v.size; i += 2) {\n                v.bag[i / 2] = v.bag[i];\n            }\n            v.want *= 2;\n            v.pos /= 2;\n        }\n    }\n\n    function xingSeekTable(v, t) {\n        if (v.pos <= 0)\n            return;\n\n        for (var i = 1; i < NUMTOCENTRIES; ++i) {\n            var j = i / NUMTOCENTRIES, act, sum;\n            var indx = 0 | (Math.floor(j * v.pos));\n            if (indx > v.pos - 1)\n                indx = v.pos - 1;\n            act = v.bag[indx];\n            sum = v.sum;\n            var seek_point = 0 | (256. * act / sum);\n            if (seek_point > 255)\n                seek_point = 255;\n            t[i] = 0xff & seek_point;\n        }\n    }\n\n    /**\n     * Add VBR entry, used to fill the VBR TOC entries.\n     *\n     * @param gfp\n     *            global flags\n     */\n    this.addVbrFrame = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var kbps = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        assert(gfc.VBR_seek_table.bag != null);\n        addVbr(gfc.VBR_seek_table, kbps);\n    }\n\n    /**\n     * Read big endian integer (4-bytes) from header.\n     *\n     * @param buf\n     *            header containing the integer\n     * @param bufPos\n     *            offset into the header\n     * @return extracted integer\n     */\n    function extractInteger(buf, bufPos) {\n        var x = buf[bufPos + 0] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 1] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 2] & 0xff;\n        x <<= 8;\n        x |= buf[bufPos + 3] & 0xff;\n        return x;\n    }\n\n    /**\n     * Write big endian integer (4-bytes) in the header.\n     *\n     * @param buf\n     *            header to write the integer into\n     * @param bufPos\n     *            offset into the header\n     * @param value\n     *            integer value to write\n     */\n    function createInteger(buf, bufPos, value) {\n        buf[bufPos + 0] = 0xff & ((value >> 24) & 0xff);\n        buf[bufPos + 1] = 0xff & ((value >> 16) & 0xff);\n        buf[bufPos + 2] = 0xff & ((value >> 8) & 0xff);\n        buf[bufPos + 3] = 0xff & (value & 0xff);\n    }\n\n    /**\n     * Write big endian short (2-bytes) in the header.\n     *\n     * @param buf\n     *            header to write the integer into\n     * @param bufPos\n     *            offset into the header\n     * @param value\n     *            integer value to write\n     */\n    function createShort(buf, bufPos, value) {\n        buf[bufPos + 0] = 0xff & ((value >> 8) & 0xff);\n        buf[bufPos + 1] = 0xff & (value & 0xff);\n    }\n\n    /**\n     * Check for magic strings (Xing/Info).\n     *\n     * @param buf\n     *            header to check\n     * @param bufPos\n     *            header offset to check\n     * @return magic string found\n     */\n    function isVbrTag(buf, bufPos) {\n        return new String(buf, bufPos, VBRTag0.length(), ISO_8859_1)\n                .equals(VBRTag0)\n            || new String(buf, bufPos, VBRTag1.length(), ISO_8859_1)\n                .equals(VBRTag1);\n    }\n\n    function shiftInBitsValue(x, n, v) {\n        return 0xff & ((x << n) | (v & ~(-1 << n)));\n    }\n\n    /**\n     * Construct the MP3 header using the settings of the global flags.\n     *\n     * <img src=\"1000px-Mp3filestructure.svg.png\">\n     *\n     * @param gfp\n     *            global flags\n     * @param buffer\n     *            header\n     */\n    function setLameTagFrameHeader(gfp, buffer) {\n        var gfc = gfp.internal_flags;\n\n        // MP3 Sync Word\n        buffer[0] = shiftInBitsValue(buffer[0], 8, 0xff);\n\n        buffer[1] = shiftInBitsValue(buffer[1], 3, 7);\n        buffer[1] = shiftInBitsValue(buffer[1], 1,\n            (gfp.out_samplerate < 16000) ? 0 : 1);\n        // Version\n        buffer[1] = shiftInBitsValue(buffer[1], 1, gfp.version);\n        // 01 == Layer 3\n        buffer[1] = shiftInBitsValue(buffer[1], 2, 4 - 3);\n        // Error protection\n        buffer[1] = shiftInBitsValue(buffer[1], 1, (!gfp.error_protection) ? 1\n            : 0);\n\n        // Bit rate\n        buffer[2] = shiftInBitsValue(buffer[2], 4, gfc.bitrate_index);\n        // Frequency\n        buffer[2] = shiftInBitsValue(buffer[2], 2, gfc.samplerate_index);\n        // Pad. Bit\n        buffer[2] = shiftInBitsValue(buffer[2], 1, 0);\n        // Priv. Bit\n        buffer[2] = shiftInBitsValue(buffer[2], 1, gfp.extension);\n\n        // Mode\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.mode.ordinal());\n        // Mode extension (Used with Joint Stereo)\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfc.mode_ext);\n        // Copy\n        buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.copyright);\n        // Original\n        buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.original);\n        // Emphasis\n        buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.emphasis);\n\n        /* the default VBR header. 48 kbps layer III, no padding, no crc */\n        /* but sampling freq, mode and copyright/copy protection taken */\n        /* from first valid frame */\n        buffer[0] = 0xff;\n        var abyte = 0xff & (buffer[1] & 0xf1);\n        var bitrate;\n        if (1 == gfp.version) {\n            bitrate = XING_BITRATE1;\n        } else {\n            if (gfp.out_samplerate < 16000)\n                bitrate = XING_BITRATE25;\n            else\n                bitrate = XING_BITRATE2;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            bitrate = gfp.brate;\n\n        var bbyte;\n        if (gfp.free_format)\n            bbyte = 0x00;\n        else\n            bbyte = 0xff & (16 * lame.BitrateIndex(bitrate, gfp.version,\n                    gfp.out_samplerate));\n\n        /*\n         * Use as much of the info from the real frames in the Xing header:\n         * samplerate, channels, crc, etc...\n         */\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            buffer[1] = 0xff & (abyte | 0x0a);\n            /* was 0x0b; */\n            abyte = 0xff & (buffer[2] & 0x0d);\n            /* AF keep also private bit */\n            buffer[2] = 0xff & (bbyte | abyte);\n            /* 64kbs MPEG1 frame */\n        } else {\n            /* MPEG2 */\n            buffer[1] = 0xff & (abyte | 0x02);\n            /* was 0x03; */\n            abyte = 0xff & (buffer[2] & 0x0d);\n            /* AF keep also private bit */\n            buffer[2] = 0xff & (bbyte | abyte);\n            /* 64kbs MPEG2 frame */\n        }\n    }\n\n    /**\n     * Get VBR tag information\n     *\n     * @param buf\n     *            header to analyze\n     * @param bufPos\n     *            offset into the header\n     * @return VBR tag data\n     */\n    this.getVbrTag = function (buf) {\n        var pTagData = new VBRTagData();\n        var bufPos = 0;\n\n        /* get Vbr header data */\n        pTagData.flags = 0;\n\n        /* get selected MPEG header data */\n        var hId = (buf[bufPos + 1] >> 3) & 1;\n        var hSrIndex = (buf[bufPos + 2] >> 2) & 3;\n        var hMode = (buf[bufPos + 3] >> 6) & 3;\n        var hBitrate = ((buf[bufPos + 2] >> 4) & 0xf);\n        hBitrate = Tables.bitrate_table[hId][hBitrate];\n\n        /* check for FFE syncword */\n        if ((buf[bufPos + 1] >> 4) == 0xE)\n            pTagData.samprate = Tables.samplerate_table[2][hSrIndex];\n        else\n            pTagData.samprate = Tables.samplerate_table[hId][hSrIndex];\n\n        /* determine offset of header */\n        if (hId != 0) {\n            /* mpeg1 */\n            if (hMode != 3)\n                bufPos += (32 + 4);\n            else\n                bufPos += (17 + 4);\n        } else {\n            /* mpeg2 */\n            if (hMode != 3)\n                bufPos += (17 + 4);\n            else\n                bufPos += (9 + 4);\n        }\n\n        if (!isVbrTag(buf, bufPos))\n            return null;\n\n        bufPos += 4;\n\n        pTagData.hId = hId;\n\n        /* get flags */\n        var head_flags = pTagData.flags = extractInteger(buf, bufPos);\n        bufPos += 4;\n\n        if ((head_flags & FRAMES_FLAG) != 0) {\n            pTagData.frames = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        if ((head_flags & BYTES_FLAG) != 0) {\n            pTagData.bytes = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        if ((head_flags & TOC_FLAG) != 0) {\n            if (pTagData.toc != null) {\n                for (var i = 0; i < NUMTOCENTRIES; i++)\n                    pTagData.toc[i] = buf[bufPos + i];\n            }\n            bufPos += NUMTOCENTRIES;\n        }\n\n        pTagData.vbrScale = -1;\n\n        if ((head_flags & VBR_SCALE_FLAG) != 0) {\n            pTagData.vbrScale = extractInteger(buf, bufPos);\n            bufPos += 4;\n        }\n\n        pTagData.headersize = ((hId + 1) * 72000 * hBitrate)\n            / pTagData.samprate;\n\n        bufPos += 21;\n        var encDelay = buf[bufPos + 0] << 4;\n        encDelay += buf[bufPos + 1] >> 4;\n        var encPadding = (buf[bufPos + 1] & 0x0F) << 8;\n        encPadding += buf[bufPos + 2] & 0xff;\n        /* check for reasonable values (this may be an old Xing header, */\n        /* not a INFO tag) */\n        if (encDelay < 0 || encDelay > 3000)\n            encDelay = -1;\n        if (encPadding < 0 || encPadding > 3000)\n            encPadding = -1;\n\n        pTagData.encDelay = encDelay;\n        pTagData.encPadding = encPadding;\n\n        /* success */\n        return pTagData;\n    }\n\n    /**\n     * Initializes the header\n     *\n     * @param gfp\n     *            global flags\n     */\n    this.InitVbrTag = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        /**\n         * <PRE>\n         * Xing VBR pretends to be a 48kbs layer III frame.  (at 44.1kHz).\n         * (at 48kHz they use 56kbs since 48kbs frame not big enough for\n         * table of contents)\n         * let's always embed Xing header inside a 64kbs layer III frame.\n         * this gives us enough room for a LAME version string too.\n         * size determined by sampling frequency (MPEG1)\n         * 32kHz:    216 bytes@48kbs    288bytes@ 64kbs\n         * 44.1kHz:  156 bytes          208bytes@64kbs     (+1 if padding = 1)\n         * 48kHz:    144 bytes          192\n         *\n         * MPEG 2 values are the same since the framesize and samplerate\n         * are each reduced by a factor of 2.\n         * </PRE>\n         */\n        var kbps_header;\n        if (1 == gfp.version) {\n            kbps_header = XING_BITRATE1;\n        } else {\n            if (gfp.out_samplerate < 16000)\n                kbps_header = XING_BITRATE25;\n            else\n                kbps_header = XING_BITRATE2;\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            kbps_header = gfp.brate;\n\n        // make sure LAME Header fits into Frame\n        var totalFrameSize = ((gfp.version + 1) * 72000 * kbps_header)\n            / gfp.out_samplerate;\n        var headerSize = (gfc.sideinfo_len + LAMEHEADERSIZE);\n        gfc.VBR_seek_table.TotalFrameSize = totalFrameSize;\n        if (totalFrameSize < headerSize || totalFrameSize > MAXFRAMESIZE) {\n            /* disable tag, it wont fit */\n            gfp.bWriteVbrTag = false;\n            return;\n        }\n\n        gfc.VBR_seek_table.nVbrNumFrames = 0;\n        gfc.VBR_seek_table.nBytesWritten = 0;\n        gfc.VBR_seek_table.sum = 0;\n\n        gfc.VBR_seek_table.seen = 0;\n        gfc.VBR_seek_table.want = 1;\n        gfc.VBR_seek_table.pos = 0;\n\n        if (gfc.VBR_seek_table.bag == null) {\n            gfc.VBR_seek_table.bag = new int[400];\n            gfc.VBR_seek_table.size = 400;\n        }\n\n        // write dummy VBR tag of all 0's into bitstream\n        var buffer = new_byte(MAXFRAMESIZE);\n\n        setLameTagFrameHeader(gfp, buffer);\n        var n = gfc.VBR_seek_table.TotalFrameSize;\n        for (var i = 0; i < n; ++i) {\n            bs.add_dummy_byte(gfp, buffer[i] & 0xff, 1);\n        }\n    }\n\n    /**\n     * Fast CRC-16 computation (uses table crc16Lookup).\n     *\n     * @param value\n     * @param crc\n     * @return\n     */\n    function crcUpdateLookup(value, crc) {\n        var tmp = crc ^ value;\n        crc = (crc >> 8) ^ crc16Lookup[tmp & 0xff];\n        return crc;\n    }\n\n    this.updateMusicCRC = function (crc, buffer, bufferPos, size) {\n        for (var i = 0; i < size; ++i)\n            crc[0] = crcUpdateLookup(buffer[bufferPos + i], crc[0]);\n    }\n\n    /**\n     * Write LAME info: mini version + info on various switches used (Jonathan\n     * Dee 2001/08/31).\n     *\n     * @param gfp\n     *            global flags\n     * @param musicLength\n     *            music length\n     * @param streamBuffer\n     *            pointer to output buffer\n     * @param streamBufferPos\n     *            offset into the output buffer\n     * @param crc\n     *            computation of CRC-16 of Lame Tag so far (starting at frame\n     *            sync)\n     * @return number of bytes written to the stream\n     */\n    function putLameVBR(gfp, musicLength, streamBuffer, streamBufferPos, crc) {\n        var gfc = gfp.internal_flags;\n        var bytesWritten = 0;\n\n        /* encoder delay */\n        var encDelay = gfp.encoder_delay;\n        /* encoder padding */\n        var encPadding = gfp.encoder_padding;\n\n        /* recall: gfp.VBR_q is for example set by the switch -V */\n        /* gfp.quality by -q, -h, -f, etc */\n        var quality = (100 - 10 * gfp.VBR_q - gfp.quality);\n\n        var version = v.getLameVeryShortVersion();\n        var vbr;\n        var revision = 0x00;\n        var revMethod;\n        // numbering different in vbr_mode vs. Lame tag\n        var vbrTypeTranslator = [1, 5, 3, 2, 4, 0, 3];\n        var lowpass = 0 | (((gfp.lowpassfreq / 100.0) + .5) > 255 ? 255\n                : (gfp.lowpassfreq / 100.0) + .5);\n        var peakSignalAmplitude = 0;\n        var radioReplayGain = 0;\n        var audiophileReplayGain = 0;\n        var noiseShaping = gfp.internal_flags.noise_shaping;\n        var stereoMode = 0;\n        var nonOptimal = 0;\n        var sourceFreq = 0;\n        var misc = 0;\n        var musicCRC = 0;\n\n        // psy model type: Gpsycho or NsPsytune\n        var expNPsyTune = (gfp.exp_nspsytune & 1) != 0;\n        var safeJoint = (gfp.exp_nspsytune & 2) != 0;\n        var noGapMore = false;\n        var noGapPrevious = false;\n        var noGapCount = gfp.internal_flags.nogap_total;\n        var noGapCurr = gfp.internal_flags.nogap_current;\n\n        // 4 bits\n        var athType = gfp.ATHtype;\n        var flags = 0;\n\n        // vbr modes\n        var abrBitrate;\n        switch (gfp.VBR) {\n            case vbr_abr:\n                abrBitrate = gfp.VBR_mean_bitrate_kbps;\n                break;\n            case vbr_off:\n                abrBitrate = gfp.brate;\n                break;\n            default:\n                abrBitrate = gfp.VBR_min_bitrate_kbps;\n        }\n\n        // revision and vbr method\n        if (gfp.VBR.ordinal() < vbrTypeTranslator.length)\n            vbr = vbrTypeTranslator[gfp.VBR.ordinal()];\n        else\n            vbr = 0x00; // unknown\n\n        revMethod = 0x10 * revision + vbr;\n\n        // ReplayGain\n        if (gfc.findReplayGain) {\n            if (gfc.RadioGain > 0x1FE)\n                gfc.RadioGain = 0x1FE;\n            if (gfc.RadioGain < -0x1FE)\n                gfc.RadioGain = -0x1FE;\n\n            // set name code\n            radioReplayGain = 0x2000;\n            // set originator code to `determined automatically'\n            radioReplayGain |= 0xC00;\n\n            if (gfc.RadioGain >= 0) {\n                // set gain adjustment\n                radioReplayGain |= gfc.RadioGain;\n            } else {\n                // set the sign bit\n                radioReplayGain |= 0x200;\n                // set gain adjustment\n                radioReplayGain |= -gfc.RadioGain;\n            }\n        }\n\n        // peak sample\n        if (gfc.findPeakSample)\n            peakSignalAmplitude = Math\n                .abs(0 | ((( gfc.PeakSample) / 32767.0) * Math.pow(2, 23) + .5));\n\n        // nogap\n        if (noGapCount != -1) {\n            if (noGapCurr > 0)\n                noGapPrevious = true;\n\n            if (noGapCurr < noGapCount - 1)\n                noGapMore = true;\n        }\n\n        // flags\n        flags = athType + ((expNPsyTune ? 1 : 0) << 4)\n            + ((safeJoint ? 1 : 0) << 5) + ((noGapMore ? 1 : 0) << 6)\n            + ((noGapPrevious ? 1 : 0) << 7);\n\n        if (quality < 0)\n            quality = 0;\n\n        // stereo mode field (Intensity stereo is not implemented)\n        switch (gfp.mode) {\n            case MONO:\n                stereoMode = 0;\n                break;\n            case STEREO:\n                stereoMode = 1;\n                break;\n            case DUAL_CHANNEL:\n                stereoMode = 2;\n                break;\n            case JOINT_STEREO:\n                if (gfp.force_ms)\n                    stereoMode = 4;\n                else\n                    stereoMode = 3;\n                break;\n            case NOT_SET:\n            //$FALL-THROUGH$\n            default:\n                stereoMode = 7;\n                break;\n        }\n\n        if (gfp.in_samplerate <= 32000)\n            sourceFreq = 0x00;\n        else if (gfp.in_samplerate == 48000)\n            sourceFreq = 0x02;\n        else if (gfp.in_samplerate > 48000)\n            sourceFreq = 0x03;\n        else {\n            // default is 44100Hz\n            sourceFreq = 0x01;\n        }\n\n        // Check if the user overrided the default LAME behavior with some\n        // nasty options\n        if (gfp.short_blocks == ShortBlock.short_block_forced\n            || gfp.short_blocks == ShortBlock.short_block_dispensed\n            || ((gfp.lowpassfreq == -1) && (gfp.highpassfreq == -1)) || /* \"-k\" */\n            (gfp.scale_left < gfp.scale_right)\n            || (gfp.scale_left > gfp.scale_right)\n            || (gfp.disable_reservoir && gfp.brate < 320) || gfp.noATH\n            || gfp.ATHonly || (athType == 0) || gfp.in_samplerate <= 32000)\n            nonOptimal = 1;\n\n        misc = noiseShaping + (stereoMode << 2) + (nonOptimal << 5)\n            + (sourceFreq << 6);\n\n        musicCRC = gfc.nMusicCRC;\n\n        // Write all this information into the stream\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, quality);\n        bytesWritten += 4;\n\n        for (var j = 0; j < 9; j++) {\n            streamBuffer[streamBufferPos + bytesWritten + j] = 0xff & version .charAt(j);\n        }\n        bytesWritten += 9;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & revMethod;\n        bytesWritten++;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & lowpass;\n        bytesWritten++;\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten,\n            peakSignalAmplitude);\n        bytesWritten += 4;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten,\n            radioReplayGain);\n        bytesWritten += 2;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten,\n            audiophileReplayGain);\n        bytesWritten += 2;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & flags;\n        bytesWritten++;\n\n        if (abrBitrate >= 255)\n            streamBuffer[streamBufferPos + bytesWritten] = 0xFF;\n        else\n            streamBuffer[streamBufferPos + bytesWritten] = 0xff & abrBitrate;\n        bytesWritten++;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & (encDelay >> 4);\n        streamBuffer[streamBufferPos + bytesWritten + 1] = 0xff & ((encDelay << 4) + (encPadding >> 8));\n        streamBuffer[streamBufferPos + bytesWritten + 2] = 0xff & encPadding;\n\n        bytesWritten += 3;\n\n        streamBuffer[streamBufferPos + bytesWritten] = 0xff & misc;\n        bytesWritten++;\n\n        // unused in rev0\n        streamBuffer[streamBufferPos + bytesWritten++] = 0;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, gfp.preset);\n        bytesWritten += 2;\n\n        createInteger(streamBuffer, streamBufferPos + bytesWritten, musicLength);\n        bytesWritten += 4;\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, musicCRC);\n        bytesWritten += 2;\n\n        // Calculate tag CRC.... must be done here, since it includes previous\n        // information\n\n        for (var i = 0; i < bytesWritten; i++)\n            crc = crcUpdateLookup(streamBuffer[streamBufferPos + i], crc);\n\n        createShort(streamBuffer, streamBufferPos + bytesWritten, crc);\n        bytesWritten += 2;\n\n        return bytesWritten;\n    }\n\n    function skipId3v2(fpStream) {\n        // seek to the beginning of the stream\n        fpStream.seek(0);\n        // read 10 bytes in case there's an ID3 version 2 header here\n        var id3v2Header = new_byte(10);\n        fpStream.readFully(id3v2Header);\n        /* does the stream begin with the ID3 version 2 file identifier? */\n        var id3v2TagSize;\n        if (!new String(id3v2Header, \"ISO-8859-1\").startsWith(\"ID3\")) {\n            /*\n             * the tag size (minus the 10-byte header) is encoded into four\n             * bytes where the most significant bit is clear in each byte\n             */\n            id3v2TagSize = (((id3v2Header[6] & 0x7f) << 21)\n                | ((id3v2Header[7] & 0x7f) << 14)\n                | ((id3v2Header[8] & 0x7f) << 7) | (id3v2Header[9] & 0x7f))\n                + id3v2Header.length;\n        } else {\n            /* no ID3 version 2 tag in this stream */\n            id3v2TagSize = 0;\n        }\n        return id3v2TagSize;\n    }\n\n    this.getLameTagFrame = function (gfp, buffer) {\n        var gfc = gfp.internal_flags;\n\n        if (!gfp.bWriteVbrTag) {\n            return 0;\n        }\n        if (gfc.Class_ID != Lame.LAME_ID) {\n            return 0;\n        }\n        if (gfc.VBR_seek_table.pos <= 0) {\n            return 0;\n        }\n        if (buffer.length < gfc.VBR_seek_table.TotalFrameSize) {\n            return gfc.VBR_seek_table.TotalFrameSize;\n        }\n\n        Arrays.fill(buffer, 0, gfc.VBR_seek_table.TotalFrameSize, 0);\n\n        // 4 bytes frame header\n        setLameTagFrameHeader(gfp, buffer);\n\n        // Create TOC entries\n        var toc = new_byte(NUMTOCENTRIES);\n\n        if (gfp.free_format) {\n            for (var i = 1; i < NUMTOCENTRIES; ++i)\n                toc[i] = 0xff & (255 * i / 100);\n        } else {\n            xingSeekTable(gfc.VBR_seek_table, toc);\n        }\n\n        // Start writing the tag after the zero frame\n        var streamIndex = gfc.sideinfo_len;\n        /**\n         * Note: Xing header specifies that Xing data goes in the ancillary data\n         * with NO ERROR PROTECTION. If error protecton in enabled, the Xing\n         * data still starts at the same offset, and now it is in sideinfo data\n         * block, and thus will not decode correctly by non-Xing tag aware\n         * players\n         */\n        if (gfp.error_protection)\n            streamIndex -= 2;\n\n        // Put Vbr tag\n        if (gfp.VBR == VbrMode.vbr_off) {\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(0);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(1);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(2);\n            buffer[streamIndex++] = 0xff & VBRTag1.charAt(3);\n\n        } else {\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(0);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(1);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(2);\n            buffer[streamIndex++] = 0xff & VBRTag0.charAt(3);\n        }\n\n        // Put header flags\n        createInteger(buffer, streamIndex, FRAMES_FLAG + BYTES_FLAG + TOC_FLAG\n            + VBR_SCALE_FLAG);\n        streamIndex += 4;\n\n        // Put Total Number of frames\n        createInteger(buffer, streamIndex, gfc.VBR_seek_table.nVbrNumFrames);\n        streamIndex += 4;\n\n        // Put total audio stream size, including Xing/LAME Header\n        var streamSize = (gfc.VBR_seek_table.nBytesWritten + gfc.VBR_seek_table.TotalFrameSize);\n        createInteger(buffer, streamIndex, 0 | streamSize);\n        streamIndex += 4;\n\n        /* Put TOC */\n        System.arraycopy(toc, 0, buffer, streamIndex, toc.length);\n        streamIndex += toc.length;\n\n        if (gfp.error_protection) {\n            // (jo) error_protection: add crc16 information to header\n            bs.CRC_writeheader(gfc, buffer);\n        }\n\n        // work out CRC so far: initially crc = 0\n        var crc = 0x00;\n        for (var i = 0; i < streamIndex; i++)\n            crc = crcUpdateLookup(buffer[i], crc);\n        // Put LAME VBR info\n        streamIndex += putLameVBR(gfp, streamSize, buffer, streamIndex, crc);\n\n        return gfc.VBR_seek_table.TotalFrameSize;\n    }\n\n    /**\n     * Write final VBR tag to the file.\n     *\n     * @param gfp\n     *            global flags\n     * @param stream\n     *            stream to add the VBR tag to\n     * @return 0 (OK), -1 else\n     * @throws IOException\n     *             I/O error\n     */\n    this.putVbrTag = function (gfp, stream) {\n        var gfc = gfp.internal_flags;\n\n        if (gfc.VBR_seek_table.pos <= 0)\n            return -1;\n\n        // Seek to end of file\n        stream.seek(stream.length());\n\n        // Get file size, abort if file has zero length.\n        if (stream.length() == 0)\n            return -1;\n\n        // The VBR tag may NOT be located at the beginning of the stream. If an\n        // ID3 version 2 tag was added, then it must be skipped to write the VBR\n        // tag data.\n        var id3v2TagSize = skipId3v2(stream);\n\n        // Seek to the beginning of the stream\n        stream.seek(id3v2TagSize);\n\n        var buffer = new_byte(MAXFRAMESIZE);\n        var bytes = getLameTagFrame(gfp, buffer);\n        if (bytes > buffer.length) {\n            return -1;\n        }\n\n        if (bytes < 1) {\n            return 0;\n        }\n\n        // Put it all to disk again\n        stream.write(buffer, 0, bytes);\n        // success\n        return 0;\n    }\n\n}\n\nmodule.exports = VBRTag;\n","function Version() {\n\n    /**\n     * URL for the LAME website.\n     */\n    var LAME_URL = \"http://www.mp3dev.org/\";\n\n    /**\n     * Major version number.\n     */\n    var LAME_MAJOR_VERSION = 3;\n    /**\n     * Minor version number.\n     */\n    var LAME_MINOR_VERSION = 98;\n    /**\n     * Patch level.\n     */\n    var LAME_PATCH_VERSION = 4;\n\n    /**\n     * Major version number.\n     */\n    var PSY_MAJOR_VERSION = 0;\n    /**\n     * Minor version number.\n     */\n    var PSY_MINOR_VERSION = 93;\n\n    /**\n     * A string which describes the version of LAME.\n     *\n     * @return string which describes the version of LAME\n     */\n    this.getLameVersion = function () {\n        // primary to write screen reports\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The short version of the LAME version string.\n     *\n     * @return short version of the LAME version string\n     */\n    this.getLameShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        // validation\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    /**\n     * The shortest version of the LAME version string.\n     *\n     * @return shortest version of the LAME version string\n     */\n    this.getLameVeryShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        return (\"LAME\" + LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \"r\");\n    }\n\n    /**\n     * String which describes the version of GPSYCHO\n     *\n     * @return string which describes the version of GPSYCHO\n     */\n    this.getPsyVersion = function () {\n        return (PSY_MAJOR_VERSION + \".\" + PSY_MINOR_VERSION);\n    }\n\n    /**\n     * String which is a URL for the LAME website.\n     *\n     * @return string which is a URL for the LAME website\n     */\n    this.getLameUrl = function () {\n        return LAME_URL;\n    }\n\n    /**\n     * Quite useless for a java version, however we are compatible ;-)\n     *\n     * @return \"32bits\"\n     */\n    this.getLameOsBitness = function () {\n        return \"32bits\";\n    }\n\n}\n\nmodule.exports = Version;\n","function new_byte(count) {\n    return new Int8Array(count);\n}\n\nfunction new_short(count) {\n    return new Int16Array(count);\n}\n\nfunction new_int(count) {\n    return new Int32Array(count);\n}\n\nfunction new_float(count) {\n    return new Float32Array(count);\n}\n\nfunction new_double(count) {\n    return new Float64Array(count);\n}\n\nfunction new_float_n(args) {\n    if (args.length == 1) {\n        return new_float(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_float_n(args));\n    }\n    return A;\n}\nfunction new_int_n(args) {\n    if (args.length == 1) {\n        return new_int(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_int_n(args));\n    }\n    return A;\n}\n\nfunction new_short_n(args) {\n    if (args.length == 1) {\n        return new_short(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_short_n(args));\n    }\n    return A;\n}\n\nfunction new_array_n(args) {\n    if (args.length == 1) {\n        return new Array(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_array_n(args));\n    }\n    return A;\n}\n\n\nvar Arrays = {};\n\nArrays.fill = function (a, fromIndex, toIndex, val) {\n    if (arguments.length == 2) {\n        for (var i = 0; i < a.length; i++) {\n            a[i] = arguments[1];\n        }\n    } else {\n        for (var i = fromIndex; i < toIndex; i++) {\n            a[i] = val;\n        }\n    }\n};\n\nvar System = {};\n\nSystem.arraycopy = function (src, srcPos, dest, destPos, length) {\n    var srcEnd = srcPos + length;\n    while (srcPos < srcEnd)\n        dest[destPos++] = src[srcPos++];\n};\n\nSystem.out = {};\nSystem.out.println = function (message) {\n    console.log(message);\n}\n\nSystem.out.printf = function () {\n    console.log.apply(console, arguments);\n}\n\n\nvar Util = {};\nUtil.SQRT2 = 1.41421356237309504880;\nUtil.FAST_LOG10 = function (x) {\n    return Math.log10(x);\n};\n\nUtil.FAST_LOG10_X = function (x, y) {\n    return Math.log10(x) * y;\n};\n\nfunction ShortBlock(ordinal) {\n    this.ordinal = ordinal;\n}\n/**\n * LAME may use them, even different block types for L/R.\n */\nShortBlock.short_block_allowed = new ShortBlock(0);\n/**\n * LAME may use them, but always same block types in L/R.\n */\nShortBlock.short_block_coupled = new ShortBlock(1);\n/**\n * LAME will not use short blocks, long blocks only.\n */\nShortBlock.short_block_dispensed = new ShortBlock(2);\n/**\n * LAME will not use long blocks, short blocks only.\n */\nShortBlock.short_block_forced = new ShortBlock(3);\n\nvar Float = {};\nFloat.MAX_VALUE = 3.4028235e+38;\n\nfunction VbrMode(ordinal) {\n    this.ordinal = ordinal;\n}\nVbrMode.vbr_off = new VbrMode(0);\nVbrMode.vbr_mt = new VbrMode(1);\nVbrMode.vbr_rh = new VbrMode(2);\nVbrMode.vbr_abr = new VbrMode(3);\nVbrMode.vbr_mtrh = new VbrMode(4);\nVbrMode.vbr_default = VbrMode.vbr_mtrh;\n\nvar assert = function (x) {\n    //console.assert(x);\n};\n\nmodule.exports = {\n    \"System\": System,\n    \"VbrMode\": VbrMode,\n    \"Float\": Float,\n    \"ShortBlock\": ShortBlock,\n    \"Util\": Util,\n    \"Arrays\": Arrays,\n    \"new_array_n\": new_array_n,\n    \"new_byte\": new_byte,\n    \"new_double\": new_double,\n    \"new_float\": new_float,\n    \"new_float_n\": new_float_n,\n    \"new_int\": new_int,\n    \"new_int_n\": new_int_n,\n    \"new_short\": new_short,\n    \"new_short_n\": new_short_n,\n    \"assert\": assert\n};\n","var common = require('./common.js');\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Lame = require('./Lame.js');\nvar Presets = require('./Presets.js');\nvar GainAnalysis = require('./GainAnalysis.js');\nvar QuantizePVT = require('./QuantizePVT.js');\nvar Quantize = require('./Quantize.js');\nvar Takehiro = require('./Takehiro.js');\nvar Reservoir = require('./Reservoir.js');\nvar MPEGMode = require('./MPEGMode.js');\nvar BitStream = require('./BitStream.js');\nvar Encoder = require('./Encoder.js');\nvar Version = require('./Version.js');\nvar VBRTag = require('./VBRTag.js');\n\nfunction GetAudio() {\n    var parse;\n    var mpg;\n\n    this.setModules = function (parse2, mpg2) {\n        parse = parse2;\n        mpg = mpg2;\n    }\n}\n\n\nfunction Parse() {\n    var ver;\n    var id3;\n    var pre;\n\n    this.setModules = function (ver2, id32, pre2) {\n        ver = ver2;\n        id3 = id32;\n        pre = pre2;\n    }\n}\n\nfunction MPGLib() {\n}\n\nfunction ID3Tag() {\n    var bits;\n    var ver;\n\n    this.setModules = function (_bits, _ver) {\n        bits = _bits;\n        ver = _ver;\n    }\n}\n\nfunction Mp3Encoder(channels, samplerate, kbps) {\n    if (arguments.length != 3) {\n        console.error('WARN: Mp3Encoder(channels, samplerate, kbps) not specified');\n        channels = 1;\n        samplerate = 44100;\n        kbps = 128;\n    }\n    var lame = new Lame();\n    var gaud = new GetAudio();\n    var ga = new GainAnalysis();\n    var bs = new BitStream();\n    var p = new Presets();\n    var qupvt = new QuantizePVT();\n    var qu = new Quantize();\n    var vbr = new VBRTag();\n    var ver = new Version();\n    var id3 = new ID3Tag();\n    var rv = new Reservoir();\n    var tak = new Takehiro();\n    var parse = new Parse();\n    var mpg = new MPGLib();\n\n    lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3, mpg);\n    bs.setModules(ga, mpg, ver, vbr);\n    id3.setModules(bs, ver);\n    p.setModules(lame);\n    qu.setModules(bs, rv, qupvt, tak);\n    qupvt.setModules(tak, rv, lame.enc.psy);\n    rv.setModules(bs);\n    tak.setModules(qupvt);\n    vbr.setModules(lame, bs, ver);\n    gaud.setModules(parse, mpg);\n    parse.setModules(ver, id3, p);\n\n    var gfp = lame.lame_init();\n\n    gfp.num_channels = channels;\n    gfp.in_samplerate = samplerate;\n    gfp.brate = kbps;\n    gfp.mode = MPEGMode.STEREO;\n    gfp.quality = 3;\n    gfp.bWriteVbrTag = false;\n    gfp.disable_reservoir = true;\n    gfp.write_id3tag_automatic = false;\n\n    var retcode = lame.lame_init_params(gfp);\n    assert(0 == retcode);\n    var maxSamples = 1152;\n    var mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n    var mp3buf = new_byte(mp3buf_size);\n\n    this.encodeBuffer = function (left, right) {\n        if (channels == 1) {\n            right = left;\n        }\n        assert(left.length == right.length);\n        if (left.length > maxSamples) {\n            maxSamples = left.length;\n            mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n            mp3buf = new_byte(mp3buf_size);\n        }\n\n        var _sz = lame.lame_encode_buffer(gfp, left, right, left.length, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n\n    this.flush = function () {\n        var _sz = lame.lame_encode_flush(gfp, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n}\n\nfunction WavHeader() {\n    this.dataOffset = 0;\n    this.dataLen = 0;\n    this.channels = 0;\n    this.sampleRate = 0;\n}\n\nfunction fourccToInt(fourcc) {\n    return fourcc.charCodeAt(0) << 24 | fourcc.charCodeAt(1) << 16 | fourcc.charCodeAt(2) << 8 | fourcc.charCodeAt(3);\n}\n\nWavHeader.RIFF = fourccToInt(\"RIFF\");\nWavHeader.WAVE = fourccToInt(\"WAVE\");\nWavHeader.fmt_ = fourccToInt(\"fmt \");\nWavHeader.data = fourccToInt(\"data\");\n\nWavHeader.readHeader = function (dataView) {\n    var w = new WavHeader();\n\n    var header = dataView.getUint32(0, false);\n    if (WavHeader.RIFF != header) {\n        return;\n    }\n    var fileLen = dataView.getUint32(4, true);\n    if (WavHeader.WAVE != dataView.getUint32(8, false)) {\n        return;\n    }\n    if (WavHeader.fmt_ != dataView.getUint32(12, false)) {\n        return;\n    }\n    var fmtLen = dataView.getUint32(16, true);\n    var pos = 16 + 4;\n    switch (fmtLen) {\n        case 16:\n        case 18:\n            w.channels = dataView.getUint16(pos + 2, true);\n            w.sampleRate = dataView.getUint32(pos + 4, true);\n            break;\n        default:\n            throw 'extended fmt chunk not implemented';\n    }\n    pos += fmtLen;\n    var data = WavHeader.data;\n    var len = 0;\n    while (data != header) {\n        header = dataView.getUint32(pos, false);\n        len = dataView.getUint32(pos + 4, true);\n        if (data == header) {\n            break;\n        }\n        pos += (len + 8);\n    }\n    w.dataLen = len;\n    w.dataOffset = pos + 8;\n    return w;\n};\n\nmodule.exports.Mp3Encoder = Mp3Encoder;\nmodule.exports.WavHeader = WavHeader;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <path\n      d=\"M208,208H48a16,16,0,0,1-16-16V80A16,16,0,0,1,48,64H80L96,40h64l16,24h32a16,16,0,0,1,16,16V192A16,16,0,0,1,208,208Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <circle\n      cx=\"128\"\n      cy=\"132\"\n      r=\"36\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <path\n      d=\"M208,64H176L160,40H96L80,64H48A16,16,0,0,0,32,80V192a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V80A16,16,0,0,0,208,64ZM128,168a36,36,0,1,1,36-36A36,36,0,0,1,128,168Z\"\n      opacity=\"0.2\"\n    />\n    <path\n      d=\"M208,208H48a16,16,0,0,1-16-16V80A16,16,0,0,1,48,64H80L96,40h64l16,24h32a16,16,0,0,1,16,16V192A16,16,0,0,1,208,208Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <circle\n      cx=\"128\"\n      cy=\"132\"\n      r=\"36\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M208,56H180.3L166.7,35.6A7.9,7.9,0,0,0,160,32H96a7.9,7.9,0,0,0-6.7,3.6L75.7,56H48A24.1,24.1,0,0,0,24,80V192a24.1,24.1,0,0,0,24,24H208a24.1,24.1,0,0,0,24-24V80A24.1,24.1,0,0,0,208,56Zm-44,76a36,36,0,1,1-36-36A36,36,0,0,1,164,132Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <path\n      d=\"M208,208H48a16,16,0,0,1-16-16V80A16,16,0,0,1,48,64H80L96,40h64l16,24h32a16,16,0,0,1,16,16V192A16,16,0,0,1,208,208Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <circle\n      cx=\"128\"\n      cy=\"132\"\n      r=\"36\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <path\n      d=\"M208,208H48a16,16,0,0,1-16-16V80A16,16,0,0,1,48,64H80L96,40h64l16,24h32a16,16,0,0,1,16,16V192A16,16,0,0,1,208,208Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <circle\n      cx=\"128\"\n      cy=\"132\"\n      r=\"36\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <path\n      d=\"M208,208H48a16,16,0,0,1-16-16V80A16,16,0,0,1,48,64H80L96,40h64l16,24h32a16,16,0,0,1,16,16V192A16,16,0,0,1,208,208Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <circle\n      cx=\"128\"\n      cy=\"132\"\n      r=\"36\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Camera = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nCamera.displayName = \"Camera\";\n\nexport default Camera;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <path\n      d=\"M200,224H56a8,8,0,0,1-8-8V40a8,8,0,0,1,8-8h96l56,56V216A8,8,0,0,1,200,224Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <polyline\n      points=\"148 32 148 92 208 92\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <polygon points=\"152 32 152 88 208 88 152 32\" opacity=\"0.2\" />\n    <path\n      d=\"M200,224H56a8,8,0,0,1-8-8V40a8,8,0,0,1,8-8h96l56,56V216A8,8,0,0,1,200,224Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"152 32 152 88 208 88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M213.7,82.3l-56-56A8.1,8.1,0,0,0,152,24H56A16,16,0,0,0,40,40V216a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V88A8.1,8.1,0,0,0,213.7,82.3ZM152,88V44l44,44Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <path\n      d=\"M200,224H56a8,8,0,0,1-8-8V40a8,8,0,0,1,8-8h96l56,56V216A8,8,0,0,1,200,224Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <polyline\n      points=\"152 32 152 88 208 88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <path\n      d=\"M200,224H56a8,8,0,0,1-8-8V40a8,8,0,0,1,8-8h96l56,56V216A8,8,0,0,1,200,224Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <polyline\n      points=\"152 32 152 88 208 88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <path\n      d=\"M200,224H56a8,8,0,0,1-8-8V40a8,8,0,0,1,8-8h96l56,56V216A8,8,0,0,1,200,224Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"152 32 152 88 208 88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst File = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nFile.displayName = \"File\";\n\nexport default File;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <path\n      d=\"M136,216H88a48,48,0,0,1-48-48V88A48,48,0,0,1,88,40h80a48,48,0,0,1,48,48v48C208,160,160,208,136,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <path\n      d=\"M136,216V184a48,48,0,0,1,48-48h32\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <path\n      d=\"M136,216V184a48,48,0,0,1,48-48h32C208,160,160,208,136,216Z\"\n      opacity=\"0.2\"\n    />\n    <path\n      d=\"M136,216H88a48,48,0,0,1-48-48V88A48,48,0,0,1,88,40h80a48,48,0,0,1,48,48v48C208,160,160,208,136,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M136,216V184a48,48,0,0,1,48-48h32\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M168,32H88A56,56,0,0,0,32,88v80a56,56,0,0,0,56,56h48a6.9,6.9,0,0,0,2.5-.4c26.3-8.8,76.3-58.8,85.1-85.1a6.9,6.9,0,0,0,.4-2.5V88A56,56,0,0,0,168,32ZM136,207.4V176a40,40,0,0,1,40-40h31.4C198.2,157.6,157.6,198.2,136,207.4Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <path\n      d=\"M136,216H88a48,48,0,0,1-48-48V88A48,48,0,0,1,88,40h80a48,48,0,0,1,48,48v48C208,160,160,208,136,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <path\n      d=\"M136,216V184a48,48,0,0,1,48-48h32\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <path\n      d=\"M136,216H88a48,48,0,0,1-48-48V88A48,48,0,0,1,88,40h80a48,48,0,0,1,48,48v48C208,160,160,208,136,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <path\n      d=\"M136,216V184a48,48,0,0,1,48-48h32\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <path\n      d=\"M136,216H88a48,48,0,0,1-48-48V88A48,48,0,0,1,88,40h80a48,48,0,0,1,48,48v48C208,160,160,208,136,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M136,216V184a48,48,0,0,1,48-48h32\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Sticker = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nSticker.displayName = \"Sticker\";\n\nexport default Sticker;\n","/*\nmp3编码器用到的lamejs编码引擎，一般都用MP3格式，浏览器支持广泛，此引擎测试的也比较多，稳定\nhttps://github.com/xiangyuecn/Recorder\n\n由此源码改动而来 （2023-09-25 大幅精简代码，移除了大量从未调用的函数、条件分支）（2019-11-03 精简代码）\nhttps://github.com/zhuker/lamejs/blob/bfb7f6c6d7877e0fe1ad9e72697a871676119a0e/lame.all.js\n*/\n(function(factory){\n\tvar browser=typeof window==\"object\" && !!window.document;\n\tvar win=browser?window:Object; //非浏览器环境，Recorder挂载在Object下面\n\tvar rec=win.Recorder;\n\tfactory(rec);\n}(function(Recorder){ //需要在Worker中运行，不能使用Recorder里的方法，包括$T\n\"use strict\";\n\nfunction lamejs() {\nvar Math_log10=function(s){//坚决不能用也不要报语言问题的错误\n\treturn Math.log(s)/Math.log(10);\n};\nvar abort=function(what){\n\tthrow new Error(\"abort(\" + what + \")\")\n};\n\nfunction new_byte(count) {\n    return new Int8Array(count);\n}\n\nfunction new_short(count) {\n    return new Int16Array(count);\n}\n\nfunction new_int(count) {\n    return new Int32Array(count);\n}\n\nfunction new_float(count) {\n    return new Float32Array(count);\n}\n\nfunction new_double(count) {\n    return new Float64Array(count);\n}\n\nfunction new_float_n(args) {\n    if (args.length == 1) {\n        return new_float(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_float_n(args));\n    }\n    return A;\n}\nfunction new_int_n(args) {\n    if (args.length == 1) {\n        return new_int(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_int_n(args));\n    }\n    return A;\n}\n\nfunction new_short_n(args) {\n    if (args.length == 1) {\n        return new_short(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_short_n(args));\n    }\n    return A;\n}\n\nfunction new_array_n(args) {\n    if (args.length == 1) {\n        return new Array(args[0]);\n    }\n    var sz = args[0];\n    args = args.slice(1);\n    var A = [];\n    for (var i = 0; i < sz; i++) {\n        A.push(new_array_n(args));\n    }\n    return A;\n}\n\n\nvar Arrays = {};\n\nArrays.fill = function (a, fromIndex, toIndex, val) {\n    if (arguments.length == 2) {\n        for (var i = 0; i < a.length; i++) {\n            a[i] = arguments[1];\n        }\n    } else {\n        for (var i = fromIndex; i < toIndex; i++) {\n            a[i] = val;\n        }\n    }\n};\n\nvar System = {};\n\nSystem.arraycopy = function (src, srcPos, dest, destPos, length) {\n    var srcEnd = srcPos + length;\n    while (srcPos < srcEnd)\n        dest[destPos++] = src[srcPos++];\n};\n\n\nvar Util = {};\nUtil.SQRT2 = 1.41421356237309504880;\nUtil.FAST_LOG10 = function (x) {\n    return Math_log10(x);\n};\n\nUtil.FAST_LOG10_X = function (x, y) {\n    return Math_log10(x) * y;\n};\n\nfunction ShortBlock(ordinal) {\n    this.ordinal = ordinal;\n}\n/**\n * LAME may use them, even different block types for L/R.\n */\nShortBlock.short_block_allowed = new ShortBlock(0);\n/**\n * LAME may use them, but always same block types in L/R.\n */\nShortBlock.short_block_coupled = new ShortBlock(1);\n/**\n * LAME will not use short blocks, long blocks only.\n */\nShortBlock.short_block_dispensed = new ShortBlock(2);\n/**\n * LAME will not use long blocks, short blocks only.\n */\nShortBlock.short_block_forced = new ShortBlock(3);\n\nvar Float = {};\nFloat.MAX_VALUE = 3.4028235e+38;\n\nfunction VbrMode(ordinal) {\n    this.ordinal = ordinal;\n}\nVbrMode.vbr_off = new VbrMode(0);\nVbrMode.vbr_mt = new VbrMode(1);\nVbrMode.vbr_rh = new VbrMode(2);\nVbrMode.vbr_abr = new VbrMode(3);\nVbrMode.vbr_mtrh = new VbrMode(4);\nVbrMode.vbr_default = VbrMode.vbr_mtrh;\n\nvar assert = function (x) {\n    abort(x);\n};\n\nvar module_exports = {\n    \"System\": System,\n    \"VbrMode\": VbrMode,\n    \"Float\": Float,\n    \"ShortBlock\": ShortBlock,\n    \"Util\": Util,\n    \"Arrays\": Arrays,\n    \"new_array_n\": new_array_n,\n    \"new_byte\": new_byte,\n    \"new_double\": new_double,\n    \"new_float\": new_float,\n    \"new_float_n\": new_float_n,\n    \"new_int\": new_int,\n    \"new_int_n\": new_int_n,\n    \"new_short\": new_short,\n    \"new_short_n\": new_short_n,\n    \"assert\": assert\n};\n//package mp3;\n\n/* MPEG modes */\nfunction MPEGMode(ordinal) {\n    var _ordinal = ordinal;\n    this.ordinal = function () {\n        return _ordinal;\n    }\n}\n\nMPEGMode.STEREO = new MPEGMode(0);\nMPEGMode.JOINT_STEREO = new MPEGMode(1);\nMPEGMode.DUAL_CHANNEL = new MPEGMode(2);\nMPEGMode.MONO = new MPEGMode(3);\nMPEGMode.NOT_SET = new MPEGMode(4);\n\nfunction Version() {\n\n    /**\n     * URL for the LAME website.\n     */\n    //var LAME_URL = \"http://www.mp3dev.org/\";\n\n    /**\n     * Major version number.\n     */\n    var LAME_MAJOR_VERSION = 3;\n    /**\n     * Minor version number.\n     */\n    var LAME_MINOR_VERSION = 98;\n    /**\n     * Patch level.\n     */\n    var LAME_PATCH_VERSION = 4;\n\n    //fix cc 精简\n\n    /**\n     * The short version of the LAME version string.\n     *\n     * @return short version of the LAME version string\n     */\n    this.getLameShortVersion = function () {\n        // Adding date and time to version string makes it harder for output\n        // validation\n        return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\n    }\n\n    //fix cc 精简\n\n}\n\n/*\n *\tMP3 huffman table selecting and bit counting\n *\n *\tCopyright (c) 1999-2005 Takehiro TOMINAGA\n *\tCopyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Takehiro.java,v 1.26 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\n\nfunction Takehiro() {\n\n    var qupvt = null;\n    this.qupvt = null;\n\n    this.setModules = function (_qupvt) {\n        this.qupvt = _qupvt;\n        qupvt = _qupvt;\n    }\n\n    function Bits(b) {\n        this.bits = 0 | b;\n    }\n\n    var subdv_table = [[0, 0], /* 0 bands */\n        [0, 0], /* 1 bands */\n        [0, 0], /* 2 bands */\n        [0, 0], /* 3 bands */\n        [0, 0], /* 4 bands */\n        [0, 1], /* 5 bands */\n        [1, 1], /* 6 bands */\n        [1, 1], /* 7 bands */\n        [1, 2], /* 8 bands */\n        [2, 2], /* 9 bands */\n        [2, 3], /* 10 bands */\n        [2, 3], /* 11 bands */\n        [3, 4], /* 12 bands */\n        [3, 4], /* 13 bands */\n        [3, 4], /* 14 bands */\n        [4, 5], /* 15 bands */\n        [4, 5], /* 16 bands */\n        [4, 6], /* 17 bands */\n        [5, 6], /* 18 bands */\n        [5, 6], /* 19 bands */\n        [5, 7], /* 20 bands */\n        [6, 7], /* 21 bands */\n        [6, 7], /* 22 bands */\n    ];\n\n\n    /**\n     * nonlinear quantization of xr More accurate formula than the ISO formula.\n     * Takes into account the fact that we are quantizing xr . ix, but we want\n     * ix^4/3 to be as close as possible to x^4/3. (taking the nearest int would\n     * mean ix is as close as possible to xr, which is different.)\n     *\n     * From Segher Boessenkool <segher@eastsite.nl> 11/1999\n     *\n     * 09/2000: ASM code removed in favor of IEEE754 hack by Takehiro Tominaga.\n     * If you need the ASM code, check CVS circa Aug 2000.\n     *\n     * 01/2004: Optimizations by Gabriel Bouvigne\n     */\n    function quantize_lines_xrpow_01(l, istep, xr, xrPos, ix, ixPos) {\n        var compareval0 = (1.0 - 0.4054) / istep;\n\n        l = l >> 1;\n        while ((l--) != 0) {\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n            ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\n        }\n    }\n\n    /**\n     * XRPOW_FTOI is a macro to convert floats to ints.<BR>\n     * if XRPOW_FTOI(x) = nearest_int(x), then QUANTFAC(x)=adj43asm[x]<BR>\n     * ROUNDFAC= -0.0946<BR>\n     *\n     * if XRPOW_FTOI(x) = floor(x), then QUANTFAC(x)=asj43[x]<BR>\n     * ROUNDFAC=0.4054<BR>\n     *\n     * Note: using floor() or 0| is extremely slow. On machines where the\n     * TAKEHIRO_IEEE754_HACK code above does not work, it is worthwile to write\n     * some ASM for XRPOW_FTOI().\n     */\n    function quantize_lines_xrpow(l, istep, xr, xrPos, ix, ixPos) {\n\n        l = l >> 1;\n        var remaining = l % 2;\n        l = l >> 1;\n        while (l-- != 0) {\n            var x0, x1, x2, x3;\n            var rx0, rx1, rx2, rx3;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            x2 = xr[xrPos++] * istep;\n            rx1 = 0 | x1;\n            x3 = xr[xrPos++] * istep;\n            rx2 = 0 | x2;\n            x0 += qupvt.adj43[rx0];\n            rx3 = 0 | x3;\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            x2 += qupvt.adj43[rx2];\n            ix[ixPos++] = 0 | x1;\n            x3 += qupvt.adj43[rx3];\n            ix[ixPos++] = 0 | x2;\n            ix[ixPos++] = 0 | x3;\n        }\n        if (remaining != 0) {\n            var x0, x1;\n            var rx0, rx1;\n\n            x0 = xr[xrPos++] * istep;\n            x1 = xr[xrPos++] * istep;\n            rx0 = 0 | x0;\n            rx1 = 0 | x1;\n            x0 += qupvt.adj43[rx0];\n            x1 += qupvt.adj43[rx1];\n            ix[ixPos++] = 0 | x0;\n            ix[ixPos++] = 0 | x1;\n        }\n    }\n\n    /**\n     * Quantization function This function will select which lines to quantize\n     * and call the proper quantization function\n     */\n    function quantize_xrpow(xp, pi, istep, codInfo, prevNoise) {\n        /* quantize on xr^(3/4) instead of xr */\n        var sfb;\n        var sfbmax;\n        var j = 0;\n        var prev_data_use;\n        var accumulate = 0;\n        var accumulate01 = 0;\n        var xpPos = 0;\n        var iData = pi;\n        var iDataPos = 0;\n        var acc_iData = iData;\n        var acc_iDataPos = 0;\n        var acc_xp = xp;\n        var acc_xpPos = 0;\n\n        /*\n         * Reusing previously computed data does not seems to work if global\n         * gain is changed. Finding why it behaves this way would allow to use a\n         * cache of previously computed values (let's 10 cached values per sfb)\n         * that would probably provide a noticeable speedup\n         */\n        prev_data_use = (prevNoise != null && (codInfo.global_gain == prevNoise.global_gain));\n\n        if (codInfo.block_type == Encoder.SHORT_TYPE)\n            sfbmax = 38;\n        else\n            sfbmax = 21;\n\n        for (sfb = 0; sfb <= sfbmax; sfb++) {\n            var step = -1;\n\n            if (prev_data_use || codInfo.block_type == Encoder.NORM_TYPE) {\n                step = codInfo.global_gain\n                    - ((codInfo.scalefac[sfb] + (codInfo.preflag != 0 ? qupvt.pretab[sfb]\n                        : 0)) << (codInfo.scalefac_scale + 1))\n                    - codInfo.subblock_gain[codInfo.window[sfb]] * 8;\n            }\n            if (prev_data_use && (prevNoise.step[sfb] == step)) {\n                /*\n                 * do not recompute this part, but compute accumulated lines\n                 */\n                if (accumulate != 0) {\n                    quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                        acc_iData, acc_iDataPos);\n                    accumulate = 0;\n                }\n                if (accumulate01 != 0) {\n                    abort();//fix cc 精简\n                }\n            } else { /* should compute this part */\n                var l = codInfo.width[sfb];\n\n                if ((j + codInfo.width[sfb]) > codInfo.max_nonzero_coeff) {\n                    /* do not compute upper zero part */\n                    var usefullsize;\n                    usefullsize = codInfo.max_nonzero_coeff - j + 1;\n                    Arrays.fill(pi, codInfo.max_nonzero_coeff, 576, 0);\n                    l = usefullsize;\n\n                    if (l < 0) {\n                        l = 0;\n                    }\n\n                    /* no need to compute higher sfb values */\n                    sfb = sfbmax + 1;\n                }\n\n                /* accumulate lines to quantize */\n                if (0 == accumulate && 0 == accumulate01) {\n                    acc_iData = iData;\n                    acc_iDataPos = iDataPos;\n                    acc_xp = xp;\n                    acc_xpPos = xpPos;\n                }\n                if (prevNoise != null && prevNoise.sfb_count1 > 0\n                    && sfb >= prevNoise.sfb_count1\n                    && prevNoise.step[sfb] > 0\n                    && step >= prevNoise.step[sfb]) {\n\n                    if (accumulate != 0) {\n                        quantize_lines_xrpow(accumulate, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate01 += l;\n                } else {\n                    if (accumulate01 != 0) {\n                        quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\n                            acc_xpPos, acc_iData, acc_iDataPos);\n                        accumulate01 = 0;\n                        acc_iData = iData;\n                        acc_iDataPos = iDataPos;\n                        acc_xp = xp;\n                        acc_xpPos = xpPos;\n                    }\n                    accumulate += l;\n                }\n\n                if (l <= 0) {\n                    /*\n                     * rh: 20040215 may happen due to \"prev_data_use\"\n                     * optimization\n                     */\n                    if (accumulate01 != 0) {\n                        abort();//fix cc 精简\n                    }\n                    if (accumulate != 0) {\n                        abort();//fix cc 精简\n                    }\n\n                    break;\n                    /* ends for-loop */\n                }\n            }\n            if (sfb <= sfbmax) {\n                iDataPos += codInfo.width[sfb];\n                xpPos += codInfo.width[sfb];\n                j += codInfo.width[sfb];\n            }\n        }\n        if (accumulate != 0) { /* last data part */\n            quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\n                acc_iData, acc_iDataPos);\n            accumulate = 0;\n        }\n        if (accumulate01 != 0) { /* last data part */\n            abort();//fix cc 精简\n        }\n\n    }\n\n    /**\n     * ix_max\n     */\n    function ix_max(ix, ixPos, endPos) {\n        var max1 = 0, max2 = 0;\n\n        do {\n            var x1 = ix[ixPos++];\n            var x2 = ix[ixPos++];\n            if (max1 < x1)\n                max1 = x1;\n\n            if (max2 < x2)\n                max2 = x2;\n        } while (ixPos < endPos);\n        if (max1 < max2)\n            max1 = max2;\n        return max1;\n    }\n\n    function count_bit_ESC(ix, ixPos, end, t1, t2, s) {\n        /* ESC-table is used */\n        var linbits = Tables.ht[t1].xlen * 65536 + Tables.ht[t2].xlen;\n        var sum = 0, sum2;\n\n        do {\n            var x = ix[ixPos++];\n            var y = ix[ixPos++];\n\n            if (x != 0) {\n                if (x > 14) {\n                    x = 15;\n                    sum += linbits;\n                }\n                x *= 16;\n            }\n\n            if (y != 0) {\n                if (y > 14) {\n                    y = 15;\n                    sum += linbits;\n                }\n                x += y;\n            }\n\n            sum += Tables.largetbl[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1 = t2;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC(ix, ixPos, end, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var hlen1 = Tables.ht[1].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * 2 + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n        } while (ixPos < end);\n\n        s.bits += sum1;\n        return 1;\n    }\n\n    function count_bit_noESC_from2(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum = 0, sum2;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen;\n        if (t1 == 2)\n            hlen = Tables.table23;\n        else\n            hlen = Tables.table56;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum += hlen[x];\n        } while (ixPos < end);\n\n        sum2 = sum & 0xffff;\n        sum >>= 16;\n\n        if (sum > sum2) {\n            sum = sum2;\n            t1++;\n        }\n\n        s.bits += sum;\n        return t1;\n    }\n\n    function count_bit_noESC_from3(ix, ixPos, end, t1, s) {\n        /* No ESC-words */\n        var sum1 = 0;\n        var sum2 = 0;\n        var sum3 = 0;\n        var xlen = Tables.ht[t1].xlen;\n        var hlen1 = Tables.ht[t1].hlen;\n        var hlen2 = Tables.ht[t1 + 1].hlen;\n        var hlen3 = Tables.ht[t1 + 2].hlen;\n\n        do {\n            var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\n            ixPos += 2;\n            sum1 += hlen1[x];\n            sum2 += hlen2[x];\n            sum3 += hlen3[x];\n        } while (ixPos < end);\n        var t = t1;\n        if (sum1 > sum2) {\n            sum1 = sum2;\n            t++;\n        }\n        if (sum1 > sum3) {\n            sum1 = sum3;\n            t = t1 + 2;\n        }\n        s.bits += sum1;\n\n        return t;\n    }\n\n    /*************************************************************************/\n    /* choose table */\n    /*************************************************************************/\n\n    var huf_tbl_noESC = [1, 2, 5, 7, 7, 10, 10, 13, 13,\n        13, 13, 13, 13, 13, 13];\n\n    /**\n     * Choose the Huffman table that will encode ix[begin..end] with the fewest\n     * bits.\n     *\n     * Note: This code contains knowledge about the sizes and characteristics of\n     * the Huffman tables as defined in the IS (Table B.7), and will not work\n     * with any arbitrary tables.\n     */\n    function choose_table(ix, ixPos, endPos, s) {\n        var max = ix_max(ix, ixPos, endPos);\n\n        switch (max) {\n            case 0:\n                return max;\n\n            case 1:\n                return count_bit_noESC(ix, ixPos, endPos, s);\n\n            case 2:\n            case 3:\n                return count_bit_noESC_from2(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                return count_bit_noESC_from3(ix, ixPos, endPos,\n                    huf_tbl_noESC[max - 1], s);\n\n            default:\n                /* try tables with linbits */\n                if (max > QuantizePVT.IXMAX_VAL) {\n                    abort();//fix cc 精简\n                }\n                max -= 15;\n                var choice2;\n                for (choice2 = 24; choice2 < 32; choice2++) {\n                    if (Tables.ht[choice2].linmax >= max) {\n                        break;\n                    }\n                }\n                var choice;\n                for (choice = choice2 - 8; choice < 24; choice++) {\n                    if (Tables.ht[choice].linmax >= max) {\n                        break;\n                    }\n                }\n                return count_bit_ESC(ix, ixPos, endPos, choice, choice2, s);\n        }\n    }\n\n    /**\n     * count_bit\n     */\n    this.noquant_count_bits = function (gfc, gi, prev_noise) {\n        var ix = gi.l3_enc;\n        var i = Math.min(576, ((gi.max_nonzero_coeff + 2) >> 1) << 1);\n\n        if (prev_noise != null)\n            prev_noise.sfb_count1 = 0;\n\n        /* Determine count1 region */\n        for (; i > 1; i -= 2)\n            if ((ix[i - 1] | ix[i - 2]) != 0)\n                break;\n        gi.count1 = i;\n\n        /* Determines the number of bits to encode the quadruples. */\n        var a1 = 0;\n        var a2 = 0;\n        for (; i > 3; i -= 4) {\n            var p;\n            /* hack to check if all values <= 1 */\n            //throw \"TODO: HACK         if ((((long) ix[i - 1] | (long) ix[i - 2] | (long) ix[i - 3] | (long) ix[i - 4]) & 0xffffffffL) > 1L        \"\n            //if (true) {\n            if (((ix[i - 1] | ix[i - 2] | ix[i - 3] | ix[i - 4]) & 0x7fffffff) > 1) {\n                break;\n            }\n            p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        var bits = a1;\n        gi.count1table_select = 0;\n        if (a1 > a2) {\n            bits = a2;\n            gi.count1table_select = 1;\n        }\n\n        gi.count1bits = bits;\n        gi.big_values = i;\n        if (i == 0)\n            return bits;\n\n        if (gi.block_type == Encoder.SHORT_TYPE) {\n            a1 = 3 * gfc.scalefac_band.s[3];\n            if (a1 > gi.big_values)\n                a1 = gi.big_values;\n            a2 = gi.big_values;\n\n        } else if (gi.block_type == Encoder.NORM_TYPE) {\n            /* bv_scf has 576 entries (0..575) */\n            a1 = gi.region0_count = gfc.bv_scf[i - 2];\n            a2 = gi.region1_count = gfc.bv_scf[i - 1];\n\n            a2 = gfc.scalefac_band.l[a1 + a2 + 2];\n            a1 = gfc.scalefac_band.l[a1 + 1];\n            if (a2 < i) {\n                var bi = new Bits(bits);\n                gi.table_select[2] = choose_table(ix, a2, i, bi);\n                bits = bi.bits;\n            }\n        } else {\n            gi.region0_count = 7;\n            /* gi.region1_count = SBPSY_l - 7 - 1; */\n            gi.region1_count = Encoder.SBMAX_l - 1 - 7 - 1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            a2 = i;\n            if (a1 > a2) {\n                a1 = a2;\n            }\n        }\n\n        /* have to allow for the case when bigvalues < region0 < region1 */\n        /* (and region0, region1 are ignored) */\n        a1 = Math.min(a1, i);\n        a2 = Math.min(a2, i);\n\n\n        /* Count the number of bits necessary to code the bigvalues region. */\n        if (0 < a1) {\n            var bi = new Bits(bits);\n            gi.table_select[0] = choose_table(ix, 0, a1, bi);\n            bits = bi.bits;\n        }\n        if (a1 < a2) {\n            var bi = new Bits(bits);\n            gi.table_select[1] = choose_table(ix, a1, a2, bi);\n            bits = bi.bits;\n        }\n        if (gfc.use_best_huffman == 2) {\n            abort();//fix cc 精简\n        }\n\n        if (prev_noise != null) {\n            if (gi.block_type == Encoder.NORM_TYPE) {\n                var sfb = 0;\n                while (gfc.scalefac_band.l[sfb] < gi.big_values) {\n                    sfb++;\n                }\n                prev_noise.sfb_count1 = sfb;\n            }\n        }\n\n        return bits;\n    }\n\n    this.count_bits = function (gfc, xr, gi, prev_noise) {\n        var ix = gi.l3_enc;\n\n        /* since quantize_xrpow uses table lookup, we need to check this first: */\n        var w = (QuantizePVT.IXMAX_VAL) / qupvt.IPOW20(gi.global_gain);\n\n        if (gi.xrpow_max > w)\n            return QuantizePVT.LARGE_BITS;\n\n        quantize_xrpow(xr, ix, qupvt.IPOW20(gi.global_gain), gi, prev_noise);\n\n        if ((gfc.substep_shaping & 2) != 0) {\n            abort();//fix cc 精简\n        }\n        return this.noquant_count_bits(gfc, gi, prev_noise);\n    }\n\n    /**\n     * re-calculate the best scalefac_compress using scfsi the saved bits are\n     * kept in the bit reservoir.\n     */\n    function recalc_divide_init(gfc, cod_info, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info.big_values;\n\n        for (var r0 = 0; r0 <= 7 + 15; r0++) {\n            r01_bits[r0] = QuantizePVT.LARGE_BITS;\n        }\n\n        for (var r0 = 0; r0 < 16; r0++) {\n            var a1 = gfc.scalefac_band.l[r0 + 1];\n            if (a1 >= bigv)\n                break;\n            var r0bits = 0;\n            var bi = new Bits(r0bits);\n            var r0t = choose_table(ix, 0, a1, bi);\n            r0bits = bi.bits;\n\n            for (var r1 = 0; r1 < 8; r1++) {\n                var a2 = gfc.scalefac_band.l[r0 + r1 + 2];\n                if (a2 >= bigv)\n                    break;\n                var bits = r0bits;\n                bi = new Bits(bits);\n                var r1t = choose_table(ix, a1, a2, bi);\n                bits = bi.bits;\n                if (r01_bits[r0 + r1] > bits) {\n                    r01_bits[r0 + r1] = bits;\n                    r01_div[r0 + r1] = r0;\n                    r0_tbl[r0 + r1] = r0t;\n                    r1_tbl[r0 + r1] = r1t;\n                }\n            }\n        }\n    }\n\n    function recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\n        var bigv = cod_info2.big_values;\n\n        for (var r2 = 2; r2 < Encoder.SBMAX_l + 1; r2++) {\n            var a2 = gfc.scalefac_band.l[r2];\n            if (a2 >= bigv)\n                break;\n            var bits = r01_bits[r2 - 2] + cod_info2.count1bits;\n            if (gi.part2_3_length <= bits)\n                break;\n\n            var bi = new Bits(bits);\n            var r2t = choose_table(ix, a2, bigv, bi);\n            bits = bi.bits;\n            if (gi.part2_3_length <= bits)\n                continue;\n\n            gi.assign(cod_info2);\n            gi.part2_3_length = bits;\n            gi.region0_count = r01_div[r2 - 2];\n            gi.region1_count = r2 - 2 - r01_div[r2 - 2];\n            gi.table_select[0] = r0_tbl[r2 - 2];\n            gi.table_select[1] = r1_tbl[r2 - 2];\n            gi.table_select[2] = r2t;\n        }\n    }\n\n    this.best_huffman_divide = function (gfc, gi) {\n        var cod_info2 = new GrInfo();\n        var ix = gi.l3_enc;\n        var r01_bits = new_int(7 + 15 + 1);\n        var r01_div = new_int(7 + 15 + 1);\n        var r0_tbl = new_int(7 + 15 + 1);\n        var r1_tbl = new_int(7 + 15 + 1);\n\n        /* SHORT BLOCK stuff fails for MPEG2 */\n        if (gi.block_type == Encoder.SHORT_TYPE && gfc.mode_gr == 1)\n            return;\n\n        cod_info2.assign(gi);\n        if (gi.block_type == Encoder.NORM_TYPE) {\n            recalc_divide_init(gfc, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        }\n        var i = cod_info2.big_values;\n        if (i == 0 || (ix[i - 2] | ix[i - 1]) > 1)\n            return;\n\n        i = gi.count1 + 2;\n        if (i > 576)\n            return;\n\n        /* Determines the number of bits to encode the quadruples. */\n        cod_info2.assign(gi);\n        cod_info2.count1 = i;\n        var a1 = 0;\n        var a2 = 0;\n\n\n        for (; i > cod_info2.big_values; i -= 4) {\n            var p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2\n                + ix[i - 1];\n            a1 += Tables.t32l[p];\n            a2 += Tables.t33l[p];\n        }\n        cod_info2.big_values = i;\n\n        cod_info2.count1table_select = 0;\n        if (a1 > a2) {\n            a1 = a2;\n            cod_info2.count1table_select = 1;\n        }\n\n        cod_info2.count1bits = a1;\n\n        if (cod_info2.block_type == Encoder.NORM_TYPE)\n            recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\n                r0_tbl, r1_tbl);\n        else {\n            /* Count the number of bits necessary to code the bigvalues region. */\n            cod_info2.part2_3_length = a1;\n            a1 = gfc.scalefac_band.l[7 + 1];\n            if (a1 > i) {\n                a1 = i;\n            }\n            if (a1 > 0) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[0] = choose_table(ix, 0, a1, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (i > a1) {\n                var bi = new Bits(cod_info2.part2_3_length);\n                cod_info2.table_select[1] = choose_table(ix, a1, i, bi);\n                cod_info2.part2_3_length = bi.bits;\n            }\n            if (gi.part2_3_length > cod_info2.part2_3_length)\n                gi.assign(cod_info2);\n        }\n    }\n\n    var slen1_n = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16];\n    var slen2_n = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8];\n    var slen1_tab = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4];\n    var slen2_tab = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\n    Takehiro.slen1_tab = slen1_tab;\n    Takehiro.slen2_tab = slen2_tab;\n\n    function scfsi_calc(ch, l3_side) {\n        var sfb;\n        var gi = l3_side.tt[1][ch];\n        var g0 = l3_side.tt[0][ch];\n\n        for (var i = 0; i < Tables.scfsi_band.length - 1; i++) {\n            for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                if (g0.scalefac[sfb] != gi.scalefac[sfb]\n                    && gi.scalefac[sfb] >= 0)\n                    break;\n            }\n            if (sfb == Tables.scfsi_band[i + 1]) {\n                for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\n                    gi.scalefac[sfb] = -1;\n                }\n                l3_side.scfsi[ch][i] = 1;\n            }\n        }\n        var s1 = 0;\n        var c1 = 0;\n        for (sfb = 0; sfb < 11; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c1++;\n            if (s1 < gi.scalefac[sfb])\n                s1 = gi.scalefac[sfb];\n        }\n        var s2 = 0;\n        var c2 = 0;\n        for (; sfb < Encoder.SBPSY_l; sfb++) {\n            if (gi.scalefac[sfb] == -1)\n                continue;\n            c2++;\n            if (s2 < gi.scalefac[sfb])\n                s2 = gi.scalefac[sfb];\n        }\n\n        for (var i = 0; i < 16; i++) {\n            if (s1 < slen1_n[i] && s2 < slen2_n[i]) {\n                var c = slen1_tab[i] * c1 + slen2_tab[i] * c2;\n                if (gi.part2_length > c) {\n                    gi.part2_length = c;\n                    gi.scalefac_compress = i;\n                }\n            }\n        }\n    }\n\n    /**\n     * Find the optimal way to store the scalefactors. Only call this routine\n     * after final scalefactors have been chosen and the channel/granule will\n     * not be re-encoded.\n     */\n    this.best_scalefac_store = function (gfc, gr, ch, l3_side) {\n        /* use scalefac_scale if we can */\n        var gi = l3_side.tt[gr][ch];\n        var sfb, i, j, l;\n        var recalc = 0;\n\n        /*\n         * remove scalefacs from bands with ix=0. This idea comes from the AAC\n         * ISO docs. added mt 3/00\n         */\n        /* check if l3_enc=0 */\n        j = 0;\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            var width = gi.width[sfb];\n            j += width;\n            for (l = -width; l < 0; l++) {\n                if (gi.l3_enc[l + j] != 0)\n                    break;\n            }\n            if (l == 0)\n                gi.scalefac[sfb] = recalc = -2;\n            /* anything goes. */\n            /*\n             * only best_scalefac_store and calc_scfsi know--and only they\n             * should know--about the magic number -2.\n             */\n        }\n\n        if (0 == gi.scalefac_scale && 0 == gi.preflag) {\n            var s = 0;\n            for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                if (gi.scalefac[sfb] > 0)\n                    s |= gi.scalefac[sfb];\n\n            if (0 == (s & 1) && s != 0) {\n                for (sfb = 0; sfb < gi.sfbmax; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] >>= 1;\n\n                gi.scalefac_scale = recalc = 1;\n            }\n        }\n\n        if (0 == gi.preflag && gi.block_type != Encoder.SHORT_TYPE\n            && gfc.mode_gr == 2) {\n            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                if (gi.scalefac[sfb] < qupvt.pretab[sfb]\n                    && gi.scalefac[sfb] != -2)\n                    break;\n            if (sfb == Encoder.SBPSY_l) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (gi.scalefac[sfb] > 0)\n                        gi.scalefac[sfb] -= qupvt.pretab[sfb];\n\n                gi.preflag = recalc = 1;\n            }\n        }\n\n        for (i = 0; i < 4; i++)\n            l3_side.scfsi[ch][i] = 0;\n\n        if (gfc.mode_gr == 2 && gr == 1\n            && l3_side.tt[0][ch].block_type != Encoder.SHORT_TYPE\n            && l3_side.tt[1][ch].block_type != Encoder.SHORT_TYPE) {\n            scfsi_calc(ch, l3_side);\n            recalc = 0;\n        }\n        for (sfb = 0; sfb < gi.sfbmax; sfb++) {\n            if (gi.scalefac[sfb] == -2) {\n                gi.scalefac[sfb] = 0;\n                /* if anything goes, then 0 is a good choice */\n            }\n        }\n        if (recalc != 0) {\n            if (gfc.mode_gr == 2) {\n                this.scale_bitcount(gi);\n            } else {\n                this.scale_bitcount_lsf(gfc, gi);\n            }\n        }\n    }\n\n    //fix cc 精简\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 18*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_short = [0, 18, 36, 54, 54, 36, 54, 72,\n        54, 72, 90, 72, 90, 108, 108, 126];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 17*slen1_tab[i] + 18*slen2_tab[i]\n     */\n    var scale_mixed = [0, 18, 36, 54, 51, 35, 53, 71,\n        52, 70, 88, 69, 87, 105, 104, 122];\n\n    /**\n     * number of bits used to encode scalefacs.\n     *\n     * 11*slen1_tab[i] + 10*slen2_tab[i]\n     */\n    var scale_long = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42,\n        52, 43, 53, 63, 64, 74];\n\n    /**\n     * Also calculates the number of bits necessary to code the scalefactors.\n     */\n    this.scale_bitcount = function (cod_info) {\n        var k, sfb, max_slen1 = 0, max_slen2 = 0;\n\n        /* maximum values */\n        var tab;\n        var scalefac = cod_info.scalefac;\n\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            tab = scale_short;\n            if (cod_info.mixed_block_flag != 0)\n                tab = scale_mixed;\n        } else { /* block_type == 1,2,or 3 */\n            tab = scale_long;\n            if (0 == cod_info.preflag) {\n                for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                    if (scalefac[sfb] < qupvt.pretab[sfb])\n                        break;\n\n                if (sfb == Encoder.SBPSY_l) {\n                    cod_info.preflag = 1;\n                    for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\n                        scalefac[sfb] -= qupvt.pretab[sfb];\n                }\n            }\n        }\n\n        for (sfb = 0; sfb < cod_info.sfbdivide; sfb++)\n            if (max_slen1 < scalefac[sfb])\n                max_slen1 = scalefac[sfb];\n\n        for (; sfb < cod_info.sfbmax; sfb++)\n            if (max_slen2 < scalefac[sfb])\n                max_slen2 = scalefac[sfb];\n\n        /*\n         * from Takehiro TOMINAGA <tominaga@isoternet.org> 10/99 loop over *all*\n         * posible values of scalefac_compress to find the one which uses the\n         * smallest number of bits. ISO would stop at first valid index\n         */\n        cod_info.part2_length = QuantizePVT.LARGE_BITS;\n        for (k = 0; k < 16; k++) {\n            if (max_slen1 < slen1_n[k] && max_slen2 < slen2_n[k]\n                && cod_info.part2_length > tab[k]) {\n                cod_info.part2_length = tab[k];\n                cod_info.scalefac_compress = k;\n            }\n        }\n        return cod_info.part2_length == QuantizePVT.LARGE_BITS;\n    }\n\n    /**\n     * table of largest scalefactor values for MPEG2\n     */\n    var max_range_sfac_tab = [[15, 15, 7, 7],\n        [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0],\n        [7, 7, 7, 0], [3, 3, 0, 0]];\n\n    /**\n     * Also counts the number of bits to encode the scalefacs but for MPEG 2\n     * Lower sampling frequencies (24, 22.05 and 16 kHz.)\n     *\n     * This is reverse-engineered from section 2.4.3.2 of the MPEG2 IS,\n     * \"Audio Decoding Layer III\"\n     */\n    this.scale_bitcount_lsf = function (gfc, cod_info) {\n        var table_number, row_in_table, partition, nr_sfb, window;\n        var over;\n        var i, sfb;\n        var max_sfac = new_int(4);\n//var partition_table;\n        var scalefac = cod_info.scalefac;\n\n        /*\n         * Set partition table. Note that should try to use table one, but do\n         * not yet...\n         */\n        if (cod_info.preflag != 0)\n            table_number = 2;\n        else\n            table_number = 0;\n\n        for (i = 0; i < 4; i++)\n            max_sfac[i] = 0;\n\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            row_in_table = 1;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition] / 3;\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    for (window = 0; window < 3; window++)\n                        if (scalefac[sfb * 3 + window] > max_sfac[partition])\n                            max_sfac[partition] = scalefac[sfb * 3 + window];\n            }\n        } else {\n            row_in_table = 0;\n            var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (sfb = 0, partition = 0; partition < 4; partition++) {\n                nr_sfb = partition_table[partition];\n                for (i = 0; i < nr_sfb; i++, sfb++)\n                    if (scalefac[sfb] > max_sfac[partition])\n                        max_sfac[partition] = scalefac[sfb];\n            }\n        }\n\n        for (over = false, partition = 0; partition < 4; partition++) {\n            if (max_sfac[partition] > max_range_sfac_tab[table_number][partition])\n                over = true;\n        }\n        if (!over) {\n            var slen1, slen2, slen3, slen4;\n\n            cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\n            for (partition = 0; partition < 4; partition++)\n                cod_info.slen[partition] = log2tab[max_sfac[partition]];\n\n            /* set scalefac_compress */\n            slen1 = cod_info.slen[0];\n            slen2 = cod_info.slen[1];\n            slen3 = cod_info.slen[2];\n            slen4 = cod_info.slen[3];\n\n            switch (table_number) {\n                case 0:\n                    cod_info.scalefac_compress = (((slen1 * 5) + slen2) << 4)\n                        + (slen3 << 2) + slen4;\n                    break;\n\n                case 1:\n                    cod_info.scalefac_compress = 400 + (((slen1 * 5) + slen2) << 2)\n                        + slen3;\n                    break;\n\n                case 2:\n                    cod_info.scalefac_compress = 500 + (slen1 * 3) + slen2;\n                    break;\n\n                default:\n                    //fix cc 精简 print\n                    break;\n            }\n        }\n        if (!over) {\n            cod_info.part2_length = 0;\n            for (partition = 0; partition < 4; partition++)\n                cod_info.part2_length += cod_info.slen[partition]\n                    * cod_info.sfb_partition_table[partition];\n        }\n        return over;\n    }\n\n    /*\n     * Since no bands have been over-amplified, we can set scalefac_compress and\n     * slen[] for the formatter\n     */\n    var log2tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\n        4, 4, 4, 4];\n\n    this.huffman_init = function (gfc) {\n        for (var i = 2; i <= 576; i += 2) {\n            var scfb_anz = 0, bv_index;\n            while (gfc.scalefac_band.l[++scfb_anz] < i)\n                ;\n\n            bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            while (gfc.scalefac_band.l[bv_index + 1] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                /*\n                 * this is an indication that everything is going to be encoded\n                 * as region0: bigvalues < region0 < region1 so lets set\n                 * region0, region1 to some value larger than bigvalues\n                 */\n                bv_index = subdv_table[scfb_anz][0]; // .region0_count\n            }\n\n            gfc.bv_scf[i - 2] = bv_index;\n\n            bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            while (gfc.scalefac_band.l[bv_index + gfc.bv_scf[i - 2] + 2] > i)\n                bv_index--;\n\n            if (bv_index < 0) {\n                bv_index = subdv_table[scfb_anz][1]; // .region1_count\n            }\n\n            gfc.bv_scf[i - 1] = bv_index;\n        }\n    }\n}\n\n/*\n *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change\n *  Copyright (C) 2001 David Robinson and Glen Sawyer\n *  Improvements and optimizations added by Frank Klemm, and by Marcel Muller \n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n *  concept and filter values by David Robinson (David@Robinson.org)\n *    -- blame him if you think the idea is flawed\n *  original coding by Glen Sawyer (mp3gain@hotmail.com)\n *    -- blame him if you think this runs too slowly, or the coding is otherwise flawed\n *\n *  lots of code improvements by Frank Klemm ( http://www.uni-jena.de/~pfk/mpp/ )\n *    -- credit him for all the _good_ programming ;)\n *\n *\n *  For an explanation of the concepts and the basic algorithms involved, go to:\n *    http://www.replaygain.org/\n */\n\n/*\n *  Here's the deal. Call\n *\n *    InitGainAnalysis ( long samplefreq );\n *\n *  to initialize everything. Call\n *\n *    AnalyzeSamples ( var Float_t*  left_samples,\n *                     var Float_t*  right_samples,\n *                     size_t          num_samples,\n *                     int             num_channels );\n *\n *  as many times as you want, with as many or as few samples as you want.\n *  If mono, pass the sample buffer in through left_samples, leave\n *  right_samples NULL, and make sure num_channels = 1.\n *\n *    GetTitleGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  SINCE THE LAST TIME you called GetTitleGain() OR InitGainAnalysis().\n *\n *    GetAlbumGain()\n *\n *  will return the recommended dB level change for all samples analyzed\n *  since InitGainAnalysis() was called and finalized with GetTitleGain().\n *\n *  Pseudo-code to process an album:\n *\n *    Float_t       l_samples [4096];\n *    Float_t       r_samples [4096];\n *    size_t        num_samples;\n *    unsigned int  num_songs;\n *    unsigned int  i;\n *\n *    InitGainAnalysis ( 44100 );\n *    for ( i = 1; i <= num_songs; i++ ) {\n *        while ( ( num_samples = getSongSamples ( song[i], left_samples, right_samples ) ) > 0 )\n *            AnalyzeSamples ( left_samples, right_samples, num_samples, 2 );\n *        fprintf (\"Recommended dB change for song %2d: %+6.2 dB\\n\", i, GetTitleGain() );\n *    }\n *    fprintf (\"Recommended dB change for whole album: %+6.2 dB\\n\", GetAlbumGain() );\n */\n\n/*\n *  So here's the main source of potential code confusion:\n *\n *  The filters applied to the incoming samples are IIR filters,\n *  meaning they rely on up to <filter order> number of previous samples\n *  AND up to <filter order> number of previous filtered samples.\n *\n *  I set up the AnalyzeSamples routine to minimize memory usage and interface\n *  complexity. The speed isn't compromised too much (I don't think), but the\n *  internal complexity is higher than it should be for such a relatively\n *  simple routine.\n *\n *  Optimization/clarity suggestions are welcome.\n */\n\n/**\n * Table entries per dB\n */\nGainAnalysis.STEPS_per_dB = 100.;\n/**\n * Table entries for 0...MAX_dB (normal max. values are 70...80 dB)\n */\nGainAnalysis.MAX_dB = 120.;\nGainAnalysis.GAIN_NOT_ENOUGH_SAMPLES = -24601;\nGainAnalysis.GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.GAIN_ANALYSIS_OK = 1;\nGainAnalysis.INIT_GAIN_ANALYSIS_ERROR = 0;\nGainAnalysis.INIT_GAIN_ANALYSIS_OK = 1;\n\nGainAnalysis.YULE_ORDER = 10;\nGainAnalysis.MAX_ORDER = GainAnalysis.YULE_ORDER;\n\nGainAnalysis.MAX_SAMP_FREQ = 48000;\nGainAnalysis.RMS_WINDOW_TIME_NUMERATOR = 1;\nGainAnalysis.RMS_WINDOW_TIME_DENOMINATOR = 20;\nGainAnalysis.MAX_SAMPLES_PER_WINDOW = ((GainAnalysis.MAX_SAMP_FREQ * GainAnalysis.RMS_WINDOW_TIME_NUMERATOR) / GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR + 1);\n\nfunction GainAnalysis() {\n\t//fix 精简\n}\n\n\nfunction Presets() {\n    //fix 精简\n\n    function ABRPresets(kbps, comp, compS,\n                        joint, fix, shThreshold,\n                        shThresholdS, bass, sc,\n                        mask, lower, curve,\n                        interCh, sfScale) {\n        this.quant_comp = comp;\n        this.quant_comp_s = compS;\n        this.safejoint = joint;\n        this.nsmsfix = fix;\n        this.st_lrm = shThreshold;\n        this.st_s = shThresholdS;\n        this.nsbass = bass;\n        this.scale = sc;\n        this.masking_adj = mask;\n        this.ath_lower = lower;\n        this.ath_curve = curve;\n        this.interch = interCh;\n        this.sfscale = sfScale;\n    }\n\n    var lame;\n\n    this.setModules = function (_lame) {\n        lame = _lame;\n    };\n\n\t//fix cc 精简\n    function apply_vbr_preset(gfp, a, enforce) {\n        abort();//fix cc 精简\n    }\n\n    /**\n     * <PRE>\n     *  Switch mappings for ABR mode\n     *\n     *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\n     * </PRE>\n     */\n    var abr_switch_map = [\n        new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\n        new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\n        new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\n        new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\n        new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\n        new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\n        new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\n        new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\n        new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\n        new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\n        new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\n        new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\n        new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\n        new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\n        new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\n        new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\n        new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0)  /* 320 */\n    ];\n\n    function apply_abr_preset(gfp, preset, enforce) {\n        /* Variables for the ABR stuff */\n        var actual_bitrate = preset;\n\n        var r = lame.nearestBitrateFullIndex(preset);\n\n        gfp.VBR = VbrMode.vbr_abr;\n        gfp.VBR_mean_bitrate_kbps = actual_bitrate;\n        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\n        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\n        gfp.brate = gfp.VBR_mean_bitrate_kbps;\n        if (gfp.VBR_mean_bitrate_kbps > 320) {\n            gfp.disable_reservoir = true;\n        }\n\n        /* parameters for which there is no proper set/get interface */\n        if (abr_switch_map[r].safejoint > 0)\n            gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\n        /* safejoint */\n\n        if (abr_switch_map[r].sfscale > 0) {\n            gfp.internal_flags.noise_shaping = 2;\n        }\n        /* ns-bass tweaks */\n        if (Math.abs(abr_switch_map[r].nsbass) > 0) {\n            var k = (int)(abr_switch_map[r].nsbass * 4);\n            if (k < 0)\n                k += 64;\n            gfp.exp_nspsytune = gfp.exp_nspsytune | (k << 2);\n        }\n\n        if (enforce != 0)\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        else if (!(Math.abs(gfp.quant_comp - -1) > 0))\n            gfp.quant_comp = abr_switch_map[r].quant_comp;\n        // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\n        if (enforce != 0)\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\n            gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\n        // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\n\n        if (enforce != 0)\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        else if (!(Math.abs(gfp.msfix - -1) > 0))\n            gfp.msfix = abr_switch_map[r].nsmsfix;\n        // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\n\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\n        // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\n        if (enforce != 0)\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\n            gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\n        // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\n\n        /*\n         * ABR seems to have big problems with clipping, especially at low\n         * bitrates\n         */\n        /*\n         * so we compensate for that here by using a scale value depending on\n         * bitrate\n         */\n        if (enforce != 0)\n            gfp.scale = abr_switch_map[r].scale;\n        else if (!(Math.abs(gfp.scale - -1) > 0))\n            gfp.scale = abr_switch_map[r].scale;\n        // SET_OPTION(scale, abr_switch_map[r].scale, -1);\n\n        if (enforce != 0)\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\n            gfp.maskingadjust = abr_switch_map[r].masking_adj;\n        // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\n        if (abr_switch_map[r].masking_adj > 0) {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // .9, 0);\n        } else {\n            if (enforce != 0)\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\n                gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\n            // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\n            // 1.1, 0);\n        }\n\n        if (enforce != 0)\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        else if (!(Math.abs((-gfp.ATHlower * 10.) - 0) > 0))\n            gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\n        // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\n        if (enforce != 0)\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\n            gfp.ATHcurve = abr_switch_map[r].ath_curve;\n        // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\n\n        if (enforce != 0)\n            gfp.interChRatio = abr_switch_map[r].interch;\n        else if (!(Math.abs(gfp.interChRatio - -1) > 0))\n            gfp.interChRatio = abr_switch_map[r].interch;\n        // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\n\n        return preset;\n    }\n\n    this.apply_preset = function(gfp, preset, enforce) {\n        /* translate legacy presets */\n        switch (preset) {\n            case Lame.R3MIX:\n            {\n                preset = Lame.V3;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.MEDIUM:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.MEDIUM_FAST:\n            {\n                preset = Lame.V4;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.STANDARD:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.STANDARD_FAST:\n            {\n                preset = Lame.V2;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.EXTREME:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_rh;\n                break;\n            }\n            case Lame.EXTREME_FAST:\n            {\n                preset = Lame.V0;\n                gfp.VBR = VbrMode.vbr_mtrh;\n                break;\n            }\n            case Lame.INSANE:\n            {\n                preset = 320;\n                gfp.preset = preset;\n                apply_abr_preset(gfp, preset, enforce);\n                gfp.VBR = VbrMode.vbr_off;\n                return preset;\n            }\n        }\n\n        gfp.preset = preset;\n        {\n            switch (preset) {\n                case Lame.V9:\n                    apply_vbr_preset(gfp, 9, enforce);\n                    return preset;\n                case Lame.V8:\n                    apply_vbr_preset(gfp, 8, enforce);\n                    return preset;\n                case Lame.V7:\n                    apply_vbr_preset(gfp, 7, enforce);\n                    return preset;\n                case Lame.V6:\n                    apply_vbr_preset(gfp, 6, enforce);\n                    return preset;\n                case Lame.V5:\n                    apply_vbr_preset(gfp, 5, enforce);\n                    return preset;\n                case Lame.V4:\n                    apply_vbr_preset(gfp, 4, enforce);\n                    return preset;\n                case Lame.V3:\n                    apply_vbr_preset(gfp, 3, enforce);\n                    return preset;\n                case Lame.V2:\n                    apply_vbr_preset(gfp, 2, enforce);\n                    return preset;\n                case Lame.V1:\n                    apply_vbr_preset(gfp, 1, enforce);\n                    return preset;\n                case Lame.V0:\n                    apply_vbr_preset(gfp, 0, enforce);\n                    return preset;\n                default:\n                    break;\n            }\n        }\n        if (8 <= preset && preset <= 320) {\n            return apply_abr_preset(gfp, preset, enforce);\n        }\n\n        /* no corresponding preset found */\n        gfp.preset = 0;\n        return preset;\n    }\n\n    // Rest from getset.c:\n\n    //fix cc 精简\n\n}\n\n/*\n *      bit reservoir source file\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Reservoir.java,v 1.9 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n/**\n * ResvFrameBegin:<BR>\n * Called (repeatedly) at the beginning of a frame. Updates the maximum size of\n * the reservoir, and checks to make sure main_data_begin was set properly by\n * the formatter<BR>\n * Background information:\n * \n * This is the original text from the ISO standard. Because of sooo many bugs\n * and irritations correcting comments are added in brackets []. A '^W' means\n * you should remove the last word.\n * \n * <PRE>\n *  1. The following rule can be used to calculate the maximum\n *     number of bits used for one granule [^W frame]:<BR>\n *     At the highest possible bitrate of Layer III (320 kbps\n *     per stereo signal [^W^W^W], 48 kHz) the frames must be of\n *     [^W^W^W are designed to have] constant length, i.e.\n *     one buffer [^W^W the frame] length is:<BR>\n * \n *         320 kbps * 1152/48 kHz = 7680 bit = 960 byte\n * \n *     This value is used as the maximum buffer per channel [^W^W] at\n *     lower bitrates [than 320 kbps]. At 64 kbps mono or 128 kbps\n *     stereo the main granule length is 64 kbps * 576/48 kHz = 768 bit\n *     [per granule and channel] at 48 kHz sampling frequency.\n *     This means that there is a maximum deviation (short time buffer\n *     [= reservoir]) of 7680 - 2*2*768 = 4608 bits is allowed at 64 kbps.\n *     The actual deviation is equal to the number of bytes [with the\n *     meaning of octets] denoted by the main_data_end offset pointer.\n *     The actual maximum deviation is (2^9-1)*8 bit = 4088 bits\n *     [for MPEG-1 and (2^8-1)*8 bit for MPEG-2, both are hard limits].\n *     ... The xchange of buffer bits between the left and right channel\n *     is allowed without restrictions [exception: dual channel].\n *     Because of the [constructed] constraint on the buffer size\n *     main_data_end is always set to 0 in the case of bit_rate_index==14,\n *     i.e. data rate 320 kbps per stereo signal [^W^W^W]. In this case\n *     all data are allocated between adjacent header [^W sync] words\n *     [, i.e. there is no buffering at all].\n * </PRE>\n */\n\n\nfunction Reservoir() {\n\tvar bs;\n\n\tthis.setModules  = function(_bs) {\n\t\tbs = _bs;\n\t}\n\n\tthis.ResvFrameBegin = function(gfp, mean_bits) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar maxmp3buf;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar frameLength = bs.getframebits(gfp);\n\t\tmean_bits.bits = (frameLength - gfc.sideinfo_len * 8) / gfc.mode_gr;\n\n\t\t/**\n\t\t * <PRE>\n\t\t *  Meaning of the variables:\n\t\t *      resvLimit: (0, 8, ..., 8*255 (MPEG-2), 8*511 (MPEG-1))\n\t\t *          Number of bits can be stored in previous frame(s) due to\n\t\t *          counter size constaints\n\t\t *      maxmp3buf: ( ??? ... 8*1951 (MPEG-1 and 2), 8*2047 (MPEG-2.5))\n\t\t *          Number of bits allowed to encode one frame (you can take 8*511 bit\n\t\t *          from the bit reservoir and at most 8*1440 bit from the current\n\t\t *          frame (320 kbps, 32 kHz), so 8*1951 bit is the largest possible\n\t\t *          value for MPEG-1 and -2)\n\t\t * \n\t\t *          maximum allowed granule/channel size times 4 = 8*2047 bits.,\n\t\t *          so this is the absolute maximum supported by the format.\n\t\t * \n\t\t * \n\t\t *      fullFrameBits:  maximum number of bits available for encoding\n\t\t *                      the current frame.\n\t\t * \n\t\t *      mean_bits:      target number of bits per granule.\n\t\t * \n\t\t *      frameLength:\n\t\t * \n\t\t *      gfc.ResvMax:   maximum allowed reservoir\n\t\t * \n\t\t *      gfc.ResvSize:  current reservoir size\n\t\t * \n\t\t *      l3_side.resvDrain_pre:\n\t\t *         ancillary data to be added to previous frame:\n\t\t *         (only usefull in VBR modes if it is possible to have\n\t\t *         maxmp3buf < fullFrameBits)).  Currently disabled,\n\t\t *         see #define NEW_DRAIN\n\t\t *         2010-02-13: RH now enabled, it seems to be needed for CBR too,\n\t\t *                     as there exists one example, where the FhG decoder\n\t\t *                     can't decode a -b320 CBR file anymore.\n\t\t * \n\t\t *      l3_side.resvDrain_post:\n\t\t *         ancillary data to be added to this frame:\n\t\t * \n\t\t * </PRE>\n\t\t */\n\n\t\t/* main_data_begin has 9 bits in MPEG-1, 8 bits MPEG-2 */\n\t\tvar resvLimit = (8 * 256) * gfc.mode_gr - 8;\n\n\t\t/*\n\t\t * maximum allowed frame size. dont use more than this number of bits,\n\t\t * even if the frame has the space for them:\n\t\t */\n\t\tif (gfp.brate > 320) {\n\t\t\tabort();//fix cc 精简\n\t\t} else {\n\t\t\t/*\n\t\t\t * all mp3 decoders should have enough buffer to handle this value:\n\t\t\t * size of a 320kbps 32kHz frame\n\t\t\t */\n\t\t\tmaxmp3buf = 8 * 1440;\n\n\t\t\t/*\n\t\t\t * Bouvigne suggests this more lax interpretation of the ISO doc\n\t\t\t * instead of using 8*960.\n\t\t\t */\n\n\t\t\tif (gfp.strict_ISO) {\n\t\t\t\tabort();//fix cc 精简\n\t\t\t}\n\t\t}\n\n\t\tgfc.ResvMax = maxmp3buf - frameLength;\n\t\tif (gfc.ResvMax > resvLimit)\n\t\t\tgfc.ResvMax = resvLimit;\n\t\tif (gfc.ResvMax < 0 || gfp.disable_reservoir)\n\t\t\tgfc.ResvMax = 0;\n\n\t\tvar fullFrameBits = mean_bits.bits * gfc.mode_gr\n\t\t\t\t+ Math.min(gfc.ResvSize, gfc.ResvMax);\n\n\t\tif (fullFrameBits > maxmp3buf)\n\t\t\tfullFrameBits = maxmp3buf;\n\n\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t// frame analyzer code\n\t\tif (gfc.pinfo != null) {\n\t\t\tabort();//fix cc 精简\n\t\t}\n\n\t\treturn fullFrameBits;\n\t}\n\n\t/**\n\t * returns targ_bits: target number of bits to use for 1 granule<BR>\n\t * extra_bits: amount extra available from reservoir<BR>\n\t * Mark Taylor 4/99\n\t */\n\tthis.ResvMaxBits = function(gfp, mean_bits, targ_bits, cbr) {\n\t\tvar gfc = gfp.internal_flags;\n\t\tvar add_bits;\n        var ResvSize = gfc.ResvSize, ResvMax = gfc.ResvMax;\n\n\t\t/* compensate the saved bits used in the 1st granule */\n\t\tif (cbr != 0)\n\t\t\tResvSize += mean_bits;\n\n\t\tif ((gfc.substep_shaping & 1) != 0)\n\t\t\tResvMax *= 0.9;\n\n\t\ttarg_bits.bits = mean_bits;\n\n\t\t/* extra bits if the reservoir is almost full */\n\t\tif (ResvSize * 10 > ResvMax * 9) {\n\t\t\tadd_bits = ResvSize - (ResvMax * 9) / 10;\n\t\t\ttarg_bits.bits += add_bits;\n\t\t\tgfc.substep_shaping |= 0x80;\n\t\t} else {\n\t\t\tadd_bits = 0;\n\t\t\tgfc.substep_shaping &= 0x7f;\n\t\t\t/*\n\t\t\t * build up reservoir. this builds the reservoir a little slower\n\t\t\t * than FhG. It could simple be mean_bits/15, but this was rigged to\n\t\t\t * always produce 100 (the old value) at 128kbs\n\t\t\t */\n\t\t\tif (!gfp.disable_reservoir && 0 == (gfc.substep_shaping & 1))\n\t\t\t\ttarg_bits.bits -= .1 * mean_bits;\n\t\t}\n\n\t\t/* amount from the reservoir we are allowed to use. ISO says 6/10 */\n\t\tvar extra_bits = (ResvSize < (gfc.ResvMax * 6) / 10 ? ResvSize\n\t\t\t\t: (gfc.ResvMax * 6) / 10);\n\t\textra_bits -= add_bits;\n\n\t\tif (extra_bits < 0)\n\t\t\textra_bits = 0;\n\t\treturn extra_bits;\n\t}\n\n\t/**\n\t * Called after a granule's bit allocation. Readjusts the size of the\n\t * reservoir to reflect the granule's usage.\n\t */\n\tthis.ResvAdjust = function(gfc, gi) {\n\t\tgfc.ResvSize -= gi.part2_3_length + gi.part2_length;\n\t}\n\n\t/**\n\t * Called after all granules in a frame have been allocated. Makes sure that\n\t * the reservoir size is within limits, possibly by adding stuffing bits.\n\t */\n\tthis.ResvFrameEnd = function(gfc, mean_bits) {\n\t\tvar over_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tgfc.ResvSize += mean_bits * gfc.mode_gr;\n\t\tvar stuffingBits = 0;\n\t\tl3_side.resvDrain_post = 0;\n\t\tl3_side.resvDrain_pre = 0;\n\n\t\t/* we must be byte aligned */\n\t\tif ((over_bits = gfc.ResvSize % 8) != 0)\n\t\t\tstuffingBits += over_bits;\n\n\t\tover_bits = (gfc.ResvSize - stuffingBits) - gfc.ResvMax;\n\t\tif (over_bits > 0) {\n\t\t\tstuffingBits += over_bits;\n\t\t}\n\n\t\t/*\n\t\t * NOTE: enabling the NEW_DRAIN code fixes some problems with FhG\n\t\t * decoder shipped with MS Windows operating systems. Using this, it is\n\t\t * even possible to use Gabriel's lax buffer consideration again, which\n\t\t * assumes, any decoder should have a buffer large enough for a 320 kbps\n\t\t * frame at 32 kHz sample rate.\n\t\t * \n\t\t * old drain code: lame -b320 BlackBird.wav --. does not play with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * new drain code: lame -b320 BlackBird.wav --. plays fine with\n\t\t * GraphEdit.exe using FhG decoder V1.5 Build 50\n\t\t * \n\t\t * Robert Hegemann, 2010-02-13.\n\t\t */\n\t\t/*\n\t\t * drain as many bits as possible into previous frame ancillary data In\n\t\t * particular, in VBR mode ResvMax may have changed, and we have to make\n\t\t * sure main_data_begin does not create a reservoir bigger than ResvMax\n\t\t * mt 4/00\n\t\t */\n\t\t{\n\t\t\tvar mdb_bytes = Math.min(l3_side.main_data_begin * 8, stuffingBits) / 8;\n\t\t\tl3_side.resvDrain_pre += 8 * mdb_bytes;\n\t\t\tstuffingBits -= 8 * mdb_bytes;\n\t\t\tgfc.ResvSize -= 8 * mdb_bytes;\n\t\t\tl3_side.main_data_begin -= mdb_bytes;\n\t\t}\n\t\t/* drain the rest into this frames ancillary data */\n\t\tl3_side.resvDrain_post += stuffingBits;\n\t\tgfc.ResvSize -= stuffingBits;\n\t}\n}\n\n\n/**\n * A Vbr header may be present in the ancillary data field of the first frame of\n * an mp3 bitstream<BR>\n * The Vbr header (optionally) contains\n * <UL>\n * <LI>frames total number of audio frames in the bitstream\n * <LI>bytes total number of bytes in the bitstream\n * <LI>toc table of contents\n * </UL>\n *\n * toc (table of contents) gives seek points for random access.<BR>\n * The ith entry determines the seek point for i-percent duration.<BR>\n * seek point in bytes = (toc[i]/256.0) * total_bitstream_bytes<BR>\n * e.g. half duration seek point = (toc[50]/256.0) * total_bitstream_bytes\n */\nVBRTag.NUMTOCENTRIES = 100;\nVBRTag.MAXFRAMESIZE = 2880;\n\nfunction VBRTag() {\n\n    var lame;\n    var bs;\n    var v;\n\n    this.setModules = function (_lame, _bs, _v) {\n        lame = _lame;\n        bs = _bs;\n        v = _v;\n    };\n\t\n\t//fix 精简\n\t\n    /**\n     * Lookup table for fast CRC-16 computation. Uses the polynomial\n     * x^16+x^15+x^2+1\n     */\n    var crc16Lookup = [0x0000, 0xC0C1, 0xC181, 0x0140,\n        0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741,\n        0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0, 0x0D80, 0xCD41,\n        0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40,\n        0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941,\n        0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40,\n        0xDD01, 0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540,\n        0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341,\n        0x1100, 0xD1C1, 0xD081, 0x1040, 0xF001, 0x30C0, 0x3180, 0xF141,\n        0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740,\n        0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00, 0xFCC1, 0xFD81, 0x3D40,\n        0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41,\n        0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981, 0x2940,\n        0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41,\n        0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541,\n        0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340,\n        0xE101, 0x21C0, 0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141,\n        0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740,\n        0xA501, 0x65C0, 0x6480, 0xA441, 0x6C00, 0xACC1, 0xAD81, 0x6D40,\n        0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41,\n        0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1, 0xB981, 0x7940,\n        0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41,\n        0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541,\n        0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340,\n        0xB101, 0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140,\n        0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741,\n        0x5500, 0x95C1, 0x9481, 0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41,\n        0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40,\n        0x9901, 0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941,\n        0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40,\n        0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540,\n        0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341,\n        0x4100, 0x81C1, 0x8081, 0x4040];\n\t\t\n\t//fix 精简\n\t\n    /**\n     * Fast CRC-16 computation (uses table crc16Lookup).\n     *\n     * @param value\n     * @param crc\n     * @return\n     */\n    function crcUpdateLookup(value, crc) {\n        var tmp = crc ^ value;\n        crc = (crc >> 8) ^ crc16Lookup[tmp & 0xff];\n        return crc;\n    }\n\n    this.updateMusicCRC = function (crc, buffer, bufferPos, size) {\n        for (var i = 0; i < size; ++i)\n            crc[0] = crcUpdateLookup(buffer[bufferPos + i], crc[0]);\n    }\n\n\t//fix 精简\n}\n\n\n\nBitStream.EQ = function (a, b) {\n    return (Math.abs(a) > Math.abs(b)) ? (Math.abs((a) - (b)) <= (Math\n        .abs(a) * 1e-6))\n        : (Math.abs((a) - (b)) <= (Math.abs(b) * 1e-6));\n};\n\nBitStream.NEQ = function (a, b) {\n    return !BitStream.EQ(a, b);\n};\n\nfunction BitStream() {\n    var self = this;\n    var CRC16_POLYNOMIAL = 0x8005;\n\n    /*\n     * we work with ints, so when doing bit manipulation, we limit ourselves to\n     * MAX_LENGTH-2 just to be on the safe side\n     */\n    var MAX_LENGTH = 32;\n\n    //GainAnalysis ga;\n    //MPGLib mpg;\n    //Version ver;\n    //VBRTag vbr;\n    var ga = null;\n    var mpg = null;\n    var ver = null;\n    var vbr = null;\n\n    //public final void setModules(GainAnalysis ga, MPGLib mpg, Version ver,\n    //\tVBRTag vbr) {\n\n    this.setModules = function (_ga, _mpg, _ver, _vbr) {\n        ga = _ga;\n        mpg = _mpg;\n        ver = _ver;\n        vbr = _vbr;\n    };\n\n    /**\n     * Bit stream buffer.\n     */\n    //private byte[] buf;\n    var buf = null;\n    /**\n     * Bit counter of bit stream.\n     */\n    var totbit = 0;\n    /**\n     * Pointer to top byte in buffer.\n     */\n    var bufByteIdx = 0;\n    /**\n     * Pointer to top bit of top byte in buffer.\n     */\n    var bufBitIdx = 0;\n\n    /**\n     * compute bitsperframe and mean_bits for a layer III frame\n     */\n    this.getframebits = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var bit_rate;\n\n        /* get bitrate in kbps [?] */\n        if (gfc.bitrate_index != 0)\n            bit_rate = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\n        else\n            bit_rate = gfp.brate;\n\n        /* main encoding routine toggles padding on and off */\n        /* one Layer3 Slot consists of 8 bits */\n        var bytes = 0 | (gfp.version + 1) * 72000 * bit_rate / gfp.out_samplerate + gfc.padding;\n        return 8 * bytes;\n    };\n\n    function putheader_bits(gfc) {\n        System.arraycopy(gfc.header[gfc.w_ptr].buf, 0, buf, bufByteIdx, gfc.sideinfo_len);\n        bufByteIdx += gfc.sideinfo_len;\n        totbit += gfc.sideinfo_len * 8;\n        gfc.w_ptr = (gfc.w_ptr + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n    }\n\n    /**\n     * write j bits into the bit stream\n     */\n    function putbits2(gfc, val, j) {\n\n\n        while (j > 0) {\n            var k;\n            if (bufBitIdx == 0) {\n                bufBitIdx = 8;\n                bufByteIdx++;\n                if (gfc.header[gfc.w_ptr].write_timing == totbit) {\n                    putheader_bits(gfc);\n                }\n                buf[bufByteIdx] = 0;\n            }\n\n            k = Math.min(j, bufBitIdx);\n            j -= k;\n\n            bufBitIdx -= k;\n\n            /* 32 too large on 32 bit machines */\n\n            buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\n            totbit += k;\n        }\n    }\n\n    //fix cc 精简\n\n    /**\n     * Some combinations of bitrate, Fs, and stereo make it impossible to stuff\n     * out a frame using just main_data, due to the limited number of bits to\n     * indicate main_data_length. In these situations, we put stuffing bits into\n     * the ancillary data...\n     */\n    function drain_into_ancillary(gfp, remainingBits) {\n        var gfc = gfp.internal_flags;\n        var i;\n\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4c, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x41, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x4d, 8);\n            remainingBits -= 8;\n        }\n        if (remainingBits >= 8) {\n            putbits2(gfc, 0x45, 8);\n            remainingBits -= 8;\n        }\n\n        if (remainingBits >= 32) {\n            var version = ver.getLameShortVersion();\n            if (remainingBits >= 32)\n                for (i = 0; i < version.length && remainingBits >= 8; ++i) {\n                    remainingBits -= 8;\n                    putbits2(gfc, version.charCodeAt(i), 8); //fix 错误的使用charAt\n                }\n        }\n\n        for (; remainingBits >= 1; remainingBits -= 1) {\n            putbits2(gfc, gfc.ancillary_flag, 1);\n            gfc.ancillary_flag ^= (!gfp.disable_reservoir ? 1 : 0);\n        }\n\n\n    }\n\n    /**\n     * write N bits into the header\n     */\n    function writeheader(gfc, val, j) {\n        var ptr = gfc.header[gfc.h_ptr].ptr;\n\n        while (j > 0) {\n            var k = Math.min(j, 8 - (ptr & 7));\n            j -= k;\n            /* >> 32 too large for 32 bit machines */\n\n            gfc.header[gfc.h_ptr].buf[ptr >> 3] |= ((val >> j)) << (8 - (ptr & 7) - k);\n            ptr += k;\n        }\n        gfc.header[gfc.h_ptr].ptr = ptr;\n    }\n\n    //fix cc 精简\n\n    function encodeSideInfo2(gfp, bitsPerFrame) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var gr, ch;\n\n        l3_side = gfc.l3_side;\n        gfc.header[gfc.h_ptr].ptr = 0;\n        Arrays.fill(gfc.header[gfc.h_ptr].buf, 0, gfc.sideinfo_len, 0);\n        if (gfp.out_samplerate < 16000)\n            writeheader(gfc, 0xffe, 12);\n        else\n            writeheader(gfc, 0xfff, 12);\n        writeheader(gfc, (gfp.version), 1);\n        writeheader(gfc, 4 - 3, 2);\n        writeheader(gfc, (!gfp.error_protection ? 1 : 0), 1);\n        writeheader(gfc, (gfc.bitrate_index), 4);\n        writeheader(gfc, (gfc.samplerate_index), 2);\n        writeheader(gfc, (gfc.padding), 1);\n        writeheader(gfc, (gfp.extension), 1);\n        writeheader(gfc, (gfp.mode.ordinal()), 2);\n        writeheader(gfc, (gfc.mode_ext), 2);\n        writeheader(gfc, (gfp.copyright), 1);\n        writeheader(gfc, (gfp.original), 1);\n        writeheader(gfc, (gfp.emphasis), 2);\n        if (gfp.error_protection) {\n            writeheader(gfc, 0, 16);\n            /* dummy */\n        }\n\n        if (gfp.version == 1) {\n            /* MPEG1 */\n            writeheader(gfc, (l3_side.main_data_begin), 9);\n\n            if (gfc.channels_out == 2)\n                writeheader(gfc, l3_side.private_bits, 3);\n            else\n                writeheader(gfc, l3_side.private_bits, 5);\n\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var band;\n                for (band = 0; band < 4; band++) {\n                    writeheader(gfc, l3_side.scfsi[ch][band], 1);\n                }\n            }\n\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                    writeheader(gfc, gi.big_values / 2, 9);\n                    writeheader(gfc, gi.global_gain, 8);\n                    writeheader(gfc, gi.scalefac_compress, 4);\n\n                    if (gi.block_type != Encoder.NORM_TYPE) {\n                        writeheader(gfc, 1, 1);\n                        /* window_switching_flag */\n                        writeheader(gfc, gi.block_type, 2);\n                        writeheader(gfc, gi.mixed_block_flag, 1);\n\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n\n                        writeheader(gfc, gi.subblock_gain[0], 3);\n                        writeheader(gfc, gi.subblock_gain[1], 3);\n                        writeheader(gfc, gi.subblock_gain[2], 3);\n                    } else {\n                        writeheader(gfc, 0, 1);\n                        /* window_switching_flag */\n                        if (gi.table_select[0] == 14)\n                            gi.table_select[0] = 16;\n                        writeheader(gfc, gi.table_select[0], 5);\n                        if (gi.table_select[1] == 14)\n                            gi.table_select[1] = 16;\n                        writeheader(gfc, gi.table_select[1], 5);\n                        if (gi.table_select[2] == 14)\n                            gi.table_select[2] = 16;\n                        writeheader(gfc, gi.table_select[2], 5);\n\n                        writeheader(gfc, gi.region0_count, 4);\n                        writeheader(gfc, gi.region1_count, 3);\n                    }\n                    writeheader(gfc, gi.preflag, 1);\n                    writeheader(gfc, gi.scalefac_scale, 1);\n                    writeheader(gfc, gi.count1table_select, 1);\n                }\n            }\n        } else {\n            /* MPEG2 */\n            writeheader(gfc, (l3_side.main_data_begin), 8);\n            writeheader(gfc, l3_side.private_bits, gfc.channels_out);\n\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\n                writeheader(gfc, gi.big_values / 2, 9);\n                writeheader(gfc, gi.global_gain, 8);\n                writeheader(gfc, gi.scalefac_compress, 9);\n\n                if (gi.block_type != Encoder.NORM_TYPE) {\n                    writeheader(gfc, 1, 1);\n                    /* window_switching_flag */\n                    writeheader(gfc, gi.block_type, 2);\n                    writeheader(gfc, gi.mixed_block_flag, 1);\n\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n\n                    writeheader(gfc, gi.subblock_gain[0], 3);\n                    writeheader(gfc, gi.subblock_gain[1], 3);\n                    writeheader(gfc, gi.subblock_gain[2], 3);\n                } else {\n                    writeheader(gfc, 0, 1);\n                    /* window_switching_flag */\n                    if (gi.table_select[0] == 14)\n                        gi.table_select[0] = 16;\n                    writeheader(gfc, gi.table_select[0], 5);\n                    if (gi.table_select[1] == 14)\n                        gi.table_select[1] = 16;\n                    writeheader(gfc, gi.table_select[1], 5);\n                    if (gi.table_select[2] == 14)\n                        gi.table_select[2] = 16;\n                    writeheader(gfc, gi.table_select[2], 5);\n\n                    writeheader(gfc, gi.region0_count, 4);\n                    writeheader(gfc, gi.region1_count, 3);\n                }\n\n                writeheader(gfc, gi.scalefac_scale, 1);\n                writeheader(gfc, gi.count1table_select, 1);\n            }\n        }\n\n        if (gfp.error_protection) {\n            abort();//fix cc 精简\n        }\n\n        {\n            var old = gfc.h_ptr;\n\n            gfc.h_ptr = (old + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\n            gfc.header[gfc.h_ptr].write_timing = gfc.header[old].write_timing\n                + bitsPerFrame;\n\n            if (gfc.h_ptr == gfc.w_ptr) {\n                /* yikes! we are out of header buffer space */\n                //fix cc 精简 print\n            }\n\n        }\n    }\n\n    function huffman_coder_count1(gfc, gi) {\n        /* Write count1 area */\n        var h = Tables.ht[gi.count1table_select + 32];\n        var i, bits = 0;\n\n        var ix = gi.big_values;\n        var xr = gi.big_values;\n\n        for (i = (gi.count1 - gi.big_values) / 4; i > 0; --i) {\n            var huffbits = 0;\n            var p = 0, v;\n\n            v = gi.l3_enc[ix + 0];\n            if (v != 0) {\n                p += 8;\n                if (gi.xr[xr + 0] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 1];\n            if (v != 0) {\n                p += 4;\n                huffbits *= 2;\n                if (gi.xr[xr + 1] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 2];\n            if (v != 0) {\n                p += 2;\n                huffbits *= 2;\n                if (gi.xr[xr + 2] < 0)\n                    huffbits++;\n            }\n\n            v = gi.l3_enc[ix + 3];\n            if (v != 0) {\n                p++;\n                huffbits *= 2;\n                if (gi.xr[xr + 3] < 0)\n                    huffbits++;\n            }\n\n            ix += 4;\n            xr += 4;\n            putbits2(gfc, huffbits + h.table[p], h.hlen[p]);\n            bits += h.hlen[p];\n        }\n        return bits;\n    }\n\n    /**\n     * Implements the pseudocode of page 98 of the IS\n     */\n    function Huffmancode(gfc, tableindex, start, end, gi) {\n        var h = Tables.ht[tableindex];\n        var bits = 0;\n\n        if (0 == tableindex)\n            return bits;\n\n        for (var i = start; i < end; i += 2) {\n            var cbits = 0;\n            var xbits = 0;\n            var linbits = h.xlen;\n            var xlen = h.xlen;\n            var ext = 0;\n            var x1 = gi.l3_enc[i];\n            var x2 = gi.l3_enc[i + 1];\n\n            if (x1 != 0) {\n                if (gi.xr[i] < 0)\n                    ext++;\n                cbits--;\n            }\n\n            if (tableindex > 15) {\n                /* use ESC-words */\n                if (x1 > 14) {\n                    var linbits_x1 = x1 - 15;\n                    ext |= linbits_x1 << 1;\n                    xbits = linbits;\n                    x1 = 15;\n                }\n\n                if (x2 > 14) {\n                    var linbits_x2 = x2 - 15;\n                    ext <<= linbits;\n                    ext |= linbits_x2;\n                    xbits += linbits;\n                    x2 = 15;\n                }\n                xlen = 16;\n            }\n\n            if (x2 != 0) {\n                ext <<= 1;\n                if (gi.xr[i + 1] < 0)\n                    ext++;\n                cbits--;\n            }\n\n\n            x1 = x1 * xlen + x2;\n            xbits -= cbits;\n            cbits += h.hlen[x1];\n\n\n            putbits2(gfc, h.table[x1], cbits);\n            putbits2(gfc, ext, xbits);\n            bits += cbits + xbits;\n        }\n        return bits;\n    }\n\n    /**\n     * Note the discussion of huffmancodebits() on pages 28 and 29 of the IS, as\n     * well as the definitions of the side information on pages 26 and 27.\n     */\n    function ShortHuffmancodebits(gfc, gi) {\n        var region1Start = 3 * gfc.scalefac_band.s[3];\n        if (region1Start > gi.big_values)\n            region1Start = gi.big_values;\n\n        /* short blocks do not have a region2 */\n        var bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            gi.big_values, gi);\n        return bits;\n    }\n\n    function LongHuffmancodebits(gfc, gi) {\n        var bigvalues, bits;\n        var region1Start, region2Start;\n\n        bigvalues = gi.big_values;\n\n        var i = gi.region0_count + 1;\n        region1Start = gfc.scalefac_band.l[i];\n        i += gi.region1_count + 1;\n        region2Start = gfc.scalefac_band.l[i];\n\n        if (region1Start > bigvalues)\n            region1Start = bigvalues;\n\n        if (region2Start > bigvalues)\n            region2Start = bigvalues;\n\n        bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[1], region1Start,\n            region2Start, gi);\n        bits += Huffmancode(gfc, gi.table_select[2], region2Start, bigvalues,\n            gi);\n        return bits;\n    }\n\n    function writeMainData(gfp) {\n        var gr, ch, sfb, data_bits, tot_bits = 0;\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n\n        if (gfp.version == 1) {\n            /* MPEG 1 */\n            for (gr = 0; gr < 2; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var gi = l3_side.tt[gr][ch];\n                    var slen1 = Takehiro.slen1_tab[gi.scalefac_compress];\n                    var slen2 = Takehiro.slen2_tab[gi.scalefac_compress];\n                    data_bits = 0;\n                    for (sfb = 0; sfb < gi.sfbdivide; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen1);\n                        data_bits += slen1;\n                    }\n                    for (; sfb < gi.sfbmax; sfb++) {\n                        if (gi.scalefac[sfb] == -1)\n                            continue;\n                        /* scfsi is used */\n                        putbits2(gfc, gi.scalefac[sfb], slen2);\n                        data_bits += slen2;\n                    }\n\n                    if (gi.block_type == Encoder.SHORT_TYPE) {\n                        data_bits += ShortHuffmancodebits(gfc, gi);\n                    } else {\n                        data_bits += LongHuffmancodebits(gfc, gi);\n                    }\n                    data_bits += huffman_coder_count1(gfc, gi);\n                    /* does bitcount in quantize.c agree with actual bit count? */\n                    tot_bits += data_bits;\n                }\n                /* for ch */\n            }\n            /* for gr */\n        } else {\n            /* MPEG 2 */\n            gr = 0;\n            for (ch = 0; ch < gfc.channels_out; ch++) {\n                var gi = l3_side.tt[gr][ch];\n                var i, sfb_partition, scale_bits = 0;\n                data_bits = 0;\n                sfb = 0;\n                sfb_partition = 0;\n\n                if (gi.block_type == Encoder.SHORT_TYPE) {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition] / 3;\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 0], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 1], 0), slen);\n                            putbits2(gfc,\n                                Math.max(gi.scalefac[sfb * 3 + 2], 0), slen);\n                            scale_bits += 3 * slen;\n                        }\n                    }\n                    data_bits += ShortHuffmancodebits(gfc, gi);\n                } else {\n                    for (; sfb_partition < 4; sfb_partition++) {\n                        var sfbs = gi.sfb_partition_table[sfb_partition];\n                        var slen = gi.slen[sfb_partition];\n                        for (i = 0; i < sfbs; i++, sfb++) {\n                            putbits2(gfc, Math.max(gi.scalefac[sfb], 0), slen);\n                            scale_bits += slen;\n                        }\n                    }\n                    data_bits += LongHuffmancodebits(gfc, gi);\n                }\n                data_bits += huffman_coder_count1(gfc, gi);\n                /* does bitcount in quantize.c agree with actual bit count? */\n                tot_bits += scale_bits + data_bits;\n            }\n            /* for ch */\n        }\n        /* for gf */\n        return tot_bits;\n    }\n\n    /* main_data */\n\n    function TotalBytes() {\n        this.total = 0;\n    }\n\n    /*\n     * compute the number of bits required to flush all mp3 frames currently in\n     * the buffer. This should be the same as the reservoir size. Only call this\n     * routine between frames - i.e. only after all headers and data have been\n     * added to the buffer by format_bitstream().\n     *\n     * Also compute total_bits_output = size of mp3 buffer (including frame\n     * headers which may not have yet been send to the mp3 buffer) + number of\n     * bits needed to flush all mp3 frames.\n     *\n     * total_bytes_output is the size of the mp3 output buffer if\n     * lame_encode_flush_nogap() was called right now.\n     */\n    function compute_flushbits(gfp, total_bytes_output) {\n        var gfc = gfp.internal_flags;\n        var flushbits, remaining_headers;\n        var bitsPerFrame;\n        var last_ptr, first_ptr;\n        first_ptr = gfc.w_ptr;\n        /* first header to add to bitstream */\n        last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n\n        /* add this many bits to bitstream so we can flush all headers */\n        flushbits = gfc.header[last_ptr].write_timing - totbit;\n        total_bytes_output.total = flushbits;\n\n        if (flushbits >= 0) {\n            abort();//fix cc 精简\n        }\n\n        /*\n         * finally, add some bits so that the last frame is complete these bits\n         * are not necessary to decode the last frame, but some decoders will\n         * ignore last frame if these bits are missing\n         */\n        bitsPerFrame = self.getframebits(gfp);\n        flushbits += bitsPerFrame;\n        total_bytes_output.total += bitsPerFrame;\n        /* round up: */\n        if ((total_bytes_output.total % 8) != 0)\n            total_bytes_output.total = 1 + (total_bytes_output.total / 8);\n        else\n            total_bytes_output.total = (total_bytes_output.total / 8);\n        total_bytes_output.total += bufByteIdx + 1;\n\n        if (flushbits < 0) {\n            //fix cc 精简 print\n        }\n        return flushbits;\n    }\n\n    this.flush_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        var flushbits;\n        var last_ptr = gfc.h_ptr - 1;\n        /* last header to add to bitstream */\n        if (last_ptr == -1)\n            last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\n        l3_side = gfc.l3_side;\n\n        if ((flushbits = compute_flushbits(gfp, new TotalBytes())) < 0)\n            return;\n        drain_into_ancillary(gfp, flushbits);\n\n        /* check that the 100% of the last frame has been written to bitstream */\n\n        /*\n         * we have padded out all frames with ancillary data, which is the same\n         * as filling the bitreservoir with ancillary data, so :\n         */\n        gfc.ResvSize = 0;\n        l3_side.main_data_begin = 0;\n\n        /* save the ReplayGain value */\n        if (gfc.findReplayGain) {\n            abort();//fix cc 精简\n        }\n\n        /* find the gain and scale change required for no clipping */\n        if (gfc.findPeakSample) {\n            abort();//fix cc 精简\n        }\n    };\n\n    //fix cc 精简\n\n    /**\n     * This is called after a frame of audio has been quantized and coded. It\n     * will write the encoded audio to the bitstream. Note that from a layer3\n     * encoder's perspective the bit stream is primarily a series of main_data()\n     * blocks, with header and side information inserted at the proper locations\n     * to maintain framing. (See Figure A.7 in the IS).\n     */\n    this.format_bitstream = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side;\n        l3_side = gfc.l3_side;\n\n        var bitsPerFrame = this.getframebits(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_pre);\n\n        encodeSideInfo2(gfp, bitsPerFrame);\n        var bits = 8 * gfc.sideinfo_len;\n        bits += writeMainData(gfp);\n        drain_into_ancillary(gfp, l3_side.resvDrain_post);\n        bits += l3_side.resvDrain_post;\n\n        l3_side.main_data_begin += (bitsPerFrame - bits) / 8;\n\n        /*\n         * compare number of bits needed to clear all buffered mp3 frames with\n         * what we think the resvsize is:\n         */\n        if (compute_flushbits(gfp, new TotalBytes()) != gfc.ResvSize) {\n            //fix cc 精简 print\n        }\n\n        /*\n         * compare main_data_begin for the next frame with what we think the\n         * resvsize is:\n         */\n        if ((l3_side.main_data_begin * 8) != gfc.ResvSize) {\n            //fix cc 精简 print\n            gfc.ResvSize = l3_side.main_data_begin * 8;\n        }\n        //;\n\n        if (totbit > 1000000000) { //不可精简\n            /*\n             * to avoid totbit overflow, (at 8h encoding at 128kbs) lets reset\n             * bit counter\n             */\n            var i;\n            for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\n                gfc.header[i].write_timing -= totbit;\n            totbit = 0;\n        }\n\n        return 0;\n    };\n\n    /**\n     * <PRE>\n     * copy data out of the internal MP3 bit buffer into a user supplied\n     *       unsigned char buffer.\n     *\n     *       mp3data=0      indicates data in buffer is an id3tags and VBR tags\n     *       mp3data=1      data is real mp3 frame data.\n     * </PRE>\n     */\n    this.copy_buffer = function (gfc, buffer, bufferPos, size, mp3data) {\n        var minimum = bufByteIdx + 1;\n        if (minimum <= 0)\n            return 0;\n        if (size != 0 && minimum > size) {\n            /* buffer is too small */\n            return -1;\n        }\n        System.arraycopy(buf, 0, buffer, bufferPos, minimum);\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n\n        if (mp3data != 0) {\n            var crc = new_int(1);\n            crc[0] = gfc.nMusicCRC;\n            vbr.updateMusicCRC(crc, buffer, bufferPos, minimum);\n            gfc.nMusicCRC = crc[0];\n\n            /**\n             * sum number of bytes belonging to the mp3 stream this info will be\n             * written into the Xing/LAME header for seeking\n             */\n            if (minimum > 0) {\n                gfc.VBR_seek_table.nBytesWritten += minimum;\n            }\n\n            if (gfc.decode_on_the_fly) { /* decode the frame */\n                abort();//fix cc 精简\n            }\n            /* if (gfc.decode_on_the_fly) */\n\n        }\n        /* if (mp3data) */\n        return minimum;\n    };\n\n    this.init_bit_stream_w = function (gfc) {\n        buf = new_byte(Lame.LAME_MAXMP3BUFFER);\n\n        gfc.h_ptr = gfc.w_ptr = 0;\n        gfc.header[gfc.h_ptr].write_timing = 0;\n        bufByteIdx = -1;\n        bufBitIdx = 0;\n        totbit = 0;\n    };\n\n    // From machine.h\n\n\n}\n\nfunction HuffCodeTab(len, max, tab, hl) {\n    this.xlen = len;\n    this.linmax = max;\n    this.table = tab;\n    this.hlen = hl;\n}\n\nvar Tables = {};\n\n\nTables.t1HB = [\n    1, 1,\n    1, 0\n];\n\nTables.t2HB = [\n    1, 2, 1,\n    3, 1, 1,\n    3, 2, 0\n];\n\nTables.t3HB = [\n    3, 2, 1,\n    1, 1, 1,\n    3, 2, 0\n];\n\nTables.t5HB = [\n    1, 2, 6, 5,\n    3, 1, 4, 4,\n    7, 5, 7, 1,\n    6, 1, 1, 0\n];\n\nTables.t6HB = [\n    7, 3, 5, 1,\n    6, 2, 3, 2,\n    5, 4, 4, 1,\n    3, 3, 2, 0\n];\n\nTables.t7HB = [\n    1, 2, 10, 19, 16, 10,\n    3, 3, 7, 10, 5, 3,\n    11, 4, 13, 17, 8, 4,\n    12, 11, 18, 15, 11, 2,\n    7, 6, 9, 14, 3, 1,\n    6, 4, 5, 3, 2, 0\n];\n\nTables.t8HB = [\n    3, 4, 6, 18, 12, 5,\n    5, 1, 2, 16, 9, 3,\n    7, 3, 5, 14, 7, 3,\n    19, 17, 15, 13, 10, 4,\n    13, 5, 8, 11, 5, 1,\n    12, 4, 4, 1, 1, 0\n];\n\nTables.t9HB = [\n    7, 5, 9, 14, 15, 7,\n    6, 4, 5, 5, 6, 7,\n    7, 6, 8, 8, 8, 5,\n    15, 6, 9, 10, 5, 1,\n    11, 7, 9, 6, 4, 1,\n    14, 4, 6, 2, 6, 0\n];\n\nTables.t10HB = [\n    1, 2, 10, 23, 35, 30, 12, 17,\n    3, 3, 8, 12, 18, 21, 12, 7,\n    11, 9, 15, 21, 32, 40, 19, 6,\n    14, 13, 22, 34, 46, 23, 18, 7,\n    20, 19, 33, 47, 27, 22, 9, 3,\n    31, 22, 41, 26, 21, 20, 5, 3,\n    14, 13, 10, 11, 16, 6, 5, 1,\n    9, 8, 7, 8, 4, 4, 2, 0\n];\n\nTables.t11HB = [\n    3, 4, 10, 24, 34, 33, 21, 15,\n    5, 3, 4, 10, 32, 17, 11, 10,\n    11, 7, 13, 18, 30, 31, 20, 5,\n    25, 11, 19, 59, 27, 18, 12, 5,\n    35, 33, 31, 58, 30, 16, 7, 5,\n    28, 26, 32, 19, 17, 15, 8, 14,\n    14, 12, 9, 13, 14, 9, 4, 1,\n    11, 4, 6, 6, 6, 3, 2, 0\n];\n\nTables.t12HB = [\n    9, 6, 16, 33, 41, 39, 38, 26,\n    7, 5, 6, 9, 23, 16, 26, 11,\n    17, 7, 11, 14, 21, 30, 10, 7,\n    17, 10, 15, 12, 18, 28, 14, 5,\n    32, 13, 22, 19, 18, 16, 9, 5,\n    40, 17, 31, 29, 17, 13, 4, 2,\n    27, 12, 11, 15, 10, 7, 4, 1,\n    27, 12, 8, 12, 6, 3, 1, 0\n];\n\nTables.t13HB = [\n    1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19,\n    3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14,\n    15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16,\n    22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14,\n    35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24,\n    58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17,\n    47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15,\n    72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42,\n    43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16,\n    53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11,\n    35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22,\n    53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7,\n    34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5,\n    45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3,\n    48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2,\n    16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1\n];\n\nTables.t15HB = [\n    7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63,\n    13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36,\n    19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33,\n    29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29,\n    52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27,\n    77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38,\n    125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30,\n    109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25,\n    90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20,\n    71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15,\n    109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9,\n    86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11,\n    118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7,\n    91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3,\n    123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1,\n    71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0\n];\n\nTables.t16HB = [\n    1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17,\n    3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9,\n    15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16,\n    45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26,\n    75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9,\n    66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16,\n    111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10,\n    98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8,\n    85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7,\n    154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11,\n    139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4,\n    243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6,\n    202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4,\n    747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2,\n    377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0,\n    12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3\n];\n\nTables.t24HB = [\n    15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88,\n    14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42,\n    47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18,\n    81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16,\n    147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14,\n    263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12,\n    249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10,\n    435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17,\n    427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16,\n    335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11,\n    668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10,\n    652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6,\n    648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4,\n    620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2,\n    1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0,\n    43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3\n];\n\nTables.t32HB = [\n    1 << 0, 5 << 1, 4 << 1, 5 << 2, 6 << 1, 5 << 2, 4 << 2, 4 << 3,\n    7 << 1, 3 << 2, 6 << 2, 0 << 3, 7 << 2, 2 << 3, 3 << 3, 1 << 4\n];\n\nTables.t33HB = [\n    15 << 0, 14 << 1, 13 << 1, 12 << 2, 11 << 1, 10 << 2, 9 << 2, 8 << 3,\n    7 << 1, 6 << 2, 5 << 2, 4 << 3, 3 << 2, 2 << 3, 1 << 3, 0 << 4\n];\n\nTables.t1l = [\n    1, 4,\n    3, 5\n];\n\nTables.t2l = [\n    1, 4, 7,\n    4, 5, 7,\n    6, 7, 8\n];\n\nTables.t3l = [\n    2, 3, 7,\n    4, 4, 7,\n    6, 7, 8\n];\n\nTables.t5l = [\n    1, 4, 7, 8,\n    4, 5, 8, 9,\n    7, 8, 9, 10,\n    8, 8, 9, 10\n];\n\nTables.t6l = [\n    3, 4, 6, 8,\n    4, 4, 6, 7,\n    5, 6, 7, 8,\n    7, 7, 8, 9\n];\n\nTables.t7l = [\n    1, 4, 7, 9, 9, 10,\n    4, 6, 8, 9, 9, 10,\n    7, 7, 9, 10, 10, 11,\n    8, 9, 10, 11, 11, 11,\n    8, 9, 10, 11, 11, 12,\n    9, 10, 11, 12, 12, 12\n];\n\nTables.t8l = [\n    2, 4, 7, 9, 9, 10,\n    4, 4, 6, 10, 10, 10,\n    7, 6, 8, 10, 10, 11,\n    9, 10, 10, 11, 11, 12,\n    9, 9, 10, 11, 12, 12,\n    10, 10, 11, 11, 13, 13\n];\n\nTables.t9l = [\n    3, 4, 6, 7, 9, 10,\n    4, 5, 6, 7, 8, 10,\n    5, 6, 7, 8, 9, 10,\n    7, 7, 8, 9, 9, 10,\n    8, 8, 9, 9, 10, 11,\n    9, 9, 10, 10, 11, 11\n];\n\nTables.t10l = [\n    1, 4, 7, 9, 10, 10, 10, 11,\n    4, 6, 8, 9, 10, 11, 10, 10,\n    7, 8, 9, 10, 11, 12, 11, 11,\n    8, 9, 10, 11, 12, 12, 11, 12,\n    9, 10, 11, 12, 12, 12, 12, 12,\n    10, 11, 12, 12, 13, 13, 12, 13,\n    9, 10, 11, 12, 12, 12, 13, 13,\n    10, 10, 11, 12, 12, 13, 13, 13\n];\n\nTables.t11l = [\n    2, 4, 6, 8, 9, 10, 9, 10,\n    4, 5, 6, 8, 10, 10, 9, 10,\n    6, 7, 8, 9, 10, 11, 10, 10,\n    8, 8, 9, 11, 10, 12, 10, 11,\n    9, 10, 10, 11, 11, 12, 11, 12,\n    9, 10, 11, 12, 12, 13, 12, 13,\n    9, 9, 9, 10, 11, 12, 12, 12,\n    9, 9, 10, 11, 12, 12, 12, 12\n];\n\nTables.t12l = [\n    4, 4, 6, 8, 9, 10, 10, 10,\n    4, 5, 6, 7, 9, 9, 10, 10,\n    6, 6, 7, 8, 9, 10, 9, 10,\n    7, 7, 8, 8, 9, 10, 10, 10,\n    8, 8, 9, 9, 10, 10, 10, 11,\n    9, 9, 10, 10, 10, 11, 10, 11,\n    9, 9, 9, 10, 10, 11, 11, 12,\n    10, 10, 10, 11, 11, 11, 11, 12\n];\n\nTables.t13l = [\n    1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14,\n    4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14,\n    7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15,\n    8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15,\n    9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16,\n    10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16,\n    10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16,\n    11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18,\n    10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17,\n    11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17,\n    11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19,\n    12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18,\n    12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18,\n    13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18,\n    14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18,\n    13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18\n];\n\nTables.t15l = [\n    3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14,\n    5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13,\n    6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13,\n    7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n    9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14,\n    10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\n    10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14,\n    10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14,\n    11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15,\n    12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15,\n    12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n    13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15,\n    13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15\n];\n\nTables.t16_5l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14,\n    11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12\n];\n\nTables.t16l = [\n    1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10,\n    4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10,\n    7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11,\n    9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12,\n    10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11,\n    10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12,\n    11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12,\n    11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12,\n    11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12,\n    12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13,\n    12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12,\n    13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13,\n    13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13,\n    15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13,\n    14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13,\n    10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10\n];\n\nTables.t24l = [\n    4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10,\n    5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10,\n    7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9,\n    8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9,\n    9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9,\n    10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9,\n    10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9,\n    11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10,\n    11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10,\n    12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10,\n    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10,\n    13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10,\n    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6\n];\n\nTables.t32l = [\n    1 + 0, 4 + 1, 4 + 1, 5 + 2, 4 + 1, 6 + 2, 5 + 2, 6 + 3,\n    4 + 1, 5 + 2, 5 + 2, 6 + 3, 5 + 2, 6 + 3, 6 + 3, 6 + 4\n];\n\nTables.t33l = [\n    4 + 0, 4 + 1, 4 + 1, 4 + 2, 4 + 1, 4 + 2, 4 + 2, 4 + 3,\n    4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 2, 4 + 3, 4 + 3, 4 + 4\n];\n\nTables.ht = [\n    /* xlen, linmax, table, hlen */\n    new HuffCodeTab(0, 0, null, null),\n    new HuffCodeTab(2, 0, Tables.t1HB, Tables.t1l),\n    new HuffCodeTab(3, 0, Tables.t2HB, Tables.t2l),\n    new HuffCodeTab(3, 0, Tables.t3HB, Tables.t3l),\n    new HuffCodeTab(0, 0, null, null), /* Apparently not used */\n    new HuffCodeTab(4, 0, Tables.t5HB, Tables.t5l),\n    new HuffCodeTab(4, 0, Tables.t6HB, Tables.t6l),\n    new HuffCodeTab(6, 0, Tables.t7HB, Tables.t7l),\n    new HuffCodeTab(6, 0, Tables.t8HB, Tables.t8l),\n    new HuffCodeTab(6, 0, Tables.t9HB, Tables.t9l),\n    new HuffCodeTab(8, 0, Tables.t10HB, Tables.t10l),\n    new HuffCodeTab(8, 0, Tables.t11HB, Tables.t11l),\n    new HuffCodeTab(8, 0, Tables.t12HB, Tables.t12l),\n    new HuffCodeTab(16, 0, Tables.t13HB, Tables.t13l),\n    new HuffCodeTab(0, 0, null, Tables.t16_5l), /* Apparently not used */\n    new HuffCodeTab(16, 0, Tables.t15HB, Tables.t15l),\n\n    new HuffCodeTab(1, 1, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(2, 3, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(3, 7, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(4, 15, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(6, 63, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(8, 255, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(10, 1023, Tables.t16HB, Tables.t16l),\n    new HuffCodeTab(13, 8191, Tables.t16HB, Tables.t16l),\n\n    new HuffCodeTab(4, 15, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(5, 31, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(6, 63, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(7, 127, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(8, 255, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(9, 511, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(11, 2047, Tables.t24HB, Tables.t24l),\n    new HuffCodeTab(13, 8191, Tables.t24HB, Tables.t24l),\n\n    new HuffCodeTab(0, 0, Tables.t32HB, Tables.t32l),\n    new HuffCodeTab(0, 0, Tables.t33HB, Tables.t33l),\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 16*16; i++) [\n *      largetbl[i] = ((ht[16].hlen[i]) << 16) + ht[24].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.largetbl = [\n    0x010004, 0x050005, 0x070007, 0x090008, 0x0a0009, 0x0a000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000c, 0x0c000c, 0x0d000c, 0x0d000c, 0x0d000c, 0x0e000d, 0x0a000a,\n    0x040005, 0x060006, 0x080007, 0x090008, 0x0a0009, 0x0b000a, 0x0b000a, 0x0b000b,\n    0x0c000b, 0x0c000b, 0x0c000c, 0x0d000c, 0x0e000c, 0x0d000c, 0x0e000c, 0x0a000a,\n    0x070007, 0x080007, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0c000b, 0x0d000b, 0x0d000c, 0x0d000c, 0x0e000c, 0x0e000d, 0x0b0009,\n    0x090008, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0c000b,\n    0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0c0009,\n    0x0a0009, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000a, 0x0d000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000d, 0x0b0009,\n    0x0a000a, 0x0a0009, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0e000b,\n    0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0c0009,\n    0x0b000a, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0d000b,\n    0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000d, 0x0c0009,\n    0x0b000b, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b,\n    0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000d, 0x11000d, 0x0c000a,\n    0x0b000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b,\n    0x0f000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000d, 0x10000d, 0x0c000a,\n    0x0c000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000c,\n    0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0f000d, 0x10000d, 0x0f000d, 0x0d000a,\n    0x0c000c, 0x0d000b, 0x0c000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c,\n    0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x11000d, 0x11000d, 0x10000d, 0x0c000a,\n    0x0d000c, 0x0d000c, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x10000c,\n    0x10000c, 0x10000c, 0x10000c, 0x10000d, 0x10000d, 0x0f000d, 0x10000d, 0x0d000a,\n    0x0d000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c,\n    0x0f000c, 0x11000c, 0x10000d, 0x10000d, 0x10000d, 0x10000d, 0x12000d, 0x0d000a,\n    0x0f000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000c,\n    0x10000d, 0x12000d, 0x11000d, 0x11000d, 0x11000d, 0x13000d, 0x11000d, 0x0d000a,\n    0x0e000d, 0x0f000c, 0x0d000c, 0x0e000c, 0x10000c, 0x10000c, 0x0f000c, 0x10000d,\n    0x10000d, 0x11000d, 0x12000d, 0x11000d, 0x13000d, 0x11000d, 0x10000d, 0x0d000a,\n    0x0a0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b0009, 0x0c0009, 0x0c0009, 0x0c0009,\n    0x0d0009, 0x0d0009, 0x0d0009, 0x0d000a, 0x0d000a, 0x0d000a, 0x0d000a, 0x0a0006\n];\n/**\n * <CODE>\n *  for (i = 0; i < 3*3; i++) [\n *      table23[i] = ((ht[2].hlen[i]) << 16) + ht[3].hlen[i];\n *  ]\n * </CODE>\n *\n */\nTables.table23 = [\n    0x010002, 0x040003, 0x070007,\n    0x040004, 0x050004, 0x070007,\n    0x060006, 0x070007, 0x080008\n];\n\n/**\n * <CODE>\n *  for (i = 0; i < 4*4; i++) [\n *       table56[i] = ((ht[5].hlen[i]) << 16) + ht[6].hlen[i];\n *   ]\n * </CODE>\n *\n */\nTables.table56 = [\n    0x010003, 0x040004, 0x070006, 0x080008, 0x040004, 0x050004, 0x080006, 0x090007,\n    0x070005, 0x080006, 0x090007, 0x0a0008, 0x080007, 0x080007, 0x090008, 0x0a0009\n];\n\nTables.bitrate_table = [\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], /* MPEG 2 */\n    [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], /* MPEG 1 */\n    [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1], /* MPEG 2.5 */\n];\n\n/**\n * MPEG 2, MPEG 1, MPEG 2.5.\n */\nTables.samplerate_table = [\n    [22050, 24000, 16000, -1],\n    [44100, 48000, 32000, -1],\n    [11025, 12000, 8000, -1],\n];\n\n/**\n * This is the scfsi_band table from 2.4.2.7 of the IS.\n */\nTables.scfsi_band = [0, 6, 11, 16, 21];\n\nfunction MeanBits(meanBits) {\n    this.bits = meanBits;\n}\n\n//package mp3;\n\nfunction CalcNoiseResult() {\n    /**\n     * sum of quantization noise > masking\n     */\n    this.over_noise = 0.;\n    /**\n     * sum of all quantization noise\n     */\n    this.tot_noise = 0.;\n    /**\n     * max quantization noise\n     */\n    this.max_noise = 0.;\n    /**\n     * number of quantization noise > masking\n     */\n    this.over_count = 0;\n    /**\n     * SSD-like cost of distorted bands\n     */\n    this.over_SSD = 0;\n    this.bits = 0;\n}\n\nfunction VBRQuantize() {\n    var qupvt;\n    var tak;\n\n    this.setModules = function (_qupvt, _tk) {\n        qupvt = _qupvt;\n        tak = _tk;\n    }\n    //TODO\n\n}\n\n\n\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\nfunction ATH() {\n    /**\n     * Method for the auto adjustment.\n     */\n    this.useAdjust = 0;\n    /**\n     * factor for tuning the (sample power) point below which adaptive threshold\n     * of hearing adjustment occurs\n     */\n    this.aaSensitivityP = 0.;\n    /**\n     * Lowering based on peak volume, 1 = no lowering.\n     */\n    this.adjust = 0.;\n    /**\n     * Limit for dynamic ATH adjust.\n     */\n    this.adjustLimit = 0.;\n    /**\n     * Determined to lower x dB each second.\n     */\n    this.decay = 0.;\n    /**\n     * Lowest ATH value.\n     */\n    this.floor = 0.;\n    /**\n     * ATH for sfbs in long blocks.\n     */\n    this.l = new_float(Encoder.SBMAX_l);\n    /**\n     * ATH for sfbs in short blocks.\n     */\n    this.s = new_float(Encoder.SBMAX_s);\n    /**\n     * ATH for partitioned sfb21 in long blocks.\n     */\n    this.psfb21 = new_float(Encoder.PSFB21);\n    /**\n     * ATH for partitioned sfb12 in short blocks.\n     */\n    this.psfb12 = new_float(Encoder.PSFB12);\n    /**\n     * ATH for long block convolution bands.\n     */\n    this.cb_l = new_float(Encoder.CBANDS);\n    /**\n     * ATH for short block convolution bands.\n     */\n    this.cb_s = new_float(Encoder.CBANDS);\n    /**\n     * Equal loudness weights (based on ATH).\n     */\n    this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\n\n\nfunction LameGlobalFlags() {\n\n    this.class_id = 0;\n\n    /* input description */\n\n    /**\n     * number of samples. default=-1\n     */\n    this.num_samples = 0;\n    /**\n     * input number of channels. default=2\n     */\n    this.num_channels = 0;\n    /**\n     * input_samp_rate in Hz. default=44.1 kHz\n     */\n    this.in_samplerate = 0;\n    /**\n     * output_samp_rate. default: LAME picks best value at least not used for\n     * MP3 decoding: Remember 44.1 kHz MP3s and AC97\n     */\n    this.out_samplerate = 0;\n    /**\n     * scale input by this amount before encoding at least not used for MP3\n     * decoding\n     */\n    this.scale = 0.;\n    /**\n     * scale input of channel 0 (left) by this amount before encoding\n     */\n    this.scale_left = 0.;\n    /**\n     * scale input of channel 1 (right) by this amount before encoding\n     */\n    this.scale_right = 0.;\n\n    /* general control params */\n    /**\n     * collect data for a MP3 frame analyzer?\n     */\n    this.analysis = false;\n    /**\n     * add Xing VBR tag?\n     */\n    this.bWriteVbrTag = false;\n\n    /**\n     * use lame/mpglib to convert mp3 to wav\n     */\n    this.decode_only = false;\n    /**\n     * quality setting 0=best, 9=worst default=5\n     */\n    this.quality = 0;\n    /**\n     * see enum default = LAME picks best value\n     */\n    this.mode = MPEGMode.STEREO;\n    /**\n     * force M/S mode. requires mode=1\n     */\n    this.force_ms = false;\n    /**\n     * use free format? default=0\n     */\n    this.free_format = false;\n    /**\n     * find the RG value? default=0\n     */\n    this.findReplayGain = false;\n    /**\n     * decode on the fly? default=0\n     */\n    this.decode_on_the_fly = false;\n    /**\n     * 1 (default) writes ID3 tags, 0 not\n     */\n    this.write_id3tag_automatic = false;\n\n    /*\n     * set either brate>0 or compression_ratio>0, LAME will compute the value of\n     * the variable not set. Default is compression_ratio = 11.025\n     */\n    /**\n     * bitrate\n     */\n    this.brate = 0;\n    /**\n     * sizeof(wav file)/sizeof(mp3 file)\n     */\n    this.compression_ratio = 0.;\n\n    /* frame params */\n    /**\n     * mark as copyright. default=0\n     */\n    this.copyright = 0;\n    /**\n     * mark as original. default=1\n     */\n    this.original = 0;\n    /**\n     * the MP3 'private extension' bit. Meaningless\n     */\n    this.extension = 0;\n    /**\n     * Input PCM is emphased PCM (for instance from one of the rarely emphased\n     * CDs), it is STRONGLY not recommended to use this, because psycho does not\n     * take it into account, and last but not least many decoders don't care\n     * about these bits\n     */\n    this.emphasis = 0;\n    /**\n     * use 2 bytes per frame for a CRC checksum. default=0\n     */\n    this.error_protection = 0;\n    /**\n     * enforce ISO spec as much as possible\n     */\n    this.strict_ISO = false;\n\n    /**\n     * use bit reservoir?\n     */\n    this.disable_reservoir = false;\n\n    /* quantization/noise shaping */\n    this.quant_comp = 0;\n    this.quant_comp_short = 0;\n    this.experimentalY = false;\n    this.experimentalZ = 0;\n    this.exp_nspsytune = 0;\n\n    this.preset = 0;\n\n    /* VBR control */\n    this.VBR = null;\n    /**\n     * Range [0,...,1[\n     */\n    this.VBR_q_frac = 0.;\n    /**\n     * Range [0,...,9]\n     */\n    this.VBR_q = 0;\n    this.VBR_mean_bitrate_kbps = 0;\n    this.VBR_min_bitrate_kbps = 0;\n    this.VBR_max_bitrate_kbps = 0;\n    /**\n     * strictly enforce VBR_min_bitrate normaly, it will be violated for analog\n     * silence\n     */\n    this.VBR_hard_min = 0;\n\n    /* resampling and filtering */\n\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.lowpassfreq = 0;\n    /**\n     * freq in Hz. 0=lame choses. -1=no filter\n     */\n    this.highpassfreq = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.lowpasswidth = 0;\n    /**\n     * freq width of filter, in Hz (default=15%)\n     */\n    this.highpasswidth = 0;\n\n    /*\n     * psycho acoustics and other arguments which you should not change unless\n     * you know what you are doing\n     */\n\n    this.maskingadjust = 0.;\n    this.maskingadjust_short = 0.;\n    /**\n     * only use ATH\n     */\n    this.ATHonly = false;\n    /**\n     * only use ATH for short blocks\n     */\n    this.ATHshort = false;\n    /**\n     * disable ATH\n     */\n    this.noATH = false;\n    /**\n     * select ATH formula\n     */\n    this.ATHtype = 0;\n    /**\n     * change ATH formula 4 shape\n     */\n    this.ATHcurve = 0.;\n    /**\n     * lower ATH by this many db\n     */\n    this.ATHlower = 0.;\n    /**\n     * select ATH auto-adjust scheme\n     */\n    this.athaa_type = 0;\n    /**\n     * select ATH auto-adjust loudness calc\n     */\n    this.athaa_loudapprox = 0;\n    /**\n     * dB, tune active region of auto-level\n     */\n    this.athaa_sensitivity = 0.;\n    this.short_blocks = null;\n    /**\n     * use temporal masking effect\n     */\n    this.useTemporal = false;\n    this.interChRatio = 0.;\n    /**\n     * Naoki's adjustment of Mid/Side maskings\n     */\n    this.msfix = 0.;\n\n    /**\n     * 0 off, 1 on\n     */\n    this.tune = false;\n    /**\n     * used to pass values for debugging and stuff\n     */\n    this.tune_value_a = 0.;\n\n    /************************************************************************/\n    /* internal variables, do not set... */\n    /* provided because they may be of use to calling application */\n    /************************************************************************/\n\n    /**\n     * 0=MPEG-2/2.5 1=MPEG-1\n     */\n    this.version = 0;\n    this.encoder_delay = 0;\n    /**\n     * number of samples of padding appended to input\n     */\n    this.encoder_padding = 0;\n    this.framesize = 0;\n    /**\n     * number of frames encoded\n     */\n    this.frameNum = 0;\n    /**\n     * is this struct owned by calling program or lame?\n     */\n    this.lame_allocated_gfp = 0;\n    /**************************************************************************/\n    /* more internal variables are stored in this structure: */\n    /**************************************************************************/\n    this.internal_flags = null;\n}\n\n\n\nfunction CBRNewIterationLoop(_quantize)  {\n    var quantize = _quantize;\n    this.quantize = quantize;\n\tthis.iteration_loop = function(gfp, pe, ms_ener_ratio, ratio) {\n\t\tvar gfc = gfp.internal_flags;\n        var l3_xmin = new_float(L3Side.SFBMAX);\n\t\tvar xrpow = new_float(576);\n\t\tvar targ_bits = new_int(2);\n\t\tvar mean_bits = 0, max_bits;\n\t\tvar l3_side = gfc.l3_side;\n\n\t\tvar mb = new MeanBits(mean_bits);\n\t\tthis.quantize.rv.ResvFrameBegin(gfp, mb);\n\t\tmean_bits = mb.bits;\n\n\t\t/* quantize! */\n\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\n\t\t\t/*\n\t\t\t * calculate needed bits\n\t\t\t */\n\t\t\tmax_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits,\n\t\t\t\t\tgr, gr);\n\n\t\t\tif (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\n\t\t\t\tabort();//fix cc 精简\n\t\t\t}\n\n\t\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\t\tvar adjust, masking_lower_db;\n\t\t\t\tvar cod_info = l3_side.tt[gr][ch];\n\n\t\t\t\tif (cod_info.block_type != Encoder.SHORT_TYPE) {\n\t\t\t\t\t// NORM, START or STOP type\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust - adjust;\n\t\t\t\t} else {\n\t\t\t\t\tadjust = 0;\n\t\t\t\t\tmasking_lower_db = gfc.PSY.mask_adjust_short - adjust;\n\t\t\t\t}\n\t\t\t\tgfc.masking_lower =  Math.pow(10.0,\n\t\t\t\t\t\tmasking_lower_db * 0.1);\n\n\t\t\t\t/*\n\t\t\t\t * init_outer_loop sets up cod_info, scalefac and xrpow\n\t\t\t\t */\n\t\t\t\tthis.quantize.init_outer_loop(gfc, cod_info);\n\t\t\t\tif (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\n\t\t\t\t\t/*\n\t\t\t\t\t * xr contains energy we will have to encode calculate the\n\t\t\t\t\t * masking abilities find some good quantization in\n\t\t\t\t\t * outer_loop\n\t\t\t\t\t */\n\t\t\t\t\tthis.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\n\t\t\t\t\t\t\tl3_xmin);\n\t\t\t\t\tthis.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch,\n\t\t\t\t\t\t\ttarg_bits[ch]);\n\t\t\t\t}\n\n\t\t\t\tthis.quantize.iteration_finish_one(gfc, gr, ch);\n\t\t\t} /* for ch */\n\t\t} /* for gr */\n\n\t\tthis.quantize.rv.ResvFrameEnd(gfc, mean_bits);\n\t}\n}\n\n\nfunction ReplayGain() {\n\t//fix 精简\n}\n\n//package mp3;\n\n/**\n * Layer III side information.\n *\n * @author Ken\n *\n */\n\n\n\nfunction ScaleFac(arrL, arrS, arr21, arr12) {\n\n    this.l = new_int(1 + Encoder.SBMAX_l);\n    this.s = new_int(1 + Encoder.SBMAX_s);\n    this.psfb21 = new_int(1 + Encoder.PSFB21);\n    this.psfb12 = new_int(1 + Encoder.PSFB12);\n    var l = this.l;\n    var s = this.s;\n\n    if (arguments.length == 4) {\n        //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\n        //    final int[] arr12) {\n        this.arrL = arguments[0];\n        this.arrS = arguments[1];\n        this.arr21 = arguments[2];\n        this.arr12 = arguments[3];\n\n        System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\n        System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\n        System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\n        System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\n    }\n}\n\n/*\n *      quantize_pvt source file\n *\n *      Copyright (c) 1999-2002 Takehiro Tominaga\n *      Copyright (c) 2000-2002 Robert Hegemann\n *      Copyright (c) 2001 Naoki Shibata\n *      Copyright (c) 2002-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: QuantizePVT.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n\nQuantizePVT.Q_MAX = (256 + 1);\nQuantizePVT.Q_MAX2 = 116;\nQuantizePVT.LARGE_BITS = 100000;\nQuantizePVT.IXMAX_VAL = 8206;\n\nfunction QuantizePVT() {\n\n    var tak = null;\n    var rv = null;\n    var psy = null;\n\n    this.setModules = function (_tk, _rv, _psy) {\n        tak = _tk;\n        rv = _rv;\n        psy = _psy;\n    };\n\n    function POW20(x) {\n        return pow20[x + QuantizePVT.Q_MAX2];\n    }\n\n    this.IPOW20 = function (x) {\n        return ipow20[x];\n    }\n\n    /**\n     * smallest such that 1.0+DBL_EPSILON != 1.0\n     */\n    var DBL_EPSILON = 2.2204460492503131e-016;\n\n    /**\n     * ix always <= 8191+15. see count_bits()\n     */\n    var IXMAX_VAL = QuantizePVT.IXMAX_VAL;\n\n    var PRECALC_SIZE = (IXMAX_VAL + 2);\n\n    var Q_MAX = QuantizePVT.Q_MAX;\n\n\n    /**\n     * <CODE>\n     * minimum possible number of\n     * -cod_info.global_gain + ((scalefac[] + (cod_info.preflag ? pretab[sfb] : 0))\n     * << (cod_info.scalefac_scale + 1)) + cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n     *\n     * for long block, 0+((15+3)<<2) = 18*4 = 72\n     * for short block, 0+(15<<2)+7*8 = 15*4+56 = 116\n     * </CODE>\n     */\n    var Q_MAX2 = QuantizePVT.Q_MAX2;\n\n    var LARGE_BITS = QuantizePVT.LARGE_BITS;\n\n\n    /**\n     * Assuming dynamic range=96dB, this value should be 92\n     */\n    var NSATHSCALE = 100;\n\n    /**\n     * The following table is used to implement the scalefactor partitioning for\n     * MPEG2 as described in section 2.4.3.2 of the IS. The indexing corresponds\n     * to the way the tables are presented in the IS:\n     *\n     * [table_number][row_in_table][column of nr_of_sfb]\n     */\n    this.nr_of_sfb_block = [\n        [[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]],\n        [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]],\n        [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]],\n        [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]],\n        [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]],\n        [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]];\n\n    /**\n     * Table B.6: layer3 preemphasis\n     */\n    var pretab = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n        2, 2, 3, 3, 3, 2, 0];\n    this.pretab = pretab;\n\n    /**\n     * Here are MPEG1 Table B.8 and MPEG2 Table B.1 -- Layer III scalefactor\n     * bands. <BR>\n     * Index into this using a method such as:<BR>\n     * idx = fr_ps.header.sampling_frequency + (fr_ps.header.version * 3)\n     */\n    this.sfBandIndex = [\n        // Table B.2.b: 22.05 kHz\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb21 pseudo sub bands\n            , [0, 0, 0, 0, 0, 0, 0] //  sfb12 pseudo sub bands\n        ),\n        /* Table B.2.c: 24 kHz */ /* docs: 332. mpg123(broken): 330 */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464,\n                540, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.2.a: 16 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.b: 44.1 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.c: 48 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384,\n                576],\n            [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* Table B.8.a: 32 kHz */\n        new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550,\n                576],\n            [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 11.025 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 12 kHz */\n        new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\n                522, 576],\n            [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\n                402 / 3, 522 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        ),\n        /* MPEG-2.5 8 kHz */\n        new ScaleFac([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570,\n                572, 574, 576],\n            [0 / 3, 24 / 3, 48 / 3, 72 / 3, 108 / 3, 156 / 3, 216 / 3, 288 / 3, 372 / 3, 480 / 3, 486 / 3,\n                492 / 3, 498 / 3, 576 / 3]\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\n            , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\n        )\n    ];\n\n    var pow20 = new_float(Q_MAX + Q_MAX2 + 1);\n    var ipow20 = new_float(Q_MAX);\n    var pow43 = new_float(PRECALC_SIZE);\n\n    var adj43 = new_float(PRECALC_SIZE);\n    this.adj43 = adj43;\n\n    /**\n     * <PRE>\n     * compute the ATH for each scalefactor band cd range: 0..96db\n     *\n     * Input: 3.3kHz signal 32767 amplitude (3.3kHz is where ATH is smallest =\n     * -5db) longblocks: sfb=12 en0/bw=-11db max_en0 = 1.3db shortblocks: sfb=5\n     * -9db 0db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) longblocks: amp=1\n     * sfb=12 en0/bw=-103 db max_en0 = -92db amp=32767 sfb=12 -12 db -1.4db\n     *\n     * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) shortblocks: amp=1\n     * sfb=5 en0/bw= -99 -86 amp=32767 sfb=5 -9 db 4db\n     *\n     *\n     * MAX energy of largest wave at 3.3kHz = 1db AVE energy of largest wave at\n     * 3.3kHz = -11db Let's take AVE: -11db = maximum signal in sfb=12. Dynamic\n     * range of CD: 96db. Therefor energy of smallest audible wave in sfb=12 =\n     * -11 - 96 = -107db = ATH at 3.3kHz.\n     *\n     * ATH formula for this wave: -5db. To adjust to LAME scaling, we need ATH =\n     * ATH_formula - 103 (db) ATH = ATH * 2.5e-10 (ener)\n     * </PRE>\n     */\n    function ATHmdct(gfp, f) {\n        var ath = psy.ATHformula(f, gfp);\n\n        ath -= NSATHSCALE;\n\n        /* modify the MDCT scaling for the ATH and convert to energy */\n        ath = Math.pow(10.0, ath / 10.0 + gfp.ATHlower);\n        return ath;\n    }\n\n    function compute_ath(gfp) {\n        var ATH_l = gfp.internal_flags.ATH.l;\n        var ATH_psfb21 = gfp.internal_flags.ATH.psfb21;\n        var ATH_s = gfp.internal_flags.ATH.s;\n        var ATH_psfb12 = gfp.internal_flags.ATH.psfb12;\n        var gfc = gfp.internal_flags;\n        var samp_freq = gfp.out_samplerate;\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            var start = gfc.scalefac_band.l[sfb];\n            var end = gfc.scalefac_band.l[sfb + 1];\n            ATH_l[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_l[sfb] = Math.min(ATH_l[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\n            var start = gfc.scalefac_band.psfb21[sfb];\n            var end = gfc.scalefac_band.psfb21[sfb + 1];\n            ATH_psfb21[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 576);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb21[sfb] = Math.min(ATH_psfb21[sfb], ATH_f);\n            }\n        }\n\n        for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\n            var start = gfc.scalefac_band.s[sfb];\n            var end = gfc.scalefac_band.s[sfb + 1];\n            ATH_s[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_s[sfb] = Math.min(ATH_s[sfb], ATH_f);\n            }\n            ATH_s[sfb] *= (gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb]);\n        }\n\n        for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\n            var start = gfc.scalefac_band.psfb12[sfb];\n            var end = gfc.scalefac_band.psfb12[sfb + 1];\n            ATH_psfb12[sfb] = Float.MAX_VALUE;\n            for (var i = start; i < end; i++) {\n                var freq = i * samp_freq / (2 * 192);\n                var ATH_f = ATHmdct(gfp, freq);\n                /* freq in kHz */\n                ATH_psfb12[sfb] = Math.min(ATH_psfb12[sfb], ATH_f);\n            }\n            /* not sure about the following */\n            ATH_psfb12[sfb] *= (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]);\n        }\n\n        /*\n         * no-ATH mode: reduce ATH to -200 dB\n         */\n        if (gfp.noATH) {\n            abort();//fix cc 精简\n        }\n\n        /*\n         * work in progress, don't rely on it too much\n         */\n        gfc.ATH.floor = 10. * Math_log10(ATHmdct(gfp, -1.));\n    }\n\n    /**\n     * initialization for iteration_loop\n     */\n    this.iteration_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var l3_side = gfc.l3_side;\n        var i;\n\n        if (gfc.iteration_init_init == 0) {\n            gfc.iteration_init_init = 1;\n\n            l3_side.main_data_begin = 0;\n            compute_ath(gfp);\n\n            pow43[0] = 0.0;\n            for (i = 1; i < PRECALC_SIZE; i++)\n                pow43[i] = Math.pow(i, 4.0 / 3.0);\n\n            for (i = 0; i < PRECALC_SIZE - 1; i++)\n                adj43[i] = ((i + 1) - Math.pow(\n                    0.5 * (pow43[i] + pow43[i + 1]), 0.75));\n            adj43[i] = 0.5;\n\n            for (i = 0; i < Q_MAX; i++)\n                ipow20[i] = Math.pow(2.0, (i - 210) * -0.1875);\n            for (i = 0; i <= Q_MAX + Q_MAX2; i++)\n                pow20[i] = Math.pow(2.0, (i - 210 - Q_MAX2) * 0.25);\n\n            tak.huffman_init(gfc);\n\n            {\n                var bass, alto, treble, sfb21;\n\n                i = (gfp.exp_nspsytune >> 2) & 63;\n                if (i >= 32)\n                    i -= 64;\n                bass = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 8) & 63;\n                if (i >= 32)\n                    i -= 64;\n                alto = Math.pow(10, i / 4.0 / 10.0);\n\n                i = (gfp.exp_nspsytune >> 14) & 63;\n                if (i >= 32)\n                    i -= 64;\n                treble = Math.pow(10, i / 4.0 / 10.0);\n\n                /*\n                 * to be compatible with Naoki's original code, the next 6 bits\n                 * define only the amount of changing treble for sfb21\n                 */\n                i = (gfp.exp_nspsytune >> 20) & 63;\n                if (i >= 32)\n                    i -= 64;\n                sfb21 = treble * Math.pow(10, i / 4.0 / 10.0);\n                for (i = 0; i < Encoder.SBMAX_l; i++) {\n                    var f;\n                    if (i <= 6)\n                        f = bass;\n                    else if (i <= 13)\n                        f = alto;\n                    else if (i <= 20)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.longfact[i] = f;\n                }\n                for (i = 0; i < Encoder.SBMAX_s; i++) {\n                    var f;\n                    if (i <= 5)\n                        f = bass;\n                    else if (i <= 10)\n                        f = alto;\n                    else if (i <= 11)\n                        f = treble;\n                    else\n                        f = sfb21;\n\n                    gfc.nsPsy.shortfact[i] = f;\n                }\n            }\n        }\n    }\n\n    /**\n     * allocate bits among 2 channels based on PE<BR>\n     * mt 6/99<BR>\n     * bugfixes rh 8/01: often allocated more than the allowed 4095 bits\n     */\n    this.on_pe = function (gfp, pe,\n                           targ_bits, mean_bits, gr, cbr) {\n        var gfc = gfp.internal_flags;\n        var tbits = 0, bits;\n        var add_bits = new_int(2);\n        var ch;\n\n        /* allocate targ_bits for granule */\n        var mb = new MeanBits(tbits);\n        var extra_bits = rv.ResvMaxBits(gfp, mean_bits, mb, cbr);\n        tbits = mb.bits;\n        /* maximum allowed bits for this granule */\n        var max_bits = tbits + extra_bits;\n        if (max_bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            // hard limit per granule\n            max_bits = LameInternalFlags.MAX_BITS_PER_GRANULE;\n        }\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            /******************************************************************\n             * allocate bits for each channel\n             ******************************************************************/\n            targ_bits[ch] = Math.min(LameInternalFlags.MAX_BITS_PER_CHANNEL,\n                tbits / gfc.channels_out);\n\n            add_bits[ch] = 0 | (targ_bits[ch] * pe[gr][ch] / 700.0 - targ_bits[ch]);\n\n            /* at most increase bits by 1.5*average */\n            if (add_bits[ch] > mean_bits * 3 / 4)\n                add_bits[ch] = mean_bits * 3 / 4;\n\n            if (add_bits[ch] < 0)\n                add_bits[ch] = 0;\n\n            if (add_bits[ch] + targ_bits[ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\n                add_bits[ch] = Math.max(0,\n                    LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[ch]);\n\n            bits += add_bits[ch];\n        }\n        if (bits > extra_bits) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                add_bits[ch] = extra_bits * add_bits[ch] / bits;\n            }\n        }\n\n        for (ch = 0; ch < gfc.channels_out; ++ch) {\n            targ_bits[ch] += add_bits[ch];\n            extra_bits -= add_bits[ch];\n        }\n\n        for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\n            bits += targ_bits[ch];\n        }\n        if (bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\n            abort();//fix cc 精简\n        }\n\n        return max_bits;\n    }\n\n    //fix cc 精简\n\t\n    /**\n     *  Robert Hegemann 2001-04-27:\n     *  this adjusts the ATH, keeping the original noise floor\n     *  affects the higher frequencies more than the lower ones\n     */\n    this.athAdjust = function (a, x, athFloor) {\n        /*\n         * work in progress\n         */\n        var o = 90.30873362;\n        var p = 94.82444863;\n        var u = Util.FAST_LOG10_X(x, 10.0);\n        var v = a * a;\n        var w = 0.0;\n        u -= athFloor;\n        /* undo scaling */\n        if (v > 1E-20)\n            w = 1. + Util.FAST_LOG10_X(v, 10.0 / o);\n        if (w < 0)\n            w = 0.;\n        u *= w;\n        u += athFloor + o - p;\n        /* redo scaling */\n\n        return Math.pow(10., 0.1 * u);\n    };\n\n    /**\n     * Calculate the allowed distortion for each scalefactor band, as determined\n     * by the psychoacoustic model. xmin(sb) = ratio(sb) * en(sb) / bw(sb)\n     *\n     * returns number of sfb's with energy > ATH\n     */\n    this.calc_xmin = function (gfp, ratio, cod_info, pxmin) {\n        var pxminPos = 0;\n        var gfc = gfp.internal_flags;\n        var gsfb, j = 0, ath_over = 0;\n        var ATH = gfc.ATH;\n        var xr = cod_info.xr;\n        var enable_athaa_fix = (gfp.VBR == VbrMode.vbr_mtrh) ? 1 : 0;\n        var masking_lower = gfc.masking_lower;\n\n        if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n            /* was already done in PSY-Model */\n            masking_lower = 1.0;\n        }\n\n        for (gsfb = 0; gsfb < cod_info.psy_lmax; gsfb++) {\n            var en0, xmin;\n            var rh1, rh2;\n            var width, l;\n\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                xmin = athAdjust(ATH.adjust, ATH.l[gsfb], ATH.floor);\n            else\n                xmin = ATH.adjust * ATH.l[gsfb];\n\n            width = cod_info.width[gsfb];\n            rh1 = xmin / width;\n            rh2 = DBL_EPSILON;\n            l = width >> 1;\n            en0 = 0.0;\n            do {\n                var xa, xb;\n                xa = xr[j] * xr[j];\n                en0 += xa;\n                rh2 += (xa < rh1) ? xa : rh1;\n                j++;\n                xb = xr[j] * xr[j];\n                en0 += xb;\n                rh2 += (xb < rh1) ? xb : rh1;\n                j++;\n            } while (--l > 0);\n            if (en0 > xmin)\n                ath_over++;\n\n            if (gsfb == Encoder.SBPSY_l) {\n                abort();//fix cc 精简\n            }\n            if (enable_athaa_fix != 0) {\n                xmin = rh2;\n            }\n            if (!gfp.ATHonly) {\n                var e = ratio.en.l[gsfb];\n                if (e > 0.0) {\n                    var x;\n                    x = en0 * ratio.thm.l[gsfb] * masking_lower / e;\n                    if (enable_athaa_fix != 0)\n                        x *= gfc.nsPsy.longfact[gsfb];\n                    if (xmin < x)\n                        xmin = x;\n                }\n            }\n            if (enable_athaa_fix != 0)\n                pxmin[pxminPos++] = xmin;\n            else\n                pxmin[pxminPos++] = xmin * gfc.nsPsy.longfact[gsfb];\n        }\n        /* end of long block loop */\n\n        /* use this function to determine the highest non-zero coeff */\n        var max_nonzero = 575;\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            // NORM, START or STOP type, but not SHORT\n            var k = 576;\n            while (k-- != 0 && BitStream.EQ(xr[k], 0)) {\n                max_nonzero = k;\n            }\n        }\n        cod_info.max_nonzero_coeff = max_nonzero;\n\n        for (var sfb = cod_info.sfb_smin; gsfb < cod_info.psymax; sfb++, gsfb += 3) {\n            var width, b;\n            var tmpATH;\n            if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n                tmpATH = athAdjust(ATH.adjust, ATH.s[sfb], ATH.floor);\n            else\n                tmpATH = ATH.adjust * ATH.s[sfb];\n\n            width = cod_info.width[gsfb];\n            for (b = 0; b < 3; b++) {\n                var en0 = 0.0, xmin;\n                var rh1, rh2;\n                var l = width >> 1;\n\n                rh1 = tmpATH / width;\n                rh2 = DBL_EPSILON;\n                do {\n                    var xa, xb;\n                    xa = xr[j] * xr[j];\n                    en0 += xa;\n                    rh2 += (xa < rh1) ? xa : rh1;\n                    j++;\n                    xb = xr[j] * xr[j];\n                    en0 += xb;\n                    rh2 += (xb < rh1) ? xb : rh1;\n                    j++;\n                } while (--l > 0);\n                if (en0 > tmpATH)\n                    ath_over++;\n                if (sfb == Encoder.SBPSY_s) {\n                    abort();//fix cc 精简\n                }\n                if (enable_athaa_fix != 0)\n                    xmin = rh2;\n                else\n                    xmin = tmpATH;\n\n                if (!gfp.ATHonly && !gfp.ATHshort) {\n                    var e = ratio.en.s[sfb][b];\n                    if (e > 0.0) {\n                        var x;\n                        x = en0 * ratio.thm.s[sfb][b] * masking_lower / e;\n                        if (enable_athaa_fix != 0)\n                            x *= gfc.nsPsy.shortfact[sfb];\n                        if (xmin < x)\n                            xmin = x;\n                    }\n                }\n                if (enable_athaa_fix != 0)\n                    pxmin[pxminPos++] = xmin;\n                else\n                    pxmin[pxminPos++] = xmin * gfc.nsPsy.shortfact[sfb];\n            }\n            /* b */\n            if (gfp.useTemporal) {\n                if (pxmin[pxminPos - 3] > pxmin[pxminPos - 3 + 1])\n                    pxmin[pxminPos - 3 + 1] += (pxmin[pxminPos - 3] - pxmin[pxminPos - 3 + 1])\n                        * gfc.decay;\n                if (pxmin[pxminPos - 3 + 1] > pxmin[pxminPos - 3 + 2])\n                    pxmin[pxminPos - 3 + 2] += (pxmin[pxminPos - 3 + 1] - pxmin[pxminPos - 3 + 2])\n                        * gfc.decay;\n            }\n        }\n        /* end of short block sfb loop */\n\n        return ath_over;\n    };\n\n    function StartLine(j) {\n        this.s = j;\n    }\n\n    this.calc_noise_core = function (cod_info, startline, l, step) {\n        var noise = 0;\n        var j = startline.s;\n        var ix = cod_info.l3_enc;\n\n        if (j > cod_info.count1) {\n            while ((l--) != 0) {\n                var temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n                temp = cod_info.xr[j];\n                j++;\n                noise += temp * temp;\n            }\n        } else if (j > cod_info.big_values) {\n            var ix01 = new_float(2);\n            ix01[0] = 0;\n            ix01[1] = step;\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\n                j++;\n                noise += temp * temp;\n            }\n        } else {\n            while ((l--) != 0) {\n                var temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n                temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\n                j++;\n                noise += temp * temp;\n            }\n        }\n\n        startline.s = j;\n        return noise;\n    }\n\n    /**\n     * <PRE>\n     * -oo dB  =>  -1.00\n     * - 6 dB  =>  -0.97\n     * - 3 dB  =>  -0.80\n     * - 2 dB  =>  -0.64\n     * - 1 dB  =>  -0.38\n     *   0 dB  =>   0.00\n     * + 1 dB  =>  +0.49\n     * + 2 dB  =>  +1.06\n     * + 3 dB  =>  +1.68\n     * + 6 dB  =>  +3.69\n     * +10 dB  =>  +6.45\n     * </PRE>\n     */\n    this.calc_noise = function (cod_info, l3_xmin, distort, res, prev_noise) {\n        var distortPos = 0;\n        var l3_xminPos = 0;\n        var sfb, l, over = 0;\n        var over_noise_db = 0;\n        /* 0 dB relative to masking */\n        var tot_noise_db = 0;\n        /* -200 dB relative to masking */\n        var max_noise = -20.0;\n        var j = 0;\n        var scalefac = cod_info.scalefac;\n        var scalefacPos = 0;\n\n        res.over_SSD = 0;\n\n        for (sfb = 0; sfb < cod_info.psymax; sfb++) {\n            var s = cod_info.global_gain\n                - (((scalefac[scalefacPos++]) + (cod_info.preflag != 0 ? pretab[sfb]\n                    : 0)) << (cod_info.scalefac_scale + 1))\n                - cod_info.subblock_gain[cod_info.window[sfb]] * 8;\n            var noise = 0.0;\n\n            if (prev_noise != null && (prev_noise.step[sfb] == s)) {\n\n                /* use previously computed values */\n                noise = prev_noise.noise[sfb];\n                j += cod_info.width[sfb];\n                distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                noise = prev_noise.noise_log[sfb];\n\n            } else {\n                var step = POW20(s);\n                l = cod_info.width[sfb] >> 1;\n\n                if ((j + cod_info.width[sfb]) > cod_info.max_nonzero_coeff) {\n                    var usefullsize;\n                    usefullsize = cod_info.max_nonzero_coeff - j + 1;\n\n                    if (usefullsize > 0)\n                        l = usefullsize >> 1;\n                    else\n                        l = 0;\n                }\n\n                var sl = new StartLine(j);\n                noise = this.calc_noise_core(cod_info, sl, l, step);\n                j = sl.s;\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.step[sfb] = s;\n                    prev_noise.noise[sfb] = noise;\n                }\n\n                noise = distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\n\n                /* multiplying here is adding in dB, but can overflow */\n                noise = Util.FAST_LOG10(Math.max(noise, 1E-20));\n\n                if (prev_noise != null) {\n                    /* save noise values */\n                    prev_noise.noise_log[sfb] = noise;\n                }\n            }\n\n            if (prev_noise != null) {\n                /* save noise values */\n                prev_noise.global_gain = cod_info.global_gain;\n            }\n\n            tot_noise_db += noise;\n\n            if (noise > 0.0) {\n                var tmp;\n\n                tmp = Math.max(0 | (noise * 10 + .5), 1);\n                res.over_SSD += tmp * tmp;\n\n                over++;\n                /* multiplying here is adding in dB -but can overflow */\n                /* over_noise *= noise; */\n                over_noise_db += noise;\n            }\n            max_noise = Math.max(max_noise, noise);\n\n        }\n\n        res.over_count = over;\n        res.tot_noise = tot_noise_db;\n        res.over_noise = over_noise_db;\n        res.max_noise = max_noise;\n\n        return over;\n    }\n\n    //fix cc 精简\n\n}\n\n\nfunction CalcNoiseData() {\n    this.global_gain = 0;\n    this.sfb_count1 = 0;\n    this.step = new_int(39);\n    this.noise = new_float(39);\n    this.noise_log = new_float(39);\n}\n\n//package mp3;\n\n\nfunction GrInfo() {\n    //float xr[] = new float[576];\n    this.xr = new_float(576);\n    //int l3_enc[] = new int[576];\n    this.l3_enc = new_int(576);\n    //int scalefac[] = new int[L3Side.SFBMAX];\n    this.scalefac = new_int(L3Side.SFBMAX);\n    this.xrpow_max = 0.;\n\n    this.part2_3_length = 0;\n    this.big_values = 0;\n    this.count1 = 0;\n    this.global_gain = 0;\n    this.scalefac_compress = 0;\n    this.block_type = 0;\n    this.mixed_block_flag = 0;\n    this.table_select = new_int(3);\n    this.subblock_gain = new_int(3 + 1);\n    this.region0_count = 0;\n    this.region1_count = 0;\n    this.preflag = 0;\n    this.scalefac_scale = 0;\n    this.count1table_select = 0;\n\n    this.part2_length = 0;\n    this.sfb_lmax = 0;\n    this.sfb_smin = 0;\n    this.psy_lmax = 0;\n    this.sfbmax = 0;\n    this.psymax = 0;\n    this.sfbdivide = 0;\n    this.width = new_int(L3Side.SFBMAX);\n    this.window = new_int(L3Side.SFBMAX);\n    this.count1bits = 0;\n    /**\n     * added for LSF\n     */\n    this.sfb_partition_table = null;\n    this.slen = new_int(4);\n\n    this.max_nonzero_coeff = 0;\n\n    var self = this;\n    function clone_int(array) {\n        return new Int32Array(array);\n    }\n    function clone_float(array) {\n        return new Float32Array(array);\n    }\n    this.assign = function (other) {\n        self.xr = clone_float(other.xr); //.slice(0); //clone();\n        self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\n        self.scalefac = clone_int(other.scalefac);//.slice(0); //clone();\n        self.xrpow_max = other.xrpow_max;\n\n        self.part2_3_length = other.part2_3_length;\n        self.big_values = other.big_values;\n        self.count1 = other.count1;\n        self.global_gain = other.global_gain;\n        self.scalefac_compress = other.scalefac_compress;\n        self.block_type = other.block_type;\n        self.mixed_block_flag = other.mixed_block_flag;\n        self.table_select = clone_int(other.table_select);//.slice(0); //clone();\n        self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\n        self.region0_count = other.region0_count;\n        self.region1_count = other.region1_count;\n        self.preflag = other.preflag;\n        self.scalefac_scale = other.scalefac_scale;\n        self.count1table_select = other.count1table_select;\n\n        self.part2_length = other.part2_length;\n        self.sfb_lmax = other.sfb_lmax;\n        self.sfb_smin = other.sfb_smin;\n        self.psy_lmax = other.psy_lmax;\n        self.sfbmax = other.sfbmax;\n        self.psymax = other.psymax;\n        self.sfbdivide = other.sfbdivide;\n        self.width = clone_int(other.width); //.slice(0); //.clone();\n        self.window = clone_int(other.window); //.slice(0); //.clone();\n        self.count1bits = other.count1bits;\n\n        self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\n        self.slen = clone_int(other.slen); //.slice(0); //.clone();\n        self.max_nonzero_coeff = other.max_nonzero_coeff;\n    }\n}\n\n\nvar L3Side = {};\n\n\n\t/**\n\t * max scalefactor band, max(SBMAX_l, SBMAX_s*3, (SBMAX_s-3)*3+8)\n\t */\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n\n/*\n * MP3 quantization\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 1999-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2007 Robert Hegemann\n *      Copyright (c) 2001-2005 Gabriel Bouvigne\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.     See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: Quantize.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\nfunction Quantize() {\n    var bs;\n    this.rv = null;\n    var rv;\n    this.qupvt = null;\n    var qupvt;\n\n    var vbr = new VBRQuantize();\n    var tk;\n\n    this.setModules = function (_bs, _rv, _qupvt, _tk) {\n        bs = _bs;\n        rv = _rv;\n        this.rv = _rv;\n        qupvt = _qupvt;\n        this.qupvt = _qupvt;\n        tk = _tk;\n        vbr.setModules(qupvt, tk);\n    }\n\n    //fix cc 精简\n\n    /**\n     * mt 6/99\n     *\n     * initializes cod_info, scalefac and xrpow\n     *\n     * returns 0 if all energies in xr are zero, else 1\n     */\n    function init_xrpow_core(cod_info, xrpow, upper, sum) {\n        sum = 0;\n        for (var i = 0; i <= upper; ++i) {\n            var tmp = Math.abs(cod_info.xr[i]);\n            sum += tmp;\n            xrpow[i] = Math.sqrt(tmp * Math.sqrt(tmp));\n\n            if (xrpow[i] > cod_info.xrpow_max)\n                cod_info.xrpow_max = xrpow[i];\n        }\n        return sum;\n    }\n\n    this.init_xrpow = function (gfc, cod_info, xrpow) {\n        var sum = 0;\n        var upper = 0 | cod_info.max_nonzero_coeff;\n\n        cod_info.xrpow_max = 0;\n\n        /*\n         * check if there is some energy we have to quantize and calculate xrpow\n         * matching our fresh scalefactors\n         */\n\n        Arrays.fill(xrpow, upper, 576, 0);\n\n        sum = init_xrpow_core(cod_info, xrpow, upper, sum);\n\n        /*\n         * return 1 if we have something to quantize, else 0\n         */\n        if (sum > 1E-20) {\n            var j = 0;\n            if ((gfc.substep_shaping & 2) != 0)\n                j = 1;\n\n            for (var i = 0; i < cod_info.psymax; i++)\n                gfc.pseudohalf[i] = j;\n\n            return true;\n        }\n\n        Arrays.fill(cod_info.l3_enc, 0, 576, 0);\n        return false;\n    }\n\n    /**\n     * Gabriel Bouvigne feb/apr 2003<BR>\n     * Analog silence detection in partitionned sfb21 or sfb12 for short blocks\n     *\n     * From top to bottom of sfb, changes to 0 coeffs which are below ath. It\n     * stops on the first coeff higher than ath.\n     */\n    function psfb21_analogsilence(gfc, cod_info) {\n        var ath = gfc.ATH;\n        var xr = cod_info.xr;\n\n        if (cod_info.block_type != Encoder.SHORT_TYPE) {\n            /* NORM, START or STOP type, but not SHORT blocks */\n            var stop = false;\n            for (var gsfb = Encoder.PSFB21 - 1; gsfb >= 0 && !stop; gsfb--) {\n                var start = gfc.scalefac_band.psfb21[gsfb];\n                var end = gfc.scalefac_band.psfb21[gsfb + 1];\n                var ath21 = qupvt.athAdjust(ath.adjust, ath.psfb21[gsfb],\n                    ath.floor);\n\n                if (gfc.nsPsy.longfact[21] > 1e-12)\n                    ath21 *= gfc.nsPsy.longfact[21];\n\n                for (var j = end - 1; j >= start; j--) {\n                    if (Math.abs(xr[j]) < ath21)\n                        xr[j] = 0;\n                    else {\n                        stop = true;\n                        break;\n                    }\n                }\n            }\n        } else {\n            /* note: short blocks coeffs are reordered */\n            for (var block = 0; block < 3; block++) {\n                var stop = false;\n                for (var gsfb = Encoder.PSFB12 - 1; gsfb >= 0 && !stop; gsfb--) {\n                    var start = gfc.scalefac_band.s[12]\n                        * 3\n                        + (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                        * block\n                        + (gfc.scalefac_band.psfb12[gsfb] - gfc.scalefac_band.psfb12[0]);\n                    var end = start\n                        + (gfc.scalefac_band.psfb12[gsfb + 1] - gfc.scalefac_band.psfb12[gsfb]);\n                    var ath12 = qupvt.athAdjust(ath.adjust, ath.psfb12[gsfb],\n                        ath.floor);\n\n                    if (gfc.nsPsy.shortfact[12] > 1e-12)\n                        ath12 *= gfc.nsPsy.shortfact[12];\n\n                    for (var j = end - 1; j >= start; j--) {\n                        if (Math.abs(xr[j]) < ath12)\n                            xr[j] = 0;\n                        else {\n                            stop = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    this.init_outer_loop = function (gfc, cod_info) {\n        /*\n         * initialize fresh cod_info\n         */\n        cod_info.part2_3_length = 0;\n        cod_info.big_values = 0;\n        cod_info.count1 = 0;\n        cod_info.global_gain = 210;\n        cod_info.scalefac_compress = 0;\n        /* mixed_block_flag, block_type was set in psymodel.c */\n        cod_info.table_select[0] = 0;\n        cod_info.table_select[1] = 0;\n        cod_info.table_select[2] = 0;\n        cod_info.subblock_gain[0] = 0;\n        cod_info.subblock_gain[1] = 0;\n        cod_info.subblock_gain[2] = 0;\n        cod_info.subblock_gain[3] = 0;\n        /* this one is always 0 */\n        cod_info.region0_count = 0;\n        cod_info.region1_count = 0;\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 0;\n        cod_info.count1table_select = 0;\n        cod_info.part2_length = 0;\n        cod_info.sfb_lmax = Encoder.SBPSY_l;\n        cod_info.sfb_smin = Encoder.SBPSY_s;\n        cod_info.psy_lmax = gfc.sfb21_extra ? Encoder.SBMAX_l : Encoder.SBPSY_l;\n        cod_info.psymax = cod_info.psy_lmax;\n        cod_info.sfbmax = cod_info.sfb_lmax;\n        cod_info.sfbdivide = 11;\n        for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\n            cod_info.width[sfb] = gfc.scalefac_band.l[sfb + 1]\n                - gfc.scalefac_band.l[sfb];\n            /* which is always 0. */\n            cod_info.window[sfb] = 3;\n        }\n        if (cod_info.block_type == Encoder.SHORT_TYPE) {\n            var ixwork = new_float(576);\n\n            cod_info.sfb_smin = 0;\n            cod_info.sfb_lmax = 0;\n            if (cod_info.mixed_block_flag != 0) {\n                abort();//fix cc 精简\n            }\n            cod_info.psymax = cod_info.sfb_lmax\n                + 3\n                * ((gfc.sfb21_extra ? Encoder.SBMAX_s : Encoder.SBPSY_s) - cod_info.sfb_smin);\n            cod_info.sfbmax = cod_info.sfb_lmax + 3\n                * (Encoder.SBPSY_s - cod_info.sfb_smin);\n            cod_info.sfbdivide = cod_info.sfbmax - 18;\n            cod_info.psy_lmax = cod_info.sfb_lmax;\n            /* re-order the short blocks, for more efficient encoding below */\n            /* By Takehiro TOMINAGA */\n            /*\n             * Within each scalefactor band, data is given for successive time\n             * windows, beginning with window 0 and ending with window 2. Within\n             * each window, the quantized values are then arranged in order of\n             * increasing frequency...\n             */\n            var ix = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            System.arraycopy(cod_info.xr, 0, ixwork, 0, 576);\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                var start = gfc.scalefac_band.s[sfb];\n                var end = gfc.scalefac_band.s[sfb + 1];\n                for (var window = 0; window < 3; window++) {\n                    for (var l = start; l < end; l++) {\n                        cod_info.xr[ix++] = ixwork[3 * l + window];\n                    }\n                }\n            }\n\n            var j = cod_info.sfb_lmax;\n            for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\n                cod_info.width[j] = cod_info.width[j + 1] = cod_info.width[j + 2] = gfc.scalefac_band.s[sfb + 1]\n                    - gfc.scalefac_band.s[sfb];\n                cod_info.window[j] = 0;\n                cod_info.window[j + 1] = 1;\n                cod_info.window[j + 2] = 2;\n                j += 3;\n            }\n        }\n\n        cod_info.count1bits = 0;\n        cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[0][0];\n        cod_info.slen[0] = 0;\n        cod_info.slen[1] = 0;\n        cod_info.slen[2] = 0;\n        cod_info.slen[3] = 0;\n\n        cod_info.max_nonzero_coeff = 575;\n\n        /*\n         * fresh scalefactors are all zero\n         */\n        Arrays.fill(cod_info.scalefac, 0);\n\n        psfb21_analogsilence(gfc, cod_info);\n    };\n\n    function BinSearchDirection(ordinal) {\n        this.ordinal = ordinal;\n    }\n\n    BinSearchDirection.BINSEARCH_NONE = new BinSearchDirection(0);\n    BinSearchDirection.BINSEARCH_UP = new BinSearchDirection(1);\n    BinSearchDirection.BINSEARCH_DOWN = new BinSearchDirection(2);\n\n    /**\n     * author/date??\n     *\n     * binary step size search used by outer_loop to get a quantizer step size\n     * to start with\n     */\n    function bin_search_StepSize(gfc, cod_info, desired_rate, ch, xrpow) {\n        var nBits;\n        var CurrentStep = gfc.CurrentStep[ch];\n        var flagGoneOver = false;\n        var start = gfc.OldValue[ch];\n        var Direction = BinSearchDirection.BINSEARCH_NONE;\n        cod_info.global_gain = start;\n        desired_rate -= cod_info.part2_length;\n\n        for (; ;) {\n            var step;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n\n            if (CurrentStep == 1 || nBits == desired_rate)\n                break;\n            /* nothing to adjust anymore */\n\n            if (nBits > desired_rate) {\n                /* increase Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_DOWN)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_UP;\n                step = CurrentStep;\n            } else {\n                /* decrease Quantize_StepSize */\n                if (Direction == BinSearchDirection.BINSEARCH_UP)\n                    flagGoneOver = true;\n\n                if (flagGoneOver)\n                    CurrentStep /= 2;\n                Direction = BinSearchDirection.BINSEARCH_DOWN;\n                step = -CurrentStep;\n            }\n            cod_info.global_gain += step;\n            if (cod_info.global_gain < 0) {\n                abort();//fix cc 精简\n            }\n            if (cod_info.global_gain > 255) {\n                abort();//fix cc 精简\n            }\n        }\n\n\n        while (nBits > desired_rate && cod_info.global_gain < 255) {\n            cod_info.global_gain++;\n            nBits = tk.count_bits(gfc, xrpow, cod_info, null);\n        }\n        gfc.CurrentStep[ch] = (start - cod_info.global_gain >= 4) ? 4 : 2;\n        gfc.OldValue[ch] = cod_info.global_gain;\n        cod_info.part2_3_length = nBits;\n        return nBits;\n    }\n\n    //fix cc 精简\n\n    /**\n     * author/date??\n     *\n     * Function: Returns zero if there is a scalefac which has not been\n     * amplified. Otherwise it returns one.\n     */\n    function loop_break(cod_info) {\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++)\n            if (cod_info.scalefac[sfb]\n                + cod_info.subblock_gain[cod_info.window[sfb]] == 0)\n                return false;\n\n        return true;\n    }\n\n    //fix cc 精简\n\n    function quant_compare(quant_comp, best, calc, gi, distort) {\n        /**\n         * noise is given in decibels (dB) relative to masking thesholds.<BR>\n         *\n         * over_noise: ??? (the previous comment is fully wrong)<BR>\n         * tot_noise: ??? (the previous comment is fully wrong)<BR>\n         * max_noise: max quantization noise\n         */\n        var better;\n\n        switch (quant_comp) {\n            default:\n            case 9:\n            {\n                if (best.over_count > 0) {\n                    /* there are distorted sfb */\n                    better = calc.over_SSD <= best.over_SSD;\n                    if (calc.over_SSD == best.over_SSD)\n                        better = calc.bits < best.bits;\n                } else {\n                    /* no distorted sfb */\n                    better = ((calc.max_noise < 0) && ((calc.max_noise * 10 + calc.bits) <= (best.max_noise * 10 + best.bits)));\n                }\n                break;\n            }\n\n            case 0:\n                better = calc.over_count < best.over_count\n                    || (calc.over_count == best.over_count && calc.over_noise < best.over_noise)\n                    || (calc.over_count == best.over_count\n                    && BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n\n            case 8:\n                abort();//fix cc 精简\n            //$FALL-THROUGH$\n            case 1:\n                better = calc.max_noise < best.max_noise;\n                break;\n            case 2:\n                better = calc.tot_noise < best.tot_noise;\n                break;\n            case 3:\n                better = (calc.tot_noise < best.tot_noise)\n                    && (calc.max_noise < best.max_noise);\n                break;\n            case 4:\n                better = (calc.max_noise <= 0.0 && best.max_noise > 0.2)\n                    || (calc.max_noise <= 0.0 && best.max_noise < 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise)\n                    || (calc.max_noise <= 0.0 && best.max_noise > 0.0\n                    && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.05\n                    && best.max_noise > calc.max_noise - 0.1 && calc.tot_noise\n                    + calc.over_noise < best.tot_noise\n                    + best.over_noise)\n                    || (calc.max_noise > 0.0 && best.max_noise > -0.1\n                    && best.max_noise > calc.max_noise - 0.15 && calc.tot_noise\n                    + calc.over_noise + calc.over_noise < best.tot_noise\n                    + best.over_noise + best.over_noise);\n                break;\n            case 5:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\n                break;\n            case 6:\n                better = calc.over_noise < best.over_noise\n                    || (BitStream.EQ(calc.over_noise, best.over_noise) && (calc.max_noise < best.max_noise || (BitStream\n                        .EQ(calc.max_noise, best.max_noise) && calc.tot_noise <= best.tot_noise)));\n                break;\n            case 7:\n                better = calc.over_count < best.over_count\n                    || calc.over_noise < best.over_noise;\n                break;\n        }\n\n        if (best.over_count == 0) {\n            /*\n             * If no distorted bands, only use this quantization if it is\n             * better, and if it uses less bits. Unfortunately, part2_3_length\n             * is sometimes a poor estimator of the final size at low bitrates.\n             */\n            better = better && calc.bits < best.bits;\n        }\n\n        return better;\n    }\n\n    /**\n     * author/date??\n     *\n     * <PRE>\n     *  Amplify the scalefactor bands that violate the masking threshold.\n     *  See ISO 11172-3 Section C.1.5.4.3.5\n     *\n     *  distort[] = noise/masking\n     *  distort[] > 1   ==> noise is not masked\n     *  distort[] < 1   ==> noise is masked\n     *  max_dist = maximum value of distort[]\n     *\n     *  Three algorithms:\n     *  noise_shaping_amp\n     *        0             Amplify all bands with distort[]>1.\n     *\n     *        1             Amplify all bands with distort[] >= max_dist^(.5);\n     *                     ( 50% in the db scale)\n     *\n     *        2             Amplify first band with distort[] >= max_dist;\n     *\n     *\n     *  For algorithms 0 and 1, if max_dist < 1, then amplify all bands\n     *  with distort[] >= .95*max_dist.  This is to make sure we always\n     *  amplify at least one band.\n     * </PRE>\n     */\n    function amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n        var ifqstep34;\n\n        if (cod_info.scalefac_scale == 0) {\n            ifqstep34 = 1.29683955465100964055;\n            /* 2**(.75*.5) */\n        } else {\n            ifqstep34 = 1.68179283050742922612;\n            /* 2**(.75*1) */\n        }\n\n        /* compute maximum value of distort[] */\n        var trigger = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            if (trigger < distort[sfb])\n                trigger = distort[sfb];\n        }\n\n        var noise_shaping_amp = gfc.noise_shaping_amp;\n        if (noise_shaping_amp == 3) {\n            abort();//fix cc 精简\n        }\n        switch (noise_shaping_amp) {\n            case 2:\n                /* amplify exactly 1 band */\n                break;\n\n            case 1:\n                /* amplify bands within 50% of max (on db scale) */\n                if (trigger > 1.0)\n                    trigger = Math.pow(trigger, .5);\n                else\n                    trigger *= .95;\n                break;\n\n            case 0:\n            default:\n                /* ISO algorithm. amplify all bands with distort>1 */\n                if (trigger > 1.0)\n                    trigger = 1.0;\n                else\n                    trigger *= .95;\n                break;\n        }\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var l;\n            j += width;\n            if (distort[sfb] < trigger)\n                continue;\n\n            if ((gfc.substep_shaping & 2) != 0) {\n                abort();//fix cc 精简\n            }\n            cod_info.scalefac[sfb]++;\n            for (l = -width; l < 0; l++) {\n                xrpow[j + l] *= ifqstep34;\n                if (xrpow[j + l] > cod_info.xrpow_max)\n                    cod_info.xrpow_max = xrpow[j + l];\n            }\n\n            if (gfc.noise_shaping_amp == 2)\n                return;\n        }\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * turns on scalefac scale and adjusts scalefactors\n     */\n    function inc_scalefac_scale(cod_info, xrpow) {\n        var ifqstep34 = 1.29683955465100964055;\n\n        var j = 0;\n        for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\n            var width = cod_info.width[sfb];\n            var s = cod_info.scalefac[sfb];\n            if (cod_info.preflag != 0)\n                s += qupvt.pretab[sfb];\n            j += width;\n            if ((s & 1) != 0) {\n                s++;\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= ifqstep34;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n            cod_info.scalefac[sfb] = s >> 1;\n        }\n        cod_info.preflag = 0;\n        cod_info.scalefac_scale = 1;\n    }\n\n    /**\n     * Takehiro Tominaga 2000-xx-xx\n     *\n     * increases the subblock gain and adjusts scalefactors\n     */\n    function inc_subblock_gain(gfc, cod_info, xrpow) {\n        var sfb;\n        var scalefac = cod_info.scalefac;\n\n        /* subbloc_gain can't do anything in the long block region */\n        for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\n            if (scalefac[sfb] >= 16)\n                return true;\n        }\n\n        for (var window = 0; window < 3; window++) {\n            var s1 = 0;\n            var s2 = 0;\n\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbdivide; sfb += 3) {\n                if (s1 < scalefac[sfb])\n                    s1 = scalefac[sfb];\n            }\n            for (; sfb < cod_info.sfbmax; sfb += 3) {\n                if (s2 < scalefac[sfb])\n                    s2 = scalefac[sfb];\n            }\n\n            if (s1 < 16 && s2 < 8)\n                continue;\n\n            if (cod_info.subblock_gain[window] >= 7)\n                return true;\n\n            /*\n             * even though there is no scalefactor for sfb12 subblock gain\n             * affects upper frequencies too, that's why we have to go up to\n             * SBMAX_s\n             */\n            cod_info.subblock_gain[window]++;\n            var j = gfc.scalefac_band.l[cod_info.sfb_lmax];\n            for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbmax; sfb += 3) {\n                var amp;\n                var width = cod_info.width[sfb];\n                var s = scalefac[sfb];\n                s = s - (4 >> cod_info.scalefac_scale);\n                if (s >= 0) {\n                    scalefac[sfb] = s;\n                    j += width * 3;\n                    continue;\n                }\n\n                scalefac[sfb] = 0;\n                {\n                    var gain = 210 + (s << (cod_info.scalefac_scale + 1));\n                    amp = qupvt.IPOW20(gain);\n                }\n                j += width * (window + 1);\n                for (var l = -width; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n                j += width * (3 - window - 1);\n            }\n\n            {\n                var amp = qupvt.IPOW20(202);\n                j += cod_info.width[sfb] * (window + 1);\n                for (var l = -cod_info.width[sfb]; l < 0; l++) {\n                    xrpow[j + l] *= amp;\n                    if (xrpow[j + l] > cod_info.xrpow_max)\n                        cod_info.xrpow_max = xrpow[j + l];\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * <PRE>\n     *  Takehiro Tominaga /date??\n     *  Robert Hegemann 2000-09-06: made a function of it\n     *\n     *  amplifies scalefactor bands,\n     *   - if all are already amplified returns 0\n     *   - if some bands are amplified too much:\n     *      * try to increase scalefac_scale\n     *      * if already scalefac_scale was set\n     *          try on short blocks to increase subblock gain\n     * </PRE>\n     */\n    function balance_noise(gfp, cod_info, distort, xrpow, bRefine) {\n        var gfc = gfp.internal_flags;\n\n        amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine);\n\n        /*\n         * check to make sure we have not amplified too much loop_break returns\n         * 0 if there is an unamplified scalefac scale_bitcount returns 0 if no\n         * scalefactors are too large\n         */\n\n        var status = loop_break(cod_info);\n\n        if (status)\n            return false;\n        /* all bands amplified */\n\n        /*\n         * not all scalefactors have been amplified. so these scalefacs are\n         * possibly valid. encode them:\n         */\n        if (gfc.mode_gr == 2)\n            status = tk.scale_bitcount(cod_info);\n        else\n            status = tk.scale_bitcount_lsf(gfc, cod_info);\n\n        if (!status)\n            return true;\n        /* amplified some bands not exceeding limits */\n\n        /*\n         * some scalefactors are too large. lets try setting scalefac_scale=1\n         */\n        if (gfc.noise_shaping > 1) {\n            Arrays.fill(gfc.pseudohalf, 0);\n            if (0 == cod_info.scalefac_scale) {\n                inc_scalefac_scale(cod_info, xrpow);\n                status = false;\n            } else {\n                if (cod_info.block_type == Encoder.SHORT_TYPE\n                    && gfc.subblock_gain > 0) {\n                    status = (inc_subblock_gain(gfc, cod_info, xrpow) || loop_break(cod_info));\n                }\n            }\n        }\n\n        if (!status) {\n            if (gfc.mode_gr == 2)\n                status = tk.scale_bitcount(cod_info);\n            else\n                status = tk.scale_bitcount_lsf(gfc, cod_info);\n        }\n        return !status;\n    }\n\n    /**\n     * <PRE>\n     *  Function: The outer iteration loop controls the masking conditions\n     *  of all scalefactorbands. It computes the best scalefac and\n     *  global gain. This module calls the inner iteration loop\n     *\n     *  mt 5/99 completely rewritten to allow for bit reservoir control,\n     *  mid/side channels with L/R or mid/side masking thresholds,\n     *  and chooses best quantization instead of last quantization when\n     *  no distortion free quantization can be found.\n     *\n     *  added VBR support mt 5/99\n\n     *\n     *  some code shuffle rh 9/00\n     * </PRE>\n     *\n     * @param l3_xmin\n     *            allowed distortion\n     * @param xrpow\n     *            coloured magnitudes of spectral\n     * @param targ_bits\n     *            maximum allowed bits\n     */\n    this.outer_loop = function (gfp, cod_info, l3_xmin, xrpow, ch, targ_bits) {\n        var gfc = gfp.internal_flags;\n        var cod_info_w = new GrInfo();\n        var save_xrpow = new_float(576);\n        var distort = new_float(L3Side.SFBMAX);\n        var best_noise_info = new CalcNoiseResult();\n        var better;\n        var prev_noise = new CalcNoiseData();\n        var best_part2_3_length = 9999999;\n        var bEndOfSearch = false;\n        var bRefine = false;\n        var best_ggain_pass1 = 0;\n\n        bin_search_StepSize(gfc, cod_info, targ_bits, ch, xrpow);\n\n        if (0 == gfc.noise_shaping)\n        /* fast mode, no noise shaping, we are ready */\n            return 100;\n        /* default noise_info.over_count */\n\n        /* compute the distortion in this quantization */\n        /* coefficients and thresholds both l/r (or both mid/side) */\n        qupvt.calc_noise(cod_info, l3_xmin, distort, best_noise_info,\n            prev_noise);\n        best_noise_info.bits = cod_info.part2_3_length;\n\n        cod_info_w.assign(cod_info);\n        var age = 0;\n        System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n\n        while (!bEndOfSearch) {\n            /* BEGIN MAIN LOOP */\n            do {\n                var noise_info = new CalcNoiseResult();\n                var search_limit;\n                var maxggain = 255;\n\n                /*\n                 * When quantization with no distorted bands is found, allow up\n                 * to X new unsuccesful tries in serial. This gives us more\n                 * possibilities for different quant_compare modes. Much more\n                 * than 3 makes not a big difference, it is only slower.\n                 */\n\n                if ((gfc.substep_shaping & 2) != 0) {\n                    search_limit = 20;\n                } else {\n                    search_limit = 3;\n                }\n\n                /*\n                 * Check if the last scalefactor band is distorted. in VBR mode\n                 * we can't get rid of the distortion, so quit now and VBR mode\n                 * will try again with more bits. (makes a 10% speed increase,\n                 * the files I tested were binary identical, 2000/05/20 Robert\n                 * Hegemann) distort[] > 1 means noise > allowed noise\n                 */\n                if (gfc.sfb21_extra) {\n                    abort();//fix cc 精简\n                }\n\n                /* try a new scalefactor conbination on cod_info_w */\n                if (!balance_noise(gfp, cod_info_w, distort, xrpow, bRefine))\n                    break;\n                if (cod_info_w.scalefac_scale != 0)\n                    maxggain = 254;\n\n                /*\n                 * inner_loop starts with the initial quantization step computed\n                 * above and slowly increases until the bits < huff_bits. Thus\n                 * it is important not to start with too large of an inital\n                 * quantization step. Too small is ok, but inner_loop will take\n                 * longer\n                 */\n                var huff_bits = targ_bits - cod_info_w.part2_length;\n                if (huff_bits <= 0)\n                    break;\n\n                /*\n                 * increase quantizer stepsize until needed bits are below\n                 * maximum\n                 */\n                while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow,\n                    cod_info_w, prev_noise)) > huff_bits\n                && cod_info_w.global_gain <= maxggain)\n                    cod_info_w.global_gain++;\n\n                if (cod_info_w.global_gain > maxggain)\n                    break;\n\n                if (best_noise_info.over_count == 0) {\n\n                    while ((cod_info_w.part2_3_length = tk.count_bits(gfc,\n                        xrpow, cod_info_w, prev_noise)) > best_part2_3_length\n                    && cod_info_w.global_gain <= maxggain)\n                        cod_info_w.global_gain++;\n\n                    if (cod_info_w.global_gain > maxggain)\n                        break;\n                }\n\n                /* compute the distortion in this quantization */\n                qupvt.calc_noise(cod_info_w, l3_xmin, distort, noise_info,\n                    prev_noise);\n                noise_info.bits = cod_info_w.part2_3_length;\n\n                /*\n                 * check if this quantization is better than our saved\n                 * quantization\n                 */\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\n                    // NORM, START or STOP type\n                    better = gfp.quant_comp;\n                } else\n                    better = gfp.quant_comp_short;\n\n                better = quant_compare(better, best_noise_info, noise_info,\n                    cod_info_w, distort) ? 1 : 0;\n\n                /* save data so we can restore this quantization later */\n                if (better != 0) {\n                    best_part2_3_length = cod_info.part2_3_length;\n                    best_noise_info = noise_info;\n                    cod_info.assign(cod_info_w);\n                    age = 0;\n                    /* save data so we can restore this quantization later */\n                    /* store for later reuse */\n                    System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\n                } else {\n                    /* early stop? */\n                    if (gfc.full_outer_loop == 0) {\n                        if (++age > search_limit\n                            && best_noise_info.over_count == 0)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3) && bRefine && age > 30)\n                            break;\n                        if ((gfc.noise_shaping_amp == 3)\n                            && bRefine\n                            && (cod_info_w.global_gain - best_ggain_pass1) > 15)\n                            break;\n                    }\n                }\n            } while ((cod_info_w.global_gain + cod_info_w.scalefac_scale) < 255);\n\n            if (gfc.noise_shaping_amp == 3) {\n                abort();//fix cc 精简\n            } else {\n                bEndOfSearch = true;\n            }\n        }\n\n        /*\n         * finish up\n         */\n        if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\n        /* restore for reuse on next try */\n            System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\n        /*\n         * do the 'substep shaping'\n         */\n        else if ((gfc.substep_shaping & 1) != 0)\n            abort();//fix cc 精简\n\n        return best_noise_info.over_count;\n    }\n\n    /**\n     * Robert Hegemann 2000-09-06\n     *\n     * update reservoir status after FINAL quantization/bitrate\n     */\n    this.iteration_finish_one = function (gfc, gr, ch) {\n        var l3_side = gfc.l3_side;\n        var cod_info = l3_side.tt[gr][ch];\n\n        /*\n         * try some better scalefac storage\n         */\n        tk.best_scalefac_store(gfc, gr, ch, l3_side);\n\n        /*\n         * best huffman_divide may save some bits too\n         */\n        if (gfc.use_best_huffman == 1)\n            tk.best_huffman_divide(gfc, cod_info);\n\n        /*\n         * update reservoir status after FINAL quantization/bitrate\n         */\n        rv.ResvAdjust(gfc, cod_info);\n    };\n\n    //fix cc 精简\n\n}\n\n/*\n *      MP3 window subband -> subband filtering -> mdct routine\n *\n *      Copyright (c) 1999-2000 Takehiro Tominaga\n *\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n/*\n *         Special Thanks to Patrick De Smet for your advices.\n */\n\n/* $Id: NewMDCT.java,v 1.11 2011/05/24 20:48:06 kenchis Exp $ */\n\n//package mp3;\n\n//import java.util.Arrays;\n\n\n\nfunction NewMDCT() {\n\n\tvar enwindow = [\n\t\t\t-4.77e-07 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.03951e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.53674e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.841473e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.5758972e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t3.401756e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.83715e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.740951125354959 / 2.384e-06, /* 15 */\n\t\t\t1.2398e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.91212e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t2.283096e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t1.6994476e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.8756866e-02 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.630711e-03 * 0.740951125354959 / 2.384e-06,\n\t\t\t-2.47478e-04 * 0.740951125354959 / 2.384e-06,\n\t\t\t-1.4782e-05 * 0.740951125354959 / 2.384e-06,\n\t\t\t9.063471690191471e-01, 1.960342806591213e-01,\n\n\t\t\t-4.77e-07 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.05858e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.30786e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.521515e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.5694122e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t3.643036e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.91821e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t9.6321e-05 * 0.773010453362737 / 2.384e-06, /* 14 */\n\t\t\t1.1444e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.65462e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t2.110004e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t1.6112804e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.9634247e-02 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.803326e-03 * 0.773010453362737 / 2.384e-06,\n\t\t\t-2.77042e-04 * 0.773010453362737 / 2.384e-06,\n\t\t\t-1.6689e-05 * 0.773010453362737 / 2.384e-06,\n\t\t\t8.206787908286602e-01, 3.901806440322567e-01,\n\n\t\t\t-4.77e-07 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.07288e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.02653e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t2.174854e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.5586357e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t3.858566e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.95159e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t9.3460e-05 * 0.803207531480645 / 2.384e-06, /* 13 */\n\t\t\t1.0014e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.40190e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.937389e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t1.5233517e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.0506859e-02 * 0.803207531480645 / 2.384e-06,\n\t\t\t-2.974033e-03 * 0.803207531480645 / 2.384e-06,\n\t\t\t-3.07560e-04 * 0.803207531480645 / 2.384e-06,\n\t\t\t-1.8120e-05 * 0.803207531480645 / 2.384e-06,\n\t\t\t7.416505462720353e-01, 5.805693545089249e-01,\n\n\t\t\t-4.77e-07 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t8.68797e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.800537e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t3.5435200e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t4.049301e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.94205e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t9.0599e-05 * 0.831469612302545 / 2.384e-06, /* 12 */\n\t\t\t9.060e-06 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.16348e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.766682e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t1.4358521e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-2.1372318e-02 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.14188e-03 * 0.831469612302545 / 2.384e-06,\n\t\t\t-3.39031e-04 * 0.831469612302545 / 2.384e-06,\n\t\t\t-1.9550e-05 * 0.831469612302545 / 2.384e-06,\n\t\t\t6.681786379192989e-01, 7.653668647301797e-01,\n\n\t\t\t-4.77e-07 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.29220e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.399517e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t3.5242081e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t4.215240e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.89437e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t8.7261e-05 * 0.857728610000272 / 2.384e-06, /* 11 */\n\t\t\t8.106e-06 * 0.857728610000272 / 2.384e-06,\n\t\t\t9.3937e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.597881e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t1.3489246e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.2228718e-02 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.306866e-03 * 0.857728610000272 / 2.384e-06,\n\t\t\t-3.71456e-04 * 0.857728610000272 / 2.384e-06,\n\t\t\t-2.1458e-05 * 0.857728610000272 / 2.384e-06,\n\t\t\t5.993769336819237e-01, 9.427934736519954e-01,\n\n\t\t\t-4.77e-07 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.08719e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.8392e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.71317e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t3.5007000e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t4.357815e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t9.80854e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t8.3923e-05 * 0.881921264348355 / 2.384e-06, /* 10 */\n\t\t\t7.629e-06 * 0.881921264348355 / 2.384e-06,\n\t\t\t7.2956e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.432419e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t1.2627602e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3074150e-02 * 0.881921264348355 / 2.384e-06,\n\t\t\t-3.467083e-03 * 0.881921264348355 / 2.384e-06,\n\t\t\t-4.04358e-04 * 0.881921264348355 / 2.384e-06,\n\t\t\t-2.3365e-05 * 0.881921264348355 / 2.384e-06,\n\t\t\t5.345111359507916e-01, 1.111140466039205e+00,\n\n\t\t\t-9.54e-07 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.08242e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t7.31945e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.15938e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t3.4730434e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.477024e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t9.68933e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t8.0585e-05 * 0.903989293123443 / 2.384e-06, /* 9 */\n\t\t\t6.676e-06 * 0.903989293123443 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.269817e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t1.1775017e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.3907185e-02 * 0.903989293123443 / 2.384e-06,\n\t\t\t-3.622532e-03 * 0.903989293123443 / 2.384e-06,\n\t\t\t-4.38213e-04 * 0.903989293123443 / 2.384e-06,\n\t\t\t-2.5272e-05 * 0.903989293123443 / 2.384e-06,\n\t\t\t4.729647758913199e-01, 1.268786568327291e+00,\n\n\t\t\t-9.54e-07 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.06812e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.74248e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.3379e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4412861e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.573822e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t9.54151e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t7.6771e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t6.199e-06 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t3.4332e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.111031e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t1.0933399e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.4725437e-02 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-3.771782e-03 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-4.72546e-04 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t-2.7657e-05 * 0.92387953251128675613 / 2.384e-06,\n\t\t\t4.1421356237309504879e-01, /* tan(PI/8) */\n\t\t\t1.414213562373095e+00,\n\n\t\t\t-9.54e-07 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.05381e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t6.10352e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-4.75883e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.4055710e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t4.649162e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.35555e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t7.3433e-05 * 0.941544065183021 / 2.384e-06, /* 7 */\n\t\t\t5.245e-06 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.7166e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t9.56535e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t1.0103703e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-2.5527000e-02 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.914356e-03 * 0.941544065183021 / 2.384e-06,\n\t\t\t-5.07355e-04 * 0.941544065183021 / 2.384e-06,\n\t\t\t-3.0041e-05 * 0.941544065183021 / 2.384e-06,\n\t\t\t3.578057213145241e-01, 1.546020906725474e+00,\n\n\t\t\t-9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t1.02520e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t5.39303e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-1.011848e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.3659935e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t4.703045e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.15051e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t7.0095e-05 * 0.956940335732209 / 2.384e-06, /* 6 */\n\t\t\t4.768e-06 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.54e-07 * 0.956940335732209 / 2.384e-06,\n\t\t\t8.06808e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t9.287834e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-2.6310921e-02 * 0.956940335732209 / 2.384e-06,\n\t\t\t-4.048824e-03 * 0.956940335732209 / 2.384e-06,\n\t\t\t-5.42164e-04 * 0.956940335732209 / 2.384e-06,\n\t\t\t-3.2425e-05 * 0.956940335732209 / 2.384e-06,\n\t\t\t3.033466836073424e-01, 1.662939224605090e+00,\n\n\t\t\t-1.431e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t9.9182e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.62532e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.573563e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t3.3225536e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t4.737377e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.91685e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.6280e-05 * 0.970031253194544 / 2.384e-06, /* 5 */\n\t\t\t4.292e-06 * 0.970031253194544 / 2.384e-06,\n\t\t\t-1.3828e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t6.61850e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t8.487225e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-2.7073860e-02 * 0.970031253194544 / 2.384e-06,\n\t\t\t-4.174709e-03 * 0.970031253194544 / 2.384e-06,\n\t\t\t-5.76973e-04 * 0.970031253194544 / 2.384e-06,\n\t\t\t-3.4809e-05 * 0.970031253194544 / 2.384e-06,\n\t\t\t2.504869601913055e-01, 1.763842528696710e+00,\n\n\t\t\t-1.431e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t9.5367e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.78609e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.161503e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t3.2754898e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t4.752159e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t8.66413e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t6.2943e-05 * 0.98078528040323 / 2.384e-06, /* 4 */\n\t\t\t3.815e-06 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.718e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t5.22137e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t7.703304e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-2.7815342e-02 * 0.98078528040323 / 2.384e-06,\n\t\t\t-4.290581e-03 * 0.98078528040323 / 2.384e-06,\n\t\t\t-6.11782e-04 * 0.98078528040323 / 2.384e-06,\n\t\t\t-3.7670e-05 * 0.98078528040323 / 2.384e-06,\n\t\t\t1.989123673796580e-01, 1.847759065022573e+00,\n\n\t\t\t-1.907e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t9.0122e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t2.88486e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.774239e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.2248020e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t4.748821e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t8.38757e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t5.9605e-05 * 0.989176509964781 / 2.384e-06, /* 3 */\n\t\t\t3.338e-06 * 0.989176509964781 / 2.384e-06,\n\t\t\t-3.9577e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t3.88145e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t6.937027e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-2.8532982e-02 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.395962e-03 * 0.989176509964781 / 2.384e-06,\n\t\t\t-6.46591e-04 * 0.989176509964781 / 2.384e-06,\n\t\t\t-4.0531e-05 * 0.989176509964781 / 2.384e-06,\n\t\t\t1.483359875383474e-01, 1.913880671464418e+00,\n\n\t\t\t-1.907e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.4400e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t1.91689e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-3.411293e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.1706810e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t4.728317e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t8.09669e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t5.579e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t3.338e-06 * 0.995184726672197 / 2.384e-06,\n\t\t\t-5.0545e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t2.59876e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t6.189346e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-2.9224873e-02 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.489899e-03 * 0.995184726672197 / 2.384e-06,\n\t\t\t-6.80923e-04 * 0.995184726672197 / 2.384e-06,\n\t\t\t-4.3392e-05 * 0.995184726672197 / 2.384e-06,\n\t\t\t9.849140335716425e-02, 1.961570560806461e+00,\n\n\t\t\t-2.384e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.7724e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t8.8215e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.072189e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t3.1132698e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.691124e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t7.79152e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.2929e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t2.861e-06 * 0.998795456205172 / 2.384e-06,\n\t\t\t-6.0558e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t1.37329e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t5.462170e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-2.9890060e-02 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.570484e-03 * 0.998795456205172 / 2.384e-06,\n\t\t\t-7.14302e-04 * 0.998795456205172 / 2.384e-06,\n\t\t\t-4.6253e-05 * 0.998795456205172 / 2.384e-06,\n\t\t\t4.912684976946725e-02, 1.990369453344394e+00,\n\n\t\t\t3.5780907e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.7876148e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t3.134727e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.457142e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t9.71317e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t2.18868e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.01566e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\n\t\t\t1.3828e-05 * Util.SQRT2 * 0.5 / 2.384e-06,\n\n\t\t\t3.0526638e-02 / 2.384e-06, 4.638195e-03 / 2.384e-06,\n\t\t\t7.47204e-04 / 2.384e-06, 4.9591e-05 / 2.384e-06,\n\t\t\t4.756451e-03 / 2.384e-06, 2.1458e-05 / 2.384e-06,\n\t\t\t-6.9618e-05 / 2.384e-06, /* 2.384e-06/2.384e-06 */\n\t];\n\n\tvar NS = 12;\n\tvar NL = 36;\n\n\tvar win = [\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049690e-13,\n\t     6.423305872147839e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943412e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758252e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558783e-12,\n\t     8.371015190102974e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.456116108943412e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758252e-12,\n\t     -2.858043359288076e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558783e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347923e-13,\n\t     -6.423305872147843e-13,\n\t     -9.400849094049696e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049694e-13,\n\t     -6.423305872147840e-13,\n\t     -2.382191739347918e-13,\n\t     ],\n\t    [\n\t     2.382191739347913e-13,\n\t     6.423305872147834e-13,\n\t     9.400849094049688e-13,\n\t     1.122435026096556e-12,\n\t     1.183840321267481e-12,\n\t     1.122435026096556e-12,\n\t     9.400849094049688e-13,\n\t     6.423305872147841e-13,\n\t     2.382191739347918e-13,\n\n\t     5.456116108943413e-12,\n\t     4.878985199565852e-12,\n\t     4.240448995017367e-12,\n\t     3.559909094758253e-12,\n\t     2.858043359288075e-12,\n\t     2.156177623817898e-12,\n\t     1.475637723558782e-12,\n\t     8.371015190102975e-13,\n\t     2.599706096327376e-13,\n\n\t     -5.461314069809755e-12,\n\t     -4.921085770524055e-12,\n\t     -4.343405037091838e-12,\n\t     -3.732668368707687e-12,\n\t     -3.093523840190885e-12,\n\t     -2.430835727329465e-12,\n\t     -1.734679010007751e-12,\n\t     -9.748253656609281e-13,\n\t     -2.797435120168326e-13,\n\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     -2.283748241799531e-13,\n\t     -4.037858874020686e-13,\n\t     -2.146547464825323e-13,\n\t     ],\n\t    [\n\t     1.316524975873958e-01, /* win[SHORT_TYPE] */\n\t     4.142135623730950e-01,\n\t     7.673269879789602e-01,\n\n\t     1.091308501069271e+00, /* tantab_l */\n\t     1.303225372841206e+00,\n\t     1.569685577117490e+00,\n\t     1.920982126971166e+00,\n\t     2.414213562373094e+00,\n\t     3.171594802363212e+00,\n\t     4.510708503662055e+00,\n\t     7.595754112725146e+00,\n\t     2.290376554843115e+01,\n\n\t     0.98480775301220802032, /* cx */\n\t     0.64278760968653936292,\n\t     0.34202014332566882393,\n\t     0.93969262078590842791,\n\t     -0.17364817766693030343,\n\t     -0.76604444311897790243,\n\t     0.86602540378443870761,\n\t     0.500000000000000e+00,\n\n\t     -5.144957554275265e-01, /* ca */\n\t     -4.717319685649723e-01,\n\t     -3.133774542039019e-01,\n\t     -1.819131996109812e-01,\n\t     -9.457419252642064e-02,\n\t     -4.096558288530405e-02,\n\t     -1.419856857247115e-02,\n\t     -3.699974673760037e-03,\n\n\t     8.574929257125442e-01, /* cs */\n\t     8.817419973177052e-01,\n\t     9.496286491027329e-01,\n\t     9.833145924917901e-01,\n\t     9.955178160675857e-01,\n\t     9.991605581781475e-01,\n\t     9.998991952444470e-01,\n\t     9.999931550702802e-01,\n\t     ],\n\t    [\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     0.000000000000000e+00,\n\t     2.283748241799531e-13,\n\t     4.037858874020686e-13,\n\t     2.146547464825323e-13,\n\n\t     5.461314069809755e-12,\n\t     4.921085770524055e-12,\n\t     4.343405037091838e-12,\n\t     3.732668368707687e-12,\n\t     3.093523840190885e-12,\n\t     2.430835727329466e-12,\n\t     1.734679010007751e-12,\n\t     9.748253656609281e-13,\n\t     2.797435120168326e-13,\n\n\t     -5.456116108943413e-12,\n\t     -4.878985199565852e-12,\n\t     -4.240448995017367e-12,\n\t     -3.559909094758253e-12,\n\t     -2.858043359288075e-12,\n\t     -2.156177623817898e-12,\n\t     -1.475637723558782e-12,\n\t     -8.371015190102975e-13,\n\t     -2.599706096327376e-13,\n\n\t     -2.382191739347913e-13,\n\t     -6.423305872147834e-13,\n\t     -9.400849094049688e-13,\n\t     -1.122435026096556e-12,\n\t     -1.183840321267481e-12,\n\t     -1.122435026096556e-12,\n\t     -9.400849094049688e-13,\n\t     -6.423305872147841e-13,\n\t     -2.382191739347918e-13,\n\t     ]\n\t];\n\n\tvar tantab_l = win[Encoder.SHORT_TYPE];\n\tvar cx = win[Encoder.SHORT_TYPE];\n\tvar ca = win[Encoder.SHORT_TYPE];\n\tvar cs = win[Encoder.SHORT_TYPE];\n\n\t/**\n\t * new IDCT routine written by Takehiro TOMINAGA\n\t *\n\t * PURPOSE: Overlapping window on PCM samples<BR>\n\t *\n\t * SEMANTICS:<BR>\n\t * 32 16-bit pcm samples are scaled to fractional 2's complement and\n\t * concatenated to the end of the window buffer #x#. The updated window\n\t * buffer #x# is then windowed by the analysis window #c# to produce the\n\t * windowed sample #z#\n\t */\n\tvar order = [\n\t    0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29,\n\t    2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31\n\t];\n\n\t/**\n\t * returns sum_j=0^31 a[j]*cos(PI*j*(k+1/2)/32), 0<=k<32\n\t */\n\tfunction window_subband(x1, x1Pos, a) {\n\t\tvar wp = 10;\n\n\t\tvar x2 = x1Pos + 238 - 14 - 286;\n\n\t\tfor (var i = -15; i < 0; i++) {\n\t\t\tvar w, s, t;\n\n\t\t\tw = enwindow[wp + -10];\n\t\t\ts = x1[x2 + -224] * w;\n\t\t\tt = x1[x1Pos + 224] * w;\n\t\t\tw = enwindow[wp + -9];\n\t\t\ts += x1[x2 + -160] * w;\n\t\t\tt += x1[x1Pos + 160] * w;\n\t\t\tw = enwindow[wp + -8];\n\t\t\ts += x1[x2 + -96] * w;\n\t\t\tt += x1[x1Pos + 96] * w;\n\t\t\tw = enwindow[wp + -7];\n\t\t\ts += x1[x2 + -32] * w;\n\t\t\tt += x1[x1Pos + 32] * w;\n\t\t\tw = enwindow[wp + -6];\n\t\t\ts += x1[x2 + 32] * w;\n\t\t\tt += x1[x1Pos + -32] * w;\n\t\t\tw = enwindow[wp + -5];\n\t\t\ts += x1[x2 + 96] * w;\n\t\t\tt += x1[x1Pos + -96] * w;\n\t\t\tw = enwindow[wp + -4];\n\t\t\ts += x1[x2 + 160] * w;\n\t\t\tt += x1[x1Pos + -160] * w;\n\t\t\tw = enwindow[wp + -3];\n\t\t\ts += x1[x2 + 224] * w;\n\t\t\tt += x1[x1Pos + -224] * w;\n\n\t\t\tw = enwindow[wp + -2];\n\t\t\ts += x1[x1Pos + -256] * w;\n\t\t\tt -= x1[x2 + 256] * w;\n\t\t\tw = enwindow[wp + -1];\n\t\t\ts += x1[x1Pos + -192] * w;\n\t\t\tt -= x1[x2 + 192] * w;\n\t\t\tw = enwindow[wp + 0];\n\t\t\ts += x1[x1Pos + -128] * w;\n\t\t\tt -= x1[x2 + 128] * w;\n\t\t\tw = enwindow[wp + 1];\n\t\t\ts += x1[x1Pos + -64] * w;\n\t\t\tt -= x1[x2 + 64] * w;\n\t\t\tw = enwindow[wp + 2];\n\t\t\ts += x1[x1Pos + 0] * w;\n\t\t\tt -= x1[x2 + 0] * w;\n\t\t\tw = enwindow[wp + 3];\n\t\t\ts += x1[x1Pos + 64] * w;\n\t\t\tt -= x1[x2 + -64] * w;\n\t\t\tw = enwindow[wp + 4];\n\t\t\ts += x1[x1Pos + 128] * w;\n\t\t\tt -= x1[x2 + -128] * w;\n\t\t\tw = enwindow[wp + 5];\n\t\t\ts += x1[x1Pos + 192] * w;\n\t\t\tt -= x1[x2 + -192] * w;\n\n\t\t\t/*\n\t\t\t * this multiplyer could be removed, but it needs more 256 FLOAT\n\t\t\t * data. thinking about the data cache performance, I think we\n\t\t\t * should not use such a huge table. tt 2000/Oct/25\n\t\t\t */\n\t\t\ts *= enwindow[wp + 6];\n\t\t\tw = t - s;\n\t\t\ta[30 + i * 2] = t + s;\n\t\t\ta[31 + i * 2] = enwindow[wp + 7] * w;\n\t\t\twp += 18;\n\t\t\tx1Pos--;\n\t\t\tx2++;\n\t\t}\n\t\t{\n\t\t\tvar s, t, u, v;\n\t\t\tt = x1[x1Pos + -16] * enwindow[wp + -10];\n\t\t\ts = x1[x1Pos + -32] * enwindow[wp + -2];\n\t\t\tt += (x1[x1Pos + -48] - x1[x1Pos + 16]) * enwindow[wp + -9];\n\t\t\ts += x1[x1Pos + -96] * enwindow[wp + -1];\n\t\t\tt += (x1[x1Pos + -80] + x1[x1Pos + 48]) * enwindow[wp + -8];\n\t\t\ts += x1[x1Pos + -160] * enwindow[wp + 0];\n\t\t\tt += (x1[x1Pos + -112] - x1[x1Pos + 80]) * enwindow[wp + -7];\n\t\t\ts += x1[x1Pos + -224] * enwindow[wp + 1];\n\t\t\tt += (x1[x1Pos + -144] + x1[x1Pos + 112]) * enwindow[wp + -6];\n\t\t\ts -= x1[x1Pos + 32] * enwindow[wp + 2];\n\t\t\tt += (x1[x1Pos + -176] - x1[x1Pos + 144]) * enwindow[wp + -5];\n\t\t\ts -= x1[x1Pos + 96] * enwindow[wp + 3];\n\t\t\tt += (x1[x1Pos + -208] + x1[x1Pos + 176]) * enwindow[wp + -4];\n\t\t\ts -= x1[x1Pos + 160] * enwindow[wp + 4];\n\t\t\tt += (x1[x1Pos + -240] - x1[x1Pos + 208]) * enwindow[wp + -3];\n\t\t\ts -= x1[x1Pos + 224];\n\n\t\t\tu = s - t;\n\t\t\tv = s + t;\n\n\t\t\tt = a[14];\n\t\t\ts = a[15] - t;\n\n\t\t\ta[31] = v + t; /* A0 */\n\t\t\ta[30] = u + s; /* A1 */\n\t\t\ta[15] = u - s; /* A2 */\n\t\t\ta[14] = v - t; /* A3 */\n\t\t}\n\t\t{\n\t\t\tvar xr;\n\t\t\txr = a[28] - a[0];\n\t\t\ta[0] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -2 * 18 + 7];\n\t\t\txr = a[29] - a[1];\n\t\t\ta[1] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -2 * 18 + 7];\n\n\t\t\txr = a[26] - a[2];\n\t\t\ta[2] += a[26];\n\t\t\ta[26] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[27] - a[3];\n\t\t\ta[3] += a[27];\n\t\t\ta[27] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = a[24] - a[4];\n\t\t\ta[4] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -6 * 18 + 7];\n\t\t\txr = a[25] - a[5];\n\t\t\ta[5] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -6 * 18 + 7];\n\n\t\t\txr = a[22] - a[6];\n\t\t\ta[6] += a[22];\n\t\t\ta[22] = xr * Util.SQRT2;\n\t\t\txr = a[23] - a[7];\n\t\t\ta[7] += a[23];\n\t\t\ta[23] = xr * Util.SQRT2 - a[7];\n\t\t\ta[7] -= a[6];\n\t\t\ta[22] -= a[7];\n\t\t\ta[23] -= a[22];\n\n\t\t\txr = a[6];\n\t\t\ta[6] = a[31] - xr;\n\t\t\ta[31] = a[31] + xr;\n\t\t\txr = a[7];\n\t\t\ta[7] = a[30] - xr;\n\t\t\ta[30] = a[30] + xr;\n\t\t\txr = a[22];\n\t\t\ta[22] = a[15] - xr;\n\t\t\ta[15] = a[15] + xr;\n\t\t\txr = a[23];\n\t\t\ta[23] = a[14] - xr;\n\t\t\ta[14] = a[14] + xr;\n\n\t\t\txr = a[20] - a[8];\n\t\t\ta[8] += a[20];\n\t\t\ta[20] = xr * enwindow[wp + -10 * 18 + 7];\n\t\t\txr = a[21] - a[9];\n\t\t\ta[9] += a[21];\n\t\t\ta[21] = xr * enwindow[wp + -10 * 18 + 7];\n\n\t\t\txr = a[18] - a[10];\n\t\t\ta[10] += a[18];\n\t\t\ta[18] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[19] - a[11];\n\t\t\ta[11] += a[19];\n\t\t\ta[19] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[16] - a[12];\n\t\t\ta[12] += a[16];\n\t\t\ta[16] = xr * enwindow[wp + -14 * 18 + 7];\n\t\t\txr = a[17] - a[13];\n\t\t\ta[13] += a[17];\n\t\t\ta[17] = xr * enwindow[wp + -14 * 18 + 7];\n\n\t\t\txr = -a[20] + a[24];\n\t\t\ta[20] += a[24];\n\t\t\ta[24] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = -a[21] + a[25];\n\t\t\ta[21] += a[25];\n\t\t\ta[25] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[4] - a[8];\n\t\t\ta[4] += a[8];\n\t\t\ta[8] = xr * enwindow[wp + -12 * 18 + 7];\n\t\t\txr = a[5] - a[9];\n\t\t\ta[5] += a[9];\n\t\t\ta[9] = xr * enwindow[wp + -12 * 18 + 7];\n\n\t\t\txr = a[0] - a[12];\n\t\t\ta[0] += a[12];\n\t\t\ta[12] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[1] - a[13];\n\t\t\ta[1] += a[13];\n\t\t\ta[13] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = a[16] - a[28];\n\t\t\ta[16] += a[28];\n\t\t\ta[28] = xr * enwindow[wp + -4 * 18 + 7];\n\t\t\txr = -a[17] + a[29];\n\t\t\ta[17] += a[29];\n\t\t\ta[29] = xr * enwindow[wp + -4 * 18 + 7];\n\n\t\t\txr = Util.SQRT2 * (a[2] - a[10]);\n\t\t\ta[2] += a[10];\n\t\t\ta[10] = xr;\n\t\t\txr = Util.SQRT2 * (a[3] - a[11]);\n\t\t\ta[3] += a[11];\n\t\t\ta[11] = xr;\n\t\t\txr = Util.SQRT2 * (-a[18] + a[26]);\n\t\t\ta[18] += a[26];\n\t\t\ta[26] = xr - a[18];\n\t\t\txr = Util.SQRT2 * (-a[19] + a[27]);\n\t\t\ta[19] += a[27];\n\t\t\ta[27] = xr - a[19];\n\n\t\t\txr = a[2];\n\t\t\ta[19] -= a[3];\n\t\t\ta[3] -= xr;\n\t\t\ta[2] = a[31] - xr;\n\t\t\ta[31] += xr;\n\t\t\txr = a[3];\n\t\t\ta[11] -= a[19];\n\t\t\ta[18] -= xr;\n\t\t\ta[3] = a[30] - xr;\n\t\t\ta[30] += xr;\n\t\t\txr = a[18];\n\t\t\ta[27] -= a[11];\n\t\t\ta[19] -= xr;\n\t\t\ta[18] = a[15] - xr;\n\t\t\ta[15] += xr;\n\n\t\t\txr = a[19];\n\t\t\ta[10] -= xr;\n\t\t\ta[19] = a[14] - xr;\n\t\t\ta[14] += xr;\n\t\t\txr = a[10];\n\t\t\ta[11] -= xr;\n\t\t\ta[10] = a[23] - xr;\n\t\t\ta[23] += xr;\n\t\t\txr = a[11];\n\t\t\ta[26] -= xr;\n\t\t\ta[11] = a[22] - xr;\n\t\t\ta[22] += xr;\n\t\t\txr = a[26];\n\t\t\ta[27] -= xr;\n\t\t\ta[26] = a[7] - xr;\n\t\t\ta[7] += xr;\n\n\t\t\txr = a[27];\n\t\t\ta[27] = a[6] - xr;\n\t\t\ta[6] += xr;\n\n\t\t\txr = Util.SQRT2 * (a[0] - a[4]);\n\t\t\ta[0] += a[4];\n\t\t\ta[4] = xr;\n\t\t\txr = Util.SQRT2 * (a[1] - a[5]);\n\t\t\ta[1] += a[5];\n\t\t\ta[5] = xr;\n\t\t\txr = Util.SQRT2 * (a[16] - a[20]);\n\t\t\ta[16] += a[20];\n\t\t\ta[20] = xr;\n\t\t\txr = Util.SQRT2 * (a[17] - a[21]);\n\t\t\ta[17] += a[21];\n\t\t\ta[21] = xr;\n\n\t\t\txr = -Util.SQRT2 * (a[8] - a[12]);\n\t\t\ta[8] += a[12];\n\t\t\ta[12] = xr - a[8];\n\t\t\txr = -Util.SQRT2 * (a[9] - a[13]);\n\t\t\ta[9] += a[13];\n\t\t\ta[13] = xr - a[9];\n\t\t\txr = -Util.SQRT2 * (a[25] - a[29]);\n\t\t\ta[25] += a[29];\n\t\t\ta[29] = xr - a[25];\n\t\t\txr = -Util.SQRT2 * (a[24] + a[28]);\n\t\t\ta[24] -= a[28];\n\t\t\ta[28] = xr - a[24];\n\n\t\t\txr = a[24] - a[16];\n\t\t\ta[24] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\n\t\t\txr = a[25] - a[17];\n\t\t\ta[25] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[17] - a[1];\n\t\t\ta[17] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[1] - a[0];\n\t\t\ta[1] = xr;\n\t\t\txr = a[16] - xr;\n\t\t\ta[16] = xr;\n\t\t\txr = a[17] - xr;\n\t\t\ta[17] = xr;\n\t\t\txr = a[8] - xr;\n\t\t\ta[8] = xr;\n\t\t\txr = a[9] - xr;\n\t\t\ta[9] = xr;\n\t\t\txr = a[24] - xr;\n\t\t\ta[24] = xr;\n\t\t\txr = a[25] - xr;\n\t\t\ta[25] = xr;\n\t\t\txr = a[4] - xr;\n\t\t\ta[4] = xr;\n\t\t\txr = a[5] - xr;\n\t\t\ta[5] = xr;\n\t\t\txr = a[20] - xr;\n\t\t\ta[20] = xr;\n\t\t\txr = a[21] - xr;\n\t\t\ta[21] = xr;\n\t\t\txr = a[12] - xr;\n\t\t\ta[12] = xr;\n\t\t\txr = a[13] - xr;\n\t\t\ta[13] = xr;\n\t\t\txr = a[28] - xr;\n\t\t\ta[28] = xr;\n\t\t\txr = a[29] - xr;\n\t\t\ta[29] = xr;\n\n\t\t\txr = a[0];\n\t\t\ta[0] += a[31];\n\t\t\ta[31] -= xr;\n\t\t\txr = a[1];\n\t\t\ta[1] += a[30];\n\t\t\ta[30] -= xr;\n\t\t\txr = a[16];\n\t\t\ta[16] += a[15];\n\t\t\ta[15] -= xr;\n\t\t\txr = a[17];\n\t\t\ta[17] += a[14];\n\t\t\ta[14] -= xr;\n\t\t\txr = a[8];\n\t\t\ta[8] += a[23];\n\t\t\ta[23] -= xr;\n\t\t\txr = a[9];\n\t\t\ta[9] += a[22];\n\t\t\ta[22] -= xr;\n\t\t\txr = a[24];\n\t\t\ta[24] += a[7];\n\t\t\ta[7] -= xr;\n\t\t\txr = a[25];\n\t\t\ta[25] += a[6];\n\t\t\ta[6] -= xr;\n\t\t\txr = a[4];\n\t\t\ta[4] += a[27];\n\t\t\ta[27] -= xr;\n\t\t\txr = a[5];\n\t\t\ta[5] += a[26];\n\t\t\ta[26] -= xr;\n\t\t\txr = a[20];\n\t\t\ta[20] += a[11];\n\t\t\ta[11] -= xr;\n\t\t\txr = a[21];\n\t\t\ta[21] += a[10];\n\t\t\ta[10] -= xr;\n\t\t\txr = a[12];\n\t\t\ta[12] += a[19];\n\t\t\ta[19] -= xr;\n\t\t\txr = a[13];\n\t\t\ta[13] += a[18];\n\t\t\ta[18] -= xr;\n\t\t\txr = a[28];\n\t\t\ta[28] += a[3];\n\t\t\ta[3] -= xr;\n\t\t\txr = a[29];\n\t\t\ta[29] += a[2];\n\t\t\ta[2] -= xr;\n\t\t}\n\t}\n\n\t/**\n\t * Function: Calculation of the MDCT In the case of long blocks (type 0,1,3)\n\t * there are 36 coefficents in the time domain and 18 in the frequency\n\t * domain.<BR>\n\t * In the case of short blocks (type 2) there are 3 transformations with\n\t * short length. This leads to 12 coefficents in the time and 6 in the\n\t * frequency domain. In this case the results are stored side by side in the\n\t * vector out[].\n\t *\n\t * New layer3\n\t */\n\tfunction mdct_short(inout, inoutPos) {\n\t\tfor (var l = 0; l < 3; l++) {\n\t\t\tvar tc0, tc1, tc2, ts0, ts1, ts2;\n\n\t\t\tts0 = inout[inoutPos + 2 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t- inout[inoutPos + 5 * 3];\n\t\t\ttc0 = inout[inoutPos + 0 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t- inout[inoutPos + 3 * 3];\n\t\t\ttc1 = ts0 + tc0;\n\t\t\ttc2 = ts0 - tc0;\n\n\t\t\tts0 = inout[inoutPos + 5 * 3] * win[Encoder.SHORT_TYPE][0]\n\t\t\t\t\t+ inout[inoutPos + 2 * 3];\n\t\t\ttc0 = inout[inoutPos + 3 * 3] * win[Encoder.SHORT_TYPE][2]\n\t\t\t\t\t+ inout[inoutPos + 0 * 3];\n\t\t\tts1 = ts0 + tc0;\n\t\t\tts2 = -ts0 + tc0;\n\n\t\t\ttc0 = (inout[inoutPos + 1 * 3] * win[Encoder.SHORT_TYPE][1] - inout[inoutPos + 4 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tts0 = (inout[inoutPos + 4 * 3] * win[Encoder.SHORT_TYPE][1] + inout[inoutPos + 1 * 3]) * 2.069978111953089e-11;\n\t\t\t/*\n\t\t\t * tritab_s [ 1 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 0] = tc1 * 1.907525191737280e-11 + tc0;\n\t\t\t/*\n\t\t\t * tritab_s[ 2 ]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 5] = -ts1 * 1.907525191737280e-11 + ts0;\n\t\t\t/*\n\t\t\t * tritab_s[0 ]\n\t\t\t */\n\t\t\ttc2 = tc2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 2]\n\t\t\t */\n\t\t\tts1 = ts1 * 0.5 * 1.907525191737281e-11 + ts0;\n\t\t\tinout[inoutPos + 3 * 1] = tc2 - ts1;\n\t\t\tinout[inoutPos + 3 * 2] = tc2 + ts1;\n\n\t\t\ttc1 = tc1 * 0.5 * 1.907525191737281e-11 - tc0;\n\t\t\tts2 = ts2 * 0.86602540378443870761 * 1.907525191737281e-11;\n\t\t\t/*\n\t\t\t * tritab_s[ 0]\n\t\t\t */\n\t\t\tinout[inoutPos + 3 * 3] = tc1 + ts2;\n\t\t\tinout[inoutPos + 3 * 4] = tc1 - ts2;\n\n\t\t\tinoutPos++;\n\t\t}\n\t}\n\n\tfunction mdct_long(out, outPos, _in) {\n\t\tvar ct, st;\n\t\t{\n\t\t\tvar tc1, tc2, tc3, tc4, ts5, ts6, ts7, ts8;\n\t\t\t/* 1,2, 5,6, 9,10, 13,14, 17 */\n\t\t\ttc1 = _in[17] - _in[9];\n\t\t\ttc3 = _in[15] - _in[11];\n\t\t\ttc4 = _in[14] - _in[12];\n\t\t\tts5 = _in[0] + _in[8];\n\t\t\tts6 = _in[1] + _in[7];\n\t\t\tts7 = _in[2] + _in[6];\n\t\t\tts8 = _in[3] + _in[5];\n\n\t\t\tout[outPos + 17] = (ts5 + ts7 - ts8) - (ts6 - _in[4]);\n\t\t\tst = (ts5 + ts7 - ts8) * cx[12 + 7] + (ts6 - _in[4]);\n\t\t\tct = (tc1 - tc3 - tc4) * cx[12 + 6];\n\t\t\tout[outPos + 5] = ct + st;\n\t\t\tout[outPos + 6] = ct - st;\n\n\t\t\ttc2 = (_in[16] - _in[10]) * cx[12 + 6];\n\t\t\tts6 = ts6 * cx[12 + 7] + _in[4];\n\t\t\tct = tc1 * cx[12 + 0] + tc2 + tc3 * cx[12 + 1] + tc4 * cx[12 + 2];\n\t\t\tst = -ts5 * cx[12 + 4] + ts6 - ts7 * cx[12 + 5] + ts8 * cx[12 + 3];\n\t\t\tout[outPos + 1] = ct + st;\n\t\t\tout[outPos + 2] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 1] - tc2 - tc3 * cx[12 + 2] + tc4 * cx[12 + 0];\n\t\t\tst = -ts5 * cx[12 + 5] + ts6 - ts7 * cx[12 + 3] + ts8 * cx[12 + 4];\n\t\t\tout[outPos + 9] = ct + st;\n\t\t\tout[outPos + 10] = ct - st;\n\n\t\t\tct = tc1 * cx[12 + 2] - tc2 + tc3 * cx[12 + 0] - tc4 * cx[12 + 1];\n\t\t\tst = ts5 * cx[12 + 3] - ts6 + ts7 * cx[12 + 4] - ts8 * cx[12 + 5];\n\t\t\tout[outPos + 13] = ct + st;\n\t\t\tout[outPos + 14] = ct - st;\n\t\t}\n\t\t{\n\t\t\tvar ts1, ts2, ts3, ts4, tc5, tc6, tc7, tc8;\n\n\t\t\tts1 = _in[8] - _in[0];\n\t\t\tts3 = _in[6] - _in[2];\n\t\t\tts4 = _in[5] - _in[3];\n\t\t\ttc5 = _in[17] + _in[9];\n\t\t\ttc6 = _in[16] + _in[10];\n\t\t\ttc7 = _in[15] + _in[11];\n\t\t\ttc8 = _in[14] + _in[12];\n\n\t\t\tout[outPos + 0] = (tc5 + tc7 + tc8) + (tc6 + _in[13]);\n\t\t\tct = (tc5 + tc7 + tc8) * cx[12 + 7] - (tc6 + _in[13]);\n\t\t\tst = (ts1 - ts3 + ts4) * cx[12 + 6];\n\t\t\tout[outPos + 11] = ct + st;\n\t\t\tout[outPos + 12] = ct - st;\n\n\t\t\tts2 = (_in[7] - _in[1]) * cx[12 + 6];\n\t\t\ttc6 = _in[13] - tc6 * cx[12 + 7];\n\t\t\tct = tc5 * cx[12 + 3] - tc6 + tc7 * cx[12 + 4] + tc8 * cx[12 + 5];\n\t\t\tst = ts1 * cx[12 + 2] + ts2 + ts3 * cx[12 + 0] + ts4 * cx[12 + 1];\n\t\t\tout[outPos + 3] = ct + st;\n\t\t\tout[outPos + 4] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 5] + tc6 - tc7 * cx[12 + 3] - tc8 * cx[12 + 4];\n\t\t\tst = ts1 * cx[12 + 1] + ts2 - ts3 * cx[12 + 2] - ts4 * cx[12 + 0];\n\t\t\tout[outPos + 7] = ct + st;\n\t\t\tout[outPos + 8] = ct - st;\n\n\t\t\tct = -tc5 * cx[12 + 4] + tc6 - tc7 * cx[12 + 5] - tc8 * cx[12 + 3];\n\t\t\tst = ts1 * cx[12 + 0] - ts2 + ts3 * cx[12 + 1] - ts4 * cx[12 + 2];\n\t\t\tout[outPos + 15] = ct + st;\n\t\t\tout[outPos + 16] = ct - st;\n\t\t}\n\t}\n\n\tthis.mdct_sub48 = function(gfc, w0, w1) {\n\t\tvar wk = w0;\n\t\tvar wkPos = 286;\n\t\t/* thinking cache performance, ch->gr loop is better than gr->ch loop */\n\t\tfor (var ch = 0; ch < gfc.channels_out; ch++) {\n\t\t\tfor (var gr = 0; gr < gfc.mode_gr; gr++) {\n\t\t\t\tvar band;\n\t\t\t\tvar gi = (gfc.l3_side.tt[gr][ch]);\n\t\t\t\tvar mdct_enc = gi.xr;\n\t\t\t\tvar mdct_encPos = 0;\n\t\t\t\tvar samp = gfc.sb_sample[ch][1 - gr];\n\t\t\t\tvar sampPos = 0;\n\n\t\t\t\tfor (var k = 0; k < 18 / 2; k++) {\n\t\t\t\t\twindow_subband(wk, wkPos, samp[sampPos]);\n\t\t\t\t\twindow_subband(wk, wkPos + 32, samp[sampPos + 1]);\n\t\t\t\t\tsampPos += 2;\n\t\t\t\t\twkPos += 64;\n\t\t\t\t\t/*\n\t\t\t\t\t * Compensate for inversion in the analysis filter\n\t\t\t\t\t */\n\t\t\t\t\tfor (band = 1; band < 32; band += 2) {\n\t\t\t\t\t\tsamp[sampPos - 1][band] *= -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Perform imdct of 18 previous subband samples + 18 current\n\t\t\t\t * subband samples\n\t\t\t\t */\n\t\t\t\tfor (band = 0; band < 32; band++, mdct_encPos += 18) {\n\t\t\t\t\tvar type = gi.block_type;\n\t\t\t\t\tvar band0 = gfc.sb_sample[ch][gr];\n\t\t\t\t\tvar band1 = gfc.sb_sample[ch][1 - gr];\n\t\t\t\t\tif (gi.mixed_block_flag != 0 && band < 2)\n\t\t\t\t\t\ttype = 0;\n\t\t\t\t\tif (gfc.amp_filter[band] < 1e-12) {\n\t\t\t\t\t\tArrays.fill(mdct_enc, mdct_encPos + 0,\n\t\t\t\t\t\t\t\tmdct_encPos + 18, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (gfc.amp_filter[band] < 1.0) {\n\t\t\t\t\t\t\tabort();//fix cc 精简\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type == Encoder.SHORT_TYPE) {\n\t\t\t\t\t\t\tfor (var k = -NS / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar w = win[Encoder.SHORT_TYPE][k + 3];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 9] = band0[9 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 18] = band0[14 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band0[15 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 10] = band0[15 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band0[14 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 19] = band1[2 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[3 + k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 11] = band1[3 + k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w - band1[2 - k][order[band]];\n\t\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k * 3 + 20] = band1[8 - k][order[band]]\n\t\t\t\t\t\t\t\t\t\t* w + band1[9 + k][order[band]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmdct_short(mdct_enc, mdct_encPos);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar work = new_float(18);\n\t\t\t\t\t\t\tfor (var k = -NL / 4; k < 0; k++) {\n\t\t\t\t\t\t\t\tvar a, b;\n\t\t\t\t\t\t\t\ta = win[type][k + 27]\n\t\t\t\t\t\t\t\t\t\t* band1[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t+ win[type][k + 36]\n\t\t\t\t\t\t\t\t\t\t* band1[8 - k][order[band]];\n\t\t\t\t\t\t\t\tb = win[type][k + 9]\n\t\t\t\t\t\t\t\t\t\t* band0[k + 9][order[band]]\n\t\t\t\t\t\t\t\t\t\t- win[type][k + 18]\n\t\t\t\t\t\t\t\t\t\t* band0[8 - k][order[band]];\n\t\t\t\t\t\t\t\twork[k + 9] = a - b * tantab_l[3 + k + 9];\n\t\t\t\t\t\t\t\twork[k + 18] = a * tantab_l[3 + k + 9] + b;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmdct_long(mdct_enc, mdct_encPos, work);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/*\n\t\t\t\t\t * Perform aliasing reduction butterfly\n\t\t\t\t\t */\n\t\t\t\t\tif (type != Encoder.SHORT_TYPE && band != 0) {\n\t\t\t\t\t\tfor (var k = 7; k >= 0; --k) {\n\t\t\t\t\t\t\tvar bu, bd;\n\t\t\t\t\t\t\tbu = mdct_enc[mdct_encPos + k] * ca[20 + k]\n\t\t\t\t\t\t\t\t\t+ mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* cs[28 + k];\n\t\t\t\t\t\t\tbd = mdct_enc[mdct_encPos + k] * cs[28 + k]\n\t\t\t\t\t\t\t\t\t- mdct_enc[mdct_encPos + -1 - k]\n\t\t\t\t\t\t\t\t\t* ca[20 + k];\n\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + -1 - k] = bu;\n\t\t\t\t\t\t\tmdct_enc[mdct_encPos + k] = bd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twk = w1;\n\t\t\twkPos = 286;\n\t\t\tif (gfc.mode_gr == 1) {\n\t\t\t\tfor (var i = 0; i < 18; i++) {\n\t\t\t\t\tSystem.arraycopy(gfc.sb_sample[ch][1][i], 0,\n\t\t\t\t\t\t\tgfc.sb_sample[ch][0][i], 0, 32);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//package mp3;\n\n\nfunction III_psy_ratio() {\n\tthis.thm = new III_psy_xmin();\n\tthis.en = new III_psy_xmin();\n}\n\n\n/**\n * ENCDELAY The encoder delay.\n *\n * Minimum allowed is MDCTDELAY (see below)\n *\n * The first 96 samples will be attenuated, so using a value less than 96\n * will result in corrupt data for the first 96-ENCDELAY samples.\n *\n * suggested: 576 set to 1160 to sync with FhG.\n */\nEncoder.ENCDELAY = 576;\n/**\n * make sure there is at least one complete frame after the last frame\n * containing real data\n *\n * Using a value of 288 would be sufficient for a a very sophisticated\n * decoder that can decode granule-by-granule instead of frame by frame. But\n * lets not assume this, and assume the decoder will not decode frame N\n * unless it also has data for frame N+1\n */\nEncoder.POSTDELAY = 1152;\n\n/**\n * delay of the MDCT used in mdct.c original ISO routines had a delay of\n * 528! Takehiro's routines:\n */\nEncoder.MDCTDELAY = 48;\nEncoder.FFTOFFSET = (224 + Encoder.MDCTDELAY);\n\n/**\n * Most decoders, including the one we use, have a delay of 528 samples.\n */\nEncoder.DECDELAY = 528;\n\n/**\n * number of subbands\n */\nEncoder.SBLIMIT = 32;\n\n/**\n * parition bands bands\n */\nEncoder.CBANDS = 64;\n\n/**\n * number of critical bands/scale factor bands where masking is computed\n */\nEncoder.SBPSY_l = 21;\nEncoder.SBPSY_s = 12;\n\n/**\n * total number of scalefactor bands encoded\n */\nEncoder.SBMAX_l = 22;\nEncoder.SBMAX_s = 13;\nEncoder.PSFB21 = 6;\nEncoder.PSFB12 = 6;\n\n/**\n * FFT sizes\n */\nEncoder.BLKSIZE = 1024;\nEncoder.HBLKSIZE = (Encoder.BLKSIZE / 2 + 1);\nEncoder.BLKSIZE_s = 256;\nEncoder.HBLKSIZE_s = (Encoder.BLKSIZE_s / 2 + 1);\n\nEncoder.NORM_TYPE = 0;\nEncoder.START_TYPE = 1;\nEncoder.SHORT_TYPE = 2;\nEncoder.STOP_TYPE = 3;\n\n/**\n * <PRE>\n * Mode Extention:\n * When we are in stereo mode, there are 4 possible methods to store these\n * two channels. The stereo modes -m? are using a subset of them.\n *\n *  -ms: MPG_MD_LR_LR\n *  -mj: MPG_MD_LR_LR and MPG_MD_MS_LR\n *  -mf: MPG_MD_MS_LR\n *  -mi: all\n * </PRE>\n */\nEncoder.MPG_MD_LR_LR = 0;\nEncoder.MPG_MD_LR_I = 1;\nEncoder.MPG_MD_MS_LR = 2;\nEncoder.MPG_MD_MS_I = 3;\n\nEncoder.fircoef = [-0.0207887 * 5, -0.0378413 * 5,\n    -0.0432472 * 5, -0.031183 * 5, 7.79609e-18 * 5, 0.0467745 * 5,\n    0.10091 * 5, 0.151365 * 5, 0.187098 * 5];\n\nfunction Encoder() {\n\n    var FFTOFFSET = Encoder.FFTOFFSET;\n    var MPG_MD_MS_LR = Encoder.MPG_MD_MS_LR;\n    //BitStream bs;\n    //PsyModel psy;\n    //VBRTag vbr;\n    //QuantizePVT qupvt;\n    var bs = null;\n    this.psy = null;\n    var psy = null;\n    var vbr = null;\n    var qupvt = null;\n\n    //public final void setModules(BitStream bs, PsyModel psy, QuantizePVT qupvt,\n    //    VBRTag vbr) {\n    this.setModules = function (_bs, _psy, _qupvt, _vbr) {\n        bs = _bs;\n        this.psy = _psy;\n        psy = _psy;\n        vbr = _vbr;\n        qupvt = _qupvt;\n    };\n\n    var newMDCT = new NewMDCT();\n\n    /***********************************************************************\n     *\n     * encoder and decoder delays\n     *\n     ***********************************************************************/\n\n    /**\n     * <PRE>\n     * layer III enc->dec delay:  1056 (1057?)   (observed)\n     * layer  II enc->dec delay:   480  (481?)   (observed)\n     *\n     * polyphase 256-16             (dec or enc)        = 240\n     * mdct      256+32  (9*32)     (dec or enc)        = 288\n     * total:    512+16\n     *\n     * My guess is that delay of polyphase filterbank is actualy 240.5\n     * (there are technical reasons for this, see postings in mp3encoder).\n     * So total Encode+Decode delay = ENCDELAY + 528 + 1\n     * </PRE>\n     */\n\n\n    /**\n     * auto-adjust of ATH, useful for low volume Gabriel Bouvigne 3 feb 2001\n     *\n     * modifies some values in gfp.internal_flags.ATH (gfc.ATH)\n     */\n//private void adjust_ATH(final LameInternalFlags gfc) {\n    function adjust_ATH(gfc) {\n        var gr2_max, max_pow;\n\n        if (gfc.ATH.useAdjust == 0) {\n            gfc.ATH.adjust = 1.0;\n            /* no adjustment */\n            return;\n        }\n\n        /* jd - 2001 mar 12, 27, jun 30 */\n        /* loudness based on equal loudness curve; */\n        /* use granule with maximum combined loudness */\n        max_pow = gfc.loudness_sq[0][0];\n        gr2_max = gfc.loudness_sq[1][0];\n        if (gfc.channels_out == 2) {\n            abort();//fix cc 精简\n        } else {\n            max_pow += max_pow;\n            gr2_max += gr2_max;\n        }\n        if (gfc.mode_gr == 2) {\n            max_pow = Math.max(max_pow, gr2_max);\n        }\n        max_pow *= 0.5;\n        /* max_pow approaches 1.0 for full band noise */\n\n        /* jd - 2001 mar 31, jun 30 */\n        /* user tuning of ATH adjustment region */\n        max_pow *= gfc.ATH.aaSensitivityP;\n\n        /*\n         * adjust ATH depending on range of maximum value\n         */\n\n        /* jd - 2001 feb27, mar12,20, jun30, jul22 */\n        /* continuous curves based on approximation */\n        /* to GB's original values. */\n        /* For an increase in approximate loudness, */\n        /* set ATH adjust to adjust_limit immediately */\n        /* after a delay of one frame. */\n        /* For a loudness decrease, reduce ATH adjust */\n        /* towards adjust_limit gradually. */\n        /* max_pow is a loudness squared or a power. */\n        if (max_pow > 0.03125) { /* ((1 - 0.000625)/ 31.98) from curve below */\n            if (gfc.ATH.adjust >= 1.0) {\n                gfc.ATH.adjust = 1.0;\n            } else {\n                /* preceding frame has lower ATH adjust; */\n                /* ascend only to the preceding adjust_limit */\n                /* in case there is leading low volume */\n                if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                    gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                }\n            }\n            gfc.ATH.adjustLimit = 1.0;\n        } else { /* adjustment curve */\n            /* about 32 dB maximum adjust (0.000625) */\n            var adj_lim_new = 31.98 * max_pow + 0.000625;\n            if (gfc.ATH.adjust >= adj_lim_new) { /* descend gradually */\n                gfc.ATH.adjust *= adj_lim_new * 0.075 + 0.925;\n                if (gfc.ATH.adjust < adj_lim_new) { /* stop descent */\n                    gfc.ATH.adjust = adj_lim_new;\n                }\n            } else { /* ascend */\n                if (gfc.ATH.adjustLimit >= adj_lim_new) {\n                    gfc.ATH.adjust = adj_lim_new;\n                } else {\n                    /* preceding frame has lower ATH adjust; */\n                    /* ascend only to the preceding adjust_limit */\n                    if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\n                        gfc.ATH.adjust = gfc.ATH.adjustLimit;\n                    }\n                }\n            }\n            gfc.ATH.adjustLimit = adj_lim_new;\n        }\n    }\n\n    /**\n     * <PRE>\n     *  some simple statistics\n     *\n     *  bitrate index 0: free bitrate . not allowed in VBR mode\n     *  : bitrates, kbps depending on MPEG version\n     *  bitrate index 15: forbidden\n     *\n     *  mode_ext:\n     *  0:  LR\n     *  1:  LR-i\n     *  2:  MS\n     *  3:  MS-i\n     * </PRE>\n     */\n    function updateStats(gfc) {\n        var gr, ch;\n\n        /* count bitrate indices */\n        gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][4]++;\n        gfc.bitrate_stereoMode_Hist[15][4]++;\n\n        /* count 'em for every mode extension in case of 2 channel encoding */\n        if (gfc.channels_out == 2) {\n            abort();//fix cc 精简\n        }\n        for (gr = 0; gr < gfc.mode_gr; ++gr) {\n            for (ch = 0; ch < gfc.channels_out; ++ch) {\n                var bt = gfc.l3_side.tt[gr][ch].block_type | 0;\n                if (gfc.l3_side.tt[gr][ch].mixed_block_flag != 0)\n                    bt = 4;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][bt]++;\n                gfc.bitrate_blockType_Hist[gfc.bitrate_index][5]++;\n                gfc.bitrate_blockType_Hist[15][bt]++;\n                gfc.bitrate_blockType_Hist[15][5]++;\n            }\n        }\n    }\n\n    function lame_encode_frame_init(gfp, inbuf) {\n        var gfc = gfp.internal_flags;\n\n        var ch, gr;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* prime the MDCT/polyphase filterbank with a short block */\n            var i, j;\n            var primebuff0 = new_float(286 + 1152 + 576);\n            var primebuff1 = new_float(286 + 1152 + 576);\n            gfc.lame_encode_frame_init = 1;\n            for (i = 0, j = 0; i < 286 + 576 * (1 + gfc.mode_gr); ++i) {\n                if (i < 576 * gfc.mode_gr) {\n                    primebuff0[i] = 0;\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = 0;\n                } else {\n                    primebuff0[i] = inbuf[0][j];\n                    if (gfc.channels_out == 2)\n                        primebuff1[i] = inbuf[1][j];\n                    ++j;\n                }\n            }\n            /* polyphase filtering / mdct */\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    gfc.l3_side.tt[gr][ch].block_type = Encoder.SHORT_TYPE;\n                }\n            }\n            newMDCT.mdct_sub48(gfc, primebuff0, primebuff1);\n\n            /* check FFT will not use a negative starting offset */\n            /* check if we have enough data for FFT */\n            /* check if we have enough data for polyphase filterbank */\n        }\n\n    }\n\n    /**\n     * <PRE>\n     * encodeframe()           Layer 3\n     *\n     * encode a single frame\n     *\n     *\n     *    lame_encode_frame()\n     *\n     *\n     *                           gr 0            gr 1\n     *    inbuf:           |--------------|--------------|--------------|\n     *\n     *\n     *    Polyphase (18 windows, each shifted 32)\n     *    gr 0:\n     *    window1          <----512---.\n     *    window18                 <----512---.\n     *\n     *    gr 1:\n     *    window1                         <----512---.\n     *    window18                                <----512---.\n     *\n     *\n     *\n     *    MDCT output:  |--------------|--------------|--------------|\n     *\n     *    FFT's                    <---------1024---------.\n     *                                             <---------1024-------.\n     *\n     *\n     *\n     *        inbuf = buffer of PCM data size=MP3 framesize\n     *        encoder acts on inbuf[ch][0], but output is delayed by MDCTDELAY\n     *        so the MDCT coefficints are from inbuf[ch][-MDCTDELAY]\n     *\n     *        psy-model FFT has a 1 granule delay, so we feed it data for the\n     *        next granule.\n     *        FFT is centered over granule:  224+576+224\n     *        So FFT starts at:   576-224-MDCTDELAY\n     *\n     *        MPEG2:  FFT ends at:  BLKSIZE+576-224-MDCTDELAY      (1328)\n     *        MPEG1:  FFT ends at:  BLKSIZE+2*576-224-MDCTDELAY    (1904)\n     *\n     *        MPEG2:  polyphase first window:  [0..511]\n     *                          18th window:   [544..1055]          (1056)\n     *        MPEG1:            36th window:   [1120..1631]         (1632)\n     *                data needed:  512+framesize-32\n     *\n     *        A close look newmdct.c shows that the polyphase filterbank\n     *        only uses data from [0..510] for each window.  Perhaps because the window\n     *        used by the filterbank is zero for the last point, so Takehiro's\n     *        code doesn't bother to compute with it.\n     *\n     *        FFT starts at 576-224-MDCTDELAY (304)  = 576-FFTOFFSET\n     *\n     * </PRE>\n     */\n\n\n    this.lame_encode_mp3_frame = function (gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var mp3count;\n        var masking_LR = new_array_n([2, 2]);\n        /*\n         * LR masking &\n         * energy\n         */\n        masking_LR[0][0] = new III_psy_ratio();\n        masking_LR[0][1] = new III_psy_ratio();\n        masking_LR[1][0] = new III_psy_ratio();\n        masking_LR[1][1] = new III_psy_ratio();\n        var masking_MS = new_array_n([2, 2]);\n        /* MS masking & energy */\n        masking_MS[0][0] = new III_psy_ratio();\n        masking_MS[0][1] = new III_psy_ratio();\n        masking_MS[1][0] = new III_psy_ratio();\n        masking_MS[1][1] = new III_psy_ratio();\n        //III_psy_ratio masking[][];\n        var masking;\n        /* pointer to selected maskings */\n        var inbuf = [null, null];\n        var gfc = gfp.internal_flags;\n\n        var tot_ener = new_float_n([2, 4]);\n        var ms_ener_ratio = [.5, .5];\n        var pe = [[0., 0.], [0., 0.]];\n        var pe_MS = [[0., 0.], [0., 0.]];\n\n//float[][] pe_use;\n        var pe_use;\n\n        var ch, gr;\n\n        inbuf[0] = inbuf_l;\n        inbuf[1] = inbuf_r;\n\n        if (gfc.lame_encode_frame_init == 0) {\n            /* first run? */\n            lame_encode_frame_init(gfp, inbuf);\n\n        }\n\n        /********************** padding *****************************/\n        /**\n         * <PRE>\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\"\n         * by Martin Sieler, Ralph Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         * </PRE>\n         */\n        gfc.padding = 0;\n        if ((gfc.slot_lag -= gfc.frac_SpF) < 0) {//不可精简\n            gfc.slot_lag += gfp.out_samplerate;\n            gfc.padding = 1;\n        }\n\n        /****************************************\n         * Stage 1: psychoacoustic model *\n         ****************************************/\n\n        if (gfc.psymodel != 0) {\n            /*\n             * psychoacoustic model psy model has a 1 granule (576) delay that\n             * we must compensate for (mt 6/99).\n             */\n            var ret;\n            var bufp = [null, null];\n            /* address of beginning of left & right granule */\n            var bufpPos = 0;\n            /* address of beginning of left & right granule */\n            var blocktype = new_int(2);\n\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    bufp[ch] = inbuf[ch];\n                    bufpPos = 576 + gr * 576 - Encoder.FFTOFFSET;\n                }\n                if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\n                    abort();//fix cc 精简\n                } else {\n                    ret = psy.L3psycho_anal_ns(gfp, bufp, bufpPos, gr,\n                        masking_LR, masking_MS, pe[gr], pe_MS[gr],\n                        tot_ener[gr], blocktype);\n                }\n                if (ret != 0)\n                    return -4;\n\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\n                    abort();//fix cc 精简 stereo\n                }\n\n                /* block type flags */\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    var cod_info = gfc.l3_side.tt[gr][ch];\n                    cod_info.block_type = blocktype[ch];\n                    cod_info.mixed_block_flag = 0;\n                }\n            }\n        } else {\n            abort();//fix cc 精简\n        }\n\n        /* auto-adjust of ATH, useful for low volume */\n        adjust_ATH(gfc);\n\n        /****************************************\n         * Stage 2: MDCT *\n         ****************************************/\n\n        /* polyphase filtering / mdct */\n        newMDCT.mdct_sub48(gfc, inbuf[0], inbuf[1]);\n\n        /****************************************\n         * Stage 3: MS/LR decision *\n         ****************************************/\n\n        /* Here will be selected MS or LR coding of the 2 stereo channels */\n        gfc.mode_ext = Encoder.MPG_MD_LR_LR;\n\n        if (gfp.force_ms) {\n            gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        } else if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            abort();//fix cc 精简 stereo\n        }\n\n        /* bit and noise allocation */\n        if (gfc.mode_ext == MPG_MD_MS_LR) {\n            masking = masking_MS;\n            /* use MS masking */\n            pe_use = pe_MS;\n        } else {\n            masking = masking_LR;\n            /* use LR masking */\n            pe_use = pe;\n        }\n\n        /* copy data for MP3 frame analyzer */\n        if (gfp.analysis && gfc.pinfo != null) {\n            abort();//fix cc 精简\n        }\n\n        /****************************************\n         * Stage 4: quantization loop *\n         ****************************************/\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr) {\n\n            var i;\n            var f;\n\n            for (i = 0; i < 18; i++)\n                gfc.nsPsy.pefirbuf[i] = gfc.nsPsy.pefirbuf[i + 1];\n\n            f = 0.0;\n            for (gr = 0; gr < gfc.mode_gr; gr++)\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    f += pe_use[gr][ch];\n            gfc.nsPsy.pefirbuf[18] = f;\n\n            f = gfc.nsPsy.pefirbuf[9];\n            for (i = 0; i < 9; i++)\n                f += (gfc.nsPsy.pefirbuf[i] + gfc.nsPsy.pefirbuf[18 - i])\n                    * Encoder.fircoef[i];\n\n            f = (670 * 5 * gfc.mode_gr * gfc.channels_out) / f;\n            for (gr = 0; gr < gfc.mode_gr; gr++) {\n                for (ch = 0; ch < gfc.channels_out; ch++) {\n                    pe_use[gr][ch] *= f;\n                }\n            }\n        }\n        gfc.iteration_loop.iteration_loop(gfp, pe_use, ms_ener_ratio, masking);\n\n        /****************************************\n         * Stage 5: bitstream formatting *\n         ****************************************/\n\n        /* write the frame to the bitstream */\n        bs.format_bitstream(gfp);\n\n        /* copy mp3 bit buffer into array */\n        mp3count = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 1);\n\n        if (gfp.bWriteVbrTag)\n            vbr.addVbrFrame(gfp);\n\n        if (gfp.analysis && gfc.pinfo != null) {\n            abort();//fix cc 精简\n        }\n\n        updateStats(gfc);\n\n        return mp3count;\n    }\n}\n\n\n//package mp3;\n\nfunction VBRSeekInfo() {\n    /**\n     * What we have seen so far.\n     */\n    this.sum = 0;\n    /**\n     * How many frames we have seen in this chunk.\n     */\n    this.seen = 0;\n    /**\n     * How many frames we want to collect into one chunk.\n     */\n    this.want = 0;\n    /**\n     * Actual position in our bag.\n     */\n    this.pos = 0;\n    /**\n     * Size of our bag.\n     */\n    this.size = 0;\n    /**\n     * Pointer to our bag.\n     */\n    this.bag = null;\n    this.nVbrNumFrames = 0;\n    this.nBytesWritten = 0;\n    /* VBR tag data */\n    this.TotalFrameSize = 0;\n}\n\n\n\nfunction IIISideInfo() {\n    this.tt = [[null, null], [null, null]];\n    this.main_data_begin = 0;\n    this.private_bits = 0;\n    this.resvDrain_pre = 0;\n    this.resvDrain_post = 0;\n    this.scfsi = [new_int(4), new_int(4)];\n\n    for (var gr = 0; gr < 2; gr++) {\n        for (var ch = 0; ch < 2; ch++) {\n            this.tt[gr][ch] = new GrInfo();\n        }\n    }\n}\n\n\nfunction III_psy_xmin() {\n    this.l = new_float(Encoder.SBMAX_l);\n    this.s = new_float_n([Encoder.SBMAX_s, 3]);\n\n    var self = this;\n    this.assign = function (iii_psy_xmin) {\n        System.arraycopy(iii_psy_xmin.l, 0, self.l, 0, Encoder.SBMAX_l);\n        for (var i = 0; i < Encoder.SBMAX_s; i++) {\n            for (var j = 0; j < 3; j++) {\n                self.s[i][j] = iii_psy_xmin.s[i][j];\n            }\n        }\n    }\n}\n\n\n\n//package mp3;\n\n/**\n * Variables used for --nspsytune\n *\n * @author Ken\n *\n */\nfunction NsPsy() {\n    this.last_en_subshort = new_float_n([4, 9]);\n    this.lastAttacks = new_int(4);\n    this.pefirbuf = new_float(19);\n    this.longfact = new_float(Encoder.SBMAX_l);\n    this.shortfact = new_float(Encoder.SBMAX_s);\n\n    /**\n     * short block tuning\n     */\n    this.attackthre = 0.;\n    this.attackthre_s = 0.;\n}\n\n\n\n\nLameInternalFlags.MFSIZE = (3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY);\nLameInternalFlags.MAX_HEADER_BUF = 256;\nLameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\nLameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\nLameInternalFlags.BPC = 320;\n\nfunction LameInternalFlags() {\n    var MAX_HEADER_LEN = 40;\n\n\n    /********************************************************************\n     * internal variables NOT set by calling program, and should not be *\n     * modified by the calling program *\n     ********************************************************************/\n\n    /**\n     * Some remarks to the Class_ID field: The Class ID is an Identifier for a\n     * pointer to this struct. It is very unlikely that a pointer to\n     * lame_global_flags has the same 32 bits in it's structure (large and other\n     * special properties, for instance prime).\n     *\n     * To test that the structure is right and initialized, use: if ( gfc .\n     * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\n     * data and 1 for init data, the right test should be \"if (flag == 1)\" and\n     * NOT \"if (flag)\". Unintended modification of this element will be\n     * otherwise misinterpreted as an init.\n     */\n    this.Class_ID = 0;\n\n    this.lame_encode_frame_init = 0;\n    this.iteration_init_init = 0;\n    this.fill_buffer_resample_init = 0;\n\n    //public float mfbuf[][] = new float[2][MFSIZE];\n    this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\n\n    /**\n     * granules per frame\n     */\n    this.mode_gr = 0;\n    /**\n     * number of channels in the input data stream (PCM or decoded PCM)\n     */\n    this.channels_in = 0;\n    /**\n     * number of channels in the output data stream (not used for decoding)\n     */\n    this.channels_out = 0;\n    /**\n     * input_samp_rate/output_samp_rate\n     */\n        //public double resample_ratio;\n    this.resample_ratio = 0.;\n\n    this.mf_samples_to_encode = 0;\n    this.mf_size = 0;\n    /**\n     * min bitrate index\n     */\n    this.VBR_min_bitrate = 0;\n    /**\n     * max bitrate index\n     */\n    this.VBR_max_bitrate = 0;\n    this.bitrate_index = 0;\n    this.samplerate_index = 0;\n    this.mode_ext = 0;\n\n    /* lowpass and highpass filter control */\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.lowpass1 = 0.;\n    this.lowpass2 = 0.;\n    /**\n     * normalized frequency bounds of passband\n     */\n    this.highpass1 = 0.;\n    this.highpass2 = 0.;\n\n    /**\n     * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\n     */\n    this.noise_shaping = 0;\n\n    /**\n     * 0 = ISO model: amplify all distorted bands<BR>\n     * 1 = amplify within 50% of max (on db scale)<BR>\n     * 2 = amplify only most distorted band<BR>\n     * 3 = method 1 and refine with method 2<BR>\n     */\n    this.noise_shaping_amp = 0;\n    /**\n     * 0 = no substep<BR>\n     * 1 = use substep shaping at last step(VBR only)<BR>\n     * (not implemented yet)<BR>\n     * 2 = use substep inside loop<BR>\n     * 3 = use substep inside loop and last step<BR>\n     */\n    this.substep_shaping = 0;\n\n    /**\n     * 1 = gpsycho. 0 = none\n     */\n    this.psymodel = 0;\n    /**\n     * 0 = stop at over=0, all scalefacs amplified or<BR>\n     * a scalefac has reached max value<BR>\n     * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\n     * 2 = stop when all scalefacs amplified\n     */\n    this.noise_shaping_stop = 0;\n\n    /**\n     * 0 = no, 1 = yes\n     */\n    this.subblock_gain = 0;\n    /**\n     * 0 = no. 1=outside loop 2=inside loop(slow)\n     */\n    this.use_best_huffman = 0;\n\n    /**\n     * 0 = stop early after 0 distortion found. 1 = full search\n     */\n    this.full_outer_loop = 0;\n\n    //public IIISideInfo l3_side = new IIISideInfo();\n    this.l3_side = new IIISideInfo();\n    this.ms_ratio = new_float(2);\n\n    /* used for padding */\n    /**\n     * padding for the current frame?\n     */\n    this.padding = 0;\n    this.frac_SpF = 0;\n    this.slot_lag = 0;\n\n    /**\n     * optional ID3 tags\n     */\n        //public ID3TagSpec tag_spec;\n    this.tag_spec = null;\n    this.nMusicCRC = 0;\n\n    /* variables used by Quantize */\n    //public int OldValue[] = new int[2];\n    this.OldValue = new_int(2);\n    //public int CurrentStep[] = new int[2];\n    this.CurrentStep = new_int(2);\n\n    this.masking_lower = 0.;\n    //public int bv_scf[] = new int[576];\n    this.bv_scf = new_int(576);\n    //public int pseudohalf[] = new int[L3Side.SFBMAX];\n    this.pseudohalf = new_int(L3Side.SFBMAX);\n\n    /**\n     * will be set in lame_init_params\n     */\n    this.sfb21_extra = false;\n\n    /* BPC = maximum number of filter convolution windows to precompute */\n    //public float[][] inbuf_old = new float[2][];\n    this.inbuf_old = new Array(2);\n    //public float[][] blackfilt = new float[2 * BPC + 1][];\n    this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\n    //public double itime[] = new double[2];\n    this.itime = new_double(2);\n    this.sideinfo_len = 0;\n\n    /* variables for newmdct.c */\n    //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\n    this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\n    this.amp_filter = new_float(32);\n\n    /* variables for BitStream */\n\n    /**\n     * <PRE>\n     * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\n     * max number of frames in reservoir:  8\n     * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\n     * with VBR, if you are encoding all silence, it is possible to\n     * have 8kbs/24khz frames with 1byte of data each, which means we need\n     * to buffer up to 255 headers!\n     * </PRE>\n     */\n    /**\n     * also, max_header_buf has to be a power of two\n     */\n    /**\n     * max size of header is 38\n     */\n\n    function Header() {\n        this.write_timing = 0;\n        this.ptr = 0;\n        //public byte buf[] = new byte[MAX_HEADER_LEN];\n        this.buf = new_byte(MAX_HEADER_LEN);\n    }\n\n    this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\n\n    this.h_ptr = 0;\n    this.w_ptr = 0;\n    this.ancillary_flag = 0;\n\n    /* variables for Reservoir */\n    /**\n     * in bits\n     */\n    this.ResvSize = 0;\n    /**\n     * in bits\n     */\n    this.ResvMax = 0;\n\n    //public ScaleFac scalefac_band = new ScaleFac();\n    this.scalefac_band = new ScaleFac();\n\n    /* daa from PsyModel */\n    /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\n    /* to be remembered for the unpredictability measure. For \"r\" and */\n    /* \"phi_sav\", the first index from the left is the channel select and */\n    /* the second index is the \"age\" of the data. */\n    this.minval_l = new_float(Encoder.CBANDS);\n    this.minval_s = new_float(Encoder.CBANDS);\n    this.nb_1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_2 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\n    this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\n    this.s3_ss = null;\n    this.s3_ll = null;\n    this.decay = 0.;\n\n    //public III_psy_xmin[] thm = new III_psy_xmin[4];\n    //public III_psy_xmin[] en = new III_psy_xmin[4];\n    this.thm = new Array(4);\n    this.en = new Array(4);\n\n    /**\n     * fft and energy calculation\n     */\n    this.tot_ener = new_float(4);\n\n    /* loudness calculation (for adaptive threshold of hearing) */\n    /**\n     * loudness^2 approx. per granule and channel\n     */\n    this.loudness_sq = new_float_n([2, 2]);\n    /**\n     * account for granule delay of L3psycho_anal\n     */\n    this.loudness_sq_save = new_float(2);\n\n    /**\n     * Scale Factor Bands\n     */\n    this.mld_l = new_float(Encoder.SBMAX_l);\n    this.mld_s = new_float(Encoder.SBMAX_s);\n    this.bm_l = new_int(Encoder.SBMAX_l);\n    this.bo_l = new_int(Encoder.SBMAX_l);\n    this.bm_s = new_int(Encoder.SBMAX_s);\n    this.bo_s = new_int(Encoder.SBMAX_s);\n    this.npart_l = 0;\n    this.npart_s = 0;\n\n    this.s3ind = new_int_n([Encoder.CBANDS, 2]);\n    this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\n\n    this.numlines_s = new_int(Encoder.CBANDS);\n    this.numlines_l = new_int(Encoder.CBANDS);\n    this.rnumlines_l = new_float(Encoder.CBANDS);\n    this.mld_cb_l = new_float(Encoder.CBANDS);\n    this.mld_cb_s = new_float(Encoder.CBANDS);\n    this.numlines_s_num1 = 0;\n    this.numlines_l_num1 = 0;\n\n    /* ratios */\n    this.pe = new_float(4);\n    this.ms_ratio_s_old = 0.;\n    this.ms_ratio_l_old = 0.;\n    this.ms_ener_ratio_old = 0.;\n\n    /**\n     * block type\n     */\n    this.blocktype_old = new_int(2);\n\n    /**\n     * variables used for --nspsytune\n     */\n    this.nsPsy = new NsPsy();\n\n    /**\n     * used for Xing VBR header\n     */\n    this.VBR_seek_table = new VBRSeekInfo();\n\n    /**\n     * all ATH related stuff\n     */\n        //public ATH ATH;\n    this.ATH = null;\n\n    this.PSY = null;\n\n    this.nogap_total = 0;\n    this.nogap_current = 0;\n\n    /* ReplayGain */\n    this.decode_on_the_fly = true;\n    this.findReplayGain = true;\n    this.findPeakSample = true;\n    this.PeakSample = 0.;\n    this.RadioGain = 0;\n    this.AudiophileGain = 0;\n    //public ReplayGain rgdata;\n    this.rgdata = null;\n\n    /**\n     * gain change required for preventing clipping\n     */\n    this.noclipGainChange = 0;\n    /**\n     * user-specified scale factor required for preventing clipping\n     */\n    this.noclipScale = 0.;\n\n    /* simple statistics */\n    this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n    /**\n     * norm/start/short/stop/mixed(short)/sum\n     */\n    this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n    //public PlottingData pinfo;\n    //public MPGLib.mpstr_tag hip;\n    this.pinfo = null;\n    this.hip = null;\n\n    this.in_buffer_nsamples = 0;\n    //public float[] in_buffer_0;\n    //public float[] in_buffer_1;\n    this.in_buffer_0 = null;\n    this.in_buffer_1 = null;\n\n    //public IIterationLoop iteration_loop;\n    this.iteration_loop = null;\n\n    for (var i = 0; i < this.en.length; i++) {\n        this.en[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.thm.length; i++) {\n        this.thm[i] = new III_psy_xmin();\n    }\n    for (var i = 0; i < this.header.length; i++) {\n        this.header[i] = new Header();\n    }\n\n}\n\n\n\nfunction FFT() {\n\n    var window = new_float(Encoder.BLKSIZE);\n    var window_s = new_float(Encoder.BLKSIZE_s / 2);\n\n    var costab = [\n        9.238795325112867e-01, 3.826834323650898e-01,\n        9.951847266721969e-01, 9.801714032956060e-02,\n        9.996988186962042e-01, 2.454122852291229e-02,\n        9.999811752826011e-01, 6.135884649154475e-03\n    ];\n\n    function fht(fz, fzPos, n) {\n        var tri = 0;\n        var k4;\n        var fi;\n        var gi;\n\n        n <<= 1;\n        /* to get BLKSIZE, because of 3DNow! ASM routine */\n        var fn = fzPos + n;\n        k4 = 4;\n        do {\n            var s1, c1;\n            var i, k1, k2, k3, kx;\n            kx = k4 >> 1;\n            k1 = k4;\n            k2 = k4 << 1;\n            k3 = k2 + k1;\n            k4 = k2 << 1;\n            fi = fzPos;\n            gi = fi + kx;\n            do {\n                var f0, f1, f2, f3;\n                f1 = fz[fi + 0] - fz[fi + k1];\n                f0 = fz[fi + 0] + fz[fi + k1];\n                f3 = fz[fi + k2] - fz[fi + k3];\n                f2 = fz[fi + k2] + fz[fi + k3];\n                fz[fi + k2] = f0 - f2;\n                fz[fi + 0] = f0 + f2;\n                fz[fi + k3] = f1 - f3;\n                fz[fi + k1] = f1 + f3;\n                f1 = fz[gi + 0] - fz[gi + k1];\n                f0 = fz[gi + 0] + fz[gi + k1];\n                f3 = (Util.SQRT2 * fz[gi + k3]);\n                f2 = (Util.SQRT2 * fz[gi + k2]);\n                fz[gi + k2] = f0 - f2;\n                fz[gi + 0] = f0 + f2;\n                fz[gi + k3] = f1 - f3;\n                fz[gi + k1] = f1 + f3;\n                gi += k4;\n                fi += k4;\n            } while (fi < fn);\n            c1 = costab[tri + 0];\n            s1 = costab[tri + 1];\n            for (i = 1; i < kx; i++) {\n                var c2, s2;\n                c2 = 1 - (2 * s1) * s1;\n                s2 = (2 * s1) * c1;\n                fi = fzPos + i;\n                gi = fzPos + k1 - i;\n                do {\n                    var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\n                    b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\n                    a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\n                    f1 = fz[fi + 0] - a;\n                    f0 = fz[fi + 0] + a;\n                    g1 = fz[gi + 0] - b;\n                    g0 = fz[gi + 0] + b;\n                    b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\n                    a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\n                    f3 = fz[fi + k2] - a;\n                    f2 = fz[fi + k2] + a;\n                    g3 = fz[gi + k2] - b;\n                    g2 = fz[gi + k2] + b;\n                    b = s1 * f2 - c1 * g3;\n                    a = c1 * f2 + s1 * g3;\n                    fz[fi + k2] = f0 - a;\n                    fz[fi + 0] = f0 + a;\n                    fz[gi + k3] = g1 - b;\n                    fz[gi + k1] = g1 + b;\n                    b = c1 * g2 - s1 * f3;\n                    a = s1 * g2 + c1 * f3;\n                    fz[gi + k2] = g0 - a;\n                    fz[gi + 0] = g0 + a;\n                    fz[fi + k3] = f1 - b;\n                    fz[fi + k1] = f1 + b;\n                    gi += k4;\n                    fi += k4;\n                } while (fi < fn);\n                c2 = c1;\n                c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\n                s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\n            }\n            tri += 2;\n        } while (k4 < n);\n    }\n\n    var rv_tbl = [0x00, 0x80, 0x40,\n        0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10,\n        0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70,\n        0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28,\n        0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58,\n        0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04,\n        0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64,\n        0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34,\n        0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c,\n        0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c,\n        0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c,\n        0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22,\n        0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52,\n        0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a,\n        0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a,\n        0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a,\n        0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46,\n        0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16,\n        0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76,\n        0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e,\n        0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e,\n        0xde, 0x3e, 0xbe, 0x7e, 0xfe];\n\n    this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\n        for (var b = 0; b < 3; b++) {\n            var x = Encoder.BLKSIZE_s / 2;\n            var k = 0xffff & ((576 / 3) * (b + 1));\n            var j = Encoder.BLKSIZE_s / 8 - 1;\n            do {\n                var f0, f1, f2, f3, w;\n                var i = rv_tbl[j << 2] & 0xff;\n\n                f0 = window_s[i] * buffer[chn][bufPos + i + k];\n                w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\n                w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x -= 4;\n                x_real[b][x + 0] = f0 + f2;\n                x_real[b][x + 2] = f0 - f2;\n                x_real[b][x + 1] = f1 + f3;\n                x_real[b][x + 3] = f1 - f3;\n\n                f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\n                w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\n                f1 = f0 - w;\n                f0 = f0 + w;\n                f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\n                w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\n                f3 = f2 - w;\n                f2 = f2 + w;\n\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\n                x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\n            } while (--j >= 0);\n\n            fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\n            /* BLKSIZE_s/2 because of 3DNow! ASM routine */\n            /* BLKSIZE/2 because of 3DNow! ASM routine */\n        }\n    }\n\n    this.fft_long = function (gfc, y, chn, buffer, bufPos) {\n        var jj = Encoder.BLKSIZE / 8 - 1;\n        var x = Encoder.BLKSIZE / 2;\n\n        do {\n            var f0, f1, f2, f3, w;\n            var i = rv_tbl[jj] & 0xff;\n            f0 = window[i] * buffer[chn][bufPos + i];\n            w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\n            w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            x -= 4;\n            y[x + 0] = f0 + f2;\n            y[x + 2] = f0 - f2;\n            y[x + 1] = f1 + f3;\n            y[x + 3] = f1 - f3;\n\n            f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\n            w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\n            f1 = f0 - w;\n            f0 = f0 + w;\n            f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\n            w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\n            f3 = f2 - w;\n            f2 = f2 + w;\n\n            y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\n            y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\n            y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\n            y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\n        } while (--jj >= 0);\n\n        fht(y, x, Encoder.BLKSIZE / 2);\n        /* BLKSIZE/2 because of 3DNow! ASM routine */\n    }\n\n    this.init_fft = function (gfc) {\n        /* The type of window used here will make no real difference, but */\n        /*\n         * in the interest of merging nspsytune stuff - switch to blackman\n         * window\n         */\n        for (var i = 0; i < Encoder.BLKSIZE; i++)\n            /* blackman window */\n            window[i] = (0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5)\n                / Encoder.BLKSIZE));\n\n        for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++)\n            window_s[i] = (0.5 * (1.0 - Math.cos(2.0 * Math.PI\n                * (i + 0.5) / Encoder.BLKSIZE_s)));\n\n    }\n\n}\n\n/*\n *      psymodel.c\n *\n *      Copyright (c) 1999-2000 Mark Taylor\n *      Copyright (c) 2001-2002 Naoki Shibata\n *      Copyright (c) 2000-2003 Takehiro Tominaga\n *      Copyright (c) 2000-2008 Robert Hegemann\n *      Copyright (c) 2000-2005 Gabriel Bouvigne\n *      Copyright (c) 2000-2005 Alexander Leidinger\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/* $Id: PsyModel.java,v 1.27 2011/05/24 20:48:06 kenchis Exp $ */\n\n\n/*\n PSYCHO ACOUSTICS\n\n\n This routine computes the psycho acoustics, delayed by one granule.\n\n Input: buffer of PCM data (1024 samples).\n\n This window should be centered over the 576 sample granule window.\n The routine will compute the psycho acoustics for\n this granule, but return the psycho acoustics computed\n for the *previous* granule.  This is because the block\n type of the previous granule can only be determined\n after we have computed the psycho acoustics for the following\n granule.\n\n Output:  maskings and energies for each scalefactor band.\n block type, PE, and some correlation measures.\n The PE is used by CBR modes to determine if extra bits\n from the bit reservoir should be used.  The correlation\n measures are used to determine mid/side or regular stereo.\n */\n/*\n Notation:\n\n barks:  a non-linear frequency scale.  Mapping from frequency to\n barks is given by freq2bark()\n\n scalefactor bands: The spectrum (frequencies) are broken into\n SBMAX \"scalefactor bands\".  Thes bands\n are determined by the MPEG ISO spec.  In\n the noise shaping/quantization code, we allocate\n bits among the partition bands to achieve the\n best possible quality\n\n partition bands:   The spectrum is also broken into about\n 64 \"partition bands\".  Each partition\n band is about .34 barks wide.  There are about 2-5\n partition bands for each scalefactor band.\n\n LAME computes all psycho acoustic information for each partition\n band.  Then at the end of the computations, this information\n is mapped to scalefactor bands.  The energy in each scalefactor\n band is taken as the sum of the energy in all partition bands\n which overlap the scalefactor band.  The maskings can be computed\n in the same way (and thus represent the average masking in that band)\n or by taking the minmum value multiplied by the number of\n partition bands used (which represents a minimum masking in that band).\n */\n/*\n The general outline is as follows:\n\n 1. compute the energy in each partition band\n 2. compute the tonality in each partition band\n 3. compute the strength of each partion band \"masker\"\n 4. compute the masking (via the spreading function applied to each masker)\n 5. Modifications for mid/side masking.\n\n Each partition band is considiered a \"masker\".  The strength\n of the i'th masker in band j is given by:\n\n s3(bark(i)-bark(j))*strength(i)\n\n The strength of the masker is a function of the energy and tonality.\n The more tonal, the less masking.  LAME uses a simple linear formula\n (controlled by NMT and TMN) which says the strength is given by the\n energy divided by a linear function of the tonality.\n */\n/*\n s3() is the \"spreading function\".  It is given by a formula\n determined via listening tests.\n\n The total masking in the j'th partition band is the sum over\n all maskings i.  It is thus given by the convolution of\n the strength with s3(), the \"spreading function.\"\n\n masking(j) = sum_over_i  s3(i-j)*strength(i)  = s3 o strength\n\n where \"o\" = convolution operator.  s3 is given by a formula determined\n via listening tests.  It is normalized so that s3 o 1 = 1.\n\n Note: instead of a simple convolution, LAME also has the\n option of using \"additive masking\"\n\n The most critical part is step 2, computing the tonality of each\n partition band.  LAME has two tonality estimators.  The first\n is based on the ISO spec, and measures how predictiable the\n signal is over time.  The more predictable, the more tonal.\n The second measure is based on looking at the spectrum of\n a single granule.  The more peaky the spectrum, the more\n tonal.  By most indications, the latter approach is better.\n\n Finally, in step 5, the maskings for the mid and side\n channel are possibly increased.  Under certain circumstances,\n noise in the mid & side channels is assumed to also\n be masked by strong maskers in the L or R channels.\n\n\n Other data computed by the psy-model:\n\n ms_ratio        side-channel / mid-channel masking ratio (for previous granule)\n ms_ratio_next   side-channel / mid-channel masking ratio for this granule\n\n percep_entropy[2]     L and R values (prev granule) of PE - A measure of how\n much pre-echo is in the previous granule\n percep_entropy_MS[2]  mid and side channel values (prev granule) of percep_entropy\n energy[4]             L,R,M,S energy in each channel, prev granule\n blocktype_d[2]        block type to use for previous granule\n */\n//package mp3;\n\n//import java.util.Arrays;\n\n\nfunction PsyModel() {\n\n    var fft = new FFT();\n\n    var LOG10 = 2.30258509299404568402;\n\n    var rpelev = 2;\n    var rpelev2 = 16;\n    var rpelev_s = 2;\n    var rpelev2_s = 16;\n\n    /* size of each partition band, in barks: */\n    var DELBARK = .34;\n\n    /* tuned for output level (sensitive to energy scale) */\n    var VO_SCALE = (1. / (14752 * 14752) / (Encoder.BLKSIZE / 2));\n\n    var temporalmask_sustain_sec = 0.01;\n\n    var NS_PREECHO_ATT0 = 0.8;\n    var NS_PREECHO_ATT1 = 0.6;\n    var NS_PREECHO_ATT2 = 0.3;\n\n    var NS_MSFIX = 3.5;\n\n    var NSATTACKTHRE = 4.4;\n    var NSATTACKTHRE_S = 25;\n\n    var NSFIRLEN = 21;\n\n    /* size of each partition band, in barks: */\n    var LN_TO_LOG10 = 0.2302585093;\n\n    /*fix cc 精简 func NON_LINEAR_SCALE_ENERGY(x) {\n        return x;\n    }*/\n\n    /**\n     * <PRE>\n     *       L3psycho_anal.  Compute psycho acoustics.\n     *\n     *       Data returned to the calling program must be delayed by one\n     *       granule.\n     *\n     *       This is done in two places.\n     *       If we do not need to know the blocktype, the copying\n     *       can be done here at the top of the program: we copy the data for\n     *       the last granule (computed during the last call) before it is\n     *       overwritten with the new data.  It looks like this:\n     *\n     *       0. static psymodel_data\n     *       1. calling_program_data = psymodel_data\n     *       2. compute psymodel_data\n     *\n     *       For data which needs to know the blocktype, the copying must be\n     *       done at the end of this loop, and the old values must be saved:\n     *\n     *       0. static psymodel_data_old\n     *       1. compute psymodel_data\n     *       2. compute possible block type of this granule\n     *       3. compute final block type of previous granule based on #2.\n     *       4. calling_program_data = psymodel_data_old\n     *       5. psymodel_data_old = psymodel_data\n     *     psycho_loudness_approx\n     *       jd - 2001 mar 12\n     *    in:  energy   - BLKSIZE/2 elements of frequency magnitudes ^ 2\n     *         gfp      - uses out_samplerate, ATHtype (also needed for ATHformula)\n     *    returns: loudness^2 approximation, a positive value roughly tuned for a value\n     *             of 1.0 for signals near clipping.\n     *    notes:   When calibrated, feeding this function binary white noise at sample\n     *             values +32767 or -32768 should return values that approach 3.\n     *             ATHformula is used to approximate an equal loudness curve.\n     *    future:  Data indicates that the shape of the equal loudness curve varies\n     *             with intensity.  This function might be improved by using an equal\n     *             loudness curve shaped for typical playback levels (instead of the\n     *             ATH, that is shaped for the threshold).  A flexible realization might\n     *             simply bend the existing ATH curve to achieve the desired shape.\n     *             However, the potential gain may not be enough to justify an effort.\n     * </PRE>\n     */\n    function psycho_loudness_approx(energy, gfc) {\n        var loudness_power = 0.0;\n        /* apply weights to power in freq. bands */\n        for (var i = 0; i < Encoder.BLKSIZE / 2; ++i)\n            loudness_power += energy[i] * gfc.ATH.eql_w[i];\n        loudness_power *= VO_SCALE;\n\n        return loudness_power;\n    }\n\n    function compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, wsamp_lPos, wsamp_s, wsamp_sPos, gr_out, chn, buffer, bufPos) {\n        var gfc = gfp.internal_flags;\n        if (chn < 2) {\n            fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\n            fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\n        }\n        /* FFT data for mid and side channel is derived from L & R */\n        else if (chn == 2) {\n            abort();//fix cc 精简\n        }\n\n        /*********************************************************************\n         * compute energies\n         *********************************************************************/\n        fftenergy[0] = /*fix NON_LINEAR_SCALE_ENERGY*/(wsamp_l[wsamp_lPos + 0][0]);\n        fftenergy[0] *= fftenergy[0];\n\n        for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\n            var re = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 - j];\n            var im = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 + j];\n            fftenergy[Encoder.BLKSIZE / 2 - j] = /*fix NON_LINEAR_SCALE_ENERGY*/((re\n                * re + im * im) * 0.5);\n        }\n        for (var b = 2; b >= 0; --b) {\n            fftenergy_s[b][0] = (wsamp_s[wsamp_sPos + 0])[b][0];\n            fftenergy_s[b][0] *= fftenergy_s[b][0];\n            for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\n                var re = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 - j];\n                var im = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\n                / 2 + j];\n                fftenergy_s[b][Encoder.BLKSIZE_s / 2 - j] = /*fix NON_LINEAR_SCALE_ENERGY*/((re\n                    * re + im * im) * 0.5);\n            }\n        }\n        /* total energy */\n        {\n            var totalenergy = 0.0;\n            for (var j = 11; j < Encoder.HBLKSIZE; j++)\n                totalenergy += fftenergy[j];\n\n            gfc.tot_ener[chn] = totalenergy;\n        }\n\n        if (gfp.analysis) {\n            abort();//fix cc 精简\n        }\n\n        /*********************************************************************\n         * compute loudness approximation (used for ATH auto-level adjustment)\n         *********************************************************************/\n        if (gfp.athaa_loudapprox == 2 && chn < 2) {\n            // no loudness for mid/side ch\n            gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\n            gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\n        }\n    }\n\n    /* mask_add optimization */\n    /* init the limit values used to avoid computing log in mask_add when it is not necessary */\n\n    /**\n     * <PRE>\n     *  For example, with i = 10*log10(m2/m1)/10*16         (= log10(m2/m1)*16)\n     *\n     * abs(i)>8 is equivalent (as i is an integer) to\n     * abs(i)>=9\n     * i>=9 || i<=-9\n     * equivalent to (as i is the biggest integer smaller than log10(m2/m1)*16\n     * or the smallest integer bigger than log10(m2/m1)*16 depending on the sign of log10(m2/m1)*16)\n     * log10(m2/m1)>=9/16 || log10(m2/m1)<=-9/16\n     * exp10 is strictly increasing thus this is equivalent to\n     * m2/m1 >= 10^(9/16) || m2/m1<=10^(-9/16) which are comparisons to constants\n     * </PRE>\n     */\n\n    /**\n     * as in if(i>8)\n     */\n    var I1LIMIT = 8;\n    /**\n     * as in if(i>24) . changed 23\n     */\n    var I2LIMIT = 23;\n    /**\n     * as in if(m<15)\n     */\n    var MLIMIT = 15;\n\n    var ma_max_i1;\n    var ma_max_i2;\n    var ma_max_m;\n\n    /**\n     * This is the masking table:<BR>\n     * According to tonality, values are going from 0dB (TMN) to 9.3dB (NMT).<BR>\n     * After additive masking computation, 8dB are added, so final values are\n     * going from 8dB to 17.3dB\n     *\n     * pow(10, -0.0..-0.6)\n     */\n    var tab = [1.0, 0.79433, 0.63096, 0.63096,\n        0.63096, 0.63096, 0.63096, 0.25119, 0.11749];\n\n    function init_mask_add_max_values() {\n        ma_max_i1 = Math.pow(10, (I1LIMIT + 1) / 16.0);\n        ma_max_i2 = Math.pow(10, (I2LIMIT + 1) / 16.0);\n        ma_max_m = Math.pow(10, (MLIMIT) / 10.0);\n    }\n\n    var table1 = [3.3246 * 3.3246,\n        3.23837 * 3.23837, 3.15437 * 3.15437, 3.00412 * 3.00412,\n        2.86103 * 2.86103, 2.65407 * 2.65407, 2.46209 * 2.46209,\n        2.284 * 2.284, 2.11879 * 2.11879, 1.96552 * 1.96552,\n        1.82335 * 1.82335, 1.69146 * 1.69146, 1.56911 * 1.56911,\n        1.46658 * 1.46658, 1.37074 * 1.37074, 1.31036 * 1.31036,\n        1.25264 * 1.25264, 1.20648 * 1.20648, 1.16203 * 1.16203,\n        1.12765 * 1.12765, 1.09428 * 1.09428, 1.0659 * 1.0659,\n        1.03826 * 1.03826, 1.01895 * 1.01895, 1];\n\n    var table2 = [1.33352 * 1.33352,\n        1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\n        1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\n        1.22321 * 1.22321, 1.14758 * 1.14758, 1];\n\n    var table3 = [2.35364 * 2.35364,\n        2.29259 * 2.29259, 2.23313 * 2.23313, 2.12675 * 2.12675,\n        2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303,\n        1.61695 * 1.61695, 1.49999 * 1.49999, 1.39148 * 1.39148,\n        1.29083 * 1.29083, 1.19746 * 1.19746, 1.11084 * 1.11084,\n        1.03826 * 1.03826];\n\n    /**\n     * addition of simultaneous masking Naoki Shibata 2000/7\n     */\n    function mask_add(m1, m2, kk, b, gfc, shortblock) {\n        var ratio;\n\n        if (m2 > m1) {\n            if (m2 < (m1 * ma_max_i2))\n                ratio = m2 / m1;\n            else\n                return (m1 + m2);\n        } else {\n            if (m1 >= (m2 * ma_max_i2))\n                return (m1 + m2);\n            ratio = m1 / m2;\n        }\n\n        /* Should always be true, just checking */\n\n        m1 += m2;\n        //if (((long)(b + 3) & 0xffffffff) <= 3 + 3) {\n        if ((b + 3) <= 3 + 3) {\n            /* approximately, 1 bark = 3 partitions */\n            /* 65% of the cases */\n            /* originally 'if(i > 8)' */\n            if (ratio >= ma_max_i1) {\n                /* 43% of the total */\n                return m1;\n            }\n\n            /* 22% of the total */\n            var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\n            return m1 * table2[i];\n        }\n\n        /**\n         * <PRE>\n         * m<15 equ log10((m1+m2)/gfc.ATH.cb[k])<1.5\n         * equ (m1+m2)/gfc.ATH.cb[k]<10^1.5\n         * equ (m1+m2)<10^1.5 * gfc.ATH.cb[k]\n         * </PRE>\n         */\n        var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\n        if (shortblock != 0) {\n            m2 = gfc.ATH.cb_s[kk] * gfc.ATH.adjust;\n        } else {\n            m2 = gfc.ATH.cb_l[kk] * gfc.ATH.adjust;\n        }\n        if (m1 < ma_max_m * m2) {\n            /* 3% of the total */\n            /* Originally if (m > 0) { */\n            if (m1 > m2) {\n                var f, r;\n\n                f = 1.0;\n                if (i <= 13)\n                    f = table3[i];\n\n                r = Util.FAST_LOG10_X(m1 / m2, 10.0 / 15.0);\n                return m1 * ((table1[i] - f) * r + f);\n            }\n\n            if (i > 13)\n                return m1;\n\n            return m1 * table3[i];\n        }\n\n        /* 10% of total */\n        return m1 * table1[i];\n    }\n\n    //fix cc 精简\n\n    /**\n     * short block threshold calculation (part 2)\n     *\n     * partition band bo_s[sfb] is at the transition from scalefactor band sfb\n     * to the next one sfb+1; enn and thmm have to be split between them\n     */\n    function convert_partition2scalefac_s(gfc, eb, thr, chn, sblock) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_s; ++b, ++sb) {\n            var bo_s_sb = gfc.bo_s[sb];\n            var npart_s = gfc.npart_s;\n            var b_lim = bo_s_sb < npart_s ? bo_s_sb : npart_s;\n            while (b < b_lim) {\n                // iff failed, it may indicate some index error elsewhere\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].s[sb][sblock] = enn;\n            gfc.thm[chn].s[sb][sblock] = thmm;\n\n            if (b >= npart_s) {\n                ++sb;\n                break;\n            }\n            // iff failed, it may indicate some index error elsewhere\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_s_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].s[sb][sblock] += enn;\n                gfc.thm[chn].s[sb][sblock] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_s; ++sb) {\n            gfc.en[chn].s[sb][sblock] = 0;\n            gfc.thm[chn].s[sb][sblock] = 0;\n        }\n    }\n\n    /**\n     * longblock threshold calculation (part 2)\n     */\n    function convert_partition2scalefac_l(gfc, eb, thr, chn) {\n        var sb, b;\n        var enn = 0.0;\n        var thmm = 0.0;\n        for (sb = b = 0; sb < Encoder.SBMAX_l; ++b, ++sb) {\n            var bo_l_sb = gfc.bo_l[sb];\n            var npart_l = gfc.npart_l;\n            var b_lim = bo_l_sb < npart_l ? bo_l_sb : npart_l;\n            while (b < b_lim) {\n                // iff failed, it may indicate some index error elsewhere\n                enn += eb[b];\n                thmm += thr[b];\n                b++;\n            }\n            gfc.en[chn].l[sb] = enn;\n            gfc.thm[chn].l[sb] = thmm;\n\n            if (b >= npart_l) {\n                ++sb;\n                break;\n            }\n            {\n                /* at transition sfb . sfb+1 */\n                var w_curr = gfc.PSY.bo_l_weight[sb];\n                var w_next = 1.0 - w_curr;\n                enn = w_curr * eb[b];\n                thmm = w_curr * thr[b];\n                gfc.en[chn].l[sb] += enn;\n                gfc.thm[chn].l[sb] += thmm;\n                enn = w_next * eb[b];\n                thmm = w_next * thr[b];\n            }\n        }\n        /* zero initialize the rest */\n        for (; sb < Encoder.SBMAX_l; ++sb) {\n            gfc.en[chn].l[sb] = 0;\n            gfc.thm[chn].l[sb] = 0;\n        }\n    }\n\n    function compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\n        var gfc = gfp.internal_flags;\n        var j, b;\n\n        for (b = j = 0; b < gfc.npart_s; ++b) {\n            var ebb = 0, m = 0;\n            var n = gfc.numlines_s[b];\n            for (var i = 0; i < n; ++i, ++j) {\n                var el = fftenergy_s[sblock][j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n        }\n        for (j = b = 0; b < gfc.npart_s; b++) {\n            var kk = gfc.s3ind_s[b][0];\n            var ecb = gfc.s3_ss[j++] * eb[kk];\n            ++kk;\n            while (kk <= gfc.s3ind_s[b][1]) {\n                ecb += gfc.s3_ss[j] * eb[kk];\n                ++j;\n                ++kk;\n            }\n\n            { /* limit calculated threshold by previous granule */\n                var x = rpelev_s * gfc.nb_s1[chn][b];\n                thr[b] = Math.min(ecb, x);\n            }\n            if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) {\n                /* limit calculated threshold by even older granule */\n                var x = rpelev2_s * gfc.nb_s2[chn][b];\n                var y = thr[b];\n                thr[b] = Math.min(x, y);\n            }\n\n            gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\n            gfc.nb_s1[chn][b] = ecb;\n        }\n        for (; b <= Encoder.CBANDS; ++b) {\n            eb[b] = 0;\n            thr[b] = 0;\n        }\n    }\n\n    function block_type_set(gfp, uselongblock, blocktype_d, blocktype) {\n        var gfc = gfp.internal_flags;\n\n        if (gfp.short_blocks == ShortBlock.short_block_coupled\n                /* force both channels to use the same block type */\n                /* this is necessary if the frame is to be encoded in ms_stereo. */\n                /* But even without ms_stereo, FhG does this */\n            && !(uselongblock[0] != 0 && uselongblock[1] != 0))\n            uselongblock[0] = uselongblock[1] = 0;\n\n        /*\n         * update the blocktype of the previous granule, since it depends on\n         * what happend in this granule\n         */\n        for (var chn = 0; chn < gfc.channels_out; chn++) {\n            blocktype[chn] = Encoder.NORM_TYPE;\n            /* disable short blocks */\n            if (gfp.short_blocks == ShortBlock.short_block_dispensed)\n                uselongblock[chn] = 1;\n            if (gfp.short_blocks == ShortBlock.short_block_forced)\n                uselongblock[chn] = 0;\n\n            if (uselongblock[chn] != 0) {\n                /* no attack : use long blocks */\n                if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\n                    blocktype[chn] = Encoder.STOP_TYPE;\n            } else {\n                /* attack : use short blocks */\n                blocktype[chn] = Encoder.SHORT_TYPE;\n                if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\n                    gfc.blocktype_old[chn] = Encoder.START_TYPE;\n                }\n                if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\n                    gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\n            }\n\n            blocktype_d[chn] = gfc.blocktype_old[chn];\n            // value returned to calling program\n            gfc.blocktype_old[chn] = blocktype[chn];\n            // save for next call to l3psy_anal\n        }\n    }\n\n    function NS_INTERP(x, y, r) {\n        /* was pow((x),(r))*pow((y),1-(r)) */\n        if (r >= 1.0) {\n            /* 99.7% of the time */\n            return x;\n        }\n        if (r <= 0.0)\n            return y;\n        if (y > 0.0) {\n            /* rest of the time */\n            return (Math.pow(x / y, r) * y);\n        }\n        /* never happens */\n        return 0.0;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_s = [11.8, 13.6, 17.2, 32, 46.5,\n        51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130,\n        /* 255.8 */\n    ];\n\n    function pecalc_s(mr, masking_lower) {\n        var pe_s = 1236.28 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_s - 1; sb++) {\n            for (var sblock = 0; sblock < 3; sblock++) {\n                var thm = mr.thm.s[sb][sblock];\n                if (thm > 0.0) {\n                    var x = thm * masking_lower;\n                    var en = mr.en.s[sb][sblock];\n                    if (en > x) {\n                        if (en > x * 1e10) {\n                            pe_s += regcoef_s[sb] * (10.0 * LOG10);\n                        } else {\n                            pe_s += regcoef_s[sb] * Util.FAST_LOG10(en / x);\n                        }\n                    }\n                }\n            }\n        }\n\n        return pe_s;\n    }\n\n    /**\n     * these values are tuned only for 44.1kHz...\n     */\n    var regcoef_l = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9,\n        12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5,\n        60.7, 73.9, 85.7, 93.4, 126.1,\n        /* 241.3 */\n    ];\n\n    function pecalc_l(mr, masking_lower) {\n        var pe_l = 1124.23 / 4;\n        for (var sb = 0; sb < Encoder.SBMAX_l - 1; sb++) {\n            var thm = mr.thm.l[sb];\n            if (thm > 0.0) {\n                var x = thm * masking_lower;\n                var en = mr.en.l[sb];\n                if (en > x) {\n                    if (en > x * 1e10) {\n                        pe_l += regcoef_l[sb] * (10.0 * LOG10);\n                    } else {\n                        pe_l += regcoef_l[sb] * Util.FAST_LOG10(en / x);\n                    }\n                }\n            }\n        }\n        return pe_l;\n    }\n\n    function calc_energy(gfc, fftenergy, eb, max, avg) {\n        var b, j;\n\n        for (b = j = 0; b < gfc.npart_l; ++b) {\n            var ebb = 0, m = 0;\n            var i;\n            for (i = 0; i < gfc.numlines_l[b]; ++i, ++j) {\n                var el = fftenergy[j];\n                ebb += el;\n                if (m < el)\n                    m = el;\n            }\n            eb[b] = ebb;\n            max[b] = m;\n            avg[b] = ebb * gfc.rnumlines_l[b];\n        }\n    }\n\n    function calc_mask_index_l(gfc, max, avg, mask_idx) {\n        var last_tab_entry = tab.length - 1;\n        var b = 0;\n        var a = avg[b] + avg[b + 1];\n        if (a > 0.0) {\n            var m = max[b];\n            if (m < max[b + 1])\n                m = max[b + 1];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n\n        for (b = 1; b < gfc.npart_l - 1; b++) {\n            a = avg[b - 1] + avg[b] + avg[b + 1];\n            if (a > 0.0) {\n                var m = max[b - 1];\n                if (m < max[b])\n                    m = max[b];\n                if (m < max[b + 1])\n                    m = max[b + 1];\n                a = 20.0\n                    * (m * 3.0 - a)\n                    / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b]\n                    + gfc.numlines_l[b + 1] - 1));\n                var k = 0 | a;\n                if (k > last_tab_entry)\n                    k = last_tab_entry;\n                mask_idx[b] = k;\n            } else {\n                mask_idx[b] = 0;\n            }\n        }\n\n        a = avg[b - 1] + avg[b];\n        if (a > 0.0) {\n            var m = max[b - 1];\n            if (m < max[b])\n                m = max[b];\n            a = 20.0 * (m * 2.0 - a)\n                / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1));\n            var k = 0 | a;\n            if (k > last_tab_entry)\n                k = last_tab_entry;\n            mask_idx[b] = k;\n        } else {\n            mask_idx[b] = 0;\n        }\n    }\n\n    var fircoef = [\n        -8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\n        -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2,\n        -5.52212e-17 * 2, -0.313819 * 2\n    ];\n\n    this.L3psycho_anal_ns = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\n        /*\n         * to get a good cache performance, one has to think about the sequence,\n         * in which the variables are used.\n         */\n        var gfc = gfp.internal_flags;\n\n        /* fft and energy calculation */\n        var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\n        var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\n\n        /* convolution */\n        var eb_l = new_float(Encoder.CBANDS + 1);\n        var eb_s = new_float(Encoder.CBANDS + 1);\n        var thr = new_float(Encoder.CBANDS + 2);\n\n        /* block type */\n        var blocktype = new_int(2), uselongblock = new_int(2);\n\n        /* usual variables like loop indices, etc.. */\n        var numchn, chn;\n        var b, i, j, k;\n        var sb, sblock;\n\n        /* variables used for --nspsytune */\n        var ns_hpfsmpl = new_float_n([2, 576]);\n        var pcfact;\n        var mask_idx_l = new_int(Encoder.CBANDS + 2), mask_idx_s = new_int(Encoder.CBANDS + 2);\n\n        Arrays.fill(mask_idx_s, 0);\n\n        numchn = gfc.channels_out;\n        /* chn=2 and 3 = Mid and Side channels */\n        if (gfp.mode == MPEGMode.JOINT_STEREO)\n            numchn = 4;\n\n        if (gfp.VBR == VbrMode.vbr_off)\n            pcfact = gfc.ResvMax == 0 ? 0 : ( gfc.ResvSize)\n            / gfc.ResvMax * 0.5;\n        else if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            pcfact = 0.6;\n        } else\n            pcfact = 1.0;\n\n        /**********************************************************************\n         * Apply HPF of fs/4 to the input signal. This is used for attack\n         * detection / handling.\n         **********************************************************************/\n        /* Don't copy the input buffer into a temporary buffer */\n        /* unroll the loop 2 times */\n        for (chn = 0; chn < gfc.channels_out; chn++) {\n            /* apply high pass filter of fs/4 */\n            var firbuf = buffer[chn];\n            var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\n            for (i = 0; i < 576; i++) {\n                var sum1, sum2;\n                sum1 = firbuf[firbufPos + i + 10];\n                sum2 = 0.0;\n                for (j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\n                    sum1 += fircoef[j]\n                        * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\n                        + NSFIRLEN - j]);\n                    sum2 += fircoef[j + 1]\n                        * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\n                        + i + NSFIRLEN - j - 1]);\n                }\n                ns_hpfsmpl[chn][i] = sum1 + sum2;\n            }\n            masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\n            masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\n            if (numchn > 2) {\n                abort();//fix cc 精简\n            }\n        }\n\n        for (chn = 0; chn < numchn; chn++) {\n            var wsamp_l;\n            var wsamp_s;\n            var en_subshort = new_float(12);\n            var en_short = [0, 0, 0, 0];\n            var attack_intensity = new_float(12);\n            var ns_uselongblock = 1;\n            var attackThreshold;\n            var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\n            var ns_attacks = [0, 0, 0, 0];\n            var fftenergy = new_float(Encoder.HBLKSIZE);\n            var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\n\n            /*\n             * rh 20040301: the following loops do access one off the limits so\n             * I increase the array dimensions by one and initialize the\n             * accessed values to zero\n             */\n\n            /***************************************************************\n             * determine the block type (window type)\n             ***************************************************************/\n            /* calculate energies of each sub-shortblocks */\n            for (i = 0; i < 3; i++) {\n                en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\n                attack_intensity[i] = en_subshort[i]\n                    / gfc.nsPsy.last_en_subshort[chn][i + 4];\n                en_short[0] += en_subshort[i];\n            }\n\n            if (chn == 2) {\n                abort();//fix cc 精简\n            }\n            {\n                var pf = ns_hpfsmpl[chn & 1];\n                var pfPos = 0;\n                for (i = 0; i < 9; i++) {\n                    var pfe = pfPos + 576 / 9;\n                    var p = 1.;\n                    for (; pfPos < pfe; pfPos++)\n                        if (p < Math.abs(pf[pfPos]))\n                            p = Math.abs(pf[pfPos]);\n\n                    gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\n                    en_short[1 + i / 3] += p;\n                    if (p > en_subshort[i + 3 - 2]) {\n                        p = p / en_subshort[i + 3 - 2];\n                    } else if (en_subshort[i + 3 - 2] > p * 10.0) {\n                        p = en_subshort[i + 3 - 2] / (p * 10.0);\n                    } else\n                        p = 0.0;\n                    attack_intensity[i + 3] = p;\n                }\n            }\n\n            if (gfp.analysis) {\n                abort();//fix cc 精简\n            }\n\n            /* compare energies between sub-shortblocks */\n            attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\n                : gfc.nsPsy.attackthre;\n            for (i = 0; i < 12; i++)\n                if (0 == ns_attacks[i / 3]\n                    && attack_intensity[i] > attackThreshold)\n                    ns_attacks[i / 3] = (i % 3) + 1;\n\n            /*\n             * should have energy change between short blocks, in order to avoid\n             * periodic signals\n             */\n            for (i = 1; i < 4; i++) {\n                var ratio;\n                if (en_short[i - 1] > en_short[i]) {\n                    ratio = en_short[i - 1] / en_short[i];\n                } else {\n                    ratio = en_short[i] / en_short[i - 1];\n                }\n                if (ratio < 1.7) {\n                    ns_attacks[i] = 0;\n                    if (i == 1)\n                        ns_attacks[0] = 0;\n                }\n            }\n\n            if (ns_attacks[0] != 0 && gfc.nsPsy.lastAttacks[chn] != 0)\n                ns_attacks[0] = 0;\n\n            if (gfc.nsPsy.lastAttacks[chn] == 3\n                || (ns_attacks[0] + ns_attacks[1] + ns_attacks[2] + ns_attacks[3]) != 0) {\n                ns_uselongblock = 0;\n\n                if (ns_attacks[1] != 0 && ns_attacks[0] != 0)\n                    ns_attacks[1] = 0;\n                if (ns_attacks[2] != 0 && ns_attacks[1] != 0)\n                    ns_attacks[2] = 0;\n                if (ns_attacks[3] != 0 && ns_attacks[2] != 0)\n                    ns_attacks[3] = 0;\n            }\n\n            if (chn < 2) {\n                uselongblock[chn] = ns_uselongblock;\n            } else {\n                abort();//fix cc 精简\n            }\n\n            /*\n             * there is a one granule delay. Copy maskings computed last call\n             * into masking_ratio to return to calling program.\n             */\n            energy[chn] = gfc.tot_ener[chn];\n\n            /*********************************************************************\n             * compute FFTs\n             *********************************************************************/\n            wsamp_s = wsamp_S;\n            wsamp_l = wsamp_L;\n            compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, (chn & 1),\n                wsamp_s, (chn & 1), gr_out, chn, buffer, bufPos);\n\n            /*********************************************************************\n             * Calculate the energy and the tonality of each partition.\n             *********************************************************************/\n            calc_energy(gfc, fftenergy, eb_l, max, avg);\n            calc_mask_index_l(gfc, max, avg, mask_idx_l);\n            /* compute masking thresholds for short blocks */\n            for (sblock = 0; sblock < 3; sblock++) {\n                var enn, thmm;\n                compute_masking_s(gfp, fftenergy_s, eb_s, thr, chn, sblock);\n                convert_partition2scalefac_s(gfc, eb_s, thr, chn, sblock);\n                /**** short block pre-echo control ****/\n                for (sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    thmm = gfc.thm[chn].s[sb][sblock];\n\n                    thmm *= NS_PREECHO_ATT0;\n                    if (ns_attacks[sblock] >= 2 || ns_attacks[sblock + 1] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT1 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    if (ns_attacks[sblock] == 1) {\n                        var idx = (sblock != 0) ? sblock - 1 : 2;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    } else if ((sblock != 0 && ns_attacks[sblock - 1] == 3)\n                        || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\n                        var idx = (sblock != 2) ? sblock + 1 : 0;\n                        var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\n                            NS_PREECHO_ATT2 * pcfact);\n                        thmm = Math.min(thmm, p);\n                    }\n\n                    /* pulse like signal detection for fatboy.wav and so on */\n                    enn = en_subshort[sblock * 3 + 3]\n                        + en_subshort[sblock * 3 + 4]\n                        + en_subshort[sblock * 3 + 5];\n                    if (en_subshort[sblock * 3 + 5] * 6 < enn) {\n                        thmm *= 0.5;\n                        if (en_subshort[sblock * 3 + 4] * 6 < enn)\n                            thmm *= 0.5;\n                    }\n\n                    gfc.thm[chn].s[sb][sblock] = thmm;\n                }\n            }\n            gfc.nsPsy.lastAttacks[chn] = ns_attacks[2];\n\n            /*********************************************************************\n             * convolve the partitioned energy and unpredictability with the\n             * spreading function, s3_l[b][k]\n             ********************************************************************/\n            k = 0;\n            {\n                for (b = 0; b < gfc.npart_l; b++) {\n                    /*\n                     * convolve the partitioned energy with the spreading\n                     * function\n                     */\n                    var kk = gfc.s3ind[b][0];\n                    var eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                    var ecb = gfc.s3_ll[k++] * eb2;\n                    while (++kk <= gfc.s3ind[b][1]) {\n                        eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\n                        ecb = mask_add(ecb, gfc.s3_ll[k++] * eb2, kk, kk - b,\n                            gfc, 0);\n                    }\n                    ecb *= 0.158489319246111;\n                    /* pow(10,-0.8) */\n\n                    /**** long block pre-echo control ****/\n                    /**\n                     * <PRE>\n                     * dont use long block pre-echo control if previous granule was\n                     * a short block.  This is to avoid the situation:\n                     * frame0:  quiet (very low masking)\n                     * frame1:  surge  (triggers short blocks)\n                     * frame2:  regular frame.  looks like pre-echo when compared to\n                     *          frame0, but all pre-echo was in frame1.\n                     * </PRE>\n                     */\n                    /*\n                     * chn=0,1 L and R channels\n                     *\n                     * chn=2,3 S and M channels.\n                     */\n\n                    if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE)\n                        thr[b] = ecb;\n                    else\n                        thr[b] = NS_INTERP(\n                            Math.min(ecb, Math.min(rpelev\n                                * gfc.nb_1[chn][b], rpelev2\n                                * gfc.nb_2[chn][b])), ecb, pcfact);\n\n                    gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\n                    gfc.nb_1[chn][b] = ecb;\n                }\n            }\n            for (; b <= Encoder.CBANDS; ++b) {\n                eb_l[b] = 0;\n                thr[b] = 0;\n            }\n            /* compute masking thresholds for long blocks */\n            convert_partition2scalefac_l(gfc, eb_l, thr, chn);\n        }\n        /* end loop over chn */\n\n        if (gfp.mode == MPEGMode.STEREO || gfp.mode == MPEGMode.JOINT_STEREO) {\n            abort();//fix cc 精简 stereo\n        }\n\n        if (gfp.mode == MPEGMode.JOINT_STEREO) {\n            abort();//fix cc 精简 stereo\n        }\n\n        /***************************************************************\n         * determine final block type\n         ***************************************************************/\n        block_type_set(gfp, uselongblock, blocktype_d, blocktype);\n\n        /*********************************************************************\n         * compute the value of PE to return ... no delay and advance\n         *********************************************************************/\n        for (chn = 0; chn < numchn; chn++) {\n            var ppe;\n            var ppePos = 0;\n            var type;\n            var mr;\n\n            if (chn > 1) {\n                abort();//fix cc 精简\n            } else {\n                ppe = percep_entropy;\n                ppePos = 0;\n                type = blocktype_d[chn];\n                mr = masking_ratio[gr_out][chn];\n            }\n\n            if (type == Encoder.SHORT_TYPE)\n                ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\n            else\n                ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\n\n            if (gfp.analysis)\n                gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\n\n        }\n        return 0;\n    }\n\n    //fix cc 精简\n\n    /**\n     *   The spreading function.  Values returned in units of energy\n     */\n    function s3_func(bark) {\n        var tempx, x, tempy, temp;\n        tempx = bark;\n        if (tempx >= 0)\n            tempx *= 3;\n        else\n            tempx *= 1.5;\n\n        if (tempx >= 0.5 && tempx <= 2.5) {\n            temp = tempx - 0.5;\n            x = 8.0 * (temp * temp - 2.0 * temp);\n        } else\n            x = 0.0;\n        tempx += 0.474;\n        tempy = 15.811389 + 7.5 * tempx - 17.5\n            * Math.sqrt(1.0 + tempx * tempx);\n\n        if (tempy <= -60.0)\n            return 0.0;\n\n        tempx = Math.exp((x + tempy) * LN_TO_LOG10);\n\n        /**\n         * <PRE>\n         * Normalization.  The spreading function should be normalized so that:\n         * +inf\n         * /\n         * |  s3 [ bark ]  d(bark)   =  1\n         * /\n         * -inf\n         * </PRE>\n         */\n        tempx /= .6609193;\n        return tempx;\n    }\n\n    /**\n     * see for example \"Zwicker: Psychoakustik, 1982; ISBN 3-540-11401-7\n     */\n    function freq2bark(freq) {\n        /* input: freq in hz output: barks */\n        if (freq < 0)\n            freq = 0;\n        freq = freq * 0.001;\n        return 13.0 * Math.atan(.76 * freq) + 3.5\n            * Math.atan(freq * freq / (7.5 * 7.5));\n    }\n\n    function init_numline(numlines, bo, bm, bval, bval_width, mld, bo_w, sfreq, blksize, scalepos, deltafreq, sbmax) {\n        var b_frq = new_float(Encoder.CBANDS + 1);\n        var sample_freq_frac = sfreq / (sbmax > 15 ? 2 * 576 : 2 * 192);\n        var partition = new_int(Encoder.HBLKSIZE);\n        var i;\n        sfreq /= blksize;\n        var j = 0;\n        var ni = 0;\n        /* compute numlines, the number of spectral lines in each partition band */\n        /* each partition band should be about DELBARK wide. */\n        for (i = 0; i < Encoder.CBANDS; i++) {\n            var bark1;\n            var j2;\n            bark1 = freq2bark(sfreq * j);\n\n            b_frq[i] = sfreq * j;\n\n            for (j2 = j; freq2bark(sfreq * j2) - bark1 < DELBARK\n            && j2 <= blksize / 2; j2++)\n                ;\n\n            numlines[i] = j2 - j;\n            ni = i + 1;\n\n            while (j < j2) {\n                partition[j++] = i;\n            }\n            if (j > blksize / 2) {\n                j = blksize / 2;\n                ++i;\n                break;\n            }\n        }\n        b_frq[i] = sfreq * j;\n\n        for (var sfb = 0; sfb < sbmax; sfb++) {\n            var i1, i2, start, end;\n            var arg;\n            start = scalepos[sfb];\n            end = scalepos[sfb + 1];\n\n            i1 = 0 | Math.floor(.5 + deltafreq * (start - .5));\n            if (i1 < 0)\n                i1 = 0;\n            i2 = 0 | Math.floor(.5 + deltafreq * (end - .5));\n\n            if (i2 > blksize / 2)\n                i2 = blksize / 2;\n\n            bm[sfb] = (partition[i1] + partition[i2]) / 2;\n            bo[sfb] = partition[i2];\n            var f_tmp = sample_freq_frac * end;\n            /*\n             * calculate how much of this band belongs to current scalefactor\n             * band\n             */\n            bo_w[sfb] = (f_tmp - b_frq[bo[sfb]])\n                / (b_frq[bo[sfb] + 1] - b_frq[bo[sfb]]);\n            if (bo_w[sfb] < 0) {\n                bo_w[sfb] = 0;\n            } else {\n                if (bo_w[sfb] > 1) {\n                    bo_w[sfb] = 1;\n                }\n            }\n            /* setup stereo demasking thresholds */\n            /* formula reverse enginerred from plot in paper */\n            arg = freq2bark(sfreq * scalepos[sfb] * deltafreq);\n            arg = ( Math.min(arg, 15.5) / 15.5);\n\n            mld[sfb] = Math.pow(10.0,\n                1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n        }\n\n        /* compute bark values of each critical band */\n        j = 0;\n        for (var k = 0; k < ni; k++) {\n            var w = numlines[k];\n            var bark1, bark2;\n\n            bark1 = freq2bark(sfreq * (j));\n            bark2 = freq2bark(sfreq * (j + w - 1));\n            bval[k] = .5 * (bark1 + bark2);\n\n            bark1 = freq2bark(sfreq * (j - .5));\n            bark2 = freq2bark(sfreq * (j + w - .5));\n            bval_width[k] = bark2 - bark1;\n            j += w;\n        }\n\n        return ni;\n    }\n\n    function init_s3_values(s3ind, npart, bval, bval_width, norm, use_old_s3) {\n        var s3 = new_float_n([Encoder.CBANDS, Encoder.CBANDS]);\n        /*\n         * The s3 array is not linear in the bark scale.\n         *\n         * bval[x] should be used to get the bark value.\n         */\n        var j;\n        var numberOfNoneZero = 0;\n\n        /**\n         * <PRE>\n         * s[i][j], the value of the spreading function,\n         * centered at band j (masker), for band i (maskee)\n         *\n         * i.e.: sum over j to spread into signal barkval=i\n         * NOTE: i and j are used opposite as in the ISO docs\n         * </PRE>\n         */\n        if (use_old_s3) {\n            for (var i = 0; i < npart; i++) {\n                for (j = 0; j < npart; j++) {\n                    var v = s3_func(bval[i] - bval[j]) * bval_width[j];\n                    s3[i][j] = v * norm[i];\n                }\n            }\n        } else {\n            abort();//fix cc 精简\n        }\n        for (var i = 0; i < npart; i++) {\n            for (j = 0; j < npart; j++) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][0] = j;\n\n            for (j = npart - 1; j > 0; j--) {\n                if (s3[i][j] > 0.0)\n                    break;\n            }\n            s3ind[i][1] = j;\n            numberOfNoneZero += (s3ind[i][1] - s3ind[i][0] + 1);\n        }\n\n        var p = new_float(numberOfNoneZero);\n        var k = 0;\n        for (var i = 0; i < npart; i++)\n            for (j = s3ind[i][0]; j <= s3ind[i][1]; j++)\n                p[k++] = s3[i][j];\n\n        return p;\n    }\n\n    function stereo_demask(f) {\n        /* setup stereo demasking thresholds */\n        /* formula reverse enginerred from plot in paper */\n        var arg = freq2bark(f);\n        arg = (Math.min(arg, 15.5) / 15.5);\n\n        return Math.pow(10.0,\n            1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\n    }\n\n    /**\n     * NOTE: the bitrate reduction from the inter-channel masking effect is low\n     * compared to the chance of getting annyoing artefacts. L3psycho_anal_vbr\n     * does not use this feature. (Robert 071216)\n     */\n    this.psymodel_init = function (gfp) {\n        var gfc = gfp.internal_flags;\n        var i;\n        var useOldS3 = true;\n        var bvl_a = 13, bvl_b = 24;\n        var snr_l_a = 0, snr_l_b = 0;\n        var snr_s_a = -8.25, snr_s_b = -4.5;\n        var bval = new_float(Encoder.CBANDS);\n        var bval_width = new_float(Encoder.CBANDS);\n        var norm = new_float(Encoder.CBANDS);\n        var sfreq = gfp.out_samplerate;\n\n        switch (gfp.experimentalZ) {\n            default:\n            case 0:\n                useOldS3 = true;\n                break;\n            case 1:\n                useOldS3 = (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) ? false\n                    : true;\n                break;\n            case 2:\n                useOldS3 = false;\n                break;\n            case 3:\n                bvl_a = 8;\n                snr_l_a = -1.75;\n                snr_l_b = -0.0125;\n                snr_s_a = -8.25;\n                snr_s_b = -2.25;\n                break;\n        }\n        gfc.ms_ener_ratio_old = .25;\n        gfc.blocktype_old[0] = gfc.blocktype_old[1] = Encoder.NORM_TYPE;\n        // the vbr header is long blocks\n\n        for (i = 0; i < 4; ++i) {\n            for (var j = 0; j < Encoder.CBANDS; ++j) {\n                gfc.nb_1[i][j] = 1e20;\n                gfc.nb_2[i][j] = 1e20;\n                gfc.nb_s1[i][j] = gfc.nb_s2[i][j] = 1.0;\n            }\n            for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\n                gfc.en[i].l[sb] = 1e20;\n                gfc.thm[i].l[sb] = 1e20;\n            }\n            for (var j = 0; j < 3; ++j) {\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\n                    gfc.en[i].s[sb][j] = 1e20;\n                    gfc.thm[i].s[sb][j] = 1e20;\n                }\n                gfc.nsPsy.lastAttacks[i] = 0;\n            }\n            for (var j = 0; j < 9; j++)\n                gfc.nsPsy.last_en_subshort[i][j] = 10.;\n        }\n\n        /* init. for loudness approx. -jd 2001 mar 27 */\n        gfc.loudness_sq_save[0] = gfc.loudness_sq_save[1] = 0.0;\n\n        /*************************************************************************\n         * now compute the psychoacoustic model specific constants\n         ************************************************************************/\n        /* compute numlines, bo, bm, bval, bval_width, mld */\n\n        gfc.npart_l = init_numline(gfc.numlines_l, gfc.bo_l, gfc.bm_l, bval,\n            bval_width, gfc.mld_l, gfc.PSY.bo_l_weight, sfreq,\n            Encoder.BLKSIZE, gfc.scalefac_band.l, Encoder.BLKSIZE\n            / (2.0 * 576), Encoder.SBMAX_l);\n        /* compute the spreading function */\n        for (i = 0; i < gfc.npart_l; i++) {\n            var snr = snr_l_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_l_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_l_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n            if (gfc.numlines_l[i] > 0) {\n                gfc.rnumlines_l[i] = 1.0 / gfc.numlines_l[i];\n            } else {\n                gfc.rnumlines_l[i] = 0;\n            }\n        }\n        gfc.s3_ll = init_s3_values(gfc.s3ind, gfc.npart_l, bval, bval_width,\n            norm, useOldS3);\n\n        /* compute long block specific values, ATH and MINVAL */\n        var j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var x;\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_l[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE);\n                var level;\n                /*\n                 * ATH below 100 Hz constant, not further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_l[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_l[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            /*\n             * FIXME: it does work to reduce low-freq problems in S53-Wind-Sax\n             * and lead-voice samples, but introduces some 3 kbps bit bloat too.\n             * TODO: Further refinement of the shape of this hack.\n             */\n            x = -20 + bval[i] * 20 / 10;\n            if (x > 6) {\n                x = 100;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8.;\n            gfc.minval_l[i] = (Math.pow(10.0, x / 10.) * gfc.numlines_l[i]);\n        }\n\n        /************************************************************************\n         * do the same things for short blocks\n         ************************************************************************/\n        gfc.npart_s = init_numline(gfc.numlines_s, gfc.bo_s, gfc.bm_s, bval,\n            bval_width, gfc.mld_s, gfc.PSY.bo_s_weight, sfreq,\n            Encoder.BLKSIZE_s, gfc.scalefac_band.s, Encoder.BLKSIZE_s\n            / (2.0 * 192), Encoder.SBMAX_s);\n\n        /* SNR formula. short block is normalized by SNR. is it still right ? */\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var x;\n            var snr = snr_s_a;\n            if (bval[i] >= bvl_a) {\n                snr = snr_s_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_s_a\n                    * (bvl_b - bval[i]) / (bvl_b - bvl_a);\n            }\n            norm[i] = Math.pow(10.0, snr / 10.0);\n\n            /* ATH */\n            x = Float.MAX_VALUE;\n            for (var k = 0; k < gfc.numlines_s[i]; k++, j++) {\n                var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE_s);\n                var level;\n                /* freq = Min(.1,freq); */\n                /*\n                 * ATH below 100 Hz constant, not\n                 * further climbing\n                 */\n                level = this.ATHformula(freq * 1000, gfp) - 20;\n                // scale to FFT units; returned value is in dB\n                level = Math.pow(10., 0.1 * level);\n                // convert from dB . energy\n                level *= gfc.numlines_s[i];\n                if (x > level)\n                    x = level;\n            }\n            gfc.ATH.cb_s[i] = x;\n\n            /*\n             * MINVAL. For low freq, the strength of the masking is limited by\n             * minval this is an ISO MPEG1 thing, dont know if it is really\n             * needed\n             */\n            x = (-7.0 + bval[i] * 7.0 / 12.0);\n            if (bval[i] > 12) {\n                x *= 1 + Math.log(1 + x) * 3.1;\n            }\n            if (bval[i] < 12) {\n                x *= 1 + Math.log(1 - x) * 2.3;\n            }\n            if (x < -15) {\n                x = -15;\n            }\n            x -= 8;\n            gfc.minval_s[i] = Math.pow(10.0, x / 10)\n                * gfc.numlines_s[i];\n        }\n\n        gfc.s3_ss = init_s3_values(gfc.s3ind_s, gfc.npart_s, bval, bval_width,\n            norm, useOldS3);\n\n        init_mask_add_max_values();\n        fft.init_fft(gfc);\n\n        /* setup temporal masking */\n        gfc.decay = Math.exp(-1.0 * LOG10\n            / (temporalmask_sustain_sec * sfreq / 192.0));\n\n        {\n            var msfix;\n            msfix = NS_MSFIX;\n            if ((gfp.exp_nspsytune & 2) != 0)\n                msfix = 1.0;\n            if (Math.abs(gfp.msfix) > 0.0)\n                msfix = gfp.msfix;\n            gfp.msfix = msfix;\n\n            /*\n             * spread only from npart_l bands. Normally, we use the spreading\n             * function to convolve from npart_l down to npart_l bands\n             */\n            for (var b = 0; b < gfc.npart_l; b++)\n                if (gfc.s3ind[b][1] > gfc.npart_l - 1)\n                    gfc.s3ind[b][1] = gfc.npart_l - 1;\n        }\n\n        /*\n         * prepare for ATH auto adjustment: we want to decrease the ATH by 12 dB\n         * per second\n         */\n        var frame_duration = (576. * gfc.mode_gr / sfreq);\n        gfc.ATH.decay = Math.pow(10., -12. / 10. * frame_duration);\n        gfc.ATH.adjust = 0.01;\n        /* minimum, for leading low loudness */\n        gfc.ATH.adjustLimit = 1.0;\n        /* on lead, allow adjust up to maximum */\n\n\n        if (gfp.ATHtype != -1) {\n            /* compute equal loudness weights (eql_w) */\n            var freq;\n            var freq_inc = gfp.out_samplerate\n                / (Encoder.BLKSIZE);\n            var eql_balance = 0.0;\n            freq = 0.0;\n            for (i = 0; i < Encoder.BLKSIZE / 2; ++i) {\n                /* convert ATH dB to relative power (not dB) */\n                /* to determine eql_w */\n                freq += freq_inc;\n                gfc.ATH.eql_w[i] = 1. / Math.pow(10, this.ATHformula(freq, gfp) / 10);\n                eql_balance += gfc.ATH.eql_w[i];\n            }\n            eql_balance = 1.0 / eql_balance;\n            for (i = Encoder.BLKSIZE / 2; --i >= 0;) { /* scale weights */\n                gfc.ATH.eql_w[i] *= eql_balance;\n            }\n        }\n        {\n            for (var b = j = 0; b < gfc.npart_s; ++b) {\n                for (i = 0; i < gfc.numlines_s[b]; ++i) {\n                    ++j;\n                }\n            }\n            for (var b = j = 0; b < gfc.npart_l; ++b) {\n                for (i = 0; i < gfc.numlines_l[b]; ++i) {\n                    ++j;\n                }\n            }\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_l; i++) {\n            var freq = sfreq * (j + gfc.numlines_l[i] / 2) / (1.0 * Encoder.BLKSIZE);\n            gfc.mld_cb_l[i] = stereo_demask(freq);\n            j += gfc.numlines_l[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_l[i] = 1;\n        }\n        j = 0;\n        for (i = 0; i < gfc.npart_s; i++) {\n            var freq = sfreq * (j + gfc.numlines_s[i] / 2) / (1.0 * Encoder.BLKSIZE_s);\n            gfc.mld_cb_s[i] = stereo_demask(freq);\n            j += gfc.numlines_s[i];\n        }\n        for (; i < Encoder.CBANDS; ++i) {\n            gfc.mld_cb_s[i] = 1;\n        }\n        return 0;\n    }\n\n    /**\n     * Those ATH formulas are returning their minimum value for input = -1\n     */\n    function ATHformula_GB(f, value) {\n        /**\n         * <PRE>\n         *  from Painter & Spanias\n         *           modified by Gabriel Bouvigne to better fit the reality\n         *           ath =    3.640 * pow(f,-0.8)\n         *           - 6.800 * exp(-0.6*pow(f-3.4,2.0))\n         *           + 6.000 * exp(-0.15*pow(f-8.7,2.0))\n         *           + 0.6* 0.001 * pow(f,4.0);\n         *\n         *\n         *           In the past LAME was using the Painter &Spanias formula.\n         *           But we had some recurrent problems with HF content.\n         *           We measured real ATH values, and found the older formula\n         *           to be inaccurate in the higher part. So we made this new\n         *           formula and this solved most of HF problematic test cases.\n         *           The tradeoff is that in VBR mode it increases a lot the\n         *           bitrate.\n         * </PRE>\n         */\n\n        /*\n         * This curve can be adjusted according to the VBR scale: it adjusts\n         * from something close to Painter & Spanias on V9 up to Bouvigne's\n         * formula for V0. This way the VBR bitrate is more balanced according\n         * to the -V value.\n         */\n\n        // the following Hack allows to ask for the lowest value\n        if (f < -.3)\n            f = 3410;\n\n        // convert to khz\n        f /= 1000;\n        f = Math.max(0.1, f);\n        var ath = 3.640 * Math.pow(f, -0.8) - 6.800\n            * Math.exp(-0.6 * Math.pow(f - 3.4, 2.0)) + 6.000\n            * Math.exp(-0.15 * Math.pow(f - 8.7, 2.0))\n            + (0.6 + 0.04 * value) * 0.001 * Math.pow(f, 4.0);\n        return ath;\n    }\n\n    this.ATHformula = function (f, gfp) {\n        var ath;\n        switch (gfp.ATHtype) {\n            case 0:\n                ath = ATHformula_GB(f, 9);\n                break;\n            case 1:\n                // over sensitive, should probably be removed\n                ath = ATHformula_GB(f, -1);\n                break;\n            case 2:\n                ath = ATHformula_GB(f, 0);\n                break;\n            case 3:\n                // modification of GB formula by Roel\n                ath = ATHformula_GB(f, 1) + 6;\n                break;\n            case 4:\n                ath = ATHformula_GB(f, gfp.ATHcurve);\n                break;\n            default:\n                ath = ATHformula_GB(f, 0);\n                break;\n        }\n        return ath;\n    }\n\n}\n\n\n\nfunction Lame() {\n    var self = this;\n    var LAME_MAXALBUMART = (128 * 1024);\n\n    Lame.V9 = 410;\n    Lame.V8 = 420;\n    Lame.V7 = 430;\n    Lame.V6 = 440;\n    Lame.V5 = 450;\n    Lame.V4 = 460;\n    Lame.V3 = 470;\n    Lame.V2 = 480;\n    Lame.V1 = 490;\n    Lame.V0 = 500;\n\n    /* still there for compatibility */\n\n    Lame.R3MIX = 1000;\n    Lame.STANDARD = 1001;\n    Lame.EXTREME = 1002;\n    Lame.INSANE = 1003;\n    Lame.STANDARD_FAST = 1004;\n    Lame.EXTREME_FAST = 1005;\n    Lame.MEDIUM = 1006;\n    Lame.MEDIUM_FAST = 1007;\n\n    /**\n     * maximum size of mp3buffer needed if you encode at most 1152 samples for\n     * each call to lame_encode_buffer. see lame_encode_buffer() below\n     * (LAME_MAXMP3BUFFER is now obsolete)\n     */\n    var LAME_MAXMP3BUFFER = (16384 + LAME_MAXALBUMART);\n    Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\n\n    var ga;\n    var bs;\n    var p;\n    var qupvt;\n    var qu;\n    var psy = new PsyModel();\n    var vbr;\n    var ver;\n    var id3;\n    var mpglib;\n    this.enc = new Encoder();\n\n    this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\n        ga = _ga;\n        bs = _bs;\n        p = _p;\n        qupvt = _qupvt;\n        qu = _qu;\n        vbr = _vbr;\n        ver = _ver;\n        id3 = _id3;\n        mpglib = _mpglib;\n        this.enc.setModules(bs, psy, qupvt, vbr);\n    }\n\n    /**\n     * PSY Model related stuff\n     */\n    function PSY() {\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust = 0.;\n        /**\n         * The dbQ stuff.\n         */\n        this.mask_adjust_short = 0.;\n        /* at transition from one scalefactor band to next */\n        /**\n         * Band weight long scalefactor bands.\n         */\n        this.bo_l_weight = new_float(Encoder.SBMAX_l);\n        /**\n         * Band weight short scalefactor bands.\n         */\n        this.bo_s_weight = new_float(Encoder.SBMAX_s);\n    }\n\n    function LowPassHighPass() {\n        this.lowerlimit = 0.;\n    }\n\n    function BandPass(bitrate, lPass) {\n        this.lowpass = lPass;\n    }\n\n    var LAME_ID = 0xFFF88E3B;\n\n    function lame_init_old(gfp) {\n        var gfc;\n\n        gfp.class_id = LAME_ID;\n\n        gfc = gfp.internal_flags = new LameInternalFlags();\n\n        /* Global flags. set defaults here for non-zero values */\n        /* see lame.h for description */\n        /*\n         * set integer values to -1 to mean that LAME will compute the best\n         * value, UNLESS the calling program as set it (and the value is no\n         * longer -1)\n         */\n\n        gfp.mode = MPEGMode.NOT_SET;\n        gfp.original = 1;\n        gfp.in_samplerate = 44100;\n        gfp.num_channels = 2;\n        gfp.num_samples = -1;\n\n        gfp.bWriteVbrTag = true;\n        gfp.quality = -1;\n        gfp.short_blocks = null;\n        gfc.subblock_gain = -1;\n\n        gfp.lowpassfreq = 0;\n        gfp.highpassfreq = 0;\n        gfp.lowpasswidth = -1;\n        gfp.highpasswidth = -1;\n\n        gfp.VBR = VbrMode.vbr_off;\n        gfp.VBR_q = 4;\n        gfp.ATHcurve = -1;\n        gfp.VBR_mean_bitrate_kbps = 128;\n        gfp.VBR_min_bitrate_kbps = 0;\n        gfp.VBR_max_bitrate_kbps = 0;\n        gfp.VBR_hard_min = 0;\n        gfc.VBR_min_bitrate = 1;\n        /* not 0 ????? */\n        gfc.VBR_max_bitrate = 13;\n        /* not 14 ????? */\n\n        gfp.quant_comp = -1;\n        gfp.quant_comp_short = -1;\n\n        gfp.msfix = -1;\n\n        gfc.resample_ratio = 1;\n\n        gfc.OldValue[0] = 180;\n        gfc.OldValue[1] = 180;\n        gfc.CurrentStep[0] = 4;\n        gfc.CurrentStep[1] = 4;\n        gfc.masking_lower = 1;\n        gfc.nsPsy.attackthre = -1;\n        gfc.nsPsy.attackthre_s = -1;\n\n        gfp.scale = -1;\n\n        gfp.athaa_type = -1;\n        gfp.ATHtype = -1;\n        /* default = -1 = set in lame_init_params */\n        gfp.athaa_loudapprox = -1;\n        /* 1 = flat loudness approx. (total energy) */\n        /* 2 = equal loudness curve */\n        gfp.athaa_sensitivity = 0.0;\n        /* no offset */\n        gfp.useTemporal = null;\n        gfp.interChRatio = -1;\n\n        /*\n         * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\n         * ENCDELAY = internal encoder delay. And then we have to add\n         * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\n         * decodes to 1152 samples. To synthesize the 576 samples centered under\n         * this granule we need the previous granule for the first 288 samples\n         * (no problem), and the next granule for the next 288 samples (not\n         * possible if this is last granule). So we need to pad with 288 samples\n         * to make sure we can encode the 576 samples we are interested in.\n         */\n        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\n        gfp.encoder_padding = 0;\n        gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\n        /*\n         * we pad input with this many 0's\n         */\n\n        gfp.findReplayGain = false;\n        gfp.decode_on_the_fly = false;\n\n        gfc.decode_on_the_fly = false;\n        gfc.findReplayGain = false;\n        gfc.findPeakSample = false;\n\n        gfc.RadioGain = 0;\n        gfc.AudiophileGain = 0;\n        gfc.noclipGainChange = 0;\n        gfc.noclipScale = -1.0;\n\n        gfp.preset = 0;\n\n        gfp.write_id3tag_automatic = true;\n        return 0;\n    }\n\n    this.lame_init = function () {\n        var gfp = new LameGlobalFlags();\n\n        var ret = lame_init_old(gfp);\n        if (ret != 0) {\n            return null;\n        }\n\n        gfp.lame_allocated_gfp = 1;\n        return gfp;\n    }\n\n    function filter_coef(x) {\n        if (x > 1.0)\n            return 0.0;\n        if (x <= 0.0)\n            return 1.0;\n\n        return Math.cos(Math.PI / 2 * x);\n    }\n\n    this.nearestBitrateFullIndex = function (bitrate) {\n        /* borrowed from DM abr presets */\n\n        var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80,\n            96, 112, 128, 160, 192, 224, 256, 320];\n\n        var lower_range = 0, lower_range_kbps = 0, upper_range = 0, upper_range_kbps = 0;\n\n        /* We assume specified bitrate will be 320kbps */\n        upper_range_kbps = full_bitrate_table[16];\n        upper_range = 16;\n        lower_range_kbps = full_bitrate_table[16];\n        lower_range = 16;\n\n        /*\n         * Determine which significant bitrates the value specified falls\n         * between, if loop ends without breaking then we were correct above\n         * that the value was 320\n         */\n        for (var b = 0; b < 16; b++) {\n            if ((Math.max(bitrate, full_bitrate_table[b + 1])) != bitrate) {\n                upper_range_kbps = full_bitrate_table[b + 1];\n                upper_range = b + 1;\n                lower_range_kbps = full_bitrate_table[b];\n                lower_range = (b);\n                break;\n                /* We found upper range */\n            }\n        }\n\n        /* Determine which range the value specified is closer to */\n        if ((upper_range_kbps - bitrate) > (bitrate - lower_range_kbps)) {\n            return lower_range;\n        }\n        return upper_range;\n    }\n\n    //fix cc 精简\n\n    /**\n     * convert samp freq in Hz to index\n     */\n    function SmpFrqIndex(sample_freq, gpf) {\n        switch (sample_freq) {\n            case 44100:\n                gpf.version = 1;\n                return 0;\n            case 48000:\n                gpf.version = 1;\n                return 1;\n            case 32000:\n                gpf.version = 1;\n                return 2;\n            case 22050:\n                gpf.version = 0;\n                return 0;\n            case 24000:\n                gpf.version = 0;\n                return 1;\n            case 16000:\n                gpf.version = 0;\n                return 2;\n            case 11025:\n                gpf.version = 0;\n                return 0;\n            case 12000:\n                gpf.version = 0;\n                return 1;\n            case 8000:\n                gpf.version = 0;\n                return 2;\n            default:\n                gpf.version = 0;\n                return -1;\n        }\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 8 to 320\n     */\n    function FindNearestBitrate(bRate, version, samplerate) {\n        /* MPEG-1 or MPEG-2 LSF */\n        if (samplerate < 16000)\n            version = 2;\n\n        var bitrate = Tables.bitrate_table[version][1];\n\n        for (var i = 2; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math\n                        .abs(bitrate - bRate))\n                    bitrate = Tables.bitrate_table[version][i];\n            }\n        }\n        return bitrate;\n    }\n\n    /**\n     * @param bRate\n     *            legal rates from 32 to 448 kbps\n     * @param version\n     *            MPEG-1 or MPEG-2/2.5 LSF\n     */\n    function BitrateIndex(bRate, version, samplerate) {\n        /* convert bitrate in kbps to index */\n        if (samplerate < 16000)\n            version = 2;\n        for (var i = 0; i <= 14; i++) {\n            if (Tables.bitrate_table[version][i] > 0) {\n                if (Tables.bitrate_table[version][i] == bRate) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    function optimum_bandwidth(lh, bitrate) {\n        /**\n         * <PRE>\n         *  Input:\n         *      bitrate     total bitrate in kbps\n         *\n         *   Output:\n         *      lowerlimit: best lowpass frequency limit for input filter in Hz\n         *      upperlimit: best highpass frequency limit for input filter in Hz\n         * </PRE>\n         */\n        var freq_map = [new BandPass(8, 2000),\n            new BandPass(16, 3700), new BandPass(24, 3900),\n            new BandPass(32, 5500), new BandPass(40, 7000),\n            new BandPass(48, 7500), new BandPass(56, 10000),\n            new BandPass(64, 11000), new BandPass(80, 13500),\n            new BandPass(96, 15100), new BandPass(112, 15600),\n            new BandPass(128, 17000), new BandPass(160, 17500),\n            new BandPass(192, 18600), new BandPass(224, 19400),\n            new BandPass(256, 19700), new BandPass(320, 20500)];\n\n        var table_index = self.nearestBitrateFullIndex(bitrate);\n        lh.lowerlimit = freq_map[table_index].lowpass;\n    }\n\n    function lame_init_params_ppflt(gfp) {\n        var gfc = gfp.internal_flags;\n        /***************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /***************************************************************/\n\n        var lowpass_band = 32;\n        var highpass_band = -1;\n\n        if (gfc.lowpass1 > 0) {\n            var minband = 999;\n            for (var band = 0; band <= 31; band++) {\n                var freq = (band / 31.0);\n                /* this band and above will be zeroed: */\n                if (freq >= gfc.lowpass2) {\n                    lowpass_band = Math.min(lowpass_band, band);\n                }\n                if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\n                    minband = Math.min(minband, band);\n                }\n            }\n\n            /*\n             * compute the *actual* transition band implemented by the polyphase\n             * filter\n             */\n            if (minband == 999) {\n                gfc.lowpass1 = (lowpass_band - .75) / 31.0;\n            } else {\n                gfc.lowpass1 = (minband - .75) / 31.0;\n            }\n            gfc.lowpass2 = lowpass_band / 31.0;\n        }\n\n        /*\n         * make sure highpass filter is within 90% of what the effective\n         * highpass frequency will be\n         */\n        if (gfc.highpass2 > 0) {\n            abort();//fix cc 精简\n        }\n\n        if (gfc.highpass2 > 0) {\n            abort();//fix cc 精简\n        }\n\n        for (var band = 0; band < 32; band++) {\n            var fc1, fc2;\n            var freq = band / 31.0;\n            if (gfc.highpass2 > gfc.highpass1) {\n                abort();//fix cc 精简\n            } else {\n                fc1 = 1.0;\n            }\n            if (gfc.lowpass2 > gfc.lowpass1) {\n                fc2 = filter_coef((freq - gfc.lowpass1)\n                    / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\n            } else {\n                fc2 = 1.0;\n            }\n            gfc.amp_filter[band] = (fc1 * fc2);\n        }\n    }\n\n    function lame_init_qval(gfp) {\n        var gfc = gfp.internal_flags;\n\n        switch (gfp.quality) {\n            default:\n            case 9: /* no psymodel, no noise shaping */\n                gfc.psymodel = 0;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 8:\n                gfp.quality = 7;\n            //$FALL-THROUGH$\n            case 7:\n                /*\n                 * use psymodel (for short block and m/s switching), but no noise\n                 * shapping\n                 */\n                gfc.psymodel = 1;\n                gfc.noise_shaping = 0;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 6:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 5:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 0;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 4:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 0;\n                gfc.noise_shaping_stop = 0;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 3:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 2:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 1;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /* inner loop */\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 1:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                gfc.full_outer_loop = 0;\n                break;\n\n            case 0:\n                gfc.psymodel = 1;\n                if (gfc.noise_shaping == 0)\n                    gfc.noise_shaping = 1;\n                if (gfc.substep_shaping == 0)\n                    gfc.substep_shaping = 2;\n                gfc.noise_shaping_amp = 2;\n                gfc.noise_shaping_stop = 1;\n                if (gfc.subblock_gain == -1)\n                    gfc.subblock_gain = 1;\n                gfc.use_best_huffman = 1;\n                /*\n                 * type 2 disabled because of it slowness, in favor of full outer\n                 * loop search\n                 */\n                gfc.full_outer_loop = 0;\n                /*\n                 * full outer loop search disabled because of audible distortions it\n                 * may generate rh 060629\n                 */\n                break;\n        }\n\n    }\n\n    function lame_init_bitstream(gfp) {\n        var gfc = gfp.internal_flags;\n        gfp.frameNum = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            id3.id3tag_write_v2(gfp);\n        }\n        /* initialize histogram data optionally used by frontend */\n\n        gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\n        gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\n\n        gfc.PeakSample = 0.0;\n\n        /* Write initial VBR Header to bitstream and init VBR data */\n        if (gfp.bWriteVbrTag)\n            vbr.InitVbrTag(gfp);\n    }\n\n    /********************************************************************\n     * initialize internal params based on data in gf (globalflags struct filled\n     * in by calling program)\n     *\n     * OUTLINE:\n     *\n     * We first have some complex code to determine bitrate, output samplerate\n     * and mode. It is complicated by the fact that we allow the user to set\n     * some or all of these parameters, and need to determine best possible\n     * values for the rest of them:\n     *\n     * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\n     * or stereo.stereo 3. compute bitrate and output samplerate: user may have\n     * set compression ratio user may have set a bitrate user may have set a\n     * output samplerate 4. set some options which depend on output samplerate\n     * 5. compute the actual compression ratio 6. set mode based on compression\n     * ratio\n     *\n     * The remaining code is much simpler - it just sets options based on the\n     * mode & compression ratio:\n     *\n     * set allow_diff_short based on mode select lowpass filter based on\n     * compression ratio & mode set the bitrate index, and min/max bitrates for\n     * VBR modes disable VBR tag if it is not appropriate initialize the\n     * bitstream initialize scalefac_band data set sideinfo_len (based on\n     * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\n     * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\n     * frames (based on a lot of data)\n     *\n     * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\n     * code\n     *\n     * Finally, we set the algorithm flags based on the gfp.quality value\n     * lame_init_qval(gfp);\n     *\n     ********************************************************************/\n    this.lame_init_params = function (gfp) {\n        var gfc = gfp.internal_flags;\n\n        gfc.Class_ID = 0;\n        if (gfc.ATH == null)\n            gfc.ATH = new ATH();\n        if (gfc.PSY == null)\n            gfc.PSY = new PSY();\n        if (gfc.rgdata == null)\n            gfc.rgdata = new ReplayGain();\n\n        gfc.channels_in = gfp.num_channels;\n        if (gfc.channels_in == 1)\n            gfp.mode = MPEGMode.MONO;\n        gfc.channels_out = (gfp.mode == MPEGMode.MONO) ? 1 : 2;\n        gfc.mode_ext = Encoder.MPG_MD_MS_LR;\n        if (gfp.mode == MPEGMode.MONO)\n            gfp.force_ms = false;\n        /*\n         * don't allow forced mid/side stereo for mono output\n         */\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128\n            && gfp.brate == 0)\n            gfp.brate = gfp.VBR_mean_bitrate_kbps;\n\n        if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh\n            || gfp.VBR == VbrMode.vbr_mt) {\n            /* these modes can handle free format condition */\n        } else {\n            gfp.free_format = false;\n            /* mode can't be mixed with free format */\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\n            abort();//fix cc 精简\n        }\n\n        /* find bitrate if user specify a compression ratio */\n        if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\n            abort();//fix cc 精简\n        }\n\n        if (gfp.out_samplerate != 0) {\n            if (gfp.out_samplerate < 16000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    64);\n            } else if (gfp.out_samplerate < 32000) {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    8);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    160);\n            } else {\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\n                    32);\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\n                    320);\n            }\n        }\n\n        /****************************************************************/\n        /* if a filter has not been enabled, see if we should add one: */\n        /****************************************************************/\n        if (gfp.lowpassfreq == 0) {\n            var lowpass = 16000.;\n\n            switch (gfp.VBR) {\n                case VbrMode.vbr_off:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.brate);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_abr:\n                {\n                    var lh = new LowPassHighPass();\n                    optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\n                    lowpass = lh.lowerlimit;\n                    break;\n                }\n                case VbrMode.vbr_rh:\n                {\n                    abort();//fix cc 精简\n                }\n                default:\n                {\n                    abort();//fix cc 精简\n                }\n            }\n            if (gfp.mode == MPEGMode.MONO\n                && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr))\n                lowpass *= 1.5;\n\n            gfp.lowpassfreq = lowpass | 0;\n        }\n\n        if (gfp.out_samplerate == 0) {\n            abort();//fix cc 精简\n        }\n\n        gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\n        gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                / (1.e3 * gfp.brate);\n        }\n        if (gfp.VBR == VbrMode.vbr_abr) {\n            abort();//fix cc 精简\n        }\n\n        /*\n         * do not compute ReplayGain values and do not find the peak sample if\n         * we can't store them\n         */\n        if (!gfp.bWriteVbrTag) {\n            gfp.findReplayGain = false;\n            gfp.decode_on_the_fly = false;\n            gfc.findPeakSample = false;\n        }\n        gfc.findReplayGain = gfp.findReplayGain;\n        gfc.decode_on_the_fly = gfp.decode_on_the_fly;\n\n        if (gfc.decode_on_the_fly)\n            gfc.findPeakSample = true;\n\n        if (gfc.findReplayGain) {\n            abort();//fix cc 精简\n        }\n\n        if (gfc.decode_on_the_fly && !gfp.decode_only) {\n            abort();//fix cc 精简\n        }\n\n        gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\n        /*\n         * Number of granules per frame\n         */\n        gfp.framesize = 576 * gfc.mode_gr;\n        gfp.encoder_delay = Encoder.ENCDELAY;\n\n        gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\n\n        /**\n         * <PRE>\n         *  sample freq       bitrate     compression ratio\n         *     [kHz]      [kbps/channel]   for 16 bit input\n         *     44.1            56               12.6\n         *     44.1            64               11.025\n         *     44.1            80                8.82\n         *     22.05           24               14.7\n         *     22.05           32               11.025\n         *     22.05           40                8.82\n         *     16              16               16.0\n         *     16              24               10.667\n         * </PRE>\n         */\n        /**\n         * <PRE>\n         *  For VBR, take a guess at the compression_ratio.\n         *  For example:\n         *\n         *    VBR_q    compression     like\n         *     -        4.4         320 kbps/44 kHz\n         *   0...1      5.5         256 kbps/44 kHz\n         *     2        7.3         192 kbps/44 kHz\n         *     4        8.8         160 kbps/44 kHz\n         *     6       11           128 kbps/44 kHz\n         *     9       14.7          96 kbps\n         *\n         *  for lower bitrates, downsample with --resample\n         * </PRE>\n         */\n        switch (gfp.VBR) {\n            case VbrMode.vbr_mt:\n            case VbrMode.vbr_rh:\n            case VbrMode.vbr_mtrh:\n            {\n                /* numbers are a bit strange, but they determine the lowpass value */\n                var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14,\n                    15, 16.5];\n                gfp.compression_ratio = cmp[gfp.VBR_q];\n            }\n                break;\n            case VbrMode.vbr_abr:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.VBR_mean_bitrate_kbps);\n                break;\n            default:\n                gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\n                    / (1.e3 * gfp.brate);\n                break;\n        }\n\n        /*\n         * mode = -1 (not set by user) or mode = MONO (because of only 1 input\n         * channel). If mode has not been set, then select J-STEREO\n         */\n        if (gfp.mode == MPEGMode.NOT_SET) {\n            gfp.mode = MPEGMode.JOINT_STEREO;\n        }\n\n        /* apply user driven high pass filter */\n        if (gfp.highpassfreq > 0) {\n            abort();//fix cc 精简\n        } else {\n            gfc.highpass1 = 0;\n            gfc.highpass2 = 0;\n        }\n        /* apply user driven low pass filter */\n        if (gfp.lowpassfreq > 0) {\n            gfc.lowpass2 = 2. * gfp.lowpassfreq;\n            if (gfp.lowpasswidth >= 0) {\n                abort();//fix cc 精简\n            } else { /* 0% below on default */\n                gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\n            }\n            gfc.lowpass1 /= gfp.out_samplerate;\n            gfc.lowpass2 /= gfp.out_samplerate;\n        } else {\n            abort();//fix cc 精简\n        }\n\n        /**********************************************************************/\n        /* compute info needed for polyphase filter (filter type==0, default) */\n        /**********************************************************************/\n        lame_init_params_ppflt(gfp);\n        /*******************************************************\n         * samplerate and bitrate index\n         *******************************************************/\n        gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\n        if (gfc.samplerate_index < 0) {\n            abort();//fix cc 精简\n        }\n\n        if (gfp.VBR == VbrMode.vbr_off) {\n            if (gfp.free_format) {\n                gfc.bitrate_index = 0;\n            } else {\n                gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version,\n                    gfp.out_samplerate);\n                if (gfc.bitrate_index <= 0) {\n                    abort();//fix cc 精简\n                }\n            }\n        } else {\n            gfc.bitrate_index = 1;\n        }\n\n        /* for CBR, we will write an \"info\" tag. */\n\n        if (gfp.analysis)\n            gfp.bWriteVbrTag = false;\n\n        /* some file options not allowed if output is: not specified or stdout */\n        if (gfc.pinfo != null)\n            gfp.bWriteVbrTag = false;\n        /* disable Xing VBR tag */\n\n        bs.init_bit_stream_w(gfc);\n\n        var j = gfc.samplerate_index + (3 * gfp.version) + 6\n            * (gfp.out_samplerate < 16000 ? 1 : 0);\n        for (var i = 0; i < Encoder.SBMAX_l + 1; i++)\n            gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\n\n        for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\n            var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21])\n                / Encoder.PSFB21;\n            var start = gfc.scalefac_band.l[21] + i * size;\n            gfc.scalefac_band.psfb21[i] = start;\n        }\n        gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\n\n        for (var i = 0; i < Encoder.SBMAX_s + 1; i++)\n            gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\n\n        for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\n            var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\n                / Encoder.PSFB12;\n            var start = gfc.scalefac_band.s[12] + i * size;\n            gfc.scalefac_band.psfb12[i] = start;\n        }\n        gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\n        /* determine the mean bitrate for main data */\n        if (gfp.version == 1) /* MPEG 1 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 17 : 4 + 32;\n        else\n        /* MPEG 2 */\n            gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 9 : 4 + 17;\n\n        if (gfp.error_protection)\n            gfc.sideinfo_len += 2;\n\n        lame_init_bitstream(gfp);\n\n        gfc.Class_ID = LAME_ID;\n\n        {\n            var k;\n\n            for (k = 0; k < 19; k++)\n                gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\n\n            if (gfp.ATHtype == -1)\n                gfp.ATHtype = 4;\n        }\n\n        switch (gfp.VBR) {\n\n            case VbrMode.vbr_mt:\n                gfp.VBR = VbrMode.vbr_mtrh;\n            //$FALL-THROUGH$\n            case VbrMode.vbr_mtrh:\n            {\n                if (gfp.useTemporal == null) {\n                    gfp.useTemporal = false;\n                    /* off by default for this VBR mode */\n                }\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n                /**\n                 * <PRE>\n                 *   The newer VBR code supports only a limited\n                 *     subset of quality levels:\n                 *     9-5=5 are the same, uses x^3/4 quantization\n                 *   4-0=0 are the same  5 plus best huffman divide code\n                 * </PRE>\n                 */\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n                if (gfp.quality < 5)\n                    gfp.quality = 0;\n                if (gfp.quality > 5)\n                    gfp.quality = 5;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                gfc.iteration_loop = new VBRNewIterationLoop(qu);\n                break;\n\n            }\n            case VbrMode.vbr_rh:\n            {\n\n                p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                /*\n                 * sfb21 extra only with MPEG-1 at higher sampling rates\n                 */\n                if (gfp.experimentalY)\n                    gfc.sfb21_extra = false;\n                else\n                    gfc.sfb21_extra = (gfp.out_samplerate > 44000);\n\n                /*\n                 * VBR needs at least the output of GPSYCHO, so we have to garantee\n                 * that by setting a minimum quality level, actually level 6 does\n                 * it. down to level 6\n                 */\n                if (gfp.quality > 6)\n                    gfp.quality = 6;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                gfc.iteration_loop = new VBROldIterationLoop(qu);\n                break;\n            }\n\n            default: /* cbr/abr */\n            {\n                var vbrmode;\n\n                /*\n                 * no sfb21 extra with CBR code\n                 */\n                gfc.sfb21_extra = false;\n\n                if (gfp.quality < 0)\n                    gfp.quality = LAME_DEFAULT_QUALITY;\n\n                vbrmode = gfp.VBR;\n                if (vbrmode == VbrMode.vbr_off)\n                    gfp.VBR_mean_bitrate_kbps = gfp.brate;\n                /* second, set parameters depending on bitrate */\n                p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\n                gfp.VBR = vbrmode;\n\n                gfc.PSY.mask_adjust = gfp.maskingadjust;\n                gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\n\n                if (vbrmode == VbrMode.vbr_off) {\n                    gfc.iteration_loop = new CBRNewIterationLoop(qu);\n                } else {\n                    abort();//fix cc 精简\n                }\n                break;\n            }\n        }\n        /* initialize default values common for all modes */\n\n        if (gfp.VBR != VbrMode.vbr_off) { /* choose a min/max bitrate for VBR */\n            abort();//fix cc 精简\n        }\n\n        /* just another daily changing developer switch */\n        if (gfp.tune) {\n            abort();//fix cc 精简\n        }\n\n        /* initialize internal qval settings */\n        lame_init_qval(gfp);\n        /*\n         * automatic ATH adjustment on\n         */\n        if (gfp.athaa_type < 0)\n            gfc.ATH.useAdjust = 3;\n        else\n            gfc.ATH.useAdjust = gfp.athaa_type;\n\n        /* initialize internal adaptive ATH settings -jd */\n        gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity\n            / -10.0);\n\n        if (gfp.short_blocks == null) {\n            gfp.short_blocks = ShortBlock.short_block_allowed;\n        }\n\n        /*\n         * Note Jan/2003: Many hardware decoders cannot handle short blocks in\n         * regular stereo mode unless they are coupled (same type in both\n         * channels) it is a rare event (1 frame per min. or so) that LAME would\n         * use uncoupled short blocks, so lets turn them off until we decide how\n         * to handle this. No other encoders allow uncoupled short blocks, even\n         * though it is in the standard.\n         */\n        /*\n         * rh 20040217: coupling makes no sense for mono and dual-mono streams\n         */\n        if (gfp.short_blocks == ShortBlock.short_block_allowed\n            && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\n            gfp.short_blocks = ShortBlock.short_block_coupled;\n        }\n\n        if (gfp.quant_comp < 0)\n            gfp.quant_comp = 1;\n        if (gfp.quant_comp_short < 0)\n            gfp.quant_comp_short = 0;\n\n        if (gfp.msfix < 0)\n            gfp.msfix = 0;\n\n        /* select psychoacoustic model */\n        gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\n\n        if (gfp.internal_flags.nsPsy.attackthre < 0)\n            gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\n        if (gfp.internal_flags.nsPsy.attackthre_s < 0)\n            gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\n\n\n        if (gfp.scale < 0)\n            gfp.scale = 1;\n\n        if (gfp.ATHtype < 0)\n            gfp.ATHtype = 4;\n\n        if (gfp.ATHcurve < 0)\n            gfp.ATHcurve = 4;\n\n        if (gfp.athaa_loudapprox < 0)\n            gfp.athaa_loudapprox = 2;\n\n        if (gfp.interChRatio < 0)\n            gfp.interChRatio = 0;\n\n        if (gfp.useTemporal == null)\n            gfp.useTemporal = true;\n        /* on by default */\n\n        /*\n         * padding method as described in\n         * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\n         * Sperschneider\n         *\n         * note: there is no padding for the very first frame\n         *\n         * Robert Hegemann 2000-06-22\n         */\n        gfc.slot_lag = gfc.frac_SpF = 0;\n        if (gfp.VBR == VbrMode.vbr_off)\n            gfc.slot_lag = gfc.frac_SpF = (((gfp.version + 1) * 72000 * gfp.brate) % gfp.out_samplerate) | 0;\n\n        qupvt.iteration_init(gfp);\n        psy.psymodel_init(gfp);\n        return 0;\n    }\n\n    function update_inbuffer_size(gfc, nsamples) {\n        if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\n            gfc.in_buffer_0 = new_float(nsamples);\n            gfc.in_buffer_1 = new_float(nsamples);\n            gfc.in_buffer_nsamples = nsamples;\n        }\n    }\n\n    this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\n        var gfc = gfp.internal_flags;\n        var buffer = new_short_n([2, 1152]);\n        var imp3 = 0, mp3count, mp3buffer_size_remaining;\n\n        /*\n         * we always add POSTDELAY=288 padding to make sure granule with real\n         * data can be complety decoded (because of 50% overlap with next\n         * granule\n         */\n        var end_padding;\n        var frames_left;\n        var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\n        var mf_needed = calcNeeded(gfp);\n\n        /* Was flush already called? */\n        if (gfc.mf_samples_to_encode < 1) {\n            return 0;\n        }\n        mp3count = 0;\n\n        if (gfp.in_samplerate != gfp.out_samplerate) {\n            abort();//fix cc 精简\n        }\n        end_padding = gfp.framesize - (samples_to_encode % gfp.framesize);\n        if (end_padding < 576)\n            end_padding += gfp.framesize;\n        gfp.encoder_padding = end_padding;\n\n        frames_left = (samples_to_encode + end_padding) / gfp.framesize;\n\n        /*\n         * send in a frame of 0 padding until all internal sample buffers are\n         * flushed\n         */\n        while (frames_left > 0 && imp3 >= 0) {\n            var bunch = mf_needed - gfc.mf_size;\n            var frame_num = gfp.frameNum;\n\n            bunch *= gfp.in_samplerate;\n            bunch /= gfp.out_samplerate;\n            if (bunch > 1152)\n                bunch = 1152;\n            if (bunch < 1)\n                bunch = 1;\n\n            mp3buffer_size_remaining = mp3buffer_size - mp3count;\n\n            /* if user specifed buffer size = 0, dont check size */\n            if (mp3buffer_size == 0)\n                mp3buffer_size_remaining = 0;\n\n            imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch,\n                mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\n\n            mp3bufferPos += imp3;\n            mp3count += imp3;\n            frames_left -= (frame_num != gfp.frameNum) ? 1 : 0;\n        }\n        /*\n         * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\n         * calling it more than once in a row.\n         */\n        gfc.mf_samples_to_encode = 0;\n\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        /* mp3 related stuff. bit buffer might still contain some mp3 data */\n        bs.flush_bitstream(gfp);\n        imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\n            mp3buffer_size_remaining, 1);\n        if (imp3 < 0) {\n            /* some type of fatal error */\n            return imp3;\n        }\n        mp3bufferPos += imp3;\n        mp3count += imp3;\n        mp3buffer_size_remaining = mp3buffer_size - mp3count;\n        /* if user specifed buffer size = 0, dont check size */\n        if (mp3buffer_size == 0)\n            mp3buffer_size_remaining = 0;\n\n        if (gfp.write_id3tag_automatic) {\n            abort();//fix cc 精简\n        }\n        return mp3count;\n    };\n\n    this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        update_inbuffer_size(gfc, nsamples);\n\n        in_buffer[0] = gfc.in_buffer_0;\n        in_buffer[1] = gfc.in_buffer_1;\n\n        /* make a copy of input buffer, changing type to sample_t */\n        for (var i = 0; i < nsamples; i++) {\n            in_buffer[0][i] = buffer_l[i];\n            if (gfc.channels_in > 1)\n                in_buffer[1][i] = buffer_r[i];\n        }\n\n        return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1],\n            nsamples, mp3buf, mp3bufPos, mp3buf_size);\n    }\n\n    function calcNeeded(gfp) {\n        var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\n        /*\n         * amount needed for FFT\n         */\n        mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\n\n        return mf_needed;\n    }\n\n    function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\n        var gfc = gfp.internal_flags;\n        var mp3size = 0, ret, i, ch, mf_needed;\n        var mp3out;\n        var mfbuf = [null, null];\n        var in_buffer = [null, null];\n\n        if (gfc.Class_ID != LAME_ID)\n            return -3;\n\n        if (nsamples == 0)\n            return 0;\n\n        /* copy out any tags that may have been written into bitstream */\n        mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\n        if (mp3out < 0)\n            return mp3out;\n        /* not enough buffer space */\n        mp3bufPos += mp3out;\n        mp3size += mp3out;\n\n        in_buffer[0] = buffer_l;\n        in_buffer[1] = buffer_r;\n\n        /* Apply user defined re-scaling */\n\n        /* user selected scaling of the samples */\n        if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale;\n                if (gfc.channels_out == 2)\n                    in_buffer[1][i] *= gfp.scale;\n            }\n        }\n\n        /* user selected scaling of the channel 0 (left) samples */\n        if (BitStream.NEQ(gfp.scale_left, 0)\n            && BitStream.NEQ(gfp.scale_left, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[0][i] *= gfp.scale_left;\n            }\n        }\n\n        /* user selected scaling of the channel 1 (right) samples */\n        if (BitStream.NEQ(gfp.scale_right, 0)\n            && BitStream.NEQ(gfp.scale_right, 1.0)) {\n            for (i = 0; i < nsamples; ++i) {\n                in_buffer[1][i] *= gfp.scale_right;\n            }\n        }\n\n        /* Downsample to Mono if 2 channels in and 1 channel out */\n        if (gfp.num_channels == 2 && gfc.channels_out == 1) {\n            abort();//fix cc 精简 stereo\n        }\n\n        mf_needed = calcNeeded(gfp);\n\n        mfbuf[0] = gfc.mfbuf[0];\n        mfbuf[1] = gfc.mfbuf[1];\n\n        var in_bufferPos = 0;\n        while (nsamples > 0) {\n            var in_buffer_ptr = [null, null];\n            var n_in = 0;\n            /* number of input samples processed with fill_buffer */\n            var n_out = 0;\n            /* number of samples output with fill_buffer */\n            /* n_in <> n_out if we are resampling */\n\n            in_buffer_ptr[0] = in_buffer[0];\n            in_buffer_ptr[1] = in_buffer[1];\n            /* copy in new samples into mfbuf, with resampling */\n            var inOut = new InOut();\n            fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples,\n                inOut);\n            n_in = inOut.n_in;\n            n_out = inOut.n_out;\n\n            /* compute ReplayGain of resampled input if requested */\n            if (gfc.findReplayGain && !gfc.decode_on_the_fly)\n                if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size,\n                        mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\n                    return -6;\n\n            /* update in_buffer counters */\n            nsamples -= n_in;\n            in_bufferPos += n_in;\n            if (gfc.channels_out == 2)\n                ;// in_bufferPos += n_in;\n\n            /* update mfbuf[] counters */\n            gfc.mf_size += n_out;\n\n            /*\n             * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\n             * have to reinitialize it here when that happened.\n             */\n            if (gfc.mf_samples_to_encode < 1) {\n                abort();//fix cc 精简\n            }\n            gfc.mf_samples_to_encode += n_out;\n\n            if (gfc.mf_size >= mf_needed) {\n                /* encode the frame. */\n                /* mp3buf = pointer to current location in buffer */\n                /* mp3buf_size = size of original mp3 output buffer */\n                /* = 0 if we should not worry about the */\n                /* buffer size because calling program is */\n                /* to lazy to compute it */\n                /* mp3size = size of data written to buffer so far */\n                /* mp3buf_size-mp3size = amount of space avalable */\n\n                var buf_size = mp3buf_size - mp3size;\n                if (mp3buf_size == 0)\n                    buf_size = 0;\n\n                ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf,\n                    mp3bufPos, buf_size);\n\n                if (ret < 0)\n                    return ret;\n                mp3bufPos += ret;\n                mp3size += ret;\n\n                /* shift out old samples */\n                gfc.mf_size -= gfp.framesize;\n                gfc.mf_samples_to_encode -= gfp.framesize;\n                for (ch = 0; ch < gfc.channels_out; ch++)\n                    for (i = 0; i < gfc.mf_size; i++)\n                        mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\n            }\n        }\n\n        return mp3size;\n    }\n\n    function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\n        var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf,\n            mp3bufPos, mp3buf_size);\n        gfp.frameNum++;\n        return ret;\n    }\n\n    function InOut() {\n        this.n_in = 0;\n        this.n_out = 0;\n    }\n\n    //fix cc 精简\n\n    function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\n        var gfc = gfp.internal_flags;\n\n        /* copy in new samples into mfbuf, with resampling if necessary */\n        if ((gfc.resample_ratio < .9999) || (gfc.resample_ratio > 1.0001)) {\n            abort();//fix cc 精简\n        } else {\n            io.n_out = Math.min(gfp.framesize, nsamples);\n            io.n_in = io.n_out;\n            for (var i = 0; i < io.n_out; ++i) {\n                mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\n                if (gfc.channels_out == 2)\n                    mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\n            }\n        }\n    }\n\n}\n\n\n\nfunction GetAudio() {\n    var parse;\n    var mpg;\n\n    this.setModules = function (parse2, mpg2) {\n        parse = parse2;\n        mpg = mpg2;\n    }\n}\n\n\nfunction Parse() {\n    var ver;\n    var id3;\n    var pre;\n\n    this.setModules = function (ver2, id32, pre2) {\n        ver = ver2;\n        id3 = id32;\n        pre = pre2;\n    }\n}\n\nfunction MPGLib() {\n}\n\nfunction ID3Tag() {\n    var bits;\n    var ver;\n\n    this.setModules = function (_bits, _ver) {\n        bits = _bits;\n        ver = _ver;\n    }\n}\n\nfunction Mp3Encoder(channels, samplerate, kbps) {\n    if (channels!=1) { //精简后的代码不支持双声道\n        abort(\"fix cc: only supports mono\")\n    }\n    var lame = new Lame();\n    var gaud = new GetAudio();\n    var ga = new GainAnalysis();\n    var bs = new BitStream();\n    var p = new Presets();\n    var qupvt = new QuantizePVT();\n    var qu = new Quantize();\n    var vbr = new VBRTag();\n    var ver = new Version();\n    var id3 = new ID3Tag();\n    var rv = new Reservoir();\n    var tak = new Takehiro();\n    var parse = new Parse();\n    var mpg = new MPGLib();\n\n    lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3, mpg);\n    bs.setModules(ga, mpg, ver, vbr);\n    id3.setModules(bs, ver);\n    p.setModules(lame);\n    qu.setModules(bs, rv, qupvt, tak);\n    qupvt.setModules(tak, rv, lame.enc.psy);\n    rv.setModules(bs);\n    tak.setModules(qupvt);\n    vbr.setModules(lame, bs, ver);\n    gaud.setModules(parse, mpg);\n    parse.setModules(ver, id3, p);\n\n    var gfp = lame.lame_init();\n\n    gfp.num_channels = channels;\n    gfp.in_samplerate = samplerate;\n    gfp.out_samplerate = samplerate;//fix by xiangyuecn 2018-12-6 01:48:12 64kbps以下可能无声音，手动控制输出码率\n    gfp.brate = kbps;\n    gfp.mode = MPEGMode.STEREO;\n    gfp.quality = 3;\n    gfp.bWriteVbrTag = false;\n    gfp.disable_reservoir = true;\n    gfp.write_id3tag_automatic = false;\n\n    var retcode = lame.lame_init_params(gfp);\n    var maxSamples = 1152;\n    var mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n    var mp3buf = new_byte(mp3buf_size);\n\n    this.encodeBuffer = function (left, right) {\n        if (channels == 1) {\n            right = left;\n        }\n        if (left.length > maxSamples) {\n            maxSamples = left.length;\n            mp3buf_size = 0 | (1.25 * maxSamples + 7200);\n            mp3buf = new_byte(mp3buf_size);\n        }\n\n        var _sz = lame.lame_encode_buffer(gfp, left, right, left.length, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n\n    this.flush = function () {\n        var _sz = lame.lame_encode_flush(gfp, mp3buf, 0, mp3buf_size);\n        return new Int8Array(mp3buf.subarray(0, _sz));\n    };\n}\n\n//fix 精简\nL3Side.SFBMAX = (Encoder.SBMAX_s * 3);\n//testFullLength();\nlamejs.Mp3Encoder = Mp3Encoder;\n}\n//fs=require('fs');\nlamejs();\n\n\nRecorder.lamejs=lamejs;\n\n\n}));","/*\nmp3编码器，需带上src/engine/mp3-engine.js引擎使用\nhttps://github.com/xiangyuecn/Recorder\n\n当然最佳推荐使用mp3、wav格式，代码也是优先照顾这两种格式\n浏览器支持情况\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\n*/\n(function(factory){\n\tvar browser=typeof window==\"object\" && !!window.document;\n\tvar win=browser?window:Object; //非浏览器环境，Recorder挂载在Object下面\n\tvar rec=win.Recorder,ni=rec.i18n;\n\tfactory(rec,ni,ni.$T,browser);\n}(function(Recorder,i18n,$T,isBrowser){\n\"use strict\";\n\nvar SampleS=\"48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000\";\nvar BitS=\"8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 192, 224, 256, 320\";\nRecorder.prototype.enc_mp3={\n\tstable:true,takeEC:\"full\"\n\t,getTestMsg:function(){\n\t\treturn $T(\"Zm7L::采样率范围：{1}；比特率范围：{2}（不同比特率支持的采样率范围不同，小于32kbps时采样率需小于32000）\",0,SampleS,BitS);\n\t}\n};\n\nvar NormalizeSet=function(set){\n\tvar bS=set.bitRate, sS=set.sampleRate,s=sS;\n\tif((\" \"+BitS+\",\").indexOf(\" \"+bS+\",\")==-1){\n\t\tRecorder.CLog($T(\"eGB9::{1}不在mp3支持的取值范围：{2}\",0,\"bitRate=\"+bS,BitS),3);\n\t}\n\tif((\" \"+SampleS+\",\").indexOf(\" \"+sS+\",\")==-1){//engine SmpFrqIndex函数会检测\n\t\tvar arr=SampleS.split(\", \"),vs=[];\n\t\tfor(var i=0;i<arr.length;i++) vs.push({v:+arr[i],s:Math.abs(arr[i]-sS)});\n\t\tvs.sort(function(a,b){return a.s-b.s}); s=vs[0].v;\n\t\t\n\t\tset.sampleRate=s;\n\t\tRecorder.CLog($T(\"zLTa::sampleRate已更新为{1}，因为{2}不在mp3支持的取值范围：{3}\",0,s,sS,SampleS),3);\n\t}\n};\nvar ImportEngineErr=function(){\n\treturn $T.G(\"NeedImport-2\",[\"mp3.js\",\"src/engine/mp3-engine.js\"]);\n};\n//是否支持web worker\nvar HasWebWorker=isBrowser && typeof Worker==\"function\";\n\n\n\n//*******标准UI线程转码支持函数************\n\nRecorder.prototype.mp3=function(res,True,False){\n\t\tvar This=this,set=This.set,size=res.length;\n\t\tif(!Recorder.lamejs){\n\t\t\tFalse(ImportEngineErr()); return;\n\t\t};\n\t\t\n\t\t//优先采用worker编码，非worker时用老方法提供兼容\n\t\tif(HasWebWorker){\n\t\t\tvar ctx=This.mp3_start(set);\n\t\t\tif(ctx){\n\t\t\t\tif(ctx.isW){\n\t\t\t\t\tThis.mp3_encode(ctx,res);\n\t\t\t\t\tThis.mp3_complete(ctx,True,False,1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tThis.mp3_stop(ctx);\n\t\t\t};\n\t\t};\n\t\t\n\t\tNormalizeSet(set);\n\t\t//https://github.com/wangpengfei15975/recorder.js\n\t\t//https://github.com/zhuker/lamejs bug:采样率必须和源一致，不然8k时没有声音，有问题fix：https://github.com/zhuker/lamejs/pull/11\n\t\tvar mp3=new Recorder.lamejs.Mp3Encoder(1,set.sampleRate,set.bitRate);\n\t\t\n\t\tvar blockSize=57600;\n\t\tvar memory=new Int8Array(500000), mOffset=0;\n\t\t\n\t\tvar idx=0,isFlush=0;\n\t\tvar run=function(){\n\t\t\ttry{\n\t\t\t\tif(idx<size){\n\t\t\t\t\tvar buf=mp3.encodeBuffer(res.subarray(idx,idx+blockSize));\n\t\t\t\t}else{\n\t\t\t\t\tisFlush=1;\n\t\t\t\t\tvar buf=mp3.flush();\n\t\t\t\t};\n\t\t\t}catch(e){ //精简代码调用了abort\n\t\t\t\tconsole.error(e);\n\t\t\t\tif(!isFlush) try{ mp3.flush() }catch(r){ console.error(r) }\n\t\t\t\tFalse(\"MP3 Encoder: \"+e.message);\n\t\t\t\treturn;\n\t\t\t};\n\t\t\tvar bufLen=buf.length;\n\t\t\tif(bufLen>0){\n\t\t\t\tif(mOffset+bufLen>memory.length){\n\t\t\t\t\tvar tmp=new Int8Array(memory.length+Math.max(500000,bufLen));\n\t\t\t\t\ttmp.set(memory.subarray(0, mOffset));\n\t\t\t\t\tmemory=tmp;\n\t\t\t\t}\n\t\t\t\tmemory.set(buf,mOffset);\n\t\t\t\tmOffset+=bufLen;\n\t\t\t};\n\t\t\t\n\t\t\tif(idx<size){\n\t\t\t\tidx+=blockSize;\n\t\t\t\tsetTimeout(run);//尽量避免卡ui\n\t\t\t}else{\n\t\t\t\tvar data=[memory.buffer.slice(0,mOffset)];\n\t\t\t\t//去掉开头的标记信息帧\n\t\t\t\tvar meta=mp3TrimFix.fn(data,mOffset,size,set.sampleRate);\n\t\t\t\tmp3TrimFixSetMeta(meta,set);\n\t\t\t\t\n\t\t\t\tTrue(data[0]||new ArrayBuffer(0),\"audio/mp3\");\n\t\t\t};\n\t\t};\n\t\trun();\n\t}\n\n\n//********边录边转码(Worker)支持函数，如果提供就代表可能支持，否则只支持标准转码*********\n\n//全局共享一个Worker，后台串行执行。如果每次都开一个新的，编码速度可能会慢很多，可能是浏览器运行缓存的因素，并且可能瞬间产生多个并行操作占用大量cpu\nvar mp3Worker;\nRecorder.BindDestroy(\"mp3Worker\",function(){\n\tif(mp3Worker){\n\t\tRecorder.CLog(\"mp3Worker Destroy\");\n\t\tmp3Worker.terminate();\n\t\tmp3Worker=null;\n\t};\n});\n\n\nRecorder.prototype.mp3_envCheck=function(envInfo,set){//检查环境下配置是否可用\n\tvar errMsg=\"\";\n\t//需要实时编码返回数据，此时需要检查是否可实时编码\n\tif(set.takeoffEncodeChunk){\n\t\tif(!newContext()){//浏览器不能创建实时编码环境\n\t\t\terrMsg=$T(\"yhUs::当前浏览器版本太低，无法实时处理\");\n\t\t};\n\t};\n\tif(!errMsg && !Recorder.lamejs){\n\t\terrMsg=ImportEngineErr();\n\t};\n\treturn errMsg;\n};\nRecorder.prototype.mp3_start=function(set){//如果返回null代表不支持\n\treturn newContext(set);\n};\nvar openList={id:0};\nvar newContext=function(setOrNull,_badW){\n\t//独立运行的函数，scope.wkScope worker.onmessage 字符串会被替换\n\tvar run=function(e){\n\t\tvar ed=e.data;\n\t\tvar wk_ctxs=scope.wkScope.wk_ctxs;\n\t\tvar wk_lame=scope.wkScope.wk_lame;\n\t\tvar wk_mp3TrimFix=scope.wkScope.wk_mp3TrimFix;\n\t\t\n\t\tvar cur=wk_ctxs[ed.id];\n\t\tif(ed.action==\"init\"){\n\t\t\twk_ctxs[ed.id]={\n\t\t\t\tsampleRate:ed.sampleRate\n\t\t\t\t,bitRate:ed.bitRate\n\t\t\t\t,takeoff:ed.takeoff\n\t\t\t\t\n\t\t\t\t,pcmSize:0\n\t\t\t\t,memory:new Int8Array(500000), mOffset:0\n\t\t\t\t,encObj:new wk_lame.Mp3Encoder(1,ed.sampleRate,ed.bitRate)\n\t\t\t};\n\t\t}else if(!cur){\n\t\t\treturn;\n\t\t};\n\t\tvar addBytes=function(buf){\n\t\t\tvar bufLen=buf.length;\n\t\t\tif(cur.mOffset+bufLen>cur.memory.length){\n\t\t\t\tvar tmp=new Int8Array(cur.memory.length+Math.max(500000,bufLen));\n\t\t\t\ttmp.set(cur.memory.subarray(0, cur.mOffset));\n\t\t\t\tcur.memory=tmp;\n\t\t\t}\n\t\t\tcur.memory.set(buf,cur.mOffset);\n\t\t\tcur.mOffset+=bufLen;\n\t\t};\n\t\t\n\t\tswitch(ed.action){\n\t\tcase \"stop\":\n\t\t\tif(!cur.isCp) try{ cur.encObj.flush() }catch(e){ console.error(e) }\n\t\t\tcur.encObj=null;\n\t\t\tdelete wk_ctxs[ed.id];\n\t\t\tbreak;\n\t\tcase \"encode\":\n\t\t\tif(cur.isCp)break;\n\t\t\tcur.pcmSize+=ed.pcm.length;\n\t\t\ttry{\n\t\t\t\tvar buf=cur.encObj.encodeBuffer(ed.pcm);\n\t\t\t}catch(e){ //精简代码调用了abort\n\t\t\t\tcur.err=e;\n\t\t\t\tconsole.error(e);\n\t\t\t};\n\t\t\tif(buf && buf.length>0){\n\t\t\t\tif(cur.takeoff){\n\t\t\t\t\tworker.onmessage({action:\"takeoff\",id:ed.id,chunk:buf});\n\t\t\t\t}else{\n\t\t\t\t\taddBytes(buf);\n\t\t\t\t};\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"complete\":\n\t\t\tcur.isCp=1;\n\t\t\ttry{\n\t\t\t\tvar buf=cur.encObj.flush();\n\t\t\t}catch(e){ //精简代码调用了abort\n\t\t\t\tcur.err=e;\n\t\t\t\tconsole.error(e);\n\t\t\t};\n\t\t\tif(buf && buf.length>0){\n\t\t\t\tif(cur.takeoff){\n\t\t\t\t\tworker.onmessage({action:\"takeoff\",id:ed.id,chunk:buf});\n\t\t\t\t}else{\n\t\t\t\t\taddBytes(buf);\n\t\t\t\t};\n\t\t\t};\n\t\t\tif(cur.err){\n\t\t\t\tworker.onmessage({action:ed.action,id:ed.id\n\t\t\t\t\t,err:\"MP3 Encoder: \"+cur.err.message});\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\t\n\t\t\tvar data=[cur.memory.buffer.slice(0,cur.mOffset)];\n\t\t\t//去掉开头的标记信息帧\n\t\t\tvar meta=wk_mp3TrimFix.fn(data,cur.mOffset,cur.pcmSize,cur.sampleRate);\n\t\t\t\n\t\t\tworker.onmessage({\n\t\t\t\taction:ed.action\n\t\t\t\t,id:ed.id\n\t\t\t\t,blob:data[0]||new ArrayBuffer(0)\n\t\t\t\t,meta:meta\n\t\t\t});\n\t\t\tbreak;\n\t\t};\n\t};\n\t\n\tvar initOnMsg=function(isW){\n\t\tworker.onmessage=function(e){\n\t\t\tvar data=e; if(isW)data=e.data;\n\t\t\tvar ctx=openList[data.id];\n\t\t\tif(ctx){\n\t\t\t\tif(data.action==\"takeoff\"){\n\t\t\t\t\t//取走实时生成的mp3数据\n\t\t\t\t\tctx.set.takeoffEncodeChunk(new Uint8Array(data.chunk.buffer));\n\t\t\t\t}else{\n\t\t\t\t\t//complete\n\t\t\t\t\tctx.call&&ctx.call(data);\n\t\t\t\t\tctx.call=null;\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n\tvar initCtx=function(){\n\t\tvar ctx={worker:worker,set:setOrNull};\n\t\tif(setOrNull){\n\t\t\tctx.id=++openList.id;\n\t\t\topenList[ctx.id]=ctx;\n\t\t\t\n\t\t\tNormalizeSet(setOrNull);\n\t\t\t\n\t\t\tworker.postMessage({\n\t\t\t\taction:\"init\"\n\t\t\t\t,id:ctx.id\n\t\t\t\t,sampleRate:setOrNull.sampleRate\n\t\t\t\t,bitRate:setOrNull.bitRate\n\t\t\t\t,takeoff:!!setOrNull.takeoffEncodeChunk\n\t\t\t\t\n\t\t\t\t,x:new Int16Array(5)//低版本浏览器不支持序列化TypedArray\n\t\t\t});\n\t\t}else{\n\t\t\tworker.postMessage({\n\t\t\t\tx:new Int16Array(5)//低版本浏览器不支持序列化TypedArray\n\t\t\t});\n\t\t};\n\t\treturn ctx;\n\t};\n\tvar scope,worker=mp3Worker;\n\t\n\t//非浏览器，不支持worker，或者开启失败，使用UI线程处理\n\tif(_badW || !HasWebWorker){\n\t\tRecorder.CLog($T(\"k9PT::当前环境不支持Web Worker，mp3实时编码器运行在主线程中\"),3);\n\t\tworker={ postMessage:function(ed){ run({data:ed}); } };\n\t\tscope={wkScope:{\n\t\t\twk_ctxs:{}, wk_lame:Recorder.lamejs, wk_mp3TrimFix:mp3TrimFix\n\t\t}};\n\t\tinitOnMsg();\n\t\treturn initCtx();\n\t};\n\t\n\ttry{\n\t\tif(!worker){\n\t\t\t//创建一个新Worker\n\t\t\tvar onmsg=(run+\"\").replace(/[\\w\\$]+\\.onmessage/g,\"self.postMessage\");\n\t\t\tonmsg=onmsg.replace(/[\\w\\$]+\\.wkScope/g,\"wkScope\");\n\t\t\tvar jsCode=\");wk_lame();self.onmessage=\"+onmsg;\n\t\t\tjsCode+=\";var wkScope={ wk_ctxs:{},wk_lame:wk_lame\";\n\t\t\tjsCode+=\",wk_mp3TrimFix:{rm:\"+mp3TrimFix.rm+\",fn:\"+mp3TrimFix.fn+\"} }\";\n\t\t\t\n\t\t\tvar lamejsCode=Recorder.lamejs.toString();\n\t\t\tvar url=(window.URL||webkitURL).createObjectURL(new Blob([\"var wk_lame=(\",lamejsCode,jsCode], {type:\"text/javascript\"}));\n\t\t\t\n\t\t\tworker=new Worker(url);\n\t\t\tsetTimeout(function(){\n\t\t\t\t(window.URL||webkitURL).revokeObjectURL(url);//必须要释放，不然每次调用内存都明显泄露内存\n\t\t\t},10000);//chrome 83 file协议下如果直接释放，将会使WebWorker无法启动\n\t\t\tinitOnMsg(1);\n\t\t};\n\t\t\n\t\tvar ctx=initCtx(); ctx.isW=1;\n\t\tmp3Worker=worker;\n\t\treturn ctx;\n\t}catch(e){//出错了就不要提供了\n\t\tworker&&worker.terminate();\n\t\tconsole.error(e);\n\t\treturn newContext(setOrNull, 1);//切换到UI线程处理\n\t};\n};\nRecorder.prototype.mp3_stop=function(startCtx){\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"stop\"\n\t\t\t,id:startCtx.id\n\t\t});\n\t\tstartCtx.worker=null;\n\t\tdelete openList[startCtx.id];\n\t\t\n\t\t//疑似泄露检测 排除id\n\t\tvar opens=-1;\n\t\tfor(var k in openList){\n\t\t\topens++;\n\t\t};\n\t\tif(opens){\n\t\t\tRecorder.CLog($T(\"fT6M::mp3 worker剩{1}个未stop\",0,opens),3);\n\t\t};\n\t};\n};\nRecorder.prototype.mp3_encode=function(startCtx,pcm){\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"encode\"\n\t\t\t,id:startCtx.id\n\t\t\t,pcm:pcm\n\t\t});\n\t};\n};\nRecorder.prototype.mp3_complete=function(startCtx,True,False,autoStop){\n\tvar This=this;\n\tif(startCtx&&startCtx.worker){\n\t\tstartCtx.call=function(data){\n\t\t\tif(autoStop){\n\t\t\t\tThis.mp3_stop(startCtx);\n\t\t\t};\n\t\t\tif(data.err){\n\t\t\t\tFalse(data.err);\n\t\t\t}else{\n\t\t\t\tmp3TrimFixSetMeta(data.meta,startCtx.set);\n\t\t\t\tTrue(data.blob,\"audio/mp3\");\n\t\t\t};\n\t\t};\n\t\tstartCtx.worker.postMessage({\n\t\t\taction:\"complete\"\n\t\t\t,id:startCtx.id\n\t\t});\n\t}else{\n\t\tFalse($T(\"mPxH::mp3编码器未start\"));\n\t};\n};\n\n\n\n\n\n\n\n//*******辅助函数************\n\n/*读取lamejs编码出来的mp3信息，只能读特定格式，如果读取失败返回null\nmp3Buffers=[ArrayBuffer,...]\nlength=mp3Buffers的数据二进制总长度\n*/\nRecorder.mp3ReadMeta=function(mp3Buffers,length){\n\t//kill babel-polyfill ES6 Number.parseInt 不然放到Worker里面找不到方法，也不能用typeof(x)==object 会被替换成 _typeof\n\tvar parseInt_ES3=typeof(window)!=\"undefined\"&&window.parseInt||typeof(self)!=\"undefined\"&&self.parseInt||parseInt;\n\t\n\tvar u8arr0=new Uint8Array(mp3Buffers[0]||[]);\n\tif(u8arr0.length<4){\n\t\treturn null;\n\t};\n\tvar byteAt=function(idx,u8){\n\t\treturn (\"0000000\"+((u8||u8arr0)[idx]||0).toString(2)).substr(-8);\n\t};\n\tvar b2=byteAt(0)+byteAt(1);\n\tvar b4=byteAt(2)+byteAt(3);\n\t\n\tif(!/^1{11}/.test(b2)){//未发现帧同步\n\t\treturn null;\n\t};\n\tvar version=({\"00\":2.5,\"10\":2,\"11\":1})[b2.substr(11,2)];\n\tvar layer=({\"01\":3})[b2.substr(13,2)];//仅支持Layer3\n\tvar sampleRate=({ //lamejs -> Tables.samplerate_table\n\t\t\"1\":[44100, 48000, 32000]\n\t\t,\"2\":[22050, 24000, 16000]\n\t\t,\"2.5\":[11025, 12000, 8000]\n\t})[version];\n\tsampleRate&&(sampleRate=sampleRate[parseInt_ES3(b4.substr(4,2),2)]);\n\tvar bitRate=[ //lamejs -> Tables.bitrate_table\n\t\t[0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160] //MPEG 2 2.5\n\t\t,[0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320]//MPEG 1\n\t][version==1?1:0][parseInt_ES3(b4.substr(0,4),2)];\n\t\n\tif(!version || !layer || !bitRate || !sampleRate){\n\t\treturn null;\n\t};\n\t\n\tvar duration=Math.round(length*8/bitRate);\n\tvar frame=layer==1?384:layer==2?1152:version==1?1152:576;\n\tvar frameDurationFloat=frame/sampleRate*1000;\n\tvar frameSize=Math.floor((frame*bitRate)/8/sampleRate*1000);\n\t\n\t//检测是否存在Layer3帧填充1字节。这里只获取第二帧的填充信息，首帧永远没有填充。其他帧可能隔一帧出现一个填充，或者隔很多帧出现一个填充；目测是取决于frameSize未舍入时的小数部分，因为有些采样率的frameSize会出现小数（11025、22050、44100 典型的除不尽），然后字节数无法表示这种小数，就通过一定步长来填充弥补小数部分丢失\n\tvar hasPadding=0,seek=0;\n\tfor(var i=0;i<mp3Buffers.length;i++){\n\t\t//寻找第二帧\n\t\tvar buf=mp3Buffers[i];\n\t\tseek+=buf.byteLength;\n\t\tif(seek>=frameSize+3){\n\t\t\tvar buf8=new Uint8Array(buf);\n\t\t\tvar idx=buf.byteLength-(seek-(frameSize+3)+1);\n\t\t\tvar ib4=byteAt(idx,buf8);\n\t\t\thasPadding=ib4.charAt(6)==\"1\";\n\t\t\tbreak;\n\t\t};\n\t};\n\tif(hasPadding){\n\t\tframeSize++;\n\t};\n\t\n\t\n\treturn {\n\t\tversion:version //1 2 2.5 -> MPEG1 MPEG2 MPEG2.5\n\t\t,layer:layer//3 -> Layer3\n\t\t,sampleRate:sampleRate //采样率 hz\n\t\t,bitRate:bitRate //比特率 kbps\n\t\t\n\t\t,duration:duration //音频时长 ms\n\t\t,size:length //总长度 byte\n\t\t,hasPadding:hasPadding //是否存在1字节填充，首帧永远没有，这个值其实代表的第二帧是否有填充，并不代表其他帧的\n\t\t,frameSize:frameSize //每帧最大长度，含可能存在的1字节padding byte\n\t\t,frameDurationFloat:frameDurationFloat //每帧时长，含小数 ms\n\t};\n};\n\n//去掉lamejs开头的标记信息帧，免得mp3解码出来的时长比pcm的长太多\nvar mp3TrimFix={//minfiy keep name\nrm:Recorder.mp3ReadMeta\n,fn:function(mp3Buffers,length,pcmLength,pcmSampleRate){\n\tvar meta=this.rm(mp3Buffers,length);\n\tif(!meta){\n\t\treturn {err:\"mp3 unknown format\"};\n\t};\n\tvar pcmDuration=Math.round(pcmLength/pcmSampleRate*1000);\n\t\n\t//开头多出这么多帧，移除掉；正常情况下最多为2帧\n\tvar num=Math.floor((meta.duration-pcmDuration)/meta.frameDurationFloat);\n\tif(num>0){\n\t\tvar size=num*meta.frameSize-(meta.hasPadding?1:0);//首帧没有填充，第二帧可能有填充，这里假设最多为2帧（测试并未出现3帧以上情况），其他帧不管，就算出现了并且导致了错误后面自动容错\n\t\tlength-=size;\n\t\tvar arr0=0,arrs=[];\n\t\tfor(var i=0;i<mp3Buffers.length;i++){\n\t\t\tvar arr=mp3Buffers[i];\n\t\t\tif(size<=0){\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\tif(size>=arr.byteLength){\n\t\t\t\tsize-=arr.byteLength;\n\t\t\t\tarrs.push(arr);\n\t\t\t\tmp3Buffers.splice(i,1);\n\t\t\t\ti--;\n\t\t\t}else{\n\t\t\t\tmp3Buffers[i]=arr.slice(size);\n\t\t\t\tarr0=arr;\n\t\t\t\tsize=0;\n\t\t\t};\n\t\t};\n\t\tvar checkMeta=this.rm(mp3Buffers,length);\n\t\tif(!checkMeta){\n\t\t\t//还原变更，应该不太可能会出现\n\t\t\tarr0&&(mp3Buffers[0]=arr0);\n\t\t\tfor(var i=0;i<arrs.length;i++){\n\t\t\t\tmp3Buffers.splice(i,0,arrs[i]);\n\t\t\t};\n\t\t\tmeta.err=\"mp3 fix error: 已还原，错误原因不明\"; //worker里面没$T翻译\n\t\t};\n\t\t\n\t\tvar fix=meta.trimFix={};\n\t\tfix.remove=num;\n\t\tfix.removeDuration=Math.round(num*meta.frameDurationFloat);\n\t\tfix.duration=Math.round(length*8/meta.bitRate);\n\t};\n\treturn meta;\n}\n};\nvar mp3TrimFixSetMeta=function(meta,set){\n\tvar tag=\"MP3 Info: \";\n\tif(meta.sampleRate&&meta.sampleRate!=set.sampleRate || meta.bitRate&&meta.bitRate!=set.bitRate){\n\t\tRecorder.CLog(tag+$T(\"uY9i::和设置的不匹配{1}，已更新成{2}\",0,\"set:\"+set.bitRate+\"kbps \"+set.sampleRate+\"hz\",\"set:\"+meta.bitRate+\"kbps \"+meta.sampleRate+\"hz\"),3,set);\n\t\tset.sampleRate=meta.sampleRate;\n\t\tset.bitRate=meta.bitRate;\n\t};\n\t\n\tvar trimFix=meta.trimFix;\n\tif(trimFix){\n\t\ttag+=$T(\"iMSm::Fix移除{1}帧\",0,trimFix.remove)+\" \"+trimFix.removeDuration+\"ms -> \"+trimFix.duration+\"ms\";\n\t\tif(trimFix.remove>2){\n\t\t\tmeta.err=(meta.err?meta.err+\", \":\"\")+$T(\"b9zm::移除帧数过多\");\n\t\t};\n\t}else{\n\t\ttag+=(meta.duration||\"-\")+\"ms\";\n\t};\n\t\n\tif(meta.err){\n\t\tRecorder.CLog(tag,1,meta.err,meta);\n\t}else{\n\t\tRecorder.CLog(tag,meta);\n\t};\n};\n\n\n\t\n}));","/*\n录音\nhttps://github.com/xiangyuecn/Recorder\n*/\n(function(factory){\n\tvar browser=typeof window==\"object\" && !!window.document;\n\tvar win=browser?window:Object; //非浏览器环境，Recorder挂载在Object下面\n\tfactory(win,browser);\n\t//umd returnExports.js\n\tif(typeof(define)=='function' && define.amd){\n\t\tdefine(function(){\n\t\t\treturn win.Recorder;\n\t\t});\n\t};\n\tif(typeof(module)=='object' && module.exports){\n\t\tmodule.exports=win.Recorder;\n\t};\n}(function(Export,isBrowser){\n\"use strict\";\n\nvar NOOP=function(){};\nvar IsNum=function(v){return typeof v==\"number\"};\n\nvar Recorder=function(set){\n\treturn new initFn(set);\n};\nvar LM=Recorder.LM=\"2024-04-09 19:15\";\nvar GitUrl=\"https://github.com/xiangyuecn/Recorder\";\nvar RecTxt=\"Recorder\";\nvar getUserMediaTxt=\"getUserMedia\";\nvar srcSampleRateTxt=\"srcSampleRate\";\nvar sampleRateTxt=\"sampleRate\";\nvar bitRateTxt=\"bitRate\";\nvar CatchTxt=\"catch\";\n\nvar WRec2=Export[RecTxt];//重复加载js\nif(WRec2&&WRec2.LM==LM){\n\tWRec2.CLog(WRec2.i18n.$T(\"K8zP::重复导入{1}\",0,RecTxt),3);\n\treturn;\n};\n\n\n//是否已经打开了全局的麦克风录音，所有工作都已经准备好了，就等接收音频数据了\nRecorder.IsOpen=function(){\n\tvar stream=Recorder.Stream;\n\tif(stream){\n\t\tvar tracks=stream.getTracks&&stream.getTracks()||stream.audioTracks||[];\n\t\tvar track=tracks[0];\n\t\tif(track){\n\t\t\tvar state=track.readyState;\n\t\t\treturn state==\"live\"||state==track.LIVE;\n\t\t};\n\t};\n\treturn false;\n};\n/*H5录音时的AudioContext缓冲大小。会影响H5录音时的onProcess调用速率，相对于AudioContext.sampleRate=48000时，4096接近12帧/s，调节此参数可生成比较流畅的回调动画。\n\t取值256, 512, 1024, 2048, 4096, 8192, or 16384\n\t注意，取值不能过低，2048开始不同浏览器可能回调速率跟不上造成音质问题。\n\t一般无需调整，调整后需要先close掉已打开的录音，再open时才会生效。\n*/\nRecorder.BufferSize=4096;\n//销毁已持有的所有全局资源，当要彻底移除Recorder时需要显式的调用此方法\nRecorder.Destroy=function(){\n\tCLog(RecTxt+\" Destroy\");\n\tDisconnect();//断开可能存在的全局Stream、资源\n\t\n\tfor(var k in DestroyList){\n\t\tDestroyList[k]();\n\t};\n};\nvar DestroyList={};\n//登记一个需要销毁全局资源的处理方法\nRecorder.BindDestroy=function(key,call){\n\tDestroyList[key]=call;\n};\n//判断浏览器是否支持录音，随时可以调用。注意：仅仅是检测浏览器支持情况，不会判断和调起用户授权，不会判断是否支持特定格式录音。\nRecorder.Support=function(){\n\tif(!isBrowser) return false;\n\tvar scope=navigator.mediaDevices||{};\n\tif(!scope[getUserMediaTxt]){\n\t\tscope=navigator;\n\t\tscope[getUserMediaTxt]||(scope[getUserMediaTxt]=scope.webkitGetUserMedia||scope.mozGetUserMedia||scope.msGetUserMedia);\n\t};\n\tif(!scope[getUserMediaTxt]){\n\t\treturn false;\n\t};\n\tRecorder.Scope=scope;\n\t\n\tif(!Recorder.GetContext()){\n\t\treturn false;\n\t};\n\treturn true;\n};\n//获取全局的AudioContext对象，如果浏览器不支持将返回null。tryNew时尝试创建新的非全局对象并返回，失败时依旧返回全局的；成功时返回新的，注意用完必须自己调用CloseNewCtx(ctx)关闭。注意：非用户操作（触摸、点击等）时调用返回的ctx.state可能是suspended状态，需要在用户操作时调用ctx.resume恢复成running状态，参考rec的runningContext配置\nRecorder.GetContext=function(tryNew){\n\tif(!isBrowser) return null;\n\tvar AC=window.AudioContext;\n\tif(!AC){\n\t\tAC=window.webkitAudioContext;\n\t};\n\tif(!AC){\n\t\treturn null;\n\t};\n\t\n\tvar ctx=Recorder.Ctx;\n\tif(!ctx||ctx.state==\"closed\"){\n\t\t//不能反复构造，低版本number of hardware contexts reached maximum (6)\n\t\tctx=Recorder.Ctx=new AC();\n\t\tRecorder.NewCtxs=Recorder.NewCtxs||[];\n\t\t\n\t\tRecorder.BindDestroy(\"Ctx\",function(){\n\t\t\tvar ctx=Recorder.Ctx;\n\t\t\tif(ctx&&ctx.close){//能关掉就关掉，关不掉就保留着\n\t\t\t\tCloseCtx(ctx);\n\t\t\t\tRecorder.Ctx=0;\n\t\t\t};\n\t\t\tvar arr=Recorder.NewCtxs; Recorder.NewCtxs=[];\n\t\t\tfor(var i=0;i<arr.length;i++)CloseCtx(arr[i]);\n\t\t});\n\t};\n\tif(tryNew && ctx.close){//没法关闭的不允许再创建\n\t\ttry{\n\t\t\tctx=new AC();\n\t\t\tRecorder.NewCtxs.push(ctx);\n\t\t}catch(e){\n\t\t\tCLog(\"GetContext tryNew Error\",1,e);\n\t\t}\n\t};\n\treturn ctx;\n};\n//关闭新创建的AudioContext，如果是全局的不关闭\nRecorder.CloseNewCtx=function(ctx){\n\tif(ctx && ctx!=Recorder.Ctx){\n\t\tCloseCtx(ctx);\n\t\tvar arr=Recorder.NewCtxs||[],L=arr.length;\n\t\tfor(var i=0;i<arr.length;i++){\n\t\t\tif(arr[i]==ctx){ arr.splice(i,1); break; }\n\t\t}\n\t\tCLog($T(\"mSxV::剩{1}个GetContext未close\",0,L+\"-1=\"+arr.length),arr.length?3:0);\n\t}\n};\nvar CloseCtx=function(ctx){\n\tif(ctx && ctx.close){\n\t\tctx._isC=1;\n\t\ttry{ ctx.close() }catch(e){ CLog(\"ctx close err\",1,e) }\n\t}\n};\n//当AudioContext的状态是suspended时，调用resume恢复状态，但如果没有用户操作resume可能没有回调，封装解决此回调问题；check(count)返回true继续尝试resume，返回false终止任务（不回调False）\nvar ResumeCtx=Recorder.ResumeCtx=function(ctx,check,True,False){\n\tvar isEnd=0,isBind=0,isLsSC=0,runC=0,EL=\"EventListener\",Tag=\"ResumeCtx \";\n\tvar end=function(err,ok){\n\t\tif(isBind){ bind() }\n\t\tif(!isEnd){ isEnd=1; //回调结果\n\t\t\terr&&False(err,runC);\n\t\t\tok&&True(runC);\n\t\t}\n\t\tif(ok){ //监听后续状态变化\n\t\t\tif(!ctx._LsSC && ctx[\"add\"+EL]) ctx[\"add\"+EL](\"statechange\",run);\n\t\t\tctx._LsSC=1; isLsSC=1;\n\t\t}\n\t};\n\tvar bind=function(add){\n\t\tif(add && isBind) return; isBind=add?1:0;\n\t\tvar types=[\"focus\",\"mousedown\",\"mouseup\",\"touchstart\",\"touchend\"];\n\t\tfor(var i=0;i<types.length;i++)\n\t\t\twindow[(add?\"add\":\"remove\")+EL](types[i],run,true);\n\t};\n\tvar run=function(){\n\t\tvar sVal=ctx.state,spEnd=CtxSpEnd(sVal);\n\t\tif(!isEnd && !check(spEnd?++runC:runC))return end(); //终止，不回调\n\t\tif(spEnd){\n\t\t\tif(isLsSC)CLog(Tag+\"sc \"+sVal,3);\n\t\t\tbind(1); //绑定用户事件尝试恢复\n\t\t\tctx.resume().then(function(){ //resume回调不可靠\n\t\t\t\tif(isLsSC)CLog(Tag+\"sc \"+ctx.state);\n\t\t\t\tend(0,1);\n\t\t\t})[CatchTxt](function(e){ //出错且无法恢复\n\t\t\t\tCLog(Tag+\"error\",1,e);\n\t\t\t\tif(!CtxSpEnd(ctx.state)){\n\t\t\t\t\tend(e.message||\"error\");\n\t\t\t\t}\n\t\t\t});\n\t\t}else if(sVal==\"closed\"){\n\t\t\tif(isLsSC && !ctx._isC)CLog(Tag+\"sc \"+sVal,1); //无法恢复，打个日志\n\t\t\tend(\"ctx closed\");\n\t\t}else{ end(0,1) }; //running 或老的无state\n\t};\n\trun();\n};\nvar CtxSpEnd=Recorder.CtxSpEnd=function(v){\n\treturn v==\"suspended\"||v==\"interrupted\"; //后面这个仅iOS有\n};\nvar CtxState=function(ctx){\n\tvar v=ctx.state,msg=\"ctx.state=\"+v;\n\tif(CtxSpEnd(v))msg+=$T(\"nMIy::（注意：ctx不是running状态，rec.open和start至少要有一个在用户操作(触摸、点击等)时进行调用，否则将在rec.start时尝试进行ctx.resume，可能会产生兼容性问题(仅iOS)，请参阅文档中runningContext配置）\");\n\treturn msg;\n};\n\n\n/*是否启用MediaRecorder.WebM.PCM来进行音频采集连接（如果浏览器支持的话），默认启用，禁用或者不支持时将使用AudioWorklet或ScriptProcessor来连接；MediaRecorder采集到的音频数据比其他方式更好，几乎不存在丢帧现象，所以音质明显会好很多，建议保持开启*/\nvar ConnectEnableWebM=\"ConnectEnableWebM\";\nRecorder[ConnectEnableWebM]=true;\n\n/*是否启用AudioWorklet特性来进行音频采集连接（如果浏览器支持的话），默认禁用，禁用或不支持时将使用过时的ScriptProcessor来连接（如果方法还在的话），当前AudioWorklet的实现在移动端没有ScriptProcessor稳健；ConnectEnableWebM如果启用并且有效时，本参数将不起作用*/\nvar ConnectEnableWorklet=\"ConnectEnableWorklet\";\nRecorder[ConnectEnableWorklet]=false;\n\n/*初始化H5音频采集连接。如果自行提供了sourceStream将只进行一次简单的连接处理。如果是普通麦克风录音，此时的Stream是全局的，Safari上断开后就无法再次进行连接使用，表现为静音，因此使用全部使用全局处理避免调用到disconnect；全局处理也有利于屏蔽底层细节，start时无需再调用底层接口，提升兼容、可靠性。*/\nvar Connect=function(streamStore,isUserMedia){\n\tvar bufferSize=streamStore.BufferSize||Recorder.BufferSize;\n\t\n\tvar stream=streamStore.Stream;\n\tvar ctx=stream._RC || stream._c || Recorder.GetContext(true);//2023-06 尽量创建新的ctx，免得Safari再次连接无回调\n\tstream._c=ctx;\n\t\n\tvar mediaConn=function(node){\n\t\tvar media=stream._m=ctx.createMediaStreamSource(stream);\n\t\tvar ctxDest=ctx.destination,cmsdTxt=\"createMediaStreamDestination\";\n\t\tif(ctx[cmsdTxt]){\n\t\t\tctxDest=stream._d=ctx[cmsdTxt]();\n\t\t};\n\t\tmedia.connect(node);\n\t\tnode.connect(ctxDest);\n\t}\n\tvar isWebM,isWorklet,badInt,webMTips=\"\";\n\tvar calls=stream._call;\n\t\n\t//浏览器回传的音频数据处理\n\tvar onReceive=function(float32Arr){\n\t\tfor(var k0 in calls){//has item\n\t\t\tvar size=float32Arr.length;\n\t\t\t\n\t\t\tvar pcm=new Int16Array(size);\n\t\t\tvar sum=0;\n\t\t\tfor(var j=0;j<size;j++){//floatTo16BitPCM \n\t\t\t\tvar s=Math.max(-1,Math.min(1,float32Arr[j]));\n\t\t\t\ts=s<0?s*0x8000:s*0x7FFF;\n\t\t\t\tpcm[j]=s;\n\t\t\t\tsum+=Math.abs(s);\n\t\t\t};\n\t\t\t\n\t\t\tfor(var k in calls){\n\t\t\t\tcalls[k](pcm,sum);\n\t\t\t};\n\t\t\t\n\t\t\treturn;\n\t\t};\n\t};\n\t\n\tvar scriptProcessor=\"ScriptProcessor\";//一堆字符串名字，有利于压缩js\n\tvar audioWorklet=\"audioWorklet\";\n\tvar recAudioWorklet=RecTxt+\" \"+audioWorklet;\n\tvar RecProc=\"RecProc\";\n\tvar MediaRecorderTxt=\"MediaRecorder\";\n\tvar MRWebMPCM=MediaRecorderTxt+\".WebM.PCM\";\n\n\n//===================连接方式三=========================\n\t//古董级别的 ScriptProcessor 处理，目前所有浏览器均兼容，虽然是过时的方法，但更稳健，移动端性能比AudioWorklet强\n\tvar oldFn=ctx.createScriptProcessor||ctx.createJavaScriptNode;\n\tvar oldIsBest=$T(\"ZGlf::。由于{1}内部1秒375次回调，在移动端可能会有性能问题导致回调丢失录音变短，PC端无影响，暂不建议开启{1}。\",0,audioWorklet);\n\tvar oldScript=function(){\n\t\tisWorklet=stream.isWorklet=false;\n\t\t_Disconn_n(stream);\n\t\tCLog($T(\"7TU0::Connect采用老的{1}，\",0,scriptProcessor)\n\t\t\t+i18n.get(Recorder[ConnectEnableWorklet]?\n\t\t\t\t$T(\"JwCL::但已设置{1}尝试启用{2}\",2)\n\t\t\t\t:$T(\"VGjB::可设置{1}尝试启用{2}\",2)\n\t\t\t\t,[RecTxt+\".\"+ConnectEnableWorklet+\"=true\",audioWorklet]\n\t\t\t)+webMTips+oldIsBest,3);\n\t\t\n\t\tvar process=stream._p=oldFn.call(ctx,bufferSize,1,1);//单声道，省的数据处理复杂\n\t\tmediaConn(process);\n\t\t\n\t\tprocess.onaudioprocess=function(e){\n\t\t\tvar arr=e.inputBuffer.getChannelData(0);\n\t\t\tonReceive(arr);\n\t\t};\n\t};\n\n\n//===================连接方式二=========================\nvar connWorklet=function(){\n\t//尝试开启AudioWorklet处理\n\tisWebM=stream.isWebM=false;\n\t_Disconn_r(stream);\n\t\n\tisWorklet=stream.isWorklet=!oldFn || Recorder[ConnectEnableWorklet];\n\tvar AwNode=window.AudioWorkletNode;\n\tif(!(isWorklet && ctx[audioWorklet] && AwNode)){\n\t\toldScript();//被禁用 或 不支持，直接使用老的\n\t\treturn;\n\t};\n\tvar clazzUrl=function(){\n\t\tvar xf=function(f){return f.toString().replace(/^function|DEL_/g,\"\").replace(/\\$RA/g,recAudioWorklet)};\n\t\tvar clazz='class '+RecProc+' extends AudioWorkletProcessor{';\n\t\t\tclazz+=\"constructor \"+xf(function(option){\n\t\t\t\tDEL_super(option);\n\t\t\t\tvar This=this,bufferSize=option.processorOptions.bufferSize;\n\t\t\t\tThis.bufferSize=bufferSize;\n\t\t\t\tThis.buffer=new Float32Array(bufferSize*2);//乱给size搞乱缓冲区不管\n\t\t\t\tThis.pos=0;\n\t\t\t\tThis.port.onmessage=function(e){\n\t\t\t\t\tif(e.data.kill){\n\t\t\t\t\t\tThis.kill=true;\n\t\t\t\t\t\t$C.log(\"$RA kill call\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t$C.log(\"$RA .ctor call\", option);\n\t\t\t});\n\t\t\t\n\t\t\t//https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/process 每次回调128个采样数据，1秒375次回调，高频导致移动端性能问题，结果就是回调次数缺斤少两，进而导致丢失数据，PC端似乎没有性能问题\n\t\t\tclazz+=\"process \"+xf(function(input,b,c){//需要等到ctx激活后才会有回调\n\t\t\t\tvar This=this,bufferSize=This.bufferSize;\n\t\t\t\tvar buffer=This.buffer,pos=This.pos;\n\t\t\t\tinput=(input[0]||[])[0]||[];\n\t\t\t\tif(input.length){\n\t\t\t\t\tbuffer.set(input,pos);\n\t\t\t\t\tpos+=input.length;\n\t\t\t\t\t\n\t\t\t\t\tvar len=~~(pos/bufferSize)*bufferSize;\n\t\t\t\t\tif(len){\n\t\t\t\t\t\tthis.port.postMessage({ val: buffer.slice(0,len) });\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar more=buffer.subarray(len,pos);\n\t\t\t\t\t\tbuffer=new Float32Array(bufferSize*2);\n\t\t\t\t\t\tbuffer.set(more);\n\t\t\t\t\t\tpos=more.length;\n\t\t\t\t\t\tThis.buffer=buffer;\n\t\t\t\t\t}\n\t\t\t\t\tThis.pos=pos;\n\t\t\t\t}\n\t\t\t\treturn !This.kill;\n\t\t\t});\n\t\tclazz+='}'\n\t\t\t+'try{'\n\t\t\t\t+'registerProcessor(\"'+RecProc+'\", '+RecProc+')'\n\t\t\t+'}catch(e){$C.error(\"'+recAudioWorklet+' Reg Error\",e)}';\n\t\tclazz=clazz.replace(/\\$C\\./g,\"console.\");//一些编译器会文本替换日志函数\n\t\t//URL.createObjectURL 本地有些浏览器会报 Not allowed to load local resource，直接用dataurl\n\t\treturn \"data:text/javascript;base64,\"+btoa(unescape(encodeURIComponent(clazz)));\n\t};\n\t\n\tvar awNext=function(){//可以继续，没有调用断开\n\t\treturn isWorklet && stream._na;\n\t};\n\tvar nodeAlive=stream._na=function(){\n\t\t//start时会调用，只要没有收到数据就断定AudioWorklet有问题，恢复用老的\n\t\tif(badInt!==\"\"){//没有回调过数据\n\t\t\tclearTimeout(badInt);\n\t\t\tbadInt=setTimeout(function(){\n\t\t\t\tbadInt=0;\n\t\t\t\tif(awNext()){\n\t\t\t\t\tCLog($T(\"MxX1::{1}未返回任何音频，恢复使用{2}\",0,audioWorklet,scriptProcessor),3);\n\t\t\t\t\toldFn&&oldScript();//未来没有老的，可能是误判\n\t\t\t\t};\n\t\t\t},500);\n\t\t};\n\t};\n\tvar createNode=function(){\n\t\tif(!awNext())return;\n\t\tvar node=stream._n=new AwNode(ctx, RecProc, {\n\t\t\tprocessorOptions:{bufferSize:bufferSize}\n\t\t});\n\t\tmediaConn(node);\n\t\tnode.port.onmessage=function(e){\n\t\t\tif(badInt){\n\t\t\t\tclearTimeout(badInt);badInt=\"\";\n\t\t\t};\n\t\t\tif(awNext()){\n\t\t\t\tonReceive(e.data.val);\n\t\t\t}else if(!isWorklet){\n\t\t\t\tCLog($T(\"XUap::{1}多余回调\",0,audioWorklet),3);\n\t\t\t};\n\t\t};\n\t\tCLog($T(\"yOta::Connect采用{1}，设置{2}可恢复老式{3}\",0,audioWorklet,RecTxt+\".\"+ConnectEnableWorklet+\"=false\",scriptProcessor)+webMTips+oldIsBest,3);\n\t};\n\t\n\t//如果start时的resume和下面的构造node同时进行，将会导致部分浏览器崩溃 (STATUS_ACCESS_VIOLATION)，源码assets中 ztest_chrome_bug_AudioWorkletNode.html 可测试。所以，将所有代码套到resume里面（不管catch），避免出现这个问题\n\tvar ctxOK=function(){\n\t\tif(!awNext())return;\n\t\tif(ctx[RecProc]){\n\t\t\tcreateNode();\n\t\t\treturn;\n\t\t};\n\t\tvar url=clazzUrl();\n\t\tctx[audioWorklet].addModule(url).then(function(e){\n\t\t\tif(!awNext())return;\n\t\t\tctx[RecProc]=1;\n\t\t\tcreateNode();\n\t\t\tif(badInt){//重新计时\n\t\t\t\tnodeAlive();\n\t\t\t};\n\t\t})[CatchTxt](function(e){ //fix 关键字，保证catch压缩时保持字符串形式\n\t\t\tCLog(audioWorklet+\".addModule Error\",1,e);\n\t\t\tawNext()&&oldScript();\n\t\t});\n\t};\n\tResumeCtx(ctx,function(){ return awNext() } ,ctxOK,ctxOK);\n};\n\n\n//===================连接方式一=========================\nvar connWebM=function(){\n\t//尝试开启MediaRecorder录制webm+pcm处理\n\tvar MR=window[MediaRecorderTxt];\n\tvar onData=\"ondataavailable\";\n\tvar webmType=\"audio/webm; codecs=pcm\";\n\tisWebM=stream.isWebM=Recorder[ConnectEnableWebM];\n\t\n\tvar supportMR=MR && (onData in MR.prototype) && MR.isTypeSupported(webmType);\n\twebMTips=supportMR?\"\":$T(\"VwPd::（此浏览器不支持{1}）\",0,MRWebMPCM);\n\tif(!isUserMedia || !isWebM || !supportMR){\n\t\tconnWorklet(); //非麦克风录音（MediaRecorder采样率不可控） 或 被禁用 或 不支持MediaRecorder 或 不支持webm+pcm\n\t\treturn;\n\t}\n\t\n\tvar mrNext=function(){//可以继续，没有调用断开\n\t\treturn isWebM && stream._ra;\n\t};\n\tvar mrAlive=stream._ra=function(){\n\t\t//start时会调用，只要没有收到数据就断定MediaRecorder有问题，降级处理\n\t\tif(badInt!==\"\"){//没有回调过数据\n\t\t\tclearTimeout(badInt);\n\t\t\tbadInt=setTimeout(function(){\n\t\t\t\t//badInt=0; 保留给nodeAlive继续判断\n\t\t\t\tif(mrNext()){\n\t\t\t\t\tCLog($T(\"vHnb::{1}未返回任何音频，降级使用{2}\",0,MediaRecorderTxt,audioWorklet),3);\n\t\t\t\t\tconnWorklet();\n\t\t\t\t};\n\t\t\t},500);\n\t\t};\n\t};\n\t\n\tvar mrSet=Object.assign({mimeType:webmType}, Recorder.ConnectWebMOptions);\n\tvar mr=stream._r=new MR(stream, mrSet);\n\tvar webmData=stream._rd={sampleRate:ctx[sampleRateTxt]};\n\tmr[onData]=function(e){\n\t\t//提取webm中的pcm数据，提取失败就等着badInt超时降级处理\n\t\tvar reader=new FileReader();\n\t\treader.onloadend=function(){\n\t\t\tif(mrNext()){\n\t\t\t\tvar f32arr=WebM_Extract(new Uint8Array(reader.result),webmData);\n\t\t\t\tif(!f32arr)return;\n\t\t\t\tif(f32arr==-1){//无法提取，立即降级\n\t\t\t\t\tconnWorklet();\n\t\t\t\t\treturn;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tif(badInt){\n\t\t\t\t\tclearTimeout(badInt);badInt=\"\";\n\t\t\t\t};\n\t\t\t\tonReceive(f32arr);\n\t\t\t}else if(!isWebM){\n\t\t\t\tCLog($T(\"O9P7::{1}多余回调\",0,MediaRecorderTxt),3);\n\t\t\t};\n\t\t};\n\t\treader.readAsArrayBuffer(e.data);\n\t};\n\tmr.start(~~(bufferSize/48));//按48k时的回调间隔\n\tCLog($T(\"LMEm::Connect采用{1}，设置{2}可恢复使用{3}或老式{4}\",0,MRWebMPCM,RecTxt+\".\"+ConnectEnableWebM+\"=false\",audioWorklet,scriptProcessor));\n};\n\n\tconnWebM();\n};\nvar ConnAlive=function(stream){\n\tif(stream._na) stream._na(); //检查AudioWorklet连接是否有效，无效就回滚到老的ScriptProcessor\n\tif(stream._ra) stream._ra(); //检查MediaRecorder连接是否有效，无效就降级处理\n};\nvar _Disconn_n=function(stream){\n\tstream._na=null;\n\tif(stream._n){\n\t\tstream._n.port.postMessage({kill:true});\n\t\tstream._n.disconnect();\n\t\tstream._n=null;\n\t};\n};\nvar _Disconn_r=function(stream){\n\tstream._ra=null;\n\tif(stream._r){\n\t\ttry{ stream._r.stop() }catch(e){ CLog(\"mr stop err\",1,e) }\n\t\tstream._r=null;\n\t};\n};\nvar Disconnect=function(streamStore){\n\tstreamStore=streamStore||Recorder;\n\tvar isGlobal=streamStore==Recorder;\n\t\n\tvar stream=streamStore.Stream;\n\tif(stream){\n\t\tif(stream._m){\n\t\t\tstream._m.disconnect();\n\t\t\tstream._m=null;\n\t\t};\n\t\tif(!stream._RC && stream._c){//提供的runningContext不处理\n\t\t\tRecorder.CloseNewCtx(stream._c);\n\t\t};\n\t\tstream._RC=null; stream._c=null;\n\t\tif(stream._d){\n\t\t\tStopS_(stream._d.stream);\n\t\t\tstream._d=null;\n\t\t};\n\t\tif(stream._p){\n\t\t\tstream._p.disconnect();\n\t\t\tstream._p.onaudioprocess=stream._p=null;\n\t\t};\n\t\t_Disconn_n(stream);\n\t\t_Disconn_r(stream);\n\t\t\n\t\tif(isGlobal){//全局的时候，要把流关掉（麦克风），直接提供的流不处理\n\t\t\tStopS_(stream);\n\t\t};\n\t};\n\tstreamStore.Stream=0;\n};\n//关闭一个音频流\nvar StopS_=Recorder.StopS_=function(stream){\n\tvar tracks=stream.getTracks&&stream.getTracks()||stream.audioTracks||[];\n\tfor(var i=0;i<tracks.length;i++){\n\t\tvar track=tracks[i];\n\t\ttrack.stop&&track.stop();\n\t};\n\tstream.stop&&stream.stop();\n};\n\n/*对pcm数据的采样率进行转换\npcmDatas: [[Int16,...]] pcm片段列表\npcmSampleRate:48000 pcm数据的采样率\nnewSampleRate:16000 需要转换成的采样率，newSampleRate>=pcmSampleRate时不会进行任何处理，小于时会进行重新采样\nprevChunkInfo:{} 可选，上次调用时的返回值，用于连续转换，本次调用将从上次结束位置开始进行处理。或可自行定义一个ChunkInfo从pcmDatas指定的位置开始进行转换\noption:{ 可选，配置项\n\t\tframeSize:123456 帧大小，每帧的PCM Int16的数量，采样率转换后的pcm长度为frameSize的整数倍，用于连续转换。目前仅在mp3格式时才有用，frameSize取值为1152，这样编码出来的mp3时长和pcm的时长完全一致，否则会因为mp3最后一帧录音不够填满时添加填充数据导致mp3的时长变长。\n\t\tframeType:\"\" 帧类型，一般为rec.set.type，提供此参数时无需提供frameSize，会自动使用最佳的值给frameSize赋值，目前仅支持mp3=1152(MPEG1 Layer3的每帧采采样数)，其他类型=1。\n\t\t\t以上两个参数用于连续转换时使用，最多使用一个，不提供时不进行帧的特殊处理，提供时必须同时提供prevChunkInfo才有作用。最后一段数据处理时无需提供帧大小以便输出最后一丁点残留数据。\n\t}\n\n返回ChunkInfo:{\n\t//可定义，从指定位置开始转换到结尾\n\tindex:0 pcmDatas已处理到的索引\n\toffset:0.0 已处理到的index对应的pcm中的偏移的下一个位置\n\t\n\t//可定义，指定的一个滤波配置：默认使用Recorder.IIRFilter低通滤波（可有效抑制混叠产生的杂音，新采样率大于pcm采样率的75%时不默认滤波），如果提供了配置但fn为null时将不滤波；sr为此滤波函数对应的初始化采样率，当采样率和pcmSampleRate参数不一致时将重新设为默认函数\n\tfilter:null||{fn:fn(sample),sr:pcmSampleRate}\n\t\n\t//仅作为返回值\n\tframeNext:null||[Int16,...] 下一帧的部分数据，frameSize设置了的时候才可能会有\n\tsampleRate:16000 结果的采样率，<=newSampleRate\n\tdata:[Int16,...] 转换后的PCM结果；如果是连续转换，并且pcmDatas中并没有新数据时，data的长度可能为0\n}\n*/\nRecorder.SampleData=function(pcmDatas,pcmSampleRate,newSampleRate,prevChunkInfo,option){\n\tvar Txt=\"SampleData\";\n\tprevChunkInfo||(prevChunkInfo={});\n\tvar index=prevChunkInfo.index||0;\n\tvar offset=prevChunkInfo.offset||0;\n\t\n\tvar filter=prevChunkInfo.filter;\n\tif(filter&&filter.fn&&filter.sr!=pcmSampleRate){\n\t\tfilter=null; CLog($T(\"d48C::{1}的filter采样率变了，重设滤波\",0,Txt),3);\n\t};\n\tif(!filter){//采样率差距比较大才开启低通滤波，最高频率用新采样率频率的3/4\n\t\tvar freq=newSampleRate>pcmSampleRate*3/4?0: newSampleRate/2 *3/4;\n\t\tfilter={fn:freq?Recorder.IIRFilter(true,pcmSampleRate,freq):0};\n\t};\n\tfilter.sr=pcmSampleRate;\n\tvar filterFn=filter.fn;\n\t\n\tvar frameNext=prevChunkInfo.frameNext||[];\n\toption||(option={});\n\tvar frameSize=option.frameSize||1;\n\tif(option.frameType){\n\t\tframeSize=option.frameType==\"mp3\"?1152:1;\n\t};\n\t\n\tvar nLen=pcmDatas.length;\n\tif(index>nLen+1){\n\t\tCLog($T(\"tlbC::{1}似乎传入了未重置chunk {2}\",0,Txt,index+\">\"+nLen),3);\n\t};\n\tvar size=0;\n\tfor(var i=index;i<nLen;i++){\n\t\tsize+=pcmDatas[i].length;\n\t};\n\tsize=Math.max(0,size-Math.floor(offset));\n\t\n\t//采样 https://www.cnblogs.com/blqw/p/3782420.html\n\tvar step=pcmSampleRate/newSampleRate;\n\tif(step>1){//新采样低于录音采样，进行抽样\n\t\tsize=Math.floor(size/step);\n\t}else{//新采样高于录音采样不处理，省去了插值处理\n\t\tstep=1;\n\t\tnewSampleRate=pcmSampleRate;\n\t};\n\t\n\tsize+=frameNext.length;\n\tvar res=new Int16Array(size);\n\tvar idx=0;\n\t//添加上一次不够一帧的剩余数据\n\tfor(var i=0;i<frameNext.length;i++){\n\t\tres[idx]=frameNext[i];\n\t\tidx++;\n\t};\n\t//处理数据\n\tfor (;index<nLen;index++) {\n\t\tvar o=pcmDatas[index];\n\t\tvar i=offset,il=o.length;\n\t\tvar F=filterFn&&filterFn.Embed,F1=0,F2=0,Fx=0,Fy=0;//低通滤波后的数据\n\t\tfor(var i0=0,i2=0;i0<il;i0++,i2++){\n\t\t\tif(i2<il){\n\t\t\t\tif(F){//IIRFilter代码内置，比函数调用快4倍\n\t\t\t\t\tFx=o[i2];\n\t\t\t\t\tFy=F.b0 * Fx + F.b1 * F.x1 + F.b0 * F.x2 - F.a1 * F.y1 - F.a2 * F.y2;\n\t\t\t\t\tF.x2 = F.x1; F.x1 = Fx; F.y2 = F.y1; F.y1 = Fy;\n\t\t\t\t}else{ Fy=filterFn?filterFn(o[i2]):o[i2]; }\n\t\t\t}\n\t\t\tF1=F2; F2=Fy;\n\t\t\tif(i2==0){ i0--; continue; } //首次只计算o[0]\n\t\t\t//res[idx]=o[Math.round(i)]; 直接简单抽样\n\t\t\t\n\t\t\t//https://www.cnblogs.com/xiaoqi/p/6993912.html\n\t\t\t//当前点=当前点+到后面一个点之间的增量，音质比直接简单抽样好些\n\t\t\tvar before = Math.floor(i);\n\t\t\tif(i0!=before)continue;\n\t\t\tvar after = Math.ceil(i);\n\t\t\tvar atPoint = i - before;\n\t\t\t\n\t\t\tvar beforeVal=F1;\n\t\t\tvar afterVal=after<il ? F2 : beforeVal; //后个点越界了，忽略不计\n\t\t\tvar val=beforeVal+(afterVal-beforeVal)*atPoint;\n\t\t\t\n\t\t\tif(val>0x7FFF) val=0x7FFF; else if(val<-0x8000) val=-0x8000; //Int16越界处理\n\t\t\tres[idx]=val;\n\t\t\t\n\t\t\tidx++;\n\t\t\ti+=step;//抽样\n\t\t};\n\t\toffset=Math.max(0, i-il); //不太可能出现负数\n\t};\n\t//帧处理\n\tframeNext=null;\n\tvar frameNextSize=res.length%frameSize;\n\tif(frameNextSize>0){\n\t\tvar u8Pos=(res.length-frameNextSize)*2;\n\t\tframeNext=new Int16Array(res.buffer.slice(u8Pos));\n\t\tres=new Int16Array(res.buffer.slice(0,u8Pos));\n\t};\n\t\n\treturn {\n\t\tindex:index\n\t\t,offset:offset\n\t\t,filter:filter\n\t\t\n\t\t,frameNext:frameNext\n\t\t,sampleRate:newSampleRate\n\t\t,data:res\n\t};\n};\n\n/*IIR低通、高通滤波，移植自：https://gitee.com/52jian/digital-audio-filter AudioFilter.java\n\tuseLowPass: true或false，true为低通滤波，false为高通滤波\n\tsampleRate: 待处理pcm的采样率\n\tfreq: 截止频率Hz，最大频率为sampleRate/2，低通时会切掉高于此频率的声音，高通时会切掉低于此频率的声音，注意滤波并非100%的切掉不需要的声音，而是减弱频率对应的声音，离截止频率越远对应声音减弱越厉害，离截止频率越近声音就几乎无衰减\n\t返回的是一个函数，用此函数对pcm的每个采样值按顺序进行处理即可（不同pcm不可共用）；注意此函数返回值可能会越界超过Int16范围，自行限制一下即可：Math.min(Math.max(val,-0x8000),0x7FFF)\n可重新赋值一个函数，来改变Recorder的默认行为，比如SampleData中的低通滤波*/\nRecorder.IIRFilter=function(useLowPass, sampleRate, freq){\n\tvar ov = 2 * Math.PI * freq / sampleRate;\n\tvar sn = Math.sin(ov);\n\tvar cs = Math.cos(ov);\n\tvar alpha = sn / 2;\n\t\n\tvar a0 = 1 + alpha;\n\tvar a1 = (-2 * cs) / a0;\n\tvar a2 = (1 - alpha) / a0;\n\tif(useLowPass){\n\t\tvar b0 = (1 - cs) / 2 / a0;\n\t\tvar b1 = (1 - cs) / a0;\n\t}else{\n\t\tvar b0 = (1 + cs) / 2 / a0;\n\t\tvar b1 = -(1 + cs) / a0;\n\t}\n\t\n\tvar x1=0,x2=0,y=0,y1=0,y2=0;\n\tvar fn=function(x){\n\t\ty = b0 * x + b1 * x1 + b0 * x2 - a1 * y1 - a2 * y2;\n\t\tx2 = x1; x1 = x;\n\t\ty2 = y1; y1 = y;\n\t\treturn y;\n\t};\n\tfn.Embed={x1:0,x2:0,y1:0,y2:0,b0:b0,b1:b1,a1:a1,a2:a2};\n\treturn fn;\n};\n\n\n/*计算音量百分比的一个方法\npcmAbsSum: pcm Int16所有采样的绝对值的和\npcmLength: pcm长度\n返回值：0-100，主要当做百分比用\n注意：这个不是分贝，因此没用volume当做名称*/\nRecorder.PowerLevel=function(pcmAbsSum,pcmLength){\n\t/*计算音量 https://blog.csdn.net/jody1989/article/details/73480259\n\t更高灵敏度算法:\n\t\t限定最大感应值10000\n\t\t\t线性曲线：低音量不友好\n\t\t\t\tpower/10000*100 \n\t\t\t对数曲线：低音量友好，但需限定最低感应值\n\t\t\t\t(1+Math.log10(power/10000))*100\n\t*/\n\tvar power=(pcmAbsSum/pcmLength) || 0;//NaN\n\tvar level;\n\tif(power<1251){//1250的结果10%，更小的音量采用线性取值\n\t\tlevel=Math.round(power/1250*10);\n\t}else{\n\t\tlevel=Math.round(Math.min(100,Math.max(0,(1+Math.log(power/10000)/Math.log(10))*100)));\n\t};\n\treturn level;\n};\n\n/*计算音量，单位dBFS（满刻度相对电平）\nmaxSample: 为16位pcm采样的绝对值中最大的一个（计算峰值音量），或者为pcm中所有采样的绝对值的平局值\n返回值：-100~0 （最大值0dB，最小值-100代替-∞）\n*/\nRecorder.PowerDBFS=function(maxSample){\n\tvar val=Math.max(0.1, maxSample||0),Pref=0x7FFF;\n\tval=Math.min(val,Pref);\n\t//https://www.logiclocmusic.com/can-you-tell-the-decibel/\n\t//https://blog.csdn.net/qq_17256689/article/details/120442510\n\tval=20*Math.log(val/Pref)/Math.log(10);\n\treturn Math.max(-100,Math.round(val));\n};\n\n\n\n\n//带时间的日志输出，可设为一个空函数来屏蔽日志输出\n//CLog(msg,errOrLogMsg, logMsg...) err为数字时代表日志类型1:error 2:log默认 3:warn，否则当做内容输出，第一个参数不能是对象因为要拼接时间，后面可以接无数个输出参数\nRecorder.CLog=function(msg,err){\n\tif(typeof console!=\"object\")return;\n\tvar now=new Date();\n\tvar t=(\"0\"+now.getMinutes()).substr(-2)\n\t\t+\":\"+(\"0\"+now.getSeconds()).substr(-2)\n\t\t+\".\"+(\"00\"+now.getMilliseconds()).substr(-3);\n\tvar recID=this&&this.envIn&&this.envCheck&&this.id;\n\tvar arr=[\"[\"+t+\" \"+RecTxt+(recID?\":\"+recID:\"\")+\"]\"+msg];\n\tvar a=arguments,cwe=Recorder.CLog;\n\tvar i=2,fn=cwe.log||console.log;\n\tif(IsNum(err)){\n\t\tfn=err==1?cwe.error||console.error:err==3?cwe.warn||console.warn:fn;\n\t}else{\n\t\ti=1;\n\t};\n\tfor(;i<a.length;i++){\n\t\tarr.push(a[i]);\n\t};\n\tif(IsLoser){//古董浏览器，仅保证基本的可执行不代码异常\n\t\tfn&&fn(\"[IsLoser]\"+arr[0],arr.length>1?arr:\"\");\n\t}else{\n\t\tfn.apply(console,arr);\n\t};\n};\nvar CLog=function(){ Recorder.CLog.apply(this,arguments); };\nvar IsLoser=true;try{IsLoser=!console.log.apply;}catch(e){};\n\n\n\n\nvar ID=0;\nfunction initFn(set){\n\tvar This=this; This.id=++ID;\n\t\n\t//如果开启了流量统计，这里将发送一个图片请求\n\tTraffic();\n\t\n\t\n\tvar o={\n\t\ttype:\"mp3\" //输出类型：mp3,wav，wav输出文件尺寸超大不推荐使用，但mp3编码支持会导致js文件超大，如果不需支持mp3可以使js文件大幅减小\n\t\t//,bitRate:16 //比特率 wav:16或8位，MP3：8kbps 1k/s，8kbps 2k/s 录音文件很小\n\t\t\n\t\t//,sampleRate:16000 //采样率，wav格式大小=sampleRate*时间；mp3此项对低比特率有影响，高比特率几乎无影响。\n\t\t\t\t\t//wav任意值，mp3取值范围：48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000\n\t\t\t\t\t//采样率参考https://www.cnblogs.com/devin87/p/mp3-recorder.html\n\t\t\n\t\t,onProcess:NOOP //fn(buffers,powerLevel,bufferDuration,bufferSampleRate,newBufferIdx,asyncEnd) buffers=[[Int16,...],...]：缓冲的PCM数据，为从开始录音到现在的所有pcm片段；powerLevel：当前缓冲的音量级别0-100，bufferDuration：已缓冲时长，bufferSampleRate：缓冲使用的采样率（当type支持边录边转码(Worker)时，此采样率和设置的采样率相同，否则不一定相同）；newBufferIdx:本次回调新增的buffer起始索引；asyncEnd:fn() 如果onProcess是异步的(返回值为true时)，处理完成时需要调用此回调，如果不是异步的请忽略此参数，此方法回调时必须是真异步（不能真异步时需用setTimeout包裹）。onProcess返回值：如果返回true代表开启异步模式，在某些大量运算的场合异步是必须的，必须在异步处理完成时调用asyncEnd(不能真异步时需用setTimeout包裹)，在onProcess执行后新增的buffer会全部替换成空数组，因此本回调开头应立即将newBufferIdx到本次回调结尾位置的buffer全部保存到另外一个数组内，处理完成后写回buffers中本次回调的结尾位置。\n\t\t\n\t\t//*******高级设置******\n\t\t//,sourceStream:MediaStream Object\n\t\t\t\t//可选直接提供一个媒体流，从这个流中录制、实时处理音频数据（当前Recorder实例独享此流）；不提供时为普通的麦克风录音，由getUserMedia提供音频流（所有Recorder实例共享同一个流）\n\t\t\t\t//比如：audio、video标签dom节点的captureStream方法（实验特性，不同浏览器支持程度不高）返回的流；WebRTC中的remote流；自己创建的流等\n\t\t\t\t//注意：流内必须至少存在一条音轨(Audio Track)，比如audio标签必须等待到可以开始播放后才会有音轨，否则open会失败\n\t\t\n\t\t//,runningContext:AudioContext\n\t\t\t\t//可选提供一个state为running状态的AudioContext对象(ctx)；默认会在rec.open时自动创建一个新的ctx，无用户操作（触摸、点击等）时调用rec.open的ctx.state可能为suspended，会在rec.start时尝试进行ctx.resume，如果也无用户操作ctx.resume可能不会恢复成running状态（目前仅iOS上有此兼容性问题），导致无法去读取媒体流，这时请提前在用户操作时调用Recorder.GetContext(true)来得到一个running状态AudioContext（用完需调用CloseNewCtx(ctx)关闭）\n\t\t\n\t\t//,audioTrackSet:{ deviceId:\"\",groupId:\"\", autoGainControl:true, echoCancellation:true, noiseSuppression:true }\n\t\t\t\t//普通麦克风录音时getUserMedia方法的audio配置参数，比如指定设备id，回声消除、降噪开关；注意：提供的任何配置值都不一定会生效\n\t\t\t\t//由于麦克风是全局共享的，所以新配置后需要close掉以前的再重新open\n\t\t\t\t//更多参考: https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\n\t\t\n\t\t//,disableEnvInFix:false 内部参数，禁用设备卡顿时音频输入丢失补偿功能\n\t\t\n\t\t//,takeoffEncodeChunk:NOOP //fn(chunkBytes) chunkBytes=[Uint8,...]：实时编码环境下接管编码器输出，当编码器实时编码出一块有效的二进制音频数据时实时回调此方法；参数为二进制的Uint8Array，就是编码出来的音频数据片段，所有的chunkBytes拼接在一起即为完整音频。本实现的想法最初由QQ2543775048提出\n\t\t\t\t//当提供此回调方法时，将接管编码器的数据输出，编码器内部将放弃存储生成的音频数据；如果当前编码器或环境不支持实时编码处理，将在open时直接走fail逻辑\n\t\t\t\t//因此提供此回调后调用stop方法将无法获得有效的音频数据，因为编码器内没有音频数据，因此stop时返回的blob将是一个字节长度为0的blob\n\t\t\t\t//大部分录音格式编码器都支持实时编码（边录边转码），比如mp3格式：会实时的将编码出来的mp3片段通过此方法回调，所有的chunkBytes拼接到一起即为完整的mp3，此种拼接的结果比mock方法实时生成的音质更加，因为天然避免了首尾的静默\n\t\t\t\t//不支持实时编码的录音格式不可以提供此回调（wav格式不支持，因为wav文件头中需要提供文件最终长度），提供了将在open时直接走fail逻辑\n\t};\n\t\n\tfor(var k in set){\n\t\to[k]=set[k];\n\t};\n\tThis.set=o;\n\t\n\tvar vB=o[bitRateTxt],vS=o[sampleRateTxt]; //校验配置参数\n\tif(vB&&!IsNum(vB) || vS&&!IsNum(vS)){\n\t\tThis.CLog($T.G(\"IllegalArgs-1\",[$T(\"VtS4::{1}和{2}必须是数值\",0,sampleRateTxt,bitRateTxt)]),1,set);\n\t};\n\to[bitRateTxt]=+vB||16;\n\to[sampleRateTxt]=+vS||16000;\n\t\n\tThis.state=0;//运行状态，0未录音 1录音中 2暂停 3等待ctx激活\n\tThis._S=9;//stop同步锁，stop可以阻止open过程中还未运行的start\n\tThis.Sync={O:9,C:9};//和Recorder.Sync一致，只不过这个是非全局的，仅用来简化代码逻辑，无实际作用\n};\n//同步锁，控制对Stream的竞争；用于close时中断异步的open；一个对象open如果变化了都要阻止close，Stream的控制权交个新的对象\nRecorder.Sync={/*open*/O:9,/*close*/C:9};\n\nRecorder.prototype=initFn.prototype={\n\tCLog:CLog\n\t\n\t//流相关的数据存储在哪个对象里面；如果提供了sourceStream，数据直接存储在当前对象中，否则存储在全局\n\t,_streamStore:function(){\n\t\tif(this.set.sourceStream){\n\t\t\treturn this;\n\t\t}else{\n\t\t\treturn Recorder;\n\t\t}\n\t}\n\t//当前实例用到的AudioContext，可能是全局的，也可能是独享的\n\t,_streamCtx:function(){\n\t\tvar m=this._streamStore().Stream;\n\t\treturn m&&m._c;\n\t}\n\t\n\t//打开录音资源True(),False(msg,isUserNotAllow)，需要调用close。注意：此方法是异步的；一般使用时打开，用完立即关闭；可重复调用，可用来测试是否能录音；open和start至少有一个应当在用户操作（触摸、点击等）下进行调用，原因参考runningContext配置\n\t,open:function(True,False){\n\t\tvar This=this,set=This.set,streamStore=This._streamStore(),newCtx=0;\n\t\tTrue=True||NOOP;\n\t\tvar failCall=function(errMsg,isUserNotAllow){\n\t\t\tisUserNotAllow=!!isUserNotAllow;\n\t\t\tThis.CLog($T(\"5tWi::录音open失败：\")+errMsg+\",isUserNotAllow:\"+isUserNotAllow,1);\n\t\t\tif(newCtx)Recorder.CloseNewCtx(newCtx);\n\t\t\tFalse&&False(errMsg,isUserNotAllow);\n\t\t};\n\t\t\n\t\tThis._streamTag=getUserMediaTxt;\n\t\tvar ok=function(){\n\t\t\tThis.CLog(\"open ok, id:\"+This.id+\" stream:\"+This._streamTag);\n\t\t\tTrue();\n\t\t\t\n\t\t\tThis._SO=0;//解除stop对open中的start调用的阻止\n\t\t};\n\t\t\n\t\t\n\t\t//同步锁\n\t\tvar Lock=streamStore.Sync;\n\t\tvar lockOpen=++Lock.O,lockClose=Lock.C;\n\t\tThis._O=This._O_=lockOpen;//记住当前的open，如果变化了要阻止close，这里假定了新对象已取代当前对象并且不再使用\n\t\tThis._SO=This._S;//记住open过程中的stop，中途任何stop调用后都不能继续open中的start\n\t\tvar lockFail=function(){\n\t\t\t//允许多次open，但不允许任何一次close，或者自身已经调用了关闭\n\t\t\tif(lockClose!=Lock.C || !This._O){\n\t\t\t\tvar err=$T(\"dFm8::open被取消\");\n\t\t\t\tif(lockOpen==Lock.O){\n\t\t\t\t\t//无新的open，已经调用了close进行取消，此处应让上次的close明确生效\n\t\t\t\t\tThis.close();\n\t\t\t\t}else{\n\t\t\t\t\terr=$T(\"VtJO::open被中断\");\n\t\t\t\t};\n\t\t\t\tfailCall(err);\n\t\t\t\treturn true;\n\t\t\t};\n\t\t};\n\t\t\n\t\t//环境配置检查\n\t\tif(!isBrowser){\n\t\t\tfailCall($T.G(\"NonBrowser-1\",[\"open\"])+$T(\"EMJq::，可尝试使用RecordApp解决方案\")+\"(\"+GitUrl+\"/tree/master/app-support-sample)\");\n\t\t\treturn;\n\t\t};\n\t\tvar checkMsg=This.envCheck({envName:\"H5\",canProcess:true});\n\t\tif(checkMsg){\n\t\t\tfailCall($T(\"A5bm::不能录音：\")+checkMsg);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t\n\t\t//***********已直接提供了音频流************\n\t\tif(set.sourceStream){\n\t\t\tThis._streamTag=\"set.sourceStream\";\n\t\t\tif(!Recorder.GetContext()){\n\t\t\t\tfailCall($T(\"1iU7::不支持此浏览器从流中获取录音\"));\n\t\t\t\treturn;\n\t\t\t};\n\t\t\t\n\t\t\tDisconnect(streamStore);//可能已open过，直接先尝试断开\n\t\t\tvar stream=This.Stream=set.sourceStream;\n\t\t\tstream._RC=set.runningContext;\n\t\t\tstream._call={};\n\t\t\t\n\t\t\ttry{\n\t\t\t\tConnect(streamStore);\n\t\t\t}catch(e){\n\t\t\t\tDisconnect(streamStore);\n\t\t\t\tfailCall($T(\"BTW2::从流中打开录音失败：\")+e.message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tok();\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t\n\t\t//***********打开麦克风得到全局的音频流************\n\t\tvar codeFail=function(code,msg){\n\t\t\ttry{//跨域的优先检测一下\n\t\t\t\twindow.top.a;\n\t\t\t}catch(e){\n\t\t\t\tfailCall($T(\"Nclz::无权录音(跨域，请尝试给iframe添加麦克风访问策略，如{1})\",0,'allow=\"camera;microphone\"'));\n\t\t\t\treturn;\n\t\t\t};\n\t\t\t\n\t\t\tif(/Permission|Allow/i.test(code)){\n\t\t\t\tfailCall($T(\"gyO5::用户拒绝了录音权限\"),true);\n\t\t\t}else if(window.isSecureContext===false){\n\t\t\t\tfailCall($T(\"oWNo::浏览器禁止不安全页面录音，可开启https解决\"));\n\t\t\t}else if(/Found/i.test(code)){//可能是非安全环境导致的没有设备\n\t\t\t\tfailCall(msg+$T(\"jBa9::，无可用麦克风\"));\n\t\t\t}else{\n\t\t\t\tfailCall(msg);\n\t\t\t};\n\t\t};\n\t\t\n\t\t\n\t\t//如果已打开并且有效就不要再打开了\n\t\tif(Recorder.IsOpen()){\n\t\t\tok();\n\t\t\treturn;\n\t\t};\n\t\tif(!Recorder.Support()){\n\t\t\tcodeFail(\"\",$T(\"COxc::此浏览器不支持录音\"));\n\t\t\treturn;\n\t\t};\n\t\t//尽量先创建好ctx，不然异步下创建可能不是running状态\n\t\tvar ctx=set.runningContext;\n\t\tif(!ctx)ctx=newCtx=Recorder.GetContext(true);\n\t\t\n\t\t//请求权限，如果从未授权，一般浏览器会弹出权限请求弹框\n\t\tvar f1=function(stream){\n\t\t\t//https://github.com/xiangyuecn/Recorder/issues/14 获取到的track.readyState!=\"live\"，刚刚回调时可能是正常的，但过一下可能就被关掉了，原因不明。延迟一下保证真异步。对正常浏览器不影响\n\t\t\tsetTimeout(function(){\n\t\t\t\tstream._call={};\n\t\t\t\tvar oldStream=Recorder.Stream;\n\t\t\t\tif(oldStream){\n\t\t\t\t\tDisconnect(); //直接断开已存在的，旧的Connect未完成会自动终止\n\t\t\t\t\tstream._call=oldStream._call;\n\t\t\t\t};\n\t\t\t\tRecorder.Stream=stream;\n\t\t\t\tstream._c=ctx;\n\t\t\t\tstream._RC=set.runningContext;\n\t\t\t\tif(lockFail())return;\n\t\t\t\t\n\t\t\t\tif(Recorder.IsOpen()){\n\t\t\t\t\tif(oldStream)This.CLog($T(\"upb8::发现同时多次调用open\"),1);\n\t\t\t\t\t\n\t\t\t\t\tConnect(streamStore,1);\n\t\t\t\t\tok();\n\t\t\t\t}else{\n\t\t\t\t\tfailCall($T(\"Q1GA::录音功能无效：无音频流\"));\n\t\t\t\t};\n\t\t\t},100);\n\t\t};\n\t\tvar f2=function(e){\n\t\t\tvar code=e.name||e.message||e.code+\":\"+e;\n\t\t\tThis.CLog($T(\"xEQR::请求录音权限错误\"),1,e);\n\t\t\t\n\t\t\tcodeFail(code,$T(\"bDOG::无法录音：\")+code);\n\t\t};\n\t\t\n\t\tvar trackSet=set.audioTrackSet||{};\n\t\ttrackSet[sampleRateTxt]=ctx[sampleRateTxt];//必须指明采样率，不然手机上MediaRecorder采样率16k\n\t\t\n\t\tvar mSet={audio:trackSet};\n\t\ttry{\n\t\t\tvar pro=Recorder.Scope[getUserMediaTxt](mSet,f1,f2);\n\t\t}catch(e){//不能设置trackSet就算了\n\t\t\tThis.CLog(getUserMediaTxt,3,e);\n\t\t\tmSet={audio:true};\n\t\t\tpro=Recorder.Scope[getUserMediaTxt](mSet,f1,f2);\n\t\t};\n\t\tThis.CLog(getUserMediaTxt+\"(\"+JSON.stringify(mSet)+\") \"+CtxState(ctx)\n\t\t\t+$T(\"RiWe::，未配置noiseSuppression和echoCancellation时浏览器可能会自动打开降噪和回声消除，移动端可能会降低系统播放音量（关闭录音后可恢复），请参阅文档中audioTrackSet配置\")\n\t\t\t+\"(\"+GitUrl+\") LM:\"+LM+\" UA:\"+navigator.userAgent);\n\t\tif(pro&&pro.then){\n\t\t\tpro.then(f1)[CatchTxt](f2); //fix 关键字，保证catch压缩时保持字符串形式\n\t\t};\n\t}\n\t//关闭释放录音资源\n\t,close:function(call){\n\t\tcall=call||NOOP;\n\t\t\n\t\tvar This=this,streamStore=This._streamStore();\n\t\tThis._stop();\n\t\tvar sTag=\" stream:\"+This._streamTag;\n\t\t\n\t\tvar Lock=streamStore.Sync;\n\t\tThis._O=0;\n\t\tif(This._O_!=Lock.O){\n\t\t\t//唯一资源Stream的控制权已交给新对象，这里不能关闭。此处在每次都弹权限的浏览器内可能存在泄漏，新对象被拒绝权限可能不会调用close，忽略这种不处理\n\t\t\tThis.CLog($T(\"hWVz::close被忽略（因为同时open了多个rec，只有最后一个会真正close）\")+sTag,3);\n\t\t\tcall();\n\t\t\treturn;\n\t\t};\n\t\tLock.C++;//获得控制权\n\t\t\n\t\tDisconnect(streamStore);\n\t\t\n\t\tThis.CLog(\"close,\"+sTag);\n\t\tcall();\n\t}\n\t\n\t\n\t\n\t\n\t\n\t/*模拟一段录音数据，后面可以调用stop进行编码，需提供pcm数据[1,2,3...]，pcm的采样率*/\n\t,mock:function(pcmData,pcmSampleRate){\n\t\tvar This=this;\n\t\tThis._stop();//清理掉已有的资源\n\t\t\n\t\tThis.isMock=1;\n\t\tThis.mockEnvInfo=null;\n\t\tThis.buffers=[pcmData];\n\t\tThis.recSize=pcmData.length;\n\t\tThis._setSrcSR(pcmSampleRate);\n\t\tThis._streamTag=\"mock\";\n\t\treturn This;\n\t}\n\t,_setSrcSR:function(sampleRate){\n\t\tvar This=this,set=This.set;\n\t\tvar setSr=set[sampleRateTxt];\n\t\tif(setSr>sampleRate){\n\t\t\tset[sampleRateTxt]=sampleRate;\n\t\t}else{ setSr=0 }\n\t\tThis[srcSampleRateTxt]=sampleRate;\n\t\tThis.CLog(srcSampleRateTxt+\": \"+sampleRate+\" set.\"+sampleRateTxt+\": \"+set[sampleRateTxt]+(setSr?\" \"+$T(\"UHvm::忽略\")+\": \"+setSr:\"\"), setSr?3:0);\n\t}\n\t,envCheck:function(envInfo){//平台环境下的可用性检查，任何时候都可以调用检查，返回errMsg:\"\"正常，\"失败原因\"\n\t\t//envInfo={envName:\"H5\",canProcess:true}\n\t\tvar errMsg,This=this,set=This.set;\n\t\t\n\t\t//检测CPU的数字字节序，TypedArray字节序是个迷，直接拒绝罕见的大端模式，因为找不到这种CPU进行测试\n\t\tvar tag=\"CPU_BE\";\n\t\tif(!errMsg && !Recorder[tag] && typeof Int8Array==\"function\" && !new Int8Array(new Int32Array([1]).buffer)[0]){\n\t\t\tTraffic(tag); //如果开启了流量统计，这里将发送一个图片请求\n\t\t\terrMsg=$T(\"Essp::不支持{1}架构\",0,tag);\n\t\t};\n\t\t\n\t\t//编码器检查环境下配置是否可用\n\t\tif(!errMsg){\n\t\t\tvar type=set.type,hasFn=This[type+\"_envCheck\"];\n\t\t\tif(set.takeoffEncodeChunk){//需要实时编码返回数据，此时需要检查环境是否有实时特性、和是否可实时编码\n\t\t\t\tif(!hasFn){\n\t\t\t\t\terrMsg=$T(\"2XBl::{1}类型不支持设置takeoffEncodeChunk\",0,type)+(This[type]?\"\":$T(\"LG7e::(未加载编码器)\"));\n\t\t\t\t}else if(!envInfo.canProcess){\n\t\t\t\t\terrMsg=$T(\"7uMV::{1}环境不支持实时处理\",0,envInfo.envName);\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif(!errMsg && hasFn){//编码器已实现环境检查\n\t\t\t\terrMsg=This[type+\"_envCheck\"](envInfo,set);\n\t\t\t};\n\t\t};\n\t\t\n\t\treturn errMsg||\"\";\n\t}\n\t,envStart:function(mockEnvInfo,sampleRate){//平台环境相关的start调用\n\t\tvar This=this,set=This.set;\n\t\tThis.isMock=mockEnvInfo?1:0;//非H5环境需要启用mock，并提供envCheck需要的环境信息\n\t\tThis.mockEnvInfo=mockEnvInfo;\n\t\tThis.buffers=[];//数据缓冲\n\t\tThis.recSize=0;//数据大小\n\t\tif(mockEnvInfo){\n\t\t\tThis._streamTag=\"env$\"+mockEnvInfo.envName;\n\t\t};\n\t\t\n\t\tThis.state=1;//运行状态，0未录音 1录音中 2暂停 3等待ctx激活\n\t\tThis.envInLast=0;//envIn接收到最后录音内容的时间\n\t\tThis.envInFirst=0;//envIn接收到的首个录音内容的录制时间\n\t\tThis.envInFix=0;//补偿的总时间\n\t\tThis.envInFixTs=[];//补偿计数列表\n\t\t\n\t\t//engineCtx需要提前确定最终的采样率\n\t\tThis._setSrcSR(sampleRate);\n\t\t\n\t\tThis.engineCtx=0;\n\t\t//此类型有边录边转码(Worker)支持\n\t\tif(This[set.type+\"_start\"]){\n\t\t\tvar engineCtx=This.engineCtx=This[set.type+\"_start\"](set);\n\t\t\tif(engineCtx){\n\t\t\t\tengineCtx.pcmDatas=[];\n\t\t\t\tengineCtx.pcmSize=0;\n\t\t\t};\n\t\t};\n\t}\n\t,envResume:function(){//和平台环境无关的恢复录音\n\t\t//重新开始计数\n\t\tthis.envInFixTs=[];\n\t}\n\t,envIn:function(pcm,sum){//和平台环境无关的pcm[Int16]输入\n\t\tvar This=this,set=This.set,engineCtx=This.engineCtx;\n\t\tif(This.state!=1){\n\t\t\tif(!This.state)This.CLog(\"envIn at state=0\",3);\n\t\t\treturn;\n\t\t};\n\t\tvar bufferSampleRate=This[srcSampleRateTxt];\n\t\tvar size=pcm.length;\n\t\tvar powerLevel=Recorder.PowerLevel(sum,size);\n\t\t\n\t\tvar buffers=This.buffers;\n\t\tvar bufferFirstIdx=buffers.length;//之前的buffer都是经过onProcess处理好的，不允许再修改\n\t\tbuffers.push(pcm);\n\t\t\n\t\t//有engineCtx时会被覆盖，这里保存一份\n\t\tvar buffersThis=buffers;\n\t\tvar bufferFirstIdxThis=bufferFirstIdx;\n\t\t\n\t\t//卡顿丢失补偿：因为设备很卡的时候导致H5接收到的数据量不够造成播放时候变速，结果比实际的时长要短，此处保证了不会变短，但不能修复丢失的音频数据造成音质变差。当前算法采用输入时间侦测下一帧是否需要添加补偿帧，需要(6次输入||超过1秒)以上才会开始侦测，如果滑动窗口内丢失超过1/3就会进行补偿\n\t\tvar now=Date.now();\n\t\tvar pcmTime=Math.round(size/bufferSampleRate*1000);\n\t\tThis.envInLast=now;\n\t\tif(This.buffers.length==1){//记下首个录音数据的录制时间\n\t\t\tThis.envInFirst=now-pcmTime;\n\t\t};\n\t\tvar envInFixTs=This.envInFixTs;\n\t\tenvInFixTs.splice(0,0,{t:now,d:pcmTime});\n\t\t//保留3秒的计数滑动窗口，另外超过3秒的停顿不补偿\n\t\tvar tsInStart=now,tsPcm=0;\n\t\tfor(var i=0;i<envInFixTs.length;i++){\n\t\t\tvar o=envInFixTs[i];\n\t\t\tif(now-o.t>3000){\n\t\t\t\tenvInFixTs.length=i;\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\ttsInStart=o.t;\n\t\t\ttsPcm+=o.d;\n\t\t};\n\t\t//达到需要的数据量，开始侦测是否需要补偿\n\t\tvar tsInPrev=envInFixTs[1];\n\t\tvar tsIn=now-tsInStart;\n\t\tvar lost=tsIn-tsPcm;\n\t\tif( lost>tsIn/3 && (tsInPrev&&tsIn>1000 || envInFixTs.length>=6) ){\n\t\t\t//丢失过多，开始执行补偿\n\t\t\tvar addTime=now-tsInPrev.t-pcmTime;//距离上次输入丢失这么多ms\n\t\t\tif(addTime>pcmTime/5){//丢失超过本帧的1/5\n\t\t\t\tvar fixOpen=!set.disableEnvInFix;\n\t\t\t\tThis.CLog(\"[\"+now+\"]\"+i18n.get(fixOpen?$T(\"4Kfd::补偿{1}ms\",1):$T(\"bM5i::未补偿{1}ms\",1),[addTime]),3);\n\t\t\t\tThis.envInFix+=addTime;\n\t\t\t\t\n\t\t\t\t//用静默进行补偿\n\t\t\t\tif(fixOpen){\n\t\t\t\t\tvar addPcm=new Int16Array(addTime*bufferSampleRate/1000);\n\t\t\t\t\tsize+=addPcm.length;\n\t\t\t\t\tbuffers.push(addPcm);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\t\n\t\tvar sizeOld=This.recSize,addSize=size;\n\t\tvar bufferSize=sizeOld+addSize;\n\t\tThis.recSize=bufferSize;//此值在onProcess后需要修正，可能新数据被修改\n\t\t\n\t\t\n\t\t//此类型有边录边转码(Worker)支持，开启实时转码\n\t\tif(engineCtx){\n\t\t\t//转换成set的采样率\n\t\t\tvar chunkInfo=Recorder.SampleData(buffers,bufferSampleRate,set[sampleRateTxt],engineCtx.chunkInfo);\n\t\t\tengineCtx.chunkInfo=chunkInfo;\n\t\t\t\n\t\t\tsizeOld=engineCtx.pcmSize;\n\t\t\taddSize=chunkInfo.data.length;\n\t\t\tbufferSize=sizeOld+addSize;\n\t\t\tengineCtx.pcmSize=bufferSize;//此值在onProcess后需要修正，可能新数据被修改\n\t\t\t\n\t\t\tbuffers=engineCtx.pcmDatas;\n\t\t\tbufferFirstIdx=buffers.length;\n\t\t\tbuffers.push(chunkInfo.data);\n\t\t\tbufferSampleRate=chunkInfo[sampleRateTxt];\n\t\t};\n\t\t\n\t\tvar duration=Math.round(bufferSize/bufferSampleRate*1000);\n\t\tvar bufferNextIdx=buffers.length;\n\t\tvar bufferNextIdxThis=buffersThis.length;\n\t\t\n\t\t//允许异步处理buffer数据\n\t\tvar asyncEnd=function(){\n\t\t\t//重新计算size，异步的早已减去添加的，同步的需去掉本次添加的然后重新计算\n\t\t\tvar num=asyncBegin?0:-addSize;\n\t\t\tvar hasClear=buffers[0]==null;\n\t\t\tfor(var i=bufferFirstIdx;i<bufferNextIdx;i++){\n\t\t\t\tvar buffer=buffers[i];\n\t\t\t\tif(buffer==null){//已被主动释放内存，比如长时间实时传输录音时\n\t\t\t\t\thasClear=1;\n\t\t\t\t}else{\n\t\t\t\t\tnum+=buffer.length;\n\t\t\t\t\t\n\t\t\t\t\t//推入后台边录边转码\n\t\t\t\t\tif(engineCtx&&buffer.length){\n\t\t\t\t\t\tThis[set.type+\"_encode\"](engineCtx,buffer);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\t//同步清理This.buffers，不管buffers到底清了多少个，buffersThis是使用不到的进行全清\n\t\t\tif(hasClear && engineCtx){\n\t\t\t\tvar i=bufferFirstIdxThis;\n\t\t\t\tif(buffersThis[0]){\n\t\t\t\t\ti=0;\n\t\t\t\t};\n\t\t\t\tfor(;i<bufferNextIdxThis;i++){\n\t\t\t\t\tbuffersThis[i]=null;\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\t//统计修改后的size，如果异步发生clear要原样加回来，同步的无需操作\n\t\t\tif(hasClear){\n\t\t\t\tnum=asyncBegin?addSize:0;\n\t\t\t\t\n\t\t\t\tbuffers[0]=null;//彻底被清理\n\t\t\t};\n\t\t\tif(engineCtx){\n\t\t\t\tengineCtx.pcmSize+=num;\n\t\t\t}else{\n\t\t\t\tThis.recSize+=num;\n\t\t\t};\n\t\t};\n\t\t//实时回调处理数据，允许修改或替换上次回调以来新增的数据 ，但是不允许修改已处理过的，不允许增删第一维数组 ，允许将第二维数组任意修改替换成空数组也可以\n\t\tvar asyncBegin=0,procTxt=\"rec.set.onProcess\";\n\t\ttry{\n\t\t\tasyncBegin=set.onProcess(buffers,powerLevel,duration,bufferSampleRate,bufferFirstIdx,asyncEnd);\n\t\t}catch(e){\n\t\t\t//此错误显示不要用CLog，这样控制台内相同内容不会重复打印\n\t\t\tconsole.error(procTxt+$T(\"gFUF::回调出错是不允许的，需保证不会抛异常\"),e);\n\t\t};\n\t\t\n\t\tvar slowT=Date.now()-now;\n\t\tif(slowT>10 && This.envInFirst-now>1000){ //1秒后开始onProcess性能监测\n\t\t\tThis.CLog(procTxt+$T(\"2ghS::低性能，耗时{1}ms\",0,slowT),3);\n\t\t};\n\t\t\n\t\tif(asyncBegin===true){\n\t\t\t//开启了异步模式，onProcess已接管buffers新数据，立即清空，避免出现未处理的数据\n\t\t\tvar hasClear=0;\n\t\t\tfor(var i=bufferFirstIdx;i<bufferNextIdx;i++){\n\t\t\t\tif(buffers[i]==null){//已被主动释放内存，比如长时间实时传输录音时 ，但又要开启异步模式，此种情况是非法的\n\t\t\t\t\thasClear=1;\n\t\t\t\t}else{\n\t\t\t\t\tbuffers[i]=new Int16Array(0);\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif(hasClear){\n\t\t\t\tThis.CLog($T(\"ufqH::未进入异步前不能清除buffers\"),3);\n\t\t\t}else{\n\t\t\t\t//还原size，异步结束后再统计仅修改后的size，如果发生clear要原样加回来\n\t\t\t\tif(engineCtx){\n\t\t\t\t\tengineCtx.pcmSize-=addSize;\n\t\t\t\t}else{\n\t\t\t\t\tThis.recSize-=addSize;\n\t\t\t\t};\n\t\t\t};\n\t\t}else{\n\t\t\tasyncEnd();\n\t\t};\n\t}\n\t\n\t\n\t\n\t\n\t//开始录音，需先调用open；只要open成功时，调用此方法是安全的，如果未open强行调用导致的内部错误将不会有任何提示，stop时自然能得到错误；注意：open和start至少有一个应当在用户操作（触摸、点击等）下进行调用，原因参考runningContext配置\n\t,start:function(){\n\t\tvar This=this;\n\t\t\n\t\tvar isOpen=1;\n\t\tif(This.set.sourceStream){//直接提供了流，仅判断是否调用了open\n\t\t\tif(!This.Stream){\n\t\t\t\tisOpen=0;\n\t\t\t}\n\t\t}else if(!Recorder.IsOpen()){//监测全局麦克风是否打开并且有效\n\t\t\tisOpen=0;\n\t\t};\n\t\tif(!isOpen){\n\t\t\tThis.CLog($T(\"6WmN::start失败：未open\"),1);\n\t\t\treturn;\n\t\t};\n\t\tvar ctx=This._streamCtx();\n\t\tThis.CLog($T(\"kLDN::start 开始录音，\")+CtxState(ctx)+\" stream:\"+This._streamTag);\n\t\t\n\t\tThis._stop();\n\t\tThis.envStart(null, ctx[sampleRateTxt]);\n\t\tThis.state=3;//0未录音 1录音中 2暂停 3等待ctx激活\n\t\t\n\t\t//检查open过程中stop是否已经调用过\n\t\tif(This._SO&&This._SO+1!=This._S){//上面调用过一次 _stop\n\t\t\t//open未完成就调用了stop，此种情况终止start。也应尽量避免出现此情况\n\t\t\tThis.CLog($T(\"Bp2y::start被中断\"),3);\n\t\t\treturn;\n\t\t};\n\t\tThis._SO=0;\n\t\t\n\t\tvar end=function(){\n\t\t\tif(This.state==3){\n\t\t\t\tThis.state=1;\n\t\t\t\tThis.resume();\n\t\t\t}\n\t\t};\n\t\tvar tag=\"AudioContext resume: \";\n\t\tResumeCtx(ctx,function(runC){\n\t\t\trunC&&This.CLog(tag+\"wait...\");\n\t\t\treturn This.state==3;\n\t\t},function(runC){\n\t\t\trunC&&This.CLog(tag+ctx.state);\n\t\t\tend();\n\t\t},function(err){ //比较少见，可能对录音没有影响\n\t\t\tThis.CLog(tag+ctx.state+$T(\"upkE::，可能无法录音：\")+err,1);\n\t\t\tend();\n\t\t});\n\t}\n\t\n\t\n\t\n\t/*暂停录音*/\n\t,pause:function(){\n\t\tvar This=this,stream=This._streamStore().Stream;\n\t\tif(This.state){\n\t\t\tThis.state=2;\n\t\t\tThis.CLog(\"pause\");\n\t\t\tif(stream) delete stream._call[This.id];\n\t\t};\n\t}\n\t/*恢复录音*/\n\t,resume:function(){\n\t\tvar This=this,stream=This._streamStore().Stream;\n\t\tvar tag=\"resume\",tag3=tag+\"(wait ctx)\";\n\t\tif(This.state==3){ //start还在等ctx恢复\n\t\t\tThis.CLog(tag3);\n\t\t}else if(This.state){\n\t\t\tThis.state=1;\n\t\t\tThis.CLog(tag);\n\t\t\tThis.envResume();\n\t\t\t\n\t\t\tif(stream){\n\t\t\t\tstream._call[This.id]=function(pcm,sum){\n\t\t\t\t\tif(This.state==1){\n\t\t\t\t\t\tThis.envIn(pcm,sum);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tConnAlive(stream);//AudioWorklet只会在ctx激活后运行\n\t\t\t};\n\t\t\t\n\t\t\tvar ctx=This._streamCtx();\n\t\t\tif(ctx){ //AudioContext如果被暂停，尽量恢复\n\t\t\t\tResumeCtx(ctx,function(runC){\n\t\t\t\t\trunC&&This.CLog(tag3+\"...\");\n\t\t\t\t\treturn This.state==1;\n\t\t\t\t},function(runC){\n\t\t\t\t\trunC&&This.CLog(tag3+ctx.state);\n\t\t\t\t\tConnAlive(stream);\n\t\t\t\t},function(err){\n\t\t\t\t\tThis.CLog(tag3+ctx.state+\"[err]\"+err,1);\n\t\t\t\t});\n\t\t\t};\n\t\t};\n\t}\n\t\n\t\n\t\n\t\n\t,_stop:function(keepEngine){\n\t\tvar This=this,set=This.set;\n\t\tif(!This.isMock){\n\t\t\tThis._S++;\n\t\t};\n\t\tif(This.state){\n\t\t\tThis.pause();\n\t\t\tThis.state=0;\n\t\t};\n\t\tif(!keepEngine && This[set.type+\"_stop\"]){\n\t\t\tThis[set.type+\"_stop\"](This.engineCtx);\n\t\t\tThis.engineCtx=0;\n\t\t};\n\t}\n\t/*\n\t结束录音并返回录音数据blob对象\n\t\tTrue(blob,duration,mime)\n\t\t\tblob：录音数据audio/mp3|wav格式；默认是Blob对象，可设置rec.dataType=\"arraybuffer\"改成ArrayBuffer\n\t\t\tduration：录音时长，单位毫秒\n\t\t\tmime：\"auido/mp3\" blob数据的类型，方便ArrayBuffer时区分类型\n\t\tFalse(msg)\n\t\tautoClose:false 可选，是否自动调用close，默认为false\n\t*/\n\t,stop:function(True,False,autoClose){\n\t\tvar This=this,set=This.set,t1;\n\t\tvar envInMS=This.envInLast-This.envInFirst, envInLen=envInMS&&This.buffers.length; //可能未start\n\t\tThis.CLog($T(\"Xq4s::stop 和start时差:\")\n\t\t\t+(envInMS?envInMS+\"ms \"+$T(\"3CQP::补偿:\")+This.envInFix+\"ms\"\n\t\t\t\t+\" envIn:\"+envInLen+\" fps:\"+(envInLen/envInMS*1000).toFixed(1)\n\t\t\t:\"-\")+\" stream:\"+This._streamTag+\" (\"+GitUrl+\") LM:\"+LM);\n\t\t\n\t\tvar end=function(){\n\t\t\tThis._stop();//彻底关掉engineCtx\n\t\t\tif(autoClose){\n\t\t\t\tThis.close();\n\t\t\t};\n\t\t};\n\t\tvar err=function(msg){\n\t\t\tThis.CLog($T(\"u8JG::结束录音失败：\")+msg,1);\n\t\t\tFalse&&False(msg);\n\t\t\tend();\n\t\t};\n\t\tvar ok=function(blob,mime,duration){\n\t\t\tvar tBlob=\"blob\",tABuf=\"arraybuffer\",tDT=\"dataType\",tDDT=\"DefaultDataType\";\n\t\t\tvar dType=This[tDT]||Recorder[tDDT]||tBlob,dTag=tDT+\"=\"+dType;\n\t\t\tvar isAB=blob instanceof ArrayBuffer,dErr=0;\n\t\t\tvar dLen=isAB?blob.byteLength:blob.size;\n\t\t\tif(dType==tABuf){\n\t\t\t\tif(!isAB) dErr=1;\n\t\t\t}else if(dType==tBlob){\n\t\t\t\tif(typeof Blob!=\"function\"){\n\t\t\t\t\tdErr=$T.G(\"NonBrowser-1\",[dTag])+$T(\"1skY::，请设置{1}\",0,RecTxt+\".\"+tDDT+'=\"'+tABuf+'\"');\n\t\t\t\t}else{\n\t\t\t\t\tif(isAB) blob=new Blob([blob],{type:mime});\n\t\t\t\t\tif(!(blob instanceof Blob)) dErr=1;\n\t\t\t\t\tmime=blob.type||mime;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tdErr=$T.G(\"NotSupport-1\",[dTag]);\n\t\t\t};\n\t\t\t\n\t\t\tThis.CLog($T(\"Wv7l::结束录音 编码花{1}ms 音频时长{2}ms 文件大小{3}b\",0,Date.now()-t1,duration,dLen)+\" \"+dTag+\",\"+mime);\n\t\t\tif(dErr){\n\t\t\t\terr(dErr!=1?dErr:$T(\"Vkbd::{1}编码器返回的不是{2}\",0,set.type,dType)+\", \"+dTag);\n\t\t\t\treturn;\n\t\t\t};\n\t\t\tif(set.takeoffEncodeChunk){//接管了输出，此时blob长度为0\n\t\t\t\tThis.CLog($T(\"QWnr::启用takeoffEncodeChunk后stop返回的blob长度为0不提供音频数据\"),3);\n\t\t\t}else if(dLen<Math.max(50,duration/5)){//1秒小于0.2k？\n\t\t\t\terr($T(\"Sz2H::生成的{1}无效\",0,set.type));\n\t\t\t\treturn;\n\t\t\t};\n\t\t\t\n\t\t\tTrue&&True(blob,duration,mime);\n\t\t\tend();\n\t\t};\n\t\tif(!This.isMock){\n\t\t\tvar isCtxWait=This.state==3;\n\t\t\tif(!This.state || isCtxWait){\n\t\t\t\terr($T(\"wf9t::未开始录音\")+(isCtxWait?$T(\"Dl2c::，开始录音前无用户交互导致AudioContext未运行\"):\"\"));\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\tThis._stop(true); //将录音状态改成未录音\n\t\tvar size=This.recSize;\n\t\tif(!size){\n\t\t\terr($T(\"Ltz3::未采集到录音\"));\n\t\t\treturn;\n\t\t};\n\t\tif(!This[set.type]){\n\t\t\terr($T(\"xGuI::未加载{1}编码器，请尝试到{2}的src/engine内找到{1}的编码器并加载\",0,set.type,RecTxt));\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//环境配置检查，此处仅针对mock调用，因为open已经检查过了\n\t\tif(This.isMock){\n\t\t\tvar checkMsg=This.envCheck(This.mockEnvInfo||{envName:\"mock\",canProcess:false});//没有提供环境信息的mock时没有onProcess回调\n\t\t\tif(checkMsg){\n\t\t\t\terr($T(\"AxOH::录音错误：\")+checkMsg);\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\t\n\t\t//此类型有边录边转码(Worker)支持\n\t\tvar engineCtx=This.engineCtx;\n\t\tif(This[set.type+\"_complete\"]&&engineCtx){\n\t\t\tvar duration=Math.round(engineCtx.pcmSize/set[sampleRateTxt]*1000);//采用后的数据长度和buffers的长度可能微小的不一致，是采样率连续转换的精度问题\n\t\t\t\n\t\t\tt1=Date.now();\n\t\t\tThis[set.type+\"_complete\"](engineCtx,function(blob,mime){\n\t\t\t\tok(blob,mime,duration);\n\t\t\t},err);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t//标准UI线程转码，调整采样率\n\t\tt1=Date.now();\n\t\tif(!This.buffers[0]){\n\t\t\terr($T(\"xkKd::音频buffers被释放\"));\n\t\t\treturn;\n\t\t};\n\t\tvar chunk=Recorder.SampleData(This.buffers,This[srcSampleRateTxt],set[sampleRateTxt]);\n\t\t\n\t\tset[sampleRateTxt]=chunk[sampleRateTxt];\n\t\tvar res=chunk.data;\n\t\tvar duration=Math.round(res.length/set[sampleRateTxt]*1000);\n\t\t\n\t\tThis.CLog($T(\"CxeT::采样:{1} 花:{2}ms\",0,size+\"->\"+res.length,Date.now()-t1));\n\t\t\n\t\tsetTimeout(function(){\n\t\t\tt1=Date.now();\n\t\t\tThis[set.type](res,function(blob,mime){\n\t\t\t\tok(blob,mime,duration);\n\t\t\t},function(msg){\n\t\t\t\terr(msg);\n\t\t\t});\n\t\t});\n\t}\n\n};\n\n\n\n\n\n//=======从WebM字节流中提取pcm数据，提取成功返回Float32Array，失败返回null||-1=====\nvar WebM_Extract=function(inBytes, scope){\n\tif(!scope.pos){\n\t\tscope.pos=[0]; scope.tracks={}; scope.bytes=[];\n\t};\n\tvar tracks=scope.tracks, position=[scope.pos[0]];\n\tvar endPos=function(){ scope.pos[0]=position[0] };\n\t\n\tvar sBL=scope.bytes.length;\n\tvar bytes=new Uint8Array(sBL+inBytes.length);\n\tbytes.set(scope.bytes); bytes.set(inBytes,sBL);\n\tscope.bytes=bytes;\n\t\n\t//先读取文件头和Track信息\n\tif(!scope._ht){\n\t\treadMatroskaVInt(bytes, position);//EBML Header\n\t\treadMatroskaBlock(bytes, position);//跳过EBML Header内容\n\t\tif(!BytesEq(readMatroskaVInt(bytes, position), [0x18,0x53,0x80,0x67])){\n\t\t\treturn;//未识别到Segment\n\t\t}\n\t\treadMatroskaVInt(bytes, position);//跳过Segment长度值\n\t\twhile(position[0]<bytes.length){\n\t\t\tvar eid0=readMatroskaVInt(bytes, position);\n\t\t\tvar bytes0=readMatroskaBlock(bytes, position);\n\t\t\tvar pos0=[0],audioIdx=0;\n\t\t\tif(!bytes0)return;//数据不全，等待缓冲\n\t\t\t//Track完整数据，循环读取TrackEntry\n\t\t\tif(BytesEq(eid0, [0x16,0x54,0xAE,0x6B])){\n\t\t\t\twhile(pos0[0]<bytes0.length){\n\t\t\t\t\tvar eid1=readMatroskaVInt(bytes0, pos0);\n\t\t\t\t\tvar bytes1=readMatroskaBlock(bytes0, pos0);\n\t\t\t\t\tvar pos1=[0],track={channels:0,sampleRate:0};\n\t\t\t\t\tif(BytesEq(eid1, [0xAE])){//TrackEntry\n\t\t\t\t\t\twhile(pos1[0]<bytes1.length){\n\t\t\t\t\t\t\tvar eid2=readMatroskaVInt(bytes1, pos1);\n\t\t\t\t\t\t\tvar bytes2=readMatroskaBlock(bytes1, pos1);\n\t\t\t\t\t\t\tvar pos2=[0];\n\t\t\t\t\t\t\tif(BytesEq(eid2, [0xD7])){//Track Number\n\t\t\t\t\t\t\t\tvar val=BytesInt(bytes2);\n\t\t\t\t\t\t\t\ttrack.number=val;\n\t\t\t\t\t\t\t\ttracks[val]=track;\n\t\t\t\t\t\t\t}else if(BytesEq(eid2, [0x83])){//Track Type\n\t\t\t\t\t\t\t\tvar val=BytesInt(bytes2);\n\t\t\t\t\t\t\t\tif(val==1) track.type=\"video\";\n\t\t\t\t\t\t\t\telse if(val==2) {\n\t\t\t\t\t\t\t\t\ttrack.type=\"audio\";\n\t\t\t\t\t\t\t\t\tif(!audioIdx) scope.track0=track;\n\t\t\t\t\t\t\t\t\ttrack.idx=audioIdx++;\n\t\t\t\t\t\t\t\t}else track.type=\"Type-\"+val;\n\t\t\t\t\t\t\t}else if(BytesEq(eid2, [0x86])){//Track Codec\n\t\t\t\t\t\t\t\tvar str=\"\";\n\t\t\t\t\t\t\t\tfor(var i=0;i<bytes2.length;i++){\n\t\t\t\t\t\t\t\t\tstr+=String.fromCharCode(bytes2[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttrack.codec=str;\n\t\t\t\t\t\t\t}else if(BytesEq(eid2, [0xE1])){\n\t\t\t\t\t\t\t\twhile(pos2[0]<bytes2.length){//循环读取 Audio 属性\n\t\t\t\t\t\t\t\t\tvar eid3=readMatroskaVInt(bytes2, pos2);\n\t\t\t\t\t\t\t\t\tvar bytes3=readMatroskaBlock(bytes2, pos2);\n\t\t\t\t\t\t\t\t\t//采样率、位数、声道数\n\t\t\t\t\t\t\t\t\tif(BytesEq(eid3, [0xB5])){\n\t\t\t\t\t\t\t\t\t\tvar val=0,arr=new Uint8Array(bytes3.reverse()).buffer;\n\t\t\t\t\t\t\t\t\t\tif(bytes3.length==4) val=new Float32Array(arr)[0];\n\t\t\t\t\t\t\t\t\t\telse if(bytes3.length==8) val=new Float64Array(arr)[0];\n\t\t\t\t\t\t\t\t\t\telse CLog(\"WebM Track !Float\",1,bytes3);\n\t\t\t\t\t\t\t\t\t\ttrack[sampleRateTxt]=Math.round(val);\n\t\t\t\t\t\t\t\t\t}else if(BytesEq(eid3, [0x62,0x64])) track.bitDepth=BytesInt(bytes3);\n\t\t\t\t\t\t\t\t\telse if(BytesEq(eid3, [0x9F])) track.channels=BytesInt(bytes3);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tscope._ht=1;\n\t\t\t\tCLog(\"WebM Tracks\",tracks);\n\t\t\t\tendPos();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//校验音频参数信息，如果不符合代码要求，统统拒绝处理\n\tvar track0=scope.track0;\n\tif(!track0)return;\n\tif(track0.bitDepth==16 && /FLOAT/i.test(track0.codec)){\n\t\ttrack0.bitDepth=32; //chrome v66 实际为浮点数\n\t\tCLog(\"WebM 16->32 bit\",3);\n\t}\n\tif(track0[sampleRateTxt]!=scope[sampleRateTxt] || track0.bitDepth!=32 || track0.channels<1 || !/(\\b|_)PCM\\b/i.test(track0.codec)){\n\t\tscope.bytes=[];//格式非预期 无法处理，清空缓冲数据\n\t\tif(!scope.bad)CLog(\"WebM Track Unexpected\",3,scope);\n\t\tscope.bad=1;\n\t\treturn -1;\n\t}\n\t\n\t//循环读取Cluster内的SimpleBlock\n\tvar datas=[],dataLen=0;\n\twhile(position[0]<bytes.length){\n\t\tvar eid1=readMatroskaVInt(bytes, position);\n\t\tvar bytes1=readMatroskaBlock(bytes, position);\n\t\tif(!bytes1)break;//数据不全，等待缓冲\n\t\tif(BytesEq(eid1, [0xA3])){//SimpleBlock完整数据\n\t\t\tvar trackNo=bytes1[0]&0xf;\n\t\t\tvar track=tracks[trackNo];\n\t\t\tif(!track){//不可能没有，数据出错？\n\t\t\t\tCLog(\"WebM !Track\"+trackNo,1,tracks);\n\t\t\t}else if(track.idx===0){\n\t\t\t\tvar u8arr=new Uint8Array(bytes1.length-4);\n\t\t\t\tfor(var i=4;i<bytes1.length;i++){\n\t\t\t\t\tu8arr[i-4]=bytes1[i];\n\t\t\t\t}\n\t\t\t\tdatas.push(u8arr); dataLen+=u8arr.length;\n\t\t\t}\n\t\t}\n\t\tendPos();\n\t}\n\t\n\tif(dataLen){\n\t\tvar more=new Uint8Array(bytes.length-scope.pos[0]);\n\t\tmore.set(bytes.subarray(scope.pos[0]));\n\t\tscope.bytes=more; //清理已读取了的缓冲数据\n\t\tscope.pos[0]=0;\n\t\t\n\t\tvar u8arr=new Uint8Array(dataLen); //已获取的音频数据\n\t\tfor(var i=0,i2=0;i<datas.length;i++){\n\t\t\tu8arr.set(datas[i],i2);\n\t\t\ti2+=datas[i].length;\n\t\t}\n\t\tvar arr=new Float32Array(u8arr.buffer);\n\t\t\n\t\tif(track0.channels>1){//多声道，提取一个声道\n\t\t\tvar arr2=[];\n\t\t\tfor(var i=0;i<arr.length;){\n\t\t\t\tarr2.push(arr[i]);\n\t\t\t\ti+=track0.channels;\n\t\t\t}\n\t\t\tarr=new Float32Array(arr2);\n\t\t};\n\t\treturn arr;\n\t}\n};\n//两个字节数组内容是否相同\nvar BytesEq=function(bytes1,bytes2){\n\tif(!bytes1 || bytes1.length!=bytes2.length) return false;\n\tif(bytes1.length==1) return bytes1[0]==bytes2[0];\n\tfor(var i=0;i<bytes1.length;i++){\n\t\tif(bytes1[i]!=bytes2[i]) return false;\n\t}\n\treturn true;\n};\n//字节数组BE转成int数字\nvar BytesInt=function(bytes){\n\tvar s=\"\";//0-8字节，js位运算只支持4字节\n\tfor(var i=0;i<bytes.length;i++){var n=bytes[i];s+=(n<16?\"0\":\"\")+n.toString(16)};\n\treturn parseInt(s,16)||0;\n};\n//读取一个可变长数值字节数组\nvar readMatroskaVInt=function(arr,pos,trim){\n\tvar i=pos[0];\n\tif(i>=arr.length)return;\n\tvar b0=arr[i],b2=(\"0000000\"+b0.toString(2)).substr(-8);\n\tvar m=/^(0*1)(\\d*)$/.exec(b2);\n\tif(!m)return;\n\tvar len=m[1].length, val=[];\n\tif(i+len>arr.length)return;\n\tfor(var i2=0;i2<len;i2++){ val[i2]=arr[i]; i++; }\n\tif(trim) val[0]=parseInt(m[2]||'0',2);\n\tpos[0]=i;\n\treturn val;\n};\n//读取一个自带长度的内容字节数组\nvar readMatroskaBlock=function(arr,pos){\n\tvar lenVal=readMatroskaVInt(arr,pos,1);\n\tif(!lenVal)return;\n\tvar len=BytesInt(lenVal);\n\tvar i=pos[0], val=[];\n\tif(len<0x7FFFFFFF){ //超大值代表没有长度\n\t\tif(i+len>arr.length)return;\n\t\tfor(var i2=0;i2<len;i2++){ val[i2]=arr[i]; i++; }\n\t}\n\tpos[0]=i;\n\treturn val;\n};\n//=====End WebM读取=====\n\n\n//=====i18n 简版国际化多语言支持=====\nvar i18n=Recorder.i18n={\n\tlang: \"zh-CN\" //默认中文\n\t,alias:{\"zh-CN\":\"zh\",\"en-US\":\"en\"} //别名配置，映射到一个语言实例\n\t,locales:{} //语言实例：zh:{key:\"text\"}\n\t,data:{} //各种数据，desc$xx：语言描述，rtl$xx：文本方向是否从右到左 rtl$zh:false rtl$ar:true\n\t//添加语言文本内容，set={lang:\"\",overwrite:true}，texts=[\"key:text{1}\",...]\n\t,put:function(set,texts){\n\t\tvar tag=RecTxt+\".i18n.put: \";\n\t\tvar overwrite=set.overwrite; overwrite=overwrite==null||overwrite;\n\t\tvar lang=set.lang; lang=i18n.alias[lang]||lang;\n\t\tif(!lang)throw new Error(tag+\"set.lang?\");\n\t\tvar locale=i18n.locales[lang];\n\t\tif(!locale){ locale={}; i18n.locales[lang]=locale };\n\t\tvar exp=/^([\\w\\-]+):/,m;\n\t\tfor(var i=0;i<texts.length;i++){\n\t\t\tvar v=texts[i]; m=exp.exec(v);\n\t\t\tif(!m){ CLog(tag+\"'key:'? \"+v,3,set); continue }\n\t\t\tvar key=m[1],v=v.substr(key.length+1);\n\t\t\tif(!overwrite && locale[key]) continue;\n\t\t\tlocale[key]=v;\n\t\t}\n\t}\n\t//获取key对应的文本，如果没有对应文本，将返回en的，en的也没有将返回zh的\n\t,get:function(/*key,args,lang*/){\n\t\treturn i18n.v_G.apply(null,arguments);\n\t}, v_G:function(key,args,lang){ //全局可重写get\n\t\targs=args||[];\n\t\tlang=lang||i18n.lang; lang=i18n.alias[lang]||lang;\n\t\tvar locale=i18n.locales[lang];\n\t\tvar val=locale&&locale[key]||\"\";\n\t\tif(!val&&lang!=\"zh\"){\n\t\t\tif(lang==\"en\")return i18n.v_G(key,args,\"zh\");\n\t\t\treturn i18n.v_G(key,args,\"en\");\n\t\t}\n\t\ti18n.lastLang=lang;\n\t\tif(val==\"=Empty\")return \"\";\n\t\treturn val.replace(/\\{(\\d+)(\\!?)\\}/g,function(v,a,b){\n\t\t\ta=+a||0; v=args[a-1];\n\t\t\tif(a<1 || a>args.length){ v=\"{?}\"; CLog(\"i18n[\"+key+\"] no {\"+a+\"}: \"+val,3) }\n\t\t\treturn b?\"\":v;\n\t\t});\n\t}\n\t/**返回一个国际化文本，返回的文本取决于i18n.lang。\n\t\t调用参数：T(\"key:[lang]:中文{1}\",\"[lang]:英文{1}\",...,0,\"args1\",\"args2\")，除了key:，其他都是可选的，文本如果在语言实例中不存在会push进去，第一个文本无lang时默认zh，第二个无lang时默认en，文本中用{1-n}来插入args\n\t\t第一个args前面这个参数必须是0；也可以不提供args，这个参数填args的数量，此时不返回文本，只返回key，再用i18n.get提供参数获取文本\n\t\t本函数调用，第一个文本需中文，调用尽量简单，不要换行，方便后续自动提取翻译列表\n\t\targs如果旧的参数位置发生了变更，应当使用新的key，让旧的翻译失效，增加args无需更换key\n\t\tkey的生成使用随机字符串，不同源码里面可以搞个不同前缀:\n\t\t\ts=\"\";L=4; for(var i=0,n;i<L;i++){ n=~~(Math.random()*62);s+=n<10?n:String.fromCharCode(n<36?55+n:61+n); }; s\n\t**/\n\t,$T:function(){\n\t\treturn i18n.v_T.apply(null,arguments);\n\t} ,v_T:function(){ //全局可重写$T\n\t\tvar a=arguments,key=\"\",args=[],isArgs=0,tag=RecTxt+\".i18n.$T:\";\n\t\tvar exp=/^([\\w\\-]*):/,m;\n\t\tfor(var i=0;i<a.length;i++){\n\t\t\tvar v=a[i];\n\t\t\tif(i==0){\n\t\t\t\tm=exp.exec(v); key=m&&m[1];\n\t\t\t\tif(!key)throw new Error(tag+\"0 'key:'?\");\n\t\t\t\tv=v.substr(key.length+1);\n\t\t\t}\n\t\t\tif(isArgs===-1) args.push(v);\n\t\t\telse if(isArgs) throw new Error(tag+\" bad args\");\n\t\t\telse if(v===0) isArgs=-1;\n\t\t\telse if(IsNum(v)){\n\t\t\t\tif(v<1) throw new Error(tag+\" bad args\");\n\t\t\t\tisArgs=v;\n\t\t\t}else{\n\t\t\t\tvar lang=i==1?\"en\":i?\"\":\"zh\";\n\t\t\t\tm=exp.exec(v); if(m){ lang=m[1]||lang; v=v.substr(m[1].length+1); }\n\t\t\t\tif(!m || !lang)throw new Error(tag+i+\" 'lang:'?\");\n\t\t\t\ti18n.put({lang:lang,overwrite:false},[key+\":\"+v]);\n\t\t\t}\n\t\t}\n\t\tif(!key)return \"\";\n\t\tif(isArgs>0)return key;\n\t\treturn i18n.v_G(key,args);\n\t}\n};\nvar $T=i18n.$T; $T.G=i18n.get;\n//预定义文本\n$T(\"NonBrowser-1::非浏览器环境，不支持{1}\",1);\n$T(\"IllegalArgs-1::参数错误：{1}\",1);\n$T(\"NeedImport-2::调用{1}需要先导入{2}\",2);\n$T(\"NotSupport-1::不支持：{1}\",1);\n//=====End i18n=====\n\n\n\n//流量统计用1像素图片地址，设置为空将不参与统计\nRecorder.TrafficImgUrl=\"//ia.51.la/go1?id=20469973&pvFlag=1\";\nvar Traffic=Recorder.Traffic=function(report){\n\tif(!isBrowser)return;\n\treport=report?\"/\"+RecTxt+\"/Report/\"+report:\"\";\n\tvar imgUrl=Recorder.TrafficImgUrl;\n\tif(imgUrl){\n\t\tvar data=Recorder.Traffic;\n\t\tvar m=/^(https?:..[^\\/#]*\\/?)[^#]*/i.exec(location.href)||[];\n\t\tvar host=(m[1]||\"http://file/\");\n\t\tvar idf=(m[0]||host)+report;\n\t\t\n\t\tif(imgUrl.indexOf(\"//\")==0){\n\t\t\t//给url加上http前缀，如果是file协议下，不加前缀没法用\n\t\t\tif(/^https:/i.test(idf)){\n\t\t\t\timgUrl=\"https:\"+imgUrl;\n\t\t\t}else{\n\t\t\t\timgUrl=\"http:\"+imgUrl;\n\t\t\t};\n\t\t};\n\t\tif(report){\n\t\t\timgUrl=imgUrl+\"&cu=\"+encodeURIComponent(host+report);\n\t\t};\n\t\t\n\t\tif(!data[idf]){\n\t\t\tdata[idf]=1;\n\t\t\t\n\t\t\tvar img=new Image();\n\t\t\timg.src=imgUrl;\n\t\t\tCLog(\"Traffic Analysis Image: \"+(report||RecTxt+\".TrafficImgUrl=\"+Recorder.TrafficImgUrl));\n\t\t};\n\t};\n};\n\n\n\nif(WRec2){\n\tCLog($T(\"8HO5::覆盖导入{1}\",0,RecTxt),1);\n\tWRec2.Destroy();\n};\nExport[RecTxt]=Recorder;\n\n}));"],"names":["obj","key","value","Object","defineProperty","enumerable","configurable","writable","slice","options","vnodeId","rerenderQueue","defer","prevDebounce","EMPTY_OBJ","EMPTY_ARR","IS_NON_DIMENSIONAL","assign","props","i","removeNode","node","parentNode","removeChild","createElement","type","children","ref","normalizedProps","arguments","length","call","defaultProps","createVNode","original","vnode","__","__b","__e","__d","undefined","__h","constructor","Fragment","Component","context","getDomSibling","childIndex","indexOf","sibling","updateParentDomPointers","child","base","enqueueRender","c","push","process","debounceRendering","queue","sort","a","b","some","component","commitQueue","oldVNode","oldDom","parentDom","diff","ownerSVGElement","commitRoot","diffChildren","renderResult","newParentVNode","oldParentVNode","globalContext","isSvg","excessDomChildren","isHydrating","j","childVNode","newDom","firstChildDom","refs","oldChildren","oldChildrenLength","Array","isArray","reorderChildren","placeChild","unmount","applyRef","tmp","toChildArray","out","nextDom","sibDom","outer","appendChild","nextSibling","insertBefore","setStyle","style","setProperty","test","dom","name","oldValue","useCapture","o","cssText","replace","toLowerCase","_listeners","addEventListener","eventProxyCapture","eventProxy","removeEventListener","e","setAttribute","removeAttribute","event","newVNode","isNew","oldProps","oldState","snapshot","clearProcessingException","newProps","provider","componentContext","newType","contextType","prototype","render","doRender","sub","state","getDerivedStateFromProps","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","forEach","componentWillUpdate","componentDidUpdate","getChildContext","getSnapshotBeforeUpdate","oldHtml","newHtml","nodeType","localName","document","createTextNode","createElementNS","is","data","childNodes","dangerouslySetInnerHTML","attributes","innerHTML","hydrate","diffProps","checked","diffElementNodes","diffed","root","cb","current","parentVNode","skipRemove","r","componentWillUnmount","this","replaceNode","firstChild","error","ctor","handled","getDerivedStateFromError","setState","componentDidCatch","update","callback","s","forceUpdate","Promise","then","bind","resolve","setTimeout","__source","__self","$f72b75cf796873c7$export$2e2bcd8739ae039","window","localStorage","JSON","stringify","parse","$c84d045dcc34faf5$var$CACHE","Map","$c84d045dcc34faf5$var$VERSIONS","v","emoji","$c84d045dcc34faf5$var$isSupported","has","get","supported","$c84d045dcc34faf5$var$isEmojiSupported","set","ctx","navigator","userAgent","includes","getContext","willReadFrequently","CANVAS_WIDTH","textSize","Math","floor","CANVAS_HEIGHT","font","textBaseline","canvas","width","height","unicode","clearRect","fillStyle","fillText","getImageData","count","x","y","measureText","$c84d045dcc34faf5$export$2e2bcd8739ae039","$b22cfd0a55410b4f$var$DEFAULTS","$b22cfd0a55410b4f$var$Index","$b22cfd0a55410b4f$export$2e2bcd8739ae039","emojiId","id","maxFrequentRows","perLine","emojiIds","max","last","aScore","bScore","localeCompare","removedIds","removedId","splice","$8d50d93417ef682a$exports","autoFocus","dynamicWidth","emojiButtonColors","emojiButtonRadius","emojiButtonSize","emojiSize","emojiVersion","choices","exceptEmojis","icons","locale","navPosition","noCountryFlags","noResultsEmoji","previewEmoji","previewPosition","searchPosition","skin","skinTonePosition","theme","categories","categoryIcons","custom","i18n","getImageURL","getSpritesheetURL","onAddCustomEmoji","onClickOutside","onEmojiSelect","stickySearch","deprecated","$7adb23b0109cc36a$export$dbe3113d60765c1a","$7adb23b0109cc36a$export$2d0294657ab35f1b","$7adb23b0109cc36a$var$fetchCache","$7adb23b0109cc36a$var$fetchJSON","src","fetch","response","json","$7adb23b0109cc36a$var$promise","$7adb23b0109cc36a$var$initCallback","$7adb23b0109cc36a$var$initialized","$7adb23b0109cc36a$export$2cd8252107eb640b","caller","$7adb23b0109cc36a$var$_init","console","warn","emoticons","natives","unshift","emojis","aliases","alias","originalCategories","filter","parseInt","category","prevCategory","icon","target","c1","c2","latestVersionSupport","latestVersion","categoryIndex","resetSearchIndex","emojiIndex","ignore","version","search","keywords","map","strings","split","string","flat","trim","join","emoticon","skinIndex","skins","native","skinShortcodes","shortcodes","reset","$7adb23b0109cc36a$export$75fe5f91d452f94b","element","_props","k","$7adb23b0109cc36a$export$88c9ddb45cea7241","propName","defaults","getAttribute","transform","$c4d155af13ad4d4b$var$Pool","maxResults","values","word","words","pool","value1","results","scores","score","$c4d155af13ad4d4b$export$2e2bcd8739ae039","$c4d155af13ad4d4b$var$search","$e6eae5155b87f591$export$bcb25aa587e9cb13","$693b183b0a78708f$export$e772c8ff12451969","frames","keys","requestAnimationFrame","$693b183b0a78708f$export$d10ac59fbe52a745","emojiData","unified","$fcccfb36ed0cde68$export$2e2bcd8739ae039","activity","outline","xmlns","viewBox","d","solid","flags","foods","frequent","nature","objects","people","places","symbols","loupe","delete","matches","match","SHORTCODES_REGEX","fallback","emojiSkin","imageSrc","spritesheet","spritesheetSrc","class","maxWidth","size","maxHeight","display","alt","fontSize","fontFamily","backgroundImage","backgroundSize","sheet","cols","rows","backgroundPosition","$6f57cc9cd54c5aaa$export$2e2bcd8739ae039","parent","attributeChangedCallback","attr","_","newValue","Props","disconnected","unregister","HTMLElement","$26f27c338a96b1a6$export$2e2bcd8739ae039","styles","setShadow","injectStyles","attachShadow","mode","textContent","shadowRoot","$3d90f6e46fb2dd47$export$2e2bcd8739ae039","$331b4160623139bf$export$2e2bcd8739ae039","customElements","define","currentComponent","prevRaf","afterPaintEffects","oldBeforeDiff","oldBeforeRender","oldAfterDiff","oldCommit","oldBeforeUnmount","flushAfterPaintEffects","pop","invokeCleanup","invokeEffect","hooks","raf","done","clearTimeout","timeout","HAS_RAF","cancelAnimationFrame","hasErrored","hook","comp","cleanup","shallowDiffers","PureComponent","p","isPureReactComponent","oldDiffHook","Symbol","for","Forwarded","oldCatchError","oldUnmount","Suspense","_suspenders","suspended","SuspenseList","_next","_map","promise","suspendingVNode","suspendingComponent","resolved","onResolved","onSuspensionComplete","suspendedVNode","removeOriginal","detachedParent","originalParent","wasHydrating","detachedComponent","__c","detachedClone","effect","list","revealOrder","delegated","unsuspend","wrappedUnsuspend","reverse","_this","REACT_ELEMENT_TYPE","CAMEL_PROPS","IS_DOM","isReactComponent","oldEventHook","empty","isPropagationStopped","cancelBubble","isDefaultPrevented","defaultPrevented","persist","nativeEvent","classNameDescriptor","oldVNodeHook","nonCustomElement","multiple","selected","defaultValue","className","$$typeof","$ec8c39fdad15601a$var$THEME_ICONS","light","dark","$ec8c39fdad15601a$export$2e2bcd8739ae039","categoryId","svg","__html","selectedCategoryIndex","position","dir","title","unfocused","onMouseDown","preventDefault","onClick","renderIcon","opacity","$e0d4dda61265ff1e$export$2e2bcd8739ae039","nextProps","$89bd6bb200cc8fef$var$Performance","$89bd6bb200cc8fef$export$2e2bcd8739ae039","showSkins","closeSkins","closest","stopImmediatePropagation","getEmojiByPos","pos","input","searchInput","searchResults","afterRender","scroll","scrollTop","selectionStart","grid","setsize","row","getPerLine","__categoryId","__index","ignoreMouse","currentTarget","navigate","left","right","up","down","handleEmojiClick","clearSearch","unfocusSearch","focus","handleSearchInput","scrollTo","rect","getBoundingClientRect","menu","classList","remove","skinToneRadio","handleBaseClick","handleBaseKeydown","observers","initDynamicPerLine","visibleRows","getInitialState","initTheme","rtl","navigation","skinToneButton","initGrid","register","k1","nextState","nextStateTimer","requiresGridReset","unobserve","observeCategories","observeRows","handleClickOutside","observe","except","observer","disconnect","concat","navKey","addRow","rowIndex","rowRef","index","posinset","category1","darkMedia","matchMedia","media","addListener","calculatePerLine","ResizeObserver","p1","p2","visibleCategories","observerOptions","threshold","IntersectionObserver","entries","entry","dataset","intersectionRatio","ratios","isIntersecting","rootMargin","blur","repeat","increment","keyboard","scrollRect","top","rowTop","rowBot","mouseIsIgnored","ignoreMouseTimer","add","tempSkin","handleCategoryClick","noSearchResults","search_no_results_1","search_no_results_2","pick","renderSkinToneButton","every","val","tabindex","onMouseEnter","handleEmojiOver","onMouseLeave","lineHeight","borderRadius","backgroundColor","renderSkinTone","placeholder","handleSearchClick","onInput","onKeyDown","handleSearchKeyDown","autoComplete","ii","renderEmojiButton","add_custom","hidden","visibility","targetRow","visible","start","end","choose","openSkins","skinToneButtonRect","baseRect","bottom","role","defaultChecked","onChange","handleSkinMouseOver","code","handleSkinClick","lineWidth","renderPreview","renderNav","renderSearch","renderSearchResults","renderCategories","renderSkins","renderLiveRegion","$efa000751917694d$export$2e2bcd8739ae039","$329d53ba9fd7125f$exports","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","createSvgIcon","_jsx","_utils","getLoadingButtonUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","LoadingButtonRoot","styled","Button","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","startIconLoadingStart","loadingButtonClasses","endIconLoadingEnd","ownerState","_extends","transition","transitions","create","duration","short","loadingPosition","color","fullWidth","marginRight","marginLeft","LoadingButtonLoadingIndicator","loadingIndicator","capitalize","variant","vars","palette","action","disabled","React","inProps","contextProps","ButtonGroupContext","resolvedProps","resolveProps","useThemeProps","idProp","loading","loadingIndicatorProp","other","_objectWithoutPropertiesLoose","useId","CircularProgress","classes","slots","startIcon","endIcon","composedClasses","composeClasses","useUtilityClasses","loadingButtonLoadingIndicator","_jsxs","validator","reason","componentNameInError","componentName","location","propFullName","unstable_ClassNameGenerator","configure","generator","ClassNameGenerator","common","new_float","System","VbrMode","Float","ShortBlock","Util","Arrays","new_array_n","new_byte","new_double","Encoder","new_float_n","new_int","new_int_n","assert","module","useAdjust","aaSensitivityP","adjust","adjustLimit","decay","l","SBMAX_l","SBMAX_s","psfb21","PSFB21","psfb12","PSFB12","cb_l","CBANDS","cb_s","eql_w","BLKSIZE","Takehiro","Tables","LameInternalFlags","BitStream","Lame","self","MAX_LENGTH","ga","mpg","ver","vbr","setModules","_ga","_mpg","_ver","_vbr","buf","totbit","bufByteIdx","bufBitIdx","putheader_bits","gfc","arraycopy","header","w_ptr","sideinfo_len","MAX_HEADER_BUF","putbits2","LAME_MAXMP3BUFFER","write_timing","min","putbits_noheaders","drain_into_ancillary","gfp","remainingBits","internal_flags","getLameShortVersion","charAt","ancillary_flag","disable_reservoir","writeheader","ptr","h_ptr","CRC_update","crc","huffman_coder_count1","gi","h","ht","count1table_select","bits","ix","big_values","xr","count1","huffbits","l3_enc","table","hlen","Huffmancode","tableindex","cbits","xbits","linbits","xlen","ext","x1","x2","linbits_x1","linmax","linbits_x2","ShortHuffmancodebits","region1Start","scalefac_band","table_select","LongHuffmancodebits","bigvalues","region2Start","region0_count","region1_count","TotalBytes","total","compute_flushbits","total_bytes_output","flushbits","remaining_headers","bitsPerFrame","last_ptr","first_ptr","getframebits","err","println","bit_rate","bitrate_index","bitrate_table","brate","out_samplerate","padding","CRC_writeheader","byte","flush_bitstream","l3_side","ResvSize","main_data_begin","findReplayGain","RadioGain","GetTitleGain","rgdata","NEQ","GainAnalysis","GAIN_NOT_ENOUGH_SAMPLES","findPeakSample","noclipGainChange","ceil","log10","PeakSample","EQ","scale","noclipScale","add_dummy_byte","n","format_bitstream","resvDrain_pre","gr","ch","fill","error_protection","samplerate_index","extension","ordinal","mode_ext","copyright","emphasis","channels_out","private_bits","band","scfsi","tt","part2_3_length","part2_length","global_gain","scalefac_compress","block_type","NORM_TYPE","mixed_block_flag","subblock_gain","preflag","scalefac_scale","old","encodeSideInfo2","sfb","data_bits","tot_bits","slen1","slen1_tab","slen2","slen2_tab","sfbdivide","scalefac","sfbmax","SHORT_TYPE","sfb_partition","scale_bits","sfb_partition_table","sfbs","slen","writeMainData","resvDrain_post","printf","copy_buffer","buffer","bufferPos","mp3data","minimum","nMusicCRC","updateMusicCRC","VBR_seek_table","nBytesWritten","decode_on_the_fly","pcm_buf","mp3_in","samples_out","hip_decode1_unclipped","hip","AnalyzeSamples","GAIN_ANALYSIS_ERROR","init_bit_stream_w","abs","MeanBits","L3Side","_quantize","quantize","iteration_loop","pe","ms_ener_ratio","ratio","max_bits","l3_xmin","SFBMAX","xrpow","targ_bits","mean_bits","mb","rv","ResvFrameBegin","mode_gr","qupvt","on_pe","MPG_MD_MS_LR","ms_convert","reduce_side","masking_lower_db","cod_info","PSY","mask_adjust","mask_adjust_short","masking_lower","pow","init_outer_loop","init_xrpow","calc_xmin","outer_loop","iteration_finish_one","MAX_BITS_PER_CHANNEL","ResvFrameEnd","sfb_count1","step","noise","noise_log","over_noise","tot_noise","max_noise","over_count","over_SSD","NewMDCT","III_psy_ratio","MPEGMode","FFTOFFSET","bs","psy","_bs","_psy","_qupvt","newMDCT","lame_encode_mp3_frame","inbuf_l","inbuf_r","mp3buf","mp3bufPos","mp3buf_size","mp3count","masking_LR","masking","masking_MS","pe_use","inbuf","tot_ener","pe_MS","lame_encode_frame_init","primebuff0","primebuff1","mdct_sub48","mf_size","framesize","slot_lag","frac_SpF","psymodel","bufp","bufpPos","blocktype","VBR","vbr_mtrh","vbr_mt","L3psycho_anal_vbr","L3psycho_anal_ns","JOINT_STEREO","gr2_max","max_pow","ATH","loudness_sq","adj_lim_new","adjust_ATH","MPG_MD_LR_LR","force_ms","sum_pe_MS","sum_pe_LR","gi0","gi1","analysis","pinfo","ms_ratio","ers","energy","vbr_off","vbr_abr","f","nsPsy","pefirbuf","fircoef","bWriteVbrTag","addVbrFrame","pcmdata","set_frame_pinfo","bitrate_stereoMode_Hist","bt","bitrate_blockType_Hist","updateStats","ENCDELAY","POSTDELAY","MDCTDELAY","DECDELAY","SBLIMIT","SBPSY_l","SBPSY_s","HBLKSIZE","BLKSIZE_s","HBLKSIZE_s","START_TYPE","STOP_TYPE","MPG_MD_LR_I","MPG_MD_MS_I","window_s","costab","fht","fz","fzPos","k4","fi","tri","fn","s1","k2","k3","kx","f1","f0","f3","f2","SQRT2","s2","g0","g1","g2","g3","rv_tbl","fft_short","x_real","chn","bufPos","w","fft_long","jj","init_fft","cos","PI","YULE_ORDER","MAX_SAMP_FREQ","RMS_WINDOW_TIME_NUMERATOR","RMS_WINDOW_TIME_DENOMINATOR","ABYule","MAX_SAMPLES_PER_WINDOW","ABButter","filterYule","inputPos","output","outputPos","nSamples","kernel","filterButter","fsqr","InitGainAnalysis","rgData","samplefreq","MAX_ORDER","linprebuf","lstepbuf","loutbuf","rinprebuf","rstepbuf","routbuf","reqindex","INIT_GAIN_ANALYSIS_ERROR","sampleWindow","lsum","rsum","totsamp","ill","A","INIT_GAIN_ANALYSIS_OK","ResetSampleFrequency","linpre","rinpre","lstep","rstep","lout","rout","B","left_samples","left_samplesPos","right_samples","right_samplesPos","num_samples","num_channels","curleft","curleftBase","curright","currightBase","batchsamples","cursamples","cursamplepos","GAIN_ANALYSIS_OK","STEPS_per_dB","ival","retval","len","elems","upper","analyzeResult","MAX_dB","xrpow_max","sfb_lmax","sfb_smin","psy_lmax","psymax","count1bits","max_nonzero_coeff","clone_int","array","Int32Array","Float32Array","GrInfo","III_psy_xmin","thm","en","iii_psy_xmin","new_short_n","PsyModel","LameGlobalFlags","ReplayGain","CBRNewIterationLoop","qu","V9","V8","V7","V6","V5","V4","V3","V2","V1","V0","R3MIX","STANDARD","EXTREME","INSANE","STANDARD_FAST","EXTREME_FAST","MEDIUM","MEDIUM_FAST","id3","mpglib","bo_l_weight","bo_s_weight","LowPassHighPass","lowerlimit","BandPass","bitrate","lPass","lowpass","enc","_p","_qu","_id3","_mpglib","LAME_ID","filter_coef","SmpFrqIndex","sample_freq","gpf","FindNearestBitrate","bRate","samplerate","BitrateIndex","optimum_bandwidth","lh","freq_map","table_index","nearestBitrateFullIndex","calcNeeded","mf_needed","MFSIZE","lame_encode_frame","ret","frameNum","InOut","n_in","n_out","NumUsed","num_used","gcd","blackman","fcn","wcn","bkwn","sin","fill_buffer_resample","outbuf","outbufPos","desired_len","in_bufferPos","bpc","in_samplerate","BPC","intratio","resample_ratio","filter_l","BLACKSIZE","fill_buffer_resample_init","inbuf_old","blackfilt","itime","sum","offset","time0","joff","xvalue","j2","n_shift","fill_buffer","mfbuf","in_buffer","nsamples","io","numUsed","lame_init","class_id","NOT_SET","quality","short_blocks","lowpassfreq","highpassfreq","lowpasswidth","highpasswidth","VBR_q","ATHcurve","VBR_mean_bitrate_kbps","VBR_min_bitrate_kbps","VBR_max_bitrate_kbps","VBR_hard_min","VBR_min_bitrate","VBR_max_bitrate","quant_comp","quant_comp_short","msfix","OldValue","CurrentStep","attackthre","attackthre_s","athaa_type","ATHtype","athaa_loudapprox","athaa_sensitivity","useTemporal","interChRatio","mf_samples_to_encode","encoder_padding","AudiophileGain","preset","write_id3tag_automatic","lame_init_old","lame_allocated_gfp","full_bitrate_table","lower_range","lower_range_kbps","upper_range","upper_range_kbps","lame_init_params","Class_ID","channels_in","MONO","free_format","compression_ratio","map2MP3Frequency","int","vbr_rh","m","VBR_q_frac","linear_int","input_samplefreq","suggested_samplefreq","optimum_samplefreq","decode_only","hip_decode_exit","hip_decode_init","encoder_delay","highpass1","highpass2","lowpass2","lowpass1","lowpass_band","highpass_band","minband","freq","maxband","fc1","fc2","amp_filter","lame_init_params_ppflt","sfBandIndex","id3tag_write_v2","InitVbrTag","lame_init_bitstream","apply_preset","LAME_DEFAULT_QUALITY","maskingadjust","maskingadjust_short","experimentalY","sfb21_extra","VBRNewIterationLoop","VBROldIterationLoop","vbrmode","ABRIterationLoop","tune","tune_value_a","noise_shaping","noise_shaping_amp","noise_shaping_stop","use_best_huffman","full_outer_loop","substep_shaping","lame_init_qval","short_block_allowed","STEREO","short_block_coupled","exp_nspsytune","NSATTACKTHRE","NSATTACKTHRE_S","iteration_init","psymodel_init","lame_encode_flush","mp3buffer","mp3bufferPos","mp3buffer_size","mp3buffer_size_remaining","end_padding","frames_left","imp3","samples_to_encode","bunch","frame_num","lame_encode_buffer","id3tag_write_v1","buffer_l","buffer_r","in_buffer_0","in_buffer_nsamples","in_buffer_1","update_inbuffer_size","mp3out","mp3size","scale_left","scale_right","in_buffer_ptr","inOut","buf_size","lame_encode_buffer_sample","strict_ISO","experimentalZ","ATHonly","ATHshort","noATH","ATHlower","IIISideInfo","ScaleFac","NsPsy","VBRSeekInfo","Header","iteration_init_init","tag_spec","bv_scf","pseudohalf","sb_sample","ResvMax","minval_l","minval_s","nb_1","nb_2","nb_s1","nb_s2","s3_ss","s3_ll","loudness_sq_save","mld_l","mld_s","bm_l","bo_l","bm_s","bo_s","npart_l","npart_s","s3ind","s3ind_s","numlines_s","numlines_l","rnumlines_l","mld_cb_l","mld_cb_s","numlines_s_num1","numlines_l_num1","ms_ratio_s_old","ms_ratio_l_old","ms_ener_ratio_old","blocktype_old","nogap_total","nogap_current","MAX_BITS_PER_GRANULE","_ordinal","DUAL_CHANNEL","meanBits","enwindow","win","tantab_l","cx","ca","cs","order","window_subband","x1Pos","u","wp","t","mdct_short","inout","inoutPos","tc0","tc1","tc2","ts0","ts1","ts2","mdct_long","outPos","_in","ct","st","tc3","tc4","ts5","ts6","ts7","ts8","ts3","ts4","tc5","tc6","tc7","tc8","w0","w1","wk","wkPos","mdct_enc","mdct_encPos","samp","sampPos","band0","band1","work","bu","bd","last_en_subshort","lastAttacks","longfact","shortfact","lame","VBRPresets","qual","compS","shThreshold","shThresholdS","adj","adjShort","lower","curve","sens","inter","joint","mod","fix","vbr_q","quant_comp_s","expY","st_lrm","st_s","masking_adj","masking_adj_short","ath_lower","ath_curve","ath_sensitivity","interch","safejoint","sfb21mod","ABRPresets","kbps","bass","sc","mask","interCh","sfScale","nsmsfix","nsbass","sfscale","_lame","vbr_old_switch_map","vbr_psy_switch_map","apply_vbr_preset","enforce","vbr_preset","q","lame_set_VBR_q","abr_switch_map","apply_abr_preset","actual_bitrate","FFT","fft","LOG10","VO_SCALE","NS_PREECHO_ATT2","NSFIRLEN","LN_TO_LOG10","psycho_loudness_approx","loudness_power","compute_ffts","fftenergy","fftenergy_s","wsamp_l","wsamp_lPos","wsamp_s","wsamp_sPos","gr_out","re","im","totalenergy","energy_save","ma_max_i1","ma_max_i2","ma_max_m","tab","table1","table2","table3","mask_add","m1","m2","kk","shortblock","FAST_LOG10_X","table2_","vbrpsy_mask_add","convert_partition2scalefac_s","eb","thr","sblock","sb","enn","thmm","bo_s_sb","b_lim","w_curr","w_next","convert_partition2scalefac_l","bo_l_sb","compute_masking_s","ebb","el","ecb","NS_INTERP","regcoef_s","pecalc_s","mr","pe_s","FAST_LOG10","regcoef_l","pecalc_l","pe_l","calc_energy","avg","calc_mask_index_l","mask_idx","last_tab_entry","vbrpsy_compute_fft_l","vbrpsy_compute_fft_s","vbrpsy_compute_loudness_approximation_l","masking_ratio","masking_MS_ratio","percep_entropy","percep_MS_entropy","blocktype_d","numchn","pcfact","wsamp_L","wsamp_S","eb_l","eb_s","uselongblock","ns_hpfsmpl","mask_idx_l","mask_idx_s","firbuf","firbufPos","sum1","sum2","attackThreshold","en_subshort","en_short","attack_intensity","ns_uselongblock","ns_attacks","pf","pfPos","pfe","ers_save","idx","eb2","calc_interchannel_masking","mld","rmid","rside","msfix1","athadjust","msfix2","athlower","ath","thmLR","thmM","thmS","ns_msfix","short_block_dispensed","short_block_forced","block_type_set","ppe","ppePos","fircoef_","vbrpsy_skip_masking_s","vbrpsy_skip_masking_l","vbrpsy_compute_masking_s","float","psyvbr_calc_mask_index_s","dd","dd_n","avg_mask","vbrpsy_compute_masking_l","ecb_limit","ecb_limit_2","ecb_limit_1","vbrpsy_compute_MS_thresholds","cb_mld","ath_cb","ebM","ebS","thmL","thmR","mld_m","thmMS","s3_func_x","bark","hf_slope","tempy","exp","norm_s3_func_x","lim_a","lim_b","s3_func","tempx","temp","sqrt","freq2bark","atan","init_numline","numlines","bo","bm","bval","bval_width","bo_w","sfreq","blksize","scalepos","deltafreq","sbmax","b_frq","sample_freq_frac","partition","ni","bark1","i1","i2","arg","f_tmp","bark2","init_s3_values","npart","norm","use_old_s3","s3","numberOfNoneZero","s3_x_norm","stereo_demask","ATHformula_GB","sub_short_factor","n_chn_psy","n_chn_out","factor","vbrpsy_attack_detection","vbrpsy_compute_block_type","ch01","new_thmm","NS_PREECHO_ATT1","vbrpsy_apply_block_type","useOldS3","bvl_a","bvl_b","snr_l_a","snr_l_b","snr_s_a","snr_s_b","snr","MAX_VALUE","level","ATHformula","log","MLIMIT","frame_duration","freq_inc","eql_balance","VBRQuantize","CalcNoiseResult","CalcNoiseData","tk","BinSearchDirection","loop_break","quant_compare","best","calc","distort","better","klemm_noise","get_klemm_noise","balance_noise","bRefine","ifqstep34","trigger","amp_scalefac_bands","status","scale_bitcount","scale_bitcount_lsf","pretab","inc_scalefac_scale","gain","amp","IPOW20","inc_subblock_gain","_rv","_tk","init_xrpow_core","ixwork","nr_of_sfb_block","stop","gsfb","ath21","athAdjust","block","ath12","psfb21_analogsilence","BINSEARCH_NONE","BINSEARCH_UP","BINSEARCH_DOWN","trancate_smallspectrums","calc_noise","allowedNoise","trancateThreshold","nsame","noquant_count_bits","cod_info_w","save_xrpow","best_noise_info","prev_noise","best_part2_3_length","bEndOfSearch","best_ggain_pass1","desired_rate","nBits","flagGoneOver","Direction","count_bits","bin_search_StepSize","age","search_limit","noise_info","maxggain","huff_bits","best_scalefac_store","best_huffman_divide","ResvAdjust","VBR_encode_granule","min_bits","dbits","bst_cod_info","bst_xrpow","Max_bits","real_bits","this_bits","found","get_framebits","frameBits","VBR_old_prepare","bands","analog_silence","mxb","bitpressure_strategy","pxmin","pxminPos","VBR_new_prepare","maximum_framebits","calc_target_bits","analog_silence_bits","max_frame_bits","res_factor","totbits","add_bits","QuantizePVT","tak","Q_MAX","ipow20","DBL_EPSILON","PRECALC_SIZE","IXMAX_VAL","Q_MAX2","LARGE_BITS","pow20","pow43","adj43","ATHmdct","StartLine","ATH_l","ATH_psfb21","ATH_s","ATH_psfb12","samp_freq","ATH_f","compute_ath","alto","treble","sfb21","huffman_init","cbr","tbits","extra_bits","ResvMaxBits","fac","move_bits","athFloor","ath_over","enable_athaa_fix","rh1","xmin","rh2","en0","xa","xb","max_nonzero","tmpATH","calc_noise_core","startline","ix01","res","distortPos","l3_xminPos","over","over_noise_db","tot_noise_db","scalefacPos","usefullsize","sl","set_pinfo","sfb2","en1","ifqstep","xfsf","bw","LAMEsfb","en_s","xfsf_s","thr_s","LAMEsfb_s","LAMEqss","LAMEmainbits","LAMEsfbits","freqindex","first","maxmp3buf","frameLength","resvLimit","fullFrameBits","resvsize","over_bits","stuffingBits","mdb_bytes","arrL","arrS","arr21","arr12","HuffCodeTab","hl","t1HB","t1l","t2HB","t2l","t3HB","t3l","t5HB","t5l","t6HB","t6l","t7HB","t7l","t8HB","t8l","t9HB","t9l","t10HB","t10l","t11HB","t11l","t12HB","t12l","t13HB","t13l","t16_5l","t15HB","t15l","t16HB","t16l","t24HB","t24l","t32HB","t32l","t33HB","t33l","largetbl","table23","table56","samplerate_table","scfsi_band","Bits","subdv_table","quantize_lines_xrpow_01","istep","xrPos","ixPos","compareval0","quantize_lines_xrpow","remaining","x0","x3","rx0","rx1","rx2","rx3","huf_tbl_noESC","choose_table","endPos","max1","max2","ix_max","hlen1","count_bit_noESC","t1","count_bit_noESC_from2","sum3","hlen2","hlen3","count_bit_noESC_from3","choice2","choice","t2","count_bit_ESC","recalc_divide_sub","cod_info2","r01_bits","r01_div","r0_tbl","r1_tbl","bigv","r2","a2","bi","r2t","a1","xp","pi","codInfo","prevNoise","prev_data_use","accumulate","accumulate01","xpPos","iData","iDataPos","acc_iData","acc_iDataPos","acc_xp","acc_xpPos","quantize_xrpow","roundfac","r0","r0bits","r0t","r1","r1t","recalc_divide_init","slen1_n","slen2_n","recalc","scfsi_calc","scale_short","scale_mixed","scale_long","max_slen1","max_slen2","all_scalefactors_not_negative","max_range_sfac_tab","table_number","row_in_table","nr_sfb","max_sfac","partition_table","slen3","slen4","log2tab","bv_index","scfb_anz","seen","want","bag","nVbrNumFrames","TotalFrameSize","VBRTag","_v","NUMTOCENTRIES","MAXFRAMESIZE","LAMEHEADERSIZE","VBRTag0","VBRTag1","crc16Lookup","extractInteger","createInteger","createShort","shiftInBitsValue","setLameTagFrameHeader","bbyte","abyte","crcUpdateLookup","addVbr","getVbrTag","pTagData","VBRTagData","hId","hSrIndex","hMode","hBitrate","samprate","String","equals","isVbrTag","head_flags","bytes","toc","vbrScale","headersize","encDelay","encPadding","kbps_header","totalFrameSize","headerSize","getLameTagFrame","indx","seek_point","xingSeekTable","streamIndex","FRAMES_FLAG","streamSize","musicLength","streamBuffer","streamBufferPos","revMethod","misc","musicCRC","abrBitrate","bytesWritten","getLameVeryShortVersion","vbrTypeTranslator","peakSignalAmplitude","radioReplayGain","noiseShaping","stereoMode","nonOptimal","sourceFreq","expNPsyTune","safeJoint","noGapMore","noGapPrevious","noGapCount","noGapCurr","athType","putLameVBR","putVbrTag","stream","seek","id3v2TagSize","fpStream","id3v2Header","readFully","startsWith","skipId3v2","write","getLameVersion","LAME_MAJOR_VERSION","getPsyVersion","PSY_MAJOR_VERSION","getLameUrl","getLameOsBitness","new_short","Int16Array","fromIndex","toIndex","srcPos","dest","destPos","srcEnd","message","apply","vbr_default","args","sz","Int8Array","Float64Array","Presets","Quantize","Reservoir","Version","GetAudio","parse2","mpg2","Parse","ver2","id32","pre2","MPGLib","ID3Tag","_bits","WavHeader","dataOffset","dataLen","channels","sampleRate","fourccToInt","fourcc","charCodeAt","RIFF","WAVE","fmt_","readHeader","dataView","getUint32","fmtLen","getUint16","pathsByWeight","stroke","strokeLinecap","strokeLinejoin","strokeWidth","cy","renderPath","weight","renderPathForWeight","Camera","forwardRef","IconBase","displayName","points","File","Sticker","Recorder","lamejs","Math_log10","abort","what","Error","LAME_MINOR_VERSION","LAME_PATCH_VERSION","POW20","NSATHSCALE","clone_float","NS","NL","MAX_HEADER_LEN","rpelev","rpelev2","rpelev_s","rpelev2_s","DELBARK","temporalmask_sustain_sec","NS_PREECHO_ATT0","NS_MSFIX","I1LIMIT","I2LIMIT","init_mask_add_max_values","LAME_MAXALBUMART","cmp","Mp3Encoder","gaud","maxSamples","encodeBuffer","_sz","subarray","flush","factory","browser","rec","$T","isBrowser","SampleS","BitS","enc_mp3","stable","takeEC","getTestMsg","mp3Worker","NormalizeSet","bS","bitRate","sS","CLog","arr","vs","ImportEngineErr","G","HasWebWorker","Worker","mp3","True","False","This","mp3_start","isW","mp3_encode","mp3_complete","mp3_stop","blockSize","memory","mOffset","isFlush","run","bufLen","meta","mp3TrimFix","mp3TrimFixSetMeta","ArrayBuffer","BindDestroy","terminate","mp3_envCheck","envInfo","errMsg","takeoffEncodeChunk","newContext","openList","setOrNull","_badW","scope","ed","wk_ctxs","wkScope","wk_lame","wk_mp3TrimFix","cur","takeoff","pcmSize","encObj","addBytes","isCp","pcm","worker","onmessage","chunk","blob","initOnMsg","Uint8Array","initCtx","postMessage","onmsg","jsCode","rm","lamejsCode","toString","url","URL","webkitURL","createObjectURL","Blob","revokeObjectURL","startCtx","opens","autoStop","mp3ReadMeta","mp3Buffers","parseInt_ES3","u8arr0","byteAt","u8","substr","b2","b4","layer","round","frame","frameDurationFloat","frameSize","hasPadding","byteLength","buf8","pcmLength","pcmSampleRate","pcmDuration","num","arr0","arrs","trimFix","removeDuration","tag","Export","NOOP","IsNum","initFn","LM","GitUrl","RecTxt","getUserMediaTxt","srcSampleRateTxt","sampleRateTxt","bitRateTxt","CatchTxt","WRec2","IsOpen","Stream","track","getTracks","audioTracks","readyState","LIVE","BufferSize","Destroy","Disconnect","DestroyList","Support","mediaDevices","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Scope","GetContext","tryNew","AC","AudioContext","webkitAudioContext","Ctx","NewCtxs","close","CloseCtx","CloseNewCtx","L","_isC","ResumeCtx","check","isEnd","isBind","isLsSC","runC","EL","Tag","ok","_LsSC","types","sVal","spEnd","CtxSpEnd","resume","CtxState","msg","ConnectEnableWebM","ConnectEnableWorklet","Connect","streamStore","isUserMedia","bufferSize","_RC","_c","isWebM","isWorklet","badInt","mediaConn","_m","createMediaStreamSource","ctxDest","destination","cmsdTxt","_d","connect","webMTips","calls","_call","onReceive","float32Arr","k0","scriptProcessor","audioWorklet","recAudioWorklet","RecProc","MediaRecorderTxt","MRWebMPCM","oldFn","createScriptProcessor","createJavaScriptNode","oldIsBest","oldScript","_Disconn_n","onaudioprocess","inputBuffer","getChannelData","connWorklet","_Disconn_r","AwNode","AudioWorkletNode","clazzUrl","xf","clazz","option","DEL_super","processorOptions","port","kill","$C","more","btoa","unescape","encodeURIComponent","awNext","_na","nodeAlive","createNode","_n","ctxOK","addModule","MR","onData","webmType","supportMR","isTypeSupported","mrNext","_ra","mrSet","mimeType","ConnectWebMOptions","_r","webmData","_rd","reader","FileReader","onloadend","f32arr","WebM_Extract","result","readAsArrayBuffer","connWebM","ConnAlive","isGlobal","StopS_","tracks","SampleData","pcmDatas","newSampleRate","prevChunkInfo","Txt","sr","IIRFilter","filterFn","frameNext","frameType","nLen","il","F","Embed","F1","F2","Fx","Fy","i0","b0","b1","y1","y2","before","frameNextSize","u8Pos","useLowPass","ov","sn","alpha","a0","PowerLevel","pcmAbsSum","power","PowerDBFS","maxSample","Pref","now","Date","getMinutes","getSeconds","getMilliseconds","recID","envIn","envCheck","cwe","IsLoser","ID","Traffic","onProcess","vB","vS","_S","Sync","O","C","_streamStore","sourceStream","_streamCtx","open","newCtx","failCall","isUserNotAllow","_streamTag","_SO","Lock","lockOpen","lockClose","_O","_O_","lockFail","checkMsg","envName","canProcess","runningContext","codeFail","isSecureContext","oldStream","trackSet","audioTrackSet","mSet","audio","pro","_stop","sTag","mock","pcmData","isMock","mockEnvInfo","buffers","recSize","_setSrcSR","setSr","hasFn","envStart","envInLast","envInFirst","envInFix","envInFixTs","engineCtx","envResume","bufferSampleRate","powerLevel","bufferFirstIdx","buffersThis","bufferFirstIdxThis","pcmTime","tsInStart","tsPcm","tsInPrev","tsIn","addTime","fixOpen","disableEnvInFix","addPcm","sizeOld","addSize","chunkInfo","bufferNextIdx","bufferNextIdxThis","asyncEnd","asyncBegin","hasClear","procTxt","slowT","isOpen","pause","tag3","keepEngine","autoClose","envInMS","envInLen","toFixed","mime","tBlob","tABuf","tDT","tDDT","dType","dTag","isAB","dErr","dLen","isCtxWait","inBytes","sBL","_ht","readMatroskaVInt","readMatroskaBlock","BytesEq","eid0","bytes0","pos0","audioIdx","eid1","bytes1","pos1","eid2","bytes2","pos2","BytesInt","number","track0","str","fromCharCode","codec","eid3","bytes3","bitDepth","bad","datas","trackNo","u8arr","arr2","exec","lenVal","lang","locales","put","texts","overwrite","v_G","lastLang","v_T","isArgs","TrafficImgUrl","report","imgUrl","href","host","idf","Image"],"sourceRoot":""}