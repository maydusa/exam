{"version":3,"file":"static/js/834.0237f5ce.chunk.js","mappings":"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","sources":["components/Conversation/Header.js","components/Conversation/Message.js","components/Conversation/Footer.js","components/Conversation/index.js"],"sourcesContent":["import { Avatar, Box, Typography, IconButton, Divider, Stack, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@mui/material'\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport { CaretDown, MagnifyingGlass, Phone, VideoCamera } from 'phosphor-react'\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { faker } from '@faker-js/faker';\r\nimport StyledBadge from '../StyledBadge';\r\nimport { ToggleSidebar, updateIsEnd, updateScore } from '../../redux/slices/app';\r\nimport { useDispatch } from 'react-redux';\r\nimport AVATAR from '../../assets/Images/avatar.jpg'\r\nimport BackIcon from '@mui/icons-material/ArrowBack'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { updateIsRating, updateHistory } from '../../redux/slices/app';\r\nimport { useSelector } from 'react-redux';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\n\r\nconst Header = ({\r\n    type\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n    const { isRating, identify, history, isEnd } = useSelector(state => state.app)\r\n    const [time, setTime] = useState('')\r\n\r\n    function handleBack() {\r\n        if (window.player) {\r\n            window.player?.pause?.()\r\n            window.isPlaying = false\r\n        }\r\n        dispatch(updateHistory({ history: [] }))\r\n        dispatch(updateIsRating({ isRating: false }))\r\n        dispatch(updateScore({ score: [] }))\r\n        navigate('/index')\r\n    }\r\n\r\n    function handleEnd() {\r\n        if (isRating) return\r\n        window.isRating = true\r\n        dispatch(updateHistory({ history: [] }))\r\n        dispatch(updateIsRating({ isRating: true }))\r\n        if (window.ws) {\r\n            window.ws.send(JSON.stringify({ cmd: 'score' }));\r\n        }\r\n    }\r\n\r\n    function handleConfirm() {\r\n        handleEnd()\r\n        dispatch(updateIsEnd({ isEnd: false }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (identify === 'chat') return\r\n        const nowTs = Date.now()\r\n        const targetTs = nowTs + 15 * 60 * 1000\r\n        let timer = setInterval(() => {\r\n            const ts = Date.now()\r\n            if (ts >= targetTs) {\r\n                setTime('00:00')\r\n                clearInterval(timer)\r\n                handleEnd()\r\n                return\r\n            }\r\n            const differ = Math.floor((targetTs - ts) / 1000)\r\n            let seconds = differ % 60\r\n            let minutes = (differ - seconds) / 60\r\n            seconds = seconds < 10 ? '0' + seconds : seconds\r\n            minutes = minutes < 10 ? '0' + minutes : minutes\r\n            setTime(`${minutes}:${seconds}`)\r\n        }, 1000)\r\n\r\n        return () => {\r\n            if (timer) clearInterval(timer)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Box p={2} sx={{ width: '100%', height: '74px', backgroundColor: theme.palette.mode === 'light' ? '#F8FAFF' : theme.palette.background.paper, boxShadow: '0px 0px 2px rgba(0,0,0,0.25)' }}>\r\n            <Stack alignItems={'center'} direction='row' justifyContent={'space-between'}\r\n                sx={{ width: '100%', height: '100%' }}>\r\n                <Stack sx={{ width: '100%' }} onClick={() => {\r\n                    dispatch(ToggleSidebar());\r\n                }} direction={'row'} justifyContent={'space-between'} spacing={2}>\r\n                    {/* <Box>\r\n                <StyledBadge  overlap=\"circular\"\r\n                anchorOrigin={{ // position\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"right\",\r\n                }}\r\n                variant=\"dot\">\r\n                          <Avatar src={AVATAR}/>\r\n                </StyledBadge>\r\n                \r\n            </Box> */}\r\n\r\n                    <BackIcon onClick={handleBack} />\r\n                    {\r\n                        type === 'score' ? null :\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', columnGap: '18px' }}>\r\n                                {\r\n                                    identify !== 'chat' ?\r\n                                        <div>{time}</div> : null\r\n                                }\r\n                                \r\n                                {\r\n                                    identify !== 'chat' ? (\r\n                                        isRating ?\r\n                                            <LoadingButton\r\n                                                endIcon={<SaveIcon />}\r\n                                                loading={true}\r\n                                                loadingPosition=\"end\"\r\n                                                variant=\"contained\"\r\n                                            >\r\n                                                <span>评分中</span>\r\n                                            </LoadingButton>\r\n                                            :\r\n                                            <Button variant=\"contained\" onClick={handleEnd} color=\"success\" style={{ backgroundColor: '#39b213', color: '#FFF' }}>结束并评分</Button>)\r\n                                        : null\r\n                                }\r\n                            </div>\r\n                    }\r\n                </Stack>\r\n                {/* <Stack direction='row' alignItems='center' spacing={3}>\r\n            <IconButton>\r\n                <VideoCamera/>\r\n            </IconButton>\r\n            <IconButton>\r\n                <Phone/>\r\n            </IconButton>\r\n            <IconButton>\r\n                <MagnifyingGlass/>\r\n            </IconButton>\r\n            <Divider orientation='vertical' flexItem/>\r\n            <IconButton>\r\n                <CaretDown/>\r\n            </IconButton>\r\n        </Stack> */}\r\n            </Stack>\r\n\r\n\r\n            {/* <Dialog\r\n                open={true}\r\n                onClose={handleConfirm}\r\n            >\r\n                <DialogTitle>提示</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        考试已结束\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button type=\"submit\" onClick={handleConfirm}>确认</Button>\r\n                </DialogActions>\r\n            </Dialog> */}\r\n\r\n            {\r\n                isEnd ? \r\n                    <div style={{ position: 'fixed', zIndex: 10000, top: 0, left: 0, width: '100vw', height: '100vh', background: 'rgba(0, 0, 0, 0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                        <div style={{ borderRadius: '10px', background: '#fff', padding: '16px 24px', width: '80%', display: 'flex', flexDirection: 'column' }}>\r\n                            <div style={{ fontSize: '18px', color: '#212B36', fontWeight: 700 }}>提示</div>\r\n                            <div style={{ fontSize: '16px', color: '#637381', marginTop: '12px' }}>考试已结束</div>\r\n                            <div style={{ color: '#0162C4', fontSize: '14px', cursor: 'pointer', marginTop: '24px', width: 'fit-content', alignSelf: 'flex-end' }} onClick={handleConfirm}>确定</div>\r\n                        </div>\r\n                    </div>\r\n                : null\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Header","import { Box, Stack } from '@mui/material'\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { DocMsg, LinkMsg, MediaMsg, ReplyMsg, TextMsg, TimeLine, AudioMsg, ProgressMsg } from './MsgTypes';\r\n\r\nconst Message = ({menu}) => {\r\n  const { history } = useSelector((store) => store.app);\r\n  console.log(history)\r\n  return (\r\n    <Box p={3}>\r\n        <Stack spacing={3}>\r\n        {history.map((el, index)=>{\r\n                switch (el.type) {\r\n                    case 'divider':\r\n                      return null\r\n                    // return <TimeLine el={el} key={el.message} />\r\n                        \r\n                    case 'msg':\r\n                        switch (el.subtype) {\r\n                            case 'image':\r\n                              return <MediaMsg el={el} key={index} />\r\n                            case 'doc':\r\n                            return <DocMsg el={el} key={index} />\r\n                            case 'audio':\r\n                            return <AudioMsg el={el} key={index} />\r\n                            case 'link':\r\n                            return <LinkMsg el={el} key={index} />\r\n                            case 'reply':\r\n                            return <ReplyMsg el={el} key={index} />\r\n                            case 'progress':\r\n                            return <ProgressMsg el={el} key={index} />\r\n                        \r\n                            default:\r\n                            return <TextMsg el={el} key={index} />\r\n                        }\r\n                        break;\r\n                \r\n                    default:\r\n                      return <></>;\r\n                }\r\n            })}\r\n        </Stack>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Message","import { Box, Fab, IconButton, InputAdornment, Stack, TextField, Tooltip } from '@mui/material';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { styled, useTheme } from \"@mui/material/styles\";\r\nimport { LinkSimple, PaperPlaneTilt, Smiley, Camera, File, Image, Sticker, User } from 'phosphor-react';\r\nimport data from '@emoji-mart/data'\r\nimport Picker from '@emoji-mart/react'\r\nimport { Chat_History } from '../../data'\r\nimport { appendHistory, updateHistoryItemById } from '../../redux/slices/app'\r\nimport { dataURItoBlob, blobToBase64 } from '../../utils/index'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport lamejs from 'lamejs'\r\nimport { Mic, StopCircle } from '@mui/icons-material'\r\n//必须引入的核心，换成require也是一样的。注意：recorder-core会自动往window下挂载名称为Recorder对象，全局可调用window.Recorder，也许可自行调整相关源码清除全局污染\r\nimport Recorder from 'recorder-core' //注意如果未引用Recorder变量，可能编译时会被优化删除（如vue3 tree-shaking），请改成 import 'recorder-core'，或随便调用一下 Recorder.a=1 保证强引用\r\n\r\n//引入相应格式支持文件；如果需要多个格式支持，把这些格式的编码引擎js文件放到后面统统引入进来即可\r\nimport 'recorder-core/src/engine/mp3'\r\nimport 'recorder-core/src/engine/mp3-engine' //如果此格式有额外的编码引擎（*-engine.js）的话，必须要加上\r\n\r\n\r\nconst StyledInput = styled(TextField)(({ theme }) => ({\r\n    \"& .MuiInputBase-input\": {\r\n        paddingTop: '12px',\r\n        paddingBottom: '12px',\r\n    },\r\n}));\r\n\r\nconst Actions = [\r\n    {\r\n        color: '#4da5fe',\r\n        icon: <Image size={24} />,\r\n        y: 102,\r\n        title: 'Photo/Video'\r\n    },\r\n    {\r\n        color: '#1b8cfe',\r\n        icon: <Sticker size={24} />,\r\n        y: 172,\r\n        title: 'Stickers'\r\n    },\r\n    {\r\n        color: '#0172e4',\r\n        icon: <Camera size={24} />,\r\n        y: 242,\r\n        title: 'Image'\r\n    },\r\n    {\r\n        color: '#0159b2',\r\n        icon: <File size={24} />,\r\n        y: 312,\r\n        title: 'Document'\r\n    },\r\n    {\r\n        color: '#013f7f',\r\n        icon: <User size={24} />,\r\n        y: 382,\r\n        title: 'Contact'\r\n    }\r\n];\r\n\r\nconst ChatInput = ({ setOpenPicker, inputWrapRef, inputText, onInputChange }) => {\r\n    const [openAction, setOpenAction] = useState(false);\r\n    return (\r\n        <StyledInput ref={inputWrapRef} inputProps={{ onChange: onInputChange, value: inputText }} fullWidth placeholder='Write a message...' variant='filled' InputProps={{\r\n            disableUnderline: true,\r\n            startAdornment: false\r\n            // <Stack sx={{width:'max-content'}}>\r\n            //     <Stack sx={{position:'relative', display: openAction ? 'inline-block' : 'none'}}>\r\n            //         {Actions.map((el)=>(\r\n            //             <Tooltip placement='right' title={el.title}>\r\n            //                 <Fab sx={{position:'absolute', top: -el.y, backgroundColor: el.color}}>\r\n            //                     {el.icon}\r\n            //                 </Fab>\r\n            //             </Tooltip>\r\n\r\n            //         ))}\r\n            //     </Stack>\r\n            //     <InputAdornment>\r\n            //         <IconButton onClick={()=>{\r\n            //             setOpenAction((prev)=>!prev)\r\n            //         }}>\r\n            //             <LinkSimple/>\r\n            //         </IconButton>\r\n            //     </InputAdornment>\r\n            // </Stack>\r\n            ,\r\n            endAdornment: <InputAdornment>\r\n                <IconButton onClick={() => {\r\n                    setOpenPicker((prev) => !prev);\r\n                }}>\r\n                    <Smiley />\r\n                </IconButton>\r\n            </InputAdornment>\r\n        }} />\r\n    )\r\n}\r\n\r\nconst Footer = () => {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const theme = useTheme();\r\n    const [openPicker, setOpenPicker] = useState(false);\r\n    const inputWrapRef = useRef(null)\r\n    const [inputText, setInputText] = useState('')\r\n    const inputTextRef = useRef('')\r\n    const store = useSelector((store) => store.app)\r\n    const { history, isRating, identify, isEnd } = useSelector((store) => store.app);\r\n    const isChating = useRef(false)\r\n    const recorder = useRef()\r\n    const recordData = useRef('')\r\n    const audio = useRef()\r\n    const timer = useRef()\r\n    const mediaSourceRef = useRef()\r\n    const sourceBufferRef = useRef()\r\n    const audioElRef = useRef()\r\n\r\n    const message = useRef([])\r\n    const [isRecording, setIsRecording] = useState(false)\r\n\r\n    const [audioUrl, setAudioUrl] = useState()\r\n    const test = useRef([])\r\n    const isRatingRef = useRef(false)\r\n\r\n    // useEffect(() => {\r\n    //     if (isRating) {\r\n    //         isRatingRef.current = true\r\n    //     }\r\n    // }, [isRating])\r\n\r\n    /**开始录音**/\r\n    function recStart() {//打开了录音后才能进行start、stop调用\r\n        recorder.current.start();\r\n    };\r\n\r\n    /**结束录音**/\r\n    function recStop(cb) {\r\n        recorder.current.stop(async function (blob, duration) {\r\n\r\n            //简单利用URL生成本地文件地址，注意不用了时需要revokeObjectURL，否则霸占内存\r\n            //此地址只能本地使用，比如赋值给audio.src进行播放，赋值给a.href然后a.click()进行下载（a需提供download=\"xxx.mp3\"属性）\r\n            recordData.current = await blobToBase64(blob)\r\n            var localUrl = (window.URL || window.webkitURL).createObjectURL(blob);\r\n            console.log(blob, localUrl, \"时长:\" + duration + \"ms\");\r\n            recorder.current.close();//释放录音资源，当然可以不释放，后面可以连续调用start；但不释放时系统或浏览器会一直提示在录音，最佳操作是录完就close掉\r\n            recorder.current = null;\r\n\r\n            //已经拿到blob文件对象想干嘛就干嘛：立即播放、上传、下载保存\r\n\r\n            cb && cb()\r\n        }, function (msg) {\r\n            console.log(\"录音失败:\" + msg);\r\n            recorder.current.close();//可以通过stop方法的第3个参数来自动调用close\r\n            recorder.current = null;\r\n        });\r\n    };\r\n\r\n    function recOpen (success) {//一般在显示出录音按钮或相关的录音界面时进行此方法调用，后面用户点击开始录音时就能畅通无阻了\r\n        if (recorder.current) {\r\n            recorder.current?.close()\r\n            recorder.current = null\r\n        }\r\n        recorder.current = Recorder({ //本配置参数请参考下面的文档，有详细介绍\r\n            type: \"mp3\", sampleRate: 16000, bitRate: 16 //mp3格式，指定采样率hz、比特率kbps，其他参数使用默认配置；注意：是数字的参数必须提供数字，不要用字符串；需要使用的type类型，需提前把格式支持文件加载进来，比如使用wav格式需要提前加载wav.js编码引擎\r\n            , onProcess: function (buffers, powerLevel, bufferDuration, bufferSampleRate, newBufferIdx, asyncEnd) {\r\n                //录音实时回调，大约1秒调用12次本回调，buffers为开始到现在的所有录音pcm数据块(16位小端LE)\r\n                //可利用extensions/sonic.js插件实时变速变调，此插件计算量巨大，onProcess需要返回true开启异步模式\r\n                //可实时上传（发送）数据，配合Recorder.SampleData方法，将buffers中的新数据连续的转换成pcm上传，或使用mock方法将新数据连续的转码成其他格式上传，可以参考文档里面的：Demo片段列表 -> 实时转码并上传-通用版；基于本功能可以做到：实时转发数据、实时保存数据、实时语音识别（ASR）等\r\n\r\n                //可实时绘制波形（extensions目录内的waveview.js、wavesurfer.view.js、frequency.histogram.view.js插件功能）\r\n                // wave && wave.input(buffers[buffers.length - 1], powerLevel, bufferSampleRate);\r\n            }\r\n        });\r\n\r\n        recorder.current.open(function () {//打开麦克风授权获得相关资源\r\n            //rec.start() 此处可以立即开始录音，但不建议这样编写，因为open是一个延迟漫长的操作，通过两次用户操作来分别调用open和start是推荐的最佳流程\r\n\r\n            //创建可视化，指定一个要显示的div\r\n            // if (Recorder.WaveView) wave = Recorder.WaveView({ elem: \".recwave\" });\r\n            success && success();\r\n        }, function (msg, isUserNotAllow) {//用户拒绝未授权或不支持\r\n            console.log((isUserNotAllow ? \"UserNotAllow，\" : \"\") + \"无法录音:\" + msg);\r\n            alert(JSON.stringify(msg) + isUserNotAllow)\r\n        });\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (!recorder.current) {\r\n    //         window.result = []\r\n    //         // mediaSourceRef.current = new MediaSource()\r\n    //         // setAudioUrl(window.URL.createObjectURL(mediaSourceRef.current))\r\n    //         // console.log(mediaSourceRef.current.addSourceBuffer)\r\n    //         // sourceBufferRef.current = mediaSourceRef.current.addSourceBuffer('audio/mp3')\r\n\r\n    //         // audioElRef.current.play() \r\n\r\n    //         recOpen()\r\n\r\n    //         if (window.ws) {\r\n    //             window.ws?.close()\r\n    //             window.ws = null\r\n    //         }\r\n\r\n    //         const url = 'wss://api.siuuu.ai/demo-api/exam?category=panel'\r\n\r\n    //         window.ws = new WebSocket(url);\r\n\r\n    //         window.ws.onopen = function (evt) {\r\n    //             console.log(\"Connection open ...\");\r\n    //             if (localStorage.getItem('mode') === 'exam') {\r\n    //                 window.ws.send(JSON.stringify({ cmd: 'question' }));\r\n    //             }\r\n    //         };\r\n\r\n    //         window.ws.onmessage = function (evt) {\r\n    //             window.timer = setInterval(() => {\r\n    //                 console.log(window.audioArr)\r\n    //                 if (window.isPlaying) return\r\n    //                 if (!window.player) {\r\n    //                     window.player = new Audio()\r\n    //                 }\r\n    //                 if (!window.audioArr.length) return\r\n    //                 window.isPlaying = true\r\n    //                 window.player.src = window.URL.createObjectURL(dataURItoBlob(window.audioArr))\r\n    //                 window.player.onended = function () {\r\n    //                     window.isPlaying = false\r\n    //                 }\r\n    //                 window.player.play()\r\n    //                 window.audioArr = []\r\n    //             }, 500)\r\n\r\n    //             let res\r\n    //             try {\r\n    //                 res = JSON.parse(evt.data)\r\n    //                 if (res.code === 200) {\r\n    //                     const historyItem = message.current.find(item => item.id === res.data.mid)\r\n    //                     if (historyItem) {\r\n    //                         if (res.data.status === 2) {\r\n    //                             const audioArr = [...historyItem.audio]\r\n    //                             if (res.data.audio) {\r\n    //                                 audioArr.push(res.data)\r\n    //                             }\r\n    //                             // if (audioArr.length > 0) {\r\n    //                             //     if (audio.current) {\r\n    //                             //         audio.current?.pause?.()\r\n    //                             //         audio.current = null\r\n    //                             //     }\r\n    //                             //     audioArr.sort((a, b) => a.sn - b.sn)\r\n    //                             //     const base64Arr = audioArr.map(item => item.audio)\r\n    //                             //     audio.current = new Audio()\r\n    //                             //     audio.current.src = window.URL.createObjectURL(dataURItoBlob(base64Arr))\r\n    //                             //     audio.current.play()\r\n    //                             // }\r\n\r\n    //                             if (res.data.role === 'user') {\r\n    //                                 if (localStorage.getItem('mode') === 'exam') {\r\n    //                                     window.ws.send(JSON.stringify({ cmd: 'question' }));\r\n    //                                 }\r\n    //                             }\r\n    //                         }\r\n    //                         const data = {\r\n    //                             content: historyItem.content || '',\r\n    //                             audio: historyItem.audio || []\r\n    //                         }\r\n    //                         if (res.data.text) {\r\n    //                             data.content += res.data.text\r\n    //                         }\r\n    //                         if (res.data.audio) {\r\n    //                             data.audio = [...data.audio, res.data]\r\n    //                             // let audio = new Audio()\r\n    //                             // audio.src = window.URL.createObjectURL(dataURItoBlob([res.data.audio]))\r\n    //                             // audio.play()\r\n    //                             // audio.onended = function (e) {\r\n    //                             //     console.log(e)\r\n    //                             // }\r\n    //                             if (window.audioArr) {\r\n    //                                 window.audioArr.push(res.data.audio)\r\n    //                             } else {\r\n    //                                 window.audioArr = [res.data.audio]\r\n    //                             }\r\n    //                         }\r\n    //                         historyItem.content = data.content\r\n    //                         historyItem.audio = data.audio\r\n    //                         dispatch(updateHistoryItemById({\r\n    //                             id: historyItem.id,\r\n    //                             data: data\r\n    //                         }))\r\n    //                     } else {\r\n    //                         const data = {\r\n    //                             id: res.data.mid,\r\n    //                             type: 'msg',\r\n    //                             subtype: '',\r\n    //                             content: res.data.text || '',\r\n    //                             incoming: res.data.role === 'assistant',\r\n    //                             outgoing: false,\r\n    //                             metadata: {\r\n    //                                 duration: 0,\r\n    //                                 isPlaying: false\r\n    //                             },\r\n    //                             creator: res.data.role,\r\n    //                             audio: res.data.audio ? [res.data] : []\r\n    //                         }\r\n    //                         message.current.push(data)\r\n    //                         dispatch(appendHistory([data]))\r\n    //                     }\r\n    //                     window.result = message.current\r\n    //                     if (isRatingRef.current) {\r\n    //                         navigate(\"/result\")\r\n    //                     }\r\n    //                 }\r\n    //             } catch (e) { console.log(e) }\r\n    //         };\r\n\r\n    //         window.ws.onclose = function (evt) {\r\n    //             console.log(\"Connection closed.\");\r\n    //         };\r\n    //     }\r\n\r\n    //     return () => {\r\n    //         audio.current?.pause?.()\r\n    //         audio.current = null\r\n    //     }\r\n    // }, [])\r\n\r\n    const handleMessage = ({ data, id, historyLength, isEnd }) => {\r\n        console.log('data', data, id, isEnd)\r\n        if (data.length === 0) return id\r\n        if (isEnd) isChating.current = false\r\n        if ((!data.find(item => item.type === 'progress') || data.find(item => item.type === 'image')) && id === '') {\r\n            dispatch(appendHistory(data.filter(item => item.type !== 'progress').map(item => {\r\n                return {\r\n                    type: 'msg',\r\n                    subtype: item.type,\r\n                    content: item.content,\r\n                    incoming: true,\r\n                    outgoing: false,\r\n                    metadata: {\r\n                        duration: 0,\r\n                        isPlaying: false\r\n                    },\r\n                    creator: item.creator\r\n                }\r\n            })))\r\n\r\n            return id\r\n        }\r\n\r\n        if (!data.find(item => item.type === 'image')) {\r\n            const msgItem = data.findLast(item => item.type === 'progress')\r\n            if (id === '') {\r\n                const id = historyLength\r\n                dispatch(appendHistory([{\r\n                    type: 'msg',\r\n                    subtype: msgItem.type,\r\n                    content: Number(msgItem.content.replace('creating_image:', '')),\r\n                    incoming: true,\r\n                    outgoing: false,\r\n                    metadata: {\r\n                        duration: 0,\r\n                        isPlaying: false\r\n                    },\r\n                    creator: msgItem.creator\r\n                }]))\r\n                return id\r\n            } else {\r\n                dispatch(updateHistoryItemById({\r\n                    id,\r\n                    data: {\r\n                        subtype: 'progress',\r\n                        content: Number(msgItem.content.replace('creating_image:', ''))\r\n                    }\r\n                }))\r\n            }\r\n        } else {\r\n            const imageIndex = data.findLastIndex(item => item.type === 'image')\r\n            const imageItem = data[imageIndex]\r\n            dispatch(updateHistoryItemById({\r\n                id,\r\n                data: {\r\n                    subtype: 'image',\r\n                    content: imageItem.content\r\n                }\r\n            }))\r\n\r\n            dispatch(appendHistory(data.slice(imageIndex + 1).map(item => {\r\n                return {\r\n                    type: 'msg',\r\n                    subtype: item.type,\r\n                    content: item.content,\r\n                    incoming: true,\r\n                    outgoing: false,\r\n                    metadata: {\r\n                        duration: 0,\r\n                        isPlaying: false\r\n                    },\r\n                    creator: item.creator\r\n                }\r\n            })))\r\n        }\r\n\r\n        return id\r\n    }\r\n\r\n    const handleStop = () => {\r\n        const base64Data = recordData.current.split(',')[1]\r\n        if (!window.userAudioArr) window.userAudioArr = []\r\n        window.userAudioArr.push(base64Data)\r\n        if (window.ws) {\r\n            window.ws.send(JSON.stringify({ cmd: identify === 'chat' ? 'chat' : 'answer', audio: base64Data }))\r\n        }\r\n    }\r\n\r\n    const handleRecord = () => {\r\n        if (isRecording) return\r\n        setIsRecording(true)\r\n        if (recorder.current) {\r\n            recStart()\r\n            timer.current = setTimeout(() => {\r\n                if (isRecording) {\r\n                    recStop(handleStop)\r\n                    setIsRecording(false)\r\n                }\r\n                clearTimeout(timer.current)\r\n            }, 55000)\r\n        } else {\r\n            recOpen(() => {\r\n                recStart()\r\n                timer.current = setTimeout(() => {\r\n                    if (isRecording) {\r\n                        recStop(handleStop)\r\n                        setIsRecording(false)\r\n                    }\r\n                    clearTimeout(timer.current)\r\n                }, 55000)\r\n            })\r\n        }\r\n        return\r\n    }\r\n\r\n    async function handleStopRecord() {\r\n        clearTimeout(timer.current)\r\n        timer.current = null\r\n        recStop(handleStop)\r\n        setIsRecording(false)\r\n        return\r\n        \r\n        // const blob = recorder.current.getWAVBlob()\r\n        // const mp3Blob = convertToMp3(new DataView(await blob.arrayBuffer()))\r\n        // const base64Data = await blobToBase64(mp3Blob)\r\n        // console.log(base64Data)\r\n\r\n        // const testblob = new Blob([mp3Blob], { type: \"audio/mp3\" })\r\n        // const a = document.createElement(\"a\")\r\n        // a.href = URL.createObjectURL(testblob)\r\n        // a.download = \"test.mp3\" // 这里填保存成的文件名\r\n        // a.click()\r\n        // URL.revokeObjectURL(a.href)\r\n        // a.remove();\r\n\r\n        // audio.current = new Audio()\r\n        // audio.current.src = base64Data\r\n        // audio.current.play()\r\n\r\n        // return\r\n\r\n        // if (window.ws) {\r\n        //     window.ws.send(JSON.stringify({ cmd: localStorage.getItem('mode') === 'exam' ? 'answer' : 'chat', audio: base64Data.split(',')[1] }))\r\n        // }\r\n        // return\r\n        // const base64Data = test.current.sort((a, b) => a.sn - b.sn).map(item => item.audio).join(',')\r\n        // setAudioUrl(window.URL.createObjectURL(dataURItoBlob(`data:audio/mp3;base64,${base64Data}`)))\r\n        // audio.current = new Audio()\r\n        // audio.current.src = window.URL.createObjectURL(dataURItoBlob(`data:audio/mp3;base64,${base64Data}`))\r\n        // audio.current.play()\r\n    }\r\n\r\n    function handleSend() {\r\n        if (isRecording) {\r\n            handleStopRecord()\r\n        } else {\r\n            handleRecord()\r\n        }\r\n    }\r\n\r\n    function insertAtCursor(myField, myValue) {\r\n        let tempTextAreaData = ''\r\n        if (document.selection) {\r\n            //IE support\r\n            myField.focus();\r\n            const sel = document.selection.createRange();\r\n            sel.text = myValue;\r\n            sel.select();\r\n        } else if (myField.selectionStart || myField.selectionStart == '0') {\r\n            //MOZILLA/NETSCAPE support\r\n            const startPos = myField.selectionStart;\r\n            const endPos = myField.selectionEnd;\r\n            const beforeValue = myField.value.substring(0, startPos);\r\n            const afterValue = myField.value.substring(endPos, myField.value.length);\r\n\r\n            tempTextAreaData = beforeValue + myValue + afterValue;\r\n            setInputText(tempTextAreaData);\r\n            myField.selectionStart = startPos + myValue.length;\r\n            myField.selectionEnd = startPos + myValue.length;\r\n            myField.focus();\r\n        } else {\r\n            tempTextAreaData += myValue;\r\n            setInputText(tempTextAreaData);\r\n            myField.focus();\r\n        }\r\n    }\r\n\r\n    function handleInputChange(e) {\r\n        setInputText(e.target.value)\r\n    }\r\n\r\n    function handleSelectEmoji(emoji) {\r\n        insertAtCursor(inputWrapRef.current.getElementsByTagName('input')[0], emoji.native)\r\n    }\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === \"Enter\") {\r\n            // 处理回车事件\r\n            handleSend()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        inputTextRef.current = inputText\r\n    }, [inputText])\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyDown)\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyDown)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        (isRating || isEnd) ?\r\n        null :\r\n        <Box sx={{\r\n            height: 38, width: 48, backgroundColor: theme.palette.primary.main,\r\n            borderRadius: 1.5\r\n        }} style={{ position: 'fixed', bottom: '12px', right: '12px' }}>\r\n            <Stack sx={{ height: '100%', width: '100%', alignItems: 'center', justifyContent: 'center' }}>\r\n                <IconButton onClick={handleSend}>\r\n                    {\r\n                        isRecording ? <StopCircle style={{ color: '#FFF' }} /> : <Mic style={{ color: '#FFF' }} />\r\n                    }\r\n                </IconButton>\r\n            </Stack>\r\n        </Box>\r\n\r\n        // <Box p={2} sx={{\r\n        //     width: '100%', height: '79px', backgroundColor: theme.palette.mode === 'light' ? '#F8FAFF' :\r\n        //         theme.palette.background.paper, boxShadow: '0px 0px 2px rgba(0,0,0,0.25)'\r\n        // }}>\r\n        //     <Stack direction='row' justifyContent={'center'} alignItems={'center'} spacing={3}>\r\n\r\n\r\n\r\n        //     </Stack>\r\n        // </Box>\r\n    )\r\n}\r\n\r\nexport default Footer","import { Box, Stack } from '@mui/material';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport Message from './Message';\r\nimport { Chat_History } from '../../data'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { appendHistory, updateAudioInstance, updateHistoryItem, updatePreview } from '../../redux/slices/app'\r\n\r\nconst Conversation = () => {\r\n  const { history, preview } = useSelector((store) => store.app);\r\n  const dispatch = useDispatch()\r\n  const theme = useTheme();\r\n  const scrollContainer = useRef(null)\r\n\r\n  // const timer = useRef(null)\r\n\r\n  function handleClosePreview() {\r\n    dispatch(updatePreview({\r\n      isShow: false,\r\n      url: ''\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    scrollContainer.current.scrollTo({\r\n      top: Number.MAX_SAFE_INTEGER,\r\n      behavior: 'smooth'\r\n    })\r\n  }, [history.length])\r\n\r\n  return (\r\n    <Stack height={'100%'} width={'auto'}>\r\n      {/* Chat header */}\r\n      <Header />\r\n      {/* <div onClick={() => {\r\n        console.log(history)\r\n      }}>click</div> */}\r\n      {/* Msg */}\r\n      <Box className='scrollbar' ref={scrollContainer} width={\"100%\"} sx={{ flex: 1, overflowY: 'scroll' }}>\r\n        <Message />\r\n      </Box>\r\n      {/* Chat footer */}\r\n      {\r\n        preview.isShow &&\r\n        <div onClick={handleClosePreview} style={{ zIndex: 1000, position: 'fixed', width: '100vw', height: '100vh', backgroundColor: 'rgba(0, 0, 0, 0.6)', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n          <img style={{ width: window.isMobile ? '100%' : '70%' }} src={preview.url} />\r\n        </div>\r\n      }\r\n      <Footer />\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default Conversation"],"names":["type","dispatch","useDispatch","navigate","useNavigate","theme","useTheme","useSelector","state","app","isRating","identify","isEnd","history","useState","time","setTime","handleEnd","window","updateHistory","updateIsRating","ws","send","JSON","stringify","cmd","useEffect","targetTs","Date","now","timer","setInterval","ts","clearInterval","differ","Math","floor","seconds","minutes","Box","p","sx","width","height","backgroundColor","palette","mode","background","paper","boxShadow","Stack","alignItems","direction","justifyContent","onClick","ToggleSidebar","spacing","player","pause","isPlaying","updateScore","score","style","display","flexDirection","columnGap","LoadingButton","endIcon","Save","loading","loadingPosition","variant","Button","color","position","zIndex","top","left","borderRadius","padding","fontSize","fontWeight","marginTop","cursor","alignSelf","updateIsEnd","menu","store","console","log","map","el","index","subtype","styled","TextField","paddingTop","paddingBottom","useRef","inputText","inputTextRef","recorder","recordData","isRecording","setIsRecording","recStart","current","start","recStop","cb","stop","blob","duration","blobToBase64","localUrl","URL","webkitURL","createObjectURL","close","msg","handleStop","base64Data","split","userAudioArr","push","audio","handleRecord","setTimeout","clearTimeout","success","Recorder","sampleRate","bitRate","onProcess","buffers","powerLevel","bufferDuration","bufferSampleRate","newBufferIdx","asyncEnd","open","isUserNotAllow","alert","recOpen","handleSend","handleStopRecord","handleKeyDown","event","key","document","addEventListener","removeEventListener","primary","main","bottom","right","StopCircle","Mic","preview","scrollContainer","scrollTo","Number","MAX_SAFE_INTEGER","behavior","length","Header","className","ref","flex","overflowY","Message","isShow","updatePreview","url","isMobile","src"],"sourceRoot":""}